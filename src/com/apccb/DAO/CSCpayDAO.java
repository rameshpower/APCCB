package com.apccb.DAO;

import java.io.OutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.xssf.streaming.SXSSFCell;
import org.apache.poi.xssf.streaming.SXSSFRow;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;

import com.apccb.Connections.DBConnectionManager;
import com.apccb.Exception.DatabaseFailureException;

import com.apccb.VO.CscpayVO;
import com.apccb.VO.BaseVO;

public class CSCpayDAO {
	public CscpayVO getReportDetails(CscpayVO cscvo) throws Exception {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		String counter = "";
		String circle = "";
		try {
			if (con != null) {

				// String query="SELECT n.reg_no ,n.circle_code
				// ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR','UNKNOWN')
				// circle,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0)
				// FROM new_connections n INNER JOIN cscpay c ON n.reg_no=
				// c.csregno AND c.cscounter=? AND c.cscancelid='N' AND c.CSPRDT
				// BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')
				// AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA'
				// THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN
				// 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR'
				// THEN 7 ELSE 1 END)";
				if (cscvo.getCounterName().equalsIgnoreCase("GSWS")) {
					/*
					 * counter = " AND (SUBSTR(N.MESEVA_REF,1,5) IN('PRAJA')  "
					 * +
					 * " OR  ((SUBSTR(N.MESEVA_REF,1,5) IN ('MEESE')  AND   N.REG_NO IN(SELECT CSREGNO FROM CSCPAY WHERE CSRCCD LIKE '%DA') ) "
					 * +
					 * " OR (SUBSTR(N.MESEVA_REF,1,5) IN ('MEESE')  AND   N.REG_NO IN(SELECT CSREGNO FROM CSCPAY WHERE CSRCCD LIKE '%WEDS')))) "
					 * ;
					 */

					/*
					 * counter =
					 * " AND (((SUBSTR(N.MESEVA_REF,1,5) IN ('MEESE')  AND   N.REG_NO IN(SELECT CSREGNO FROM CSCPAY WHERE CSRCCD LIKE '%DA') ) "
					 * +
					 * " OR (SUBSTR(N.MESEVA_REF,1,5) IN ('MEESE')  AND   N.REG_NO IN(SELECT CSREGNO FROM CSCPAY WHERE CSRCCD LIKE '%WEDS')))) "
					 * ;
					 */

					counter = " and (c.CSRCNAME LIKE '%-DA' OR c.CSRCNAME LIKE '%-WEDS')";
				} else if ((cscvo.getCounterName().equalsIgnoreCase("ALL"))) {// &&
																				// (cscvo.getCounterName().equalsIgnoreCase("BILLDESK"))
																				// &&
																				// (cscvo.getCounterName().equalsIgnoreCase("MEESEVA"))){
					counter = " AND ((c.cscounter='MEESEVA') or " + " (c.cscounter='BILLDESK')) ";
					// + " AND ((SUBSTR(N.MESEVA_REF,1,5) IN('PRAJA') "
					// + " OR ((SUBSTR(N.MESEVA_REF,1,5) IN ('MEESE') AND
					// N.REG_NO IN(SELECT CSREGNO FROM CSCPAY WHERE CSRCCD LIKE
					// '%DA') ) "
					// + " OR (SUBSTR(N.MESEVA_REF,1,5) IN ('MEESE') AND
					// N.REG_NO IN(SELECT CSREGNO FROM CSCPAY WHERE CSRCCD LIKE
					// '%WEDS'))))) ";
				} else {
					counter = " AND c.cscounter='" + cscvo.getCounterName() + "' ";
				}

				if ("ALL".equalsIgnoreCase(cscvo.getCircleName())) {
					circle = " and S.CIRNAME in ('ANANTHAPUR','KURNOOL','KADAPA','TIRUPATI','NELLORE')";
				} else {
					circle = "and S.CIRNAME in ('" + cscvo.getCircleName() + "')";
				}

				
				String query = "SELECT n.reg_no ,n.circle_code ,S.CIRNAME,n.consumer_name,n.category_supply,nvl(c.csappfee,0),n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0),"
						+ " nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0),nvl(c.cstempconchgs,0),"
						+ " nvl(c.csprno,0),csprdt,nvl(c.cgst,0),nvl(c.sgst,0) FROM new_connections n ,spdclmaster s,cscpay c where n.reg_no= c.csregno(+)  and  substr(n.reg_no,1,5)=s.seccd "
						// + " AND c.cscounter='BILLDESK' "
						+ counter + " AND c.cscancelid='N' "
						+ " AND c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') " + circle + "";
				reportPStmt = con.prepareStatement(query);
				// reportPStmt.setString(1, cscvo.getCounterName());

				reportPStmt.setString(1, cscvo.getFrom_date());
				reportPStmt.setString(2, cscvo.getTo_date());
				// reportPStmt.setString(3, cscvo.getCircleName());

				reportRst = reportPStmt.executeQuery();
				
				if (reportRst != null) {
					int sd_total = 0, app_total = 0, dev_total = 0, sv_total = 0, other_total = 0, sl_total = 0,
							tot_total = 0, adv_total = 0, cont_load_total = 0, temp_chgs_total = 0, tot_cgst = 0,
							tot_sgst = 0;
					while (reportRst.next()) {
						CscpayVO cscvoobj = new CscpayVO();

						cscvoobj.setCircleName(reportRst.getString(3));
						cscvoobj.setReg_no(reportRst.getString(1));
						cscvoobj.setConsumerName(reportRst.getString(4));
						cscvoobj.setCategory(reportRst.getString(5));
						cscvoobj.setAppFees(reportRst.getString(6));
						cscvoobj.setContractLoad(reportRst.getString(7));

						cscvoobj.setServicedeposit(reportRst.getString(8));

						cscvoobj.setDevChrgs(reportRst.getString(9));
						cscvoobj.setServLineChrgs(reportRst.getString(10));
						cscvoobj.setTotAmt(reportRst.getString(11));
						cscvoobj.setAdvChrgs(reportRst.getString(12));
						cscvoobj.setSupChrgs(reportRst.getString(13));
						cscvoobj.setOtherChrgs(reportRst.getString(14));
						cscvoobj.setTempconchgs(reportRst.getString(15));
						cscvoobj.setCsprno(reportRst.getString(16));
						cscvoobj.setCsprdt(reportRst.getString(17));

						cscvoobj.setCgst(reportRst.getString(18));
						cscvoobj.setSgst(reportRst.getString(19));

						sd_total = sd_total + reportRst.getInt(8);
						app_total = app_total + reportRst.getInt(6);
						dev_total = dev_total + reportRst.getInt(9);
						sv_total = sv_total + reportRst.getInt(13);
						other_total = other_total + reportRst.getInt(14);
						sl_total = sl_total + reportRst.getInt(10);
						tot_total = tot_total + reportRst.getInt(11);
						adv_total = adv_total + reportRst.getInt(12);
						cont_load_total = cont_load_total + reportRst.getInt(7);
						temp_chgs_total = temp_chgs_total + reportRst.getInt(15);

						tot_cgst = tot_cgst + reportRst.getInt(18);
						tot_sgst = tot_sgst + reportRst.getInt(19);

						// cscmap.put(reportRst.getString(1), cscvoobj);
						dashList.add(cscvoobj);

					}
					cscvo.setAppFees(String.valueOf(app_total));
					cscvo.setContractLoad(String.valueOf(cont_load_total));

					cscvo.setServicedeposit(String.valueOf(sd_total));
					cscvo.setDevChrgs(String.valueOf(dev_total));
					cscvo.setServLineChrgs(String.valueOf(sl_total));
					cscvo.setTotAmt(String.valueOf(tot_total));
					cscvo.setAdvChrgs(String.valueOf(adv_total));
					cscvo.setSupChrgs(String.valueOf(sv_total));
					cscvo.setOtherChrgs(String.valueOf(other_total));
					cscvo.setTempconchgs(String.valueOf(temp_chgs_total));

					cscvo.setCgst(String.valueOf(tot_cgst));
					cscvo.setSgst(String.valueOf(tot_sgst));

					// cscvo.setCscpaymap(cscmap);
					cscvo.setList(dashList);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}


	public CscpayVO GGMPAbstractReportDetails(CscpayVO cscvo) throws Exception{



		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		
		
		try {
			if (con != null) {
				
			
				String query="SELECT S.CIRNAME,\r\n" + 
						"  S.MANDALNAME,\r\n" + 
						"  S.DIVNAME,\r\n" + 
						"  S.SUBNAME,\r\n" + 
						"  S.SECNAME,\r\n" + 
						"  G.CONSTITUENCY,\r\n" + 
						"   G.COMLAINT_DATE,\r\n" + 
						"   G.COMPLAINT_DESC,\r\n" + 
						"   G.WORK_INVOLVEMENT,\r\n" + 
						"   G.PROCEEDINGS,\r\n" + 
						"   G.ESTIMATE_TYPE,\r\n" + 
						"   G.SANCTION_NO,\r\n" + 
						"   G.WORK_STATUS\r\n" + 
						"FROM ggmp_ack G,spdclmaster s\r\n" + 
						"where G.secname=S.SECCD\r\n" + 
						"\r\n" + 
						"\r\n" + 
						"";
				
				
				//System.out.println("ggmpabstarct::"+query);
				reportPStmt = con.prepareStatement(query);
				

				/*reportPStmt.setString(1, cscvo.getFrom_date());
				reportPStmt.setString(2, cscvo.getTo_date());*/
				
				/*System.out.println("fromdate:" +cscvo.getFrom_date());
				System.out.println("todate:" +cscvo.getTo_date());*/

				reportRst = reportPStmt.executeQuery();
				
				if (reportRst != null) {
					/*int sd_total = 0, app_total = 0, dev_total = 0, sv_total = 0, other_total = 0, sl_total = 0,
							tot_total = 0, adv_total = 0, cont_load_total = 0, temp_chgs_total = 0, tot_cgst = 0,
							tot_sgst = 0;*/
					while (reportRst.next()) {
						CscpayVO cscvoobj = new CscpayVO();
						cscvoobj.setCirclecode(reportRst.getString(1));
						cscvoobj.setGgmpmandalname(reportRst.getString(2));
						
						cscvoobj.setGgmpdivision(reportRst.getString(3));
						cscvoobj.setGgmpsubdivision(reportRst.getString(4));
						
						cscvoobj.setGgmpsection(reportRst.getString(5));
						cscvoobj.setGgmpconstituency(reportRst.getString(6));
						cscvoobj.setGgmpdateofcomplaint(reportRst.getString(7));
						cscvoobj.setGgmpdescofcomplaint(reportRst.getString(8));

						cscvoobj.setGgmpworkinvolvement(reportRst.getString(9));

						cscvoobj.setGgmpcollectorproceedingsno(reportRst.getString(10));
						cscvoobj.setGgmptypeofestimate(reportRst.getString(11));
						cscvoobj.setGgmpsanctionno(reportRst.getString(12));
						cscvoobj.setGgmpworkstatus(reportRst.getString(13));
						
						dashList.add(cscvoobj);

					}
					
					cscvo.setList(dashList);
					

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
		
		
	}
	
	public CscpayVO MeesevaGswsAbstractReportDetails(CscpayVO cscvo) throws Exception{


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		String counter = "";
		/*String circle = "";*/
		try {
			if (con != null) {
				if (cscvo.getCounterName().equalsIgnoreCase("MEESEVA")) {
					counter = " AND NVL(CSCANCELID,'Y')='N'  AND (CSRCCD  NOT LIKE '%WEDS' AND CSRCCD  NOT LIKE '%DA') ";
				} /*else if ((cscvo.getCounterName().equalsIgnoreCase("MEESEVA_GSWS"))) {
					
					counter = "  AND c.cscounter='MEESEVA'  AND (CSRCCD  LIKE '%WEDS' OR CSRCCD  LIKE '%DA') ";
				}*/ 
				else if ((cscvo.getCounterName().equalsIgnoreCase("GSWS"))) {
					//counter = "  AND c.cscounter='MEESEVA'  AND (CSRCCD  LIKE '%WEDS' OR CSRCCD  LIKE '%DA') ";
					counter = " AND NVL(CSCANCELID,'Y')='N' AND (CSRCCD   LIKE '%WEDS' OR CSRCCD   LIKE '%DA') ";
				} 
				else if ((cscvo.getCounterName().equalsIgnoreCase("ALL"))){
					counter = " ";
				}
				

			
				
				String query="select DECODE (SUBSTR(CSPARTCD,1,1),2,'KADAPA',3,'NELLORE',5,'TIRUPATI',7,'ANANTHAPUR',8, 'KURNOOL')  ,count(*) noof,sum(nvl(CSAPPFEE,0)) APPFEE,  sum(nvl(CSSD ,0))SD,sum(nvl(CSDEVCHG,0))DEV,sum(nvl(CSSLCHG,0))SL,sum(nvl(CSSVCHG,0)) SPV,sum(nvl(CSADVCCCHGS,0))ADVCC,sum(nvl(CSTEMPCONCHGS,0)) TEMP,\r\n" + 
						"sum(nvl(CSOTHERCHGS,0)) OTHER,  SUM(NVL(CSADDLSD,0)) ADDITIONAL_SD,\r\n" + 
						"  SUM(NVL(CGST,0)) CGST,\r\n" + 
						"  SUM(NVL(SGST,0)) SGST from cscpay where csprdt between TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')   "+counter+" AND CSBCRCNO=999999 AND SUBSTR(CSPARTCD,1,1) NOT IN ('1','4','6','9') GROUP BY DECODE (SUBSTR(CSPARTCD,1,1),2,'KADAPA',3,'NELLORE',5,'TIRUPATI',7,'ANANTHAPUR',8, 'KURNOOL') ORDER BY 1";
				
				
				//System.out.println("MeesevaGswsAbstract:25-10-2022:"+query);
				reportPStmt = con.prepareStatement(query);
				

				reportPStmt.setString(1, cscvo.getFrom_date());
				reportPStmt.setString(2, cscvo.getTo_date());
				
				//.out.println("fromdate:" +cscvo.getFrom_date());
				//System.out.println("todate:" +cscvo.getTo_date());

				reportRst = reportPStmt.executeQuery();
				
				if (reportRst != null) {
					/*int sd_total = 0, app_total = 0, dev_total = 0, sv_total = 0, other_total = 0, sl_total = 0,
							tot_total = 0, adv_total = 0, cont_load_total = 0, temp_chgs_total = 0, tot_cgst = 0,
							tot_sgst = 0;*/
					while (reportRst.next()) {
						CscpayVO cscvoobj = new CscpayVO();
						cscvoobj.setCirclecode(reportRst.getString(1));
						cscvoobj.setNoof(reportRst.getString(2));
						cscvoobj.setAppfee(reportRst.getString(3));
						
						cscvoobj.setSd(reportRst.getString(4));
						cscvoobj.setDev(reportRst.getString(5));
						cscvoobj.setSl(reportRst.getString(6));
						cscvoobj.setSpv(reportRst.getString(7));

						cscvoobj.setAdvcc(reportRst.getString(8));

						cscvoobj.setTemp(reportRst.getString(9));
						cscvoobj.setOther(reportRst.getString(10));
						cscvoobj.setCsasd(reportRst.getString(11));
						cscvoobj.setCgst(reportRst.getString(12));
						cscvoobj.setSgst(reportRst.getString(13));
						
						/*cscvoobj.setTotAmt(reportRst.getString(11));
						cscvoobj.setAdvChrgs(reportRst.getString(12));
						cscvoobj.setSupChrgs(reportRst.getString(13));
						cscvoobj.setOtherChrgs(reportRst.getString(14));
						cscvoobj.setTempconchgs(reportRst.getString(15));
						cscvoobj.setCsprno(reportRst.getString(16));
						cscvoobj.setCsprdt(reportRst.getString(17));

						cscvoobj.setCgst(reportRst.getString(18));
						cscvoobj.setSgst(reportRst.getString(19));

						sd_total = sd_total + reportRst.getInt(8);
						app_total = app_total + reportRst.getInt(6);
						dev_total = dev_total + reportRst.getInt(9);
						sv_total = sv_total + reportRst.getInt(13);
						other_total = other_total + reportRst.getInt(14);
						sl_total = sl_total + reportRst.getInt(10);
						tot_total = tot_total + reportRst.getInt(11);
						adv_total = adv_total + reportRst.getInt(12);
						cont_load_total = cont_load_total + reportRst.getInt(7);
						temp_chgs_total = temp_chgs_total + reportRst.getInt(15);

						tot_cgst = tot_cgst + reportRst.getInt(18);
						tot_sgst = tot_sgst + reportRst.getInt(19);
*/
						// cscmap.put(reportRst.getString(1), cscvoobj);
						dashList.add(cscvoobj);

					}
					/*cscvo.setAppFees(String.valueOf(app_total));
					cscvo.setContractLoad(String.valueOf(cont_load_total));

					cscvo.setServicedeposit(String.valueOf(sd_total));
					cscvo.setDevChrgs(String.valueOf(dev_total));
					cscvo.setServLineChrgs(String.valueOf(sl_total));
					cscvo.setTotAmt(String.valueOf(tot_total));
					cscvo.setAdvChrgs(String.valueOf(adv_total));
					cscvo.setSupChrgs(String.valueOf(sv_total));
					cscvo.setOtherChrgs(String.valueOf(other_total));
					cscvo.setTempconchgs(String.valueOf(temp_chgs_total));

					cscvo.setCgst(String.valueOf(tot_cgst));
					cscvo.setSgst(String.valueOf(tot_sgst));*/

					// cscvo.setCscpaymap(cscmap);
					cscvo.setList(dashList);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	}
	//
	public CscpayVO getReportDetails_new(CscpayVO cscvo) throws Exception {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		String counter = "";
		String circle = "";
		try {
			if (con != null) {
				if (cscvo.getCounterName().equalsIgnoreCase("MEESEVA_WO_GSWS")) {
					counter = "   AND c.cscounter='MEESEVA'  AND CSRCCD NOT LIKE '%WEDS' AND CSRCCD NOT LIKE '%DA' ";
				} /*else if ((cscvo.getCounterName().equalsIgnoreCase("MEESEVA_GSWS"))) {
					
					counter = "  AND c.cscounter='MEESEVA'  AND (CSRCCD  LIKE '%WEDS' OR CSRCCD  LIKE '%DA') ";
				}*/ 
				else if ((cscvo.getCounterName().equalsIgnoreCase("BILLDESK"))) {
					//counter = "  AND c.cscounter='MEESEVA'  AND (CSRCCD  LIKE '%WEDS' OR CSRCCD  LIKE '%DA') ";
					counter = " AND c.cscounter='" + cscvo.getCounterName() + "' ";
				} 
				else if ((cscvo.getCounterName().equalsIgnoreCase("ALL"))){
					counter = " ";
				}
				
				//circle
				
				if ("ALL".equalsIgnoreCase(cscvo.getCircleName())) {
					circle = " and S.CIRNAME in ('ANANTHAPUR','KURNOOL','KADAPA','TIRUPATI','NELLORE')";
				} else {
					circle = "and S.CIRNAME in ('" + cscvo.getCircleName() + "')";
				}

			
				
				
				String query="SELECT n.reg_no ,n.circle_code ,S.CIRNAME,n.consumer_name,n.category_supply,nvl(c.csappfee,0),n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0), nvl(c.csslchg,0),"
						+ " nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0),nvl(c.cstempconchgs,0), nvl(c.csprno,0),csprdt,nvl(c.cgst,0),nvl(c.sgst,0),NVL(C.CSADDLSD,0)"
						+ " FROM new_connections n ,spdclmaster s,cscpay c where n.reg_no= c.csregno(+)  and  substr(n.reg_no,1,5)=s.seccd "+counter+" AND c.cscancelid='N' "
						+ " AND c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')  " + circle + "";
				
				System.out.println("New Connectioins:25072022:"+query);
				reportPStmt = con.prepareStatement(query);
				// reportPStmt.setString(1, cscvo.getCounterName());

				reportPStmt.setString(1, cscvo.getFrom_date());
				reportPStmt.setString(2, cscvo.getTo_date());
				System.out.println(cscvo.getFrom_date());
				System.out.println(cscvo.getTo_date());
				// reportPStmt.setString(3, cscvo.getCircleName());

				reportRst = reportPStmt.executeQuery();
				
				if (reportRst != null) {
					int sd_total = 0, app_total = 0, dev_total = 0, sv_total = 0, other_total = 0, sl_total = 0,
							tot_total = 0, adv_total = 0, cont_load_total = 0, temp_chgs_total = 0, tot_cgst = 0,
							tot_sgst = 0,tot_csasd=0;
					while (reportRst.next()) {
						CscpayVO cscvoobj = new CscpayVO();

						cscvoobj.setCircleName(reportRst.getString(3));
						cscvoobj.setReg_no(reportRst.getString(1));
						cscvoobj.setConsumerName(reportRst.getString(4));
						cscvoobj.setCategory(reportRst.getString(5));
						cscvoobj.setAppFees(reportRst.getString(6));
						cscvoobj.setContractLoad(reportRst.getString(7));

						cscvoobj.setServicedeposit(reportRst.getString(8));

						cscvoobj.setDevChrgs(reportRst.getString(9));
						cscvoobj.setServLineChrgs(reportRst.getString(10));
						cscvoobj.setTotAmt(reportRst.getString(11));
						cscvoobj.setAdvChrgs(reportRst.getString(12));
						cscvoobj.setSupChrgs(reportRst.getString(13));
						cscvoobj.setOtherChrgs(reportRst.getString(14));
						cscvoobj.setTempconchgs(reportRst.getString(15));
						cscvoobj.setCsprno(reportRst.getString(16));
						cscvoobj.setCsprdt(reportRst.getString(17));

						cscvoobj.setCgst(reportRst.getString(18));
						cscvoobj.setSgst(reportRst.getString(19));
						cscvoobj.setCsasd(reportRst.getString(20));

						sd_total = sd_total + reportRst.getInt(8);
						app_total = app_total + reportRst.getInt(6);
						dev_total = dev_total + reportRst.getInt(9);
						sv_total = sv_total + reportRst.getInt(13);
						other_total = other_total + reportRst.getInt(14);
						sl_total = sl_total + reportRst.getInt(10);
						tot_total = tot_total + reportRst.getInt(11);
						adv_total = adv_total + reportRst.getInt(12);
						cont_load_total = cont_load_total + reportRst.getInt(7);
						temp_chgs_total = temp_chgs_total + reportRst.getInt(15);

						tot_cgst = tot_cgst + reportRst.getInt(18);
						tot_sgst = tot_sgst + reportRst.getInt(19);
						tot_csasd = tot_csasd + reportRst.getInt(20);

						// cscmap.put(reportRst.getString(1), cscvoobj);
						dashList.add(cscvoobj);

					}
					cscvo.setAppFees(String.valueOf(app_total));
					cscvo.setContractLoad(String.valueOf(cont_load_total));

					cscvo.setServicedeposit(String.valueOf(sd_total));
					cscvo.setDevChrgs(String.valueOf(dev_total));
					cscvo.setServLineChrgs(String.valueOf(sl_total));
					cscvo.setTotAmt(String.valueOf(tot_total));
					cscvo.setAdvChrgs(String.valueOf(adv_total));
					cscvo.setSupChrgs(String.valueOf(sv_total));
					cscvo.setOtherChrgs(String.valueOf(other_total));
					cscvo.setTempconchgs(String.valueOf(temp_chgs_total));

					cscvo.setCgst(String.valueOf(tot_cgst));
					cscvo.setSgst(String.valueOf(tot_sgst));
					cscvo.setCsasd(String.valueOf(tot_csasd));

					// cscvo.setCscpaymap(cscmap);
					cscvo.setList(dashList);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	public CscpayVO getReportDetails_new_new(CscpayVO cscvo) throws Exception{


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		/*String counter = "";*/
		String circle = "";
		
		try {
			if (con != null) {
				
				
				
				//circle
				
				if ("ALL".equalsIgnoreCase(cscvo.getCircleName())) {
					circle = " and S.CIRNAME in ('ANANTHAPUR','KURNOOL','KADAPA','TIRUPATI','NELLORE')";
				} else {
					circle = "and S.CIRNAME in ('" + cscvo.getCircleName() + "')";
				}

				  
						
					  String query="SELECT n.reg_no ,\r\n" + 
					  		"  n.circle_code ,\r\n" + 
					  		"  S.CIRNAME,\r\n" + 
					  		"  n.consumer_name,\r\n" + 
					  		"  n.category_supply,\r\n" + 
					  		"  (CASE WHEN((C.CSRCCD LIKE '%WEDS' OR C.CSRCCD LIKE '%DA'))	THEN 'GSWS' ELSE 'MEESEVA' END) COUNTER,	\r\n" + 
					  		"  NVL(c.csappfee,0),\r\n" + 
					  		"  n.contracted_load,\r\n" + 
					  		"  NVL(c.cssd,0),\r\n" + 
					  		"  NVL(c.csdevchg,0),\r\n" + 
					  		"  NVL(c.csslchg,0),\r\n" + 
					  		"  NVL(c.cstotamt,0),\r\n" + 
					  		"  NVL(c.csadvccchgs,0),\r\n" + 
					  		"  NVL(c.cssvchg,0),\r\n" + 
					  		"  NVL(c.csotherchgs,0),\r\n" + 
					  		"  NVL(c.cstempconchgs,0),\r\n" + 
					  		"  NVL(c.csprno,0),\r\n" + 
					  		"  csprdt,\r\n" + 
					  		"  NVL(c.cgst,0),\r\n" + 
					  		"  NVL(c.sgst,0),"+
					  		"  NVL(C.CSADDLSD,0) \r\n" + 
					  		"FROM new_connections n ,\r\n" + 
					  		"  spdclmaster s,\r\n" + 
					  		"  cscpay c\r\n" + 
					  		"WHERE n.reg_no          = c.csregno(+)\r\n" + 
					  		"AND SUBSTR(n.reg_no,1,5)=s.seccd\r\n" + 
					  		"AND c.cscounter         ='MEESEVA'\r\n" + 
					  		"and c.cscancelid='N'\r\n" + 
					  		"AND c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')\r\n" +  circle + "";
					 // System.out.println("New Connectioins:MEESEVA_GSWS:"+query);
						reportPStmt = con.prepareStatement(query);
						reportPStmt.setString(1, cscvo.getFrom_date());
						reportPStmt.setString(2, cscvo.getTo_date());
						reportRst = reportPStmt.executeQuery();
				
						if (reportRst != null){
						int sd_total = 0, app_total = 0, dev_total = 0, sv_total = 0, other_total = 0, sl_total = 0,
								tot_total = 0, adv_total = 0, cont_load_total = 0, temp_chgs_total = 0, tot_cgst = 0,
								tot_sgst = 0 ,tot_csasd=0;
						while (reportRst.next()) {
							CscpayVO cscvoobj = new CscpayVO();

							cscvoobj.setCircleName(reportRst.getString(3));
							cscvoobj.setReg_no(reportRst.getString(1));
							cscvoobj.setConsumerName(reportRst.getString(4));
							cscvoobj.setCategory(reportRst.getString(5));
							cscvoobj.setCountername(reportRst.getString(6));
							
							cscvoobj.setAppFees(reportRst.getString(7));
							cscvoobj.setContractLoad(reportRst.getString(8));

							cscvoobj.setServicedeposit(reportRst.getString(9));

							cscvoobj.setDevChrgs(reportRst.getString(10));
							cscvoobj.setServLineChrgs(reportRst.getString(11));
							cscvoobj.setTotAmt(reportRst.getString(12));
							cscvoobj.setAdvChrgs(reportRst.getString(13));
							cscvoobj.setSupChrgs(reportRst.getString(14));
							cscvoobj.setOtherChrgs(reportRst.getString(15));
							
							cscvoobj.setTempconchgs(reportRst.getString(16));
							cscvoobj.setCsprno(reportRst.getString(17));
							cscvoobj.setCsprdt(reportRst.getString(18));

							cscvoobj.setCgst(reportRst.getString(19));
							cscvoobj.setSgst(reportRst.getString(20));
							cscvoobj.setCsasd(reportRst.getString(21));

							
							app_total = app_total + reportRst.getInt(7);
							cont_load_total = cont_load_total + reportRst.getInt(8);
							sd_total = sd_total + reportRst.getInt(9);
							dev_total = dev_total + reportRst.getInt(10);
							sl_total = sl_total + reportRst.getInt(11);
							tot_total = tot_total + reportRst.getInt(12);
							adv_total = adv_total + reportRst.getInt(13);
							sv_total = sv_total + reportRst.getInt(14);
							other_total = other_total + reportRst.getInt(15);
							temp_chgs_total = temp_chgs_total + reportRst.getInt(16);
							
							tot_cgst = tot_cgst + reportRst.getInt(19);
							tot_sgst = tot_sgst + reportRst.getInt(20);
							tot_csasd=tot_csasd + reportRst.getInt(21);
							

							// cscmap.put(reportRst.getString(1), cscvoobj);
							dashList.add(cscvoobj);
						
						}
						cscvo.setAppFees(String.valueOf(app_total));
						cscvo.setContractLoad(String.valueOf(cont_load_total));

						cscvo.setServicedeposit(String.valueOf(sd_total));
						cscvo.setDevChrgs(String.valueOf(dev_total));
						cscvo.setServLineChrgs(String.valueOf(sl_total));
						cscvo.setTotAmt(String.valueOf(tot_total));
						cscvo.setAdvChrgs(String.valueOf(adv_total));
						cscvo.setSupChrgs(String.valueOf(sv_total));
						cscvo.setOtherChrgs(String.valueOf(other_total));
						cscvo.setTempconchgs(String.valueOf(temp_chgs_total));

						cscvo.setCgst(String.valueOf(tot_cgst));
						cscvo.setSgst(String.valueOf(tot_sgst));
						cscvo.setCsasd(String.valueOf(tot_csasd));

						// cscvo.setCscpaymap(cscmap);
						cscvo.setList(dashList);
						}
				  
					
				
				
			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	}
	
	public CscpayVO getReportDetailscomplaints(CscpayVO cscvo) throws Exception {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;
		String counter = "";
		String circle = "";

		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		try {
			if (con != null) {

				/*
				 * if (cscvo.getCounterName().equalsIgnoreCase("GSWS")) {
				 * counter = " AND (SUBSTR(N.MESEVA_REF,1,5) IN('PRAJA') " +
				 * "  OR  ((SUBSTR(N.MESEVA_REF,1,5) IN ('MEESE')  AND   N.REG_NO IN(SELECT CSREGNO FROM CSCPAY WHERE CSRCCD LIKE '%DA') )"
				 * +
				 * " OR (SUBSTR(N.MESEVA_REF,1,5) IN ('MEESE')  AND   N.REG_NO IN(SELECT CSREGNO FROM CSCPAY WHERE CSRCCD LIKE '%WEDS')))) "
				 * ; } else { counter = " AND c.cscounter='" +
				 * cscvo.getCounterName() + "' "; }
				 */

				// get counter
				if (cscvo.getCounterName().equalsIgnoreCase("GSWS")) {
					/*
					 * counter =
					 * " AND (((SUBSTR(N.MESEVA_REF,1,5) IN ('MEESE')  AND   N.REG_NO IN(SELECT CSREGNO FROM CSCPAY WHERE CSRCCD LIKE '%DA') ) "
					 * +
					 * " OR (SUBSTR(N.MESEVA_REF,1,5) IN ('MEESE')  AND   N.REG_NO IN(SELECT CSREGNO FROM CSCPAY WHERE CSRCCD LIKE '%WEDS')))) "
					 * ;
					 */

					counter = " and (c.CSRCNAME LIKE '%-DA' OR c.CSRCNAME LIKE '%-WEDS')";
				} else if ((cscvo.getCounterName().equalsIgnoreCase("ALL"))) {// &&
																				// (cscvo.getCounterName().equalsIgnoreCase("BILLDESK"))
																				// &&
																				// (cscvo.getCounterName().equalsIgnoreCase("MEESEVA"))){
					counter = " AND ((c.cscounter='MEESEVA') or " + " (c.cscounter='BILLDESK')) ";

				} else {
					counter = " AND c.cscounter='" + cscvo.getCounterName() + "' ";
				}

				// get Circel
				if ("ALL".equalsIgnoreCase(cscvo.getCircleName())) {
					circle = " and S.CIRNAME in ('ANANTHAPUR','KURNOOL','KADAPA','TIRUPATI','NELLORE')";
				} else {
					circle = "and S.CIRNAME in ('" + cscvo.getCircleName() + "')";
				}

				/*
				 * String query =
				 * "SELECT n.reg_no ,n.circle_code ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR',8,'KURNOOL',9,'CRDA','UNKNOWN') circle,n.customer_name,n.new_category,nvl(c.csappfee,0),n.CONTRACTLOAD,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0),nvl(c.CSPAYFOR,'-'),nvl(c.cstempconchgs,0),nvl(c.csprno,0),csprdt,nvl(c.cgst,0),nvl(c.sgst,0) FROM new_complaints n INNER JOIN cscpay c ON n.reg_no= c.csregno   "
				 * + counter +
				 * "   AND c.cscancelid='N' AND c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA' THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR' THEN 7 WHEN 'KURNOOL' THEN 8 WHEN 'CRDA' THEN 9  ELSE 10 END)"
				 * ;
				 */

				String query = "SELECT n.reg_no ,n.circle_code,S.CIRNAME,n.customer_name,n.new_category,nvl(c.csappfee,0),n.CONTRACTLOAD"
						+ " ,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0)"
						+ " ,nvl(c.CSPAYFOR,'-'),nvl(c.cstempconchgs,0),nvl(c.csprno,0),csprdt,nvl(c.cgst,0)"
						+ " ,nvl(c.sgst,0) FROM new_complaints n ,spdclmaster s,"
						+ " cscpay c where n.reg_no= c.csregno(+)  and  substr(n.reg_no,1,5)=s.seccd "
						// + " AND c.cscounter='BILLDESK' "
						+ counter
						+ " AND c.cscancelid='N' AND c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') "
						+ circle + "";
				// + " and S.CIRNAME IN('ANANTHAPUR')";
				reportPStmt = con.prepareStatement(query);
				// reportPStmt.setString(1, cscvo.getCounterName());
				reportPStmt.setString(1, cscvo.getFrom_date());
				reportPStmt.setString(2, cscvo.getTo_date());
				// reportPStmt.setString(3, cscvo.getCircleName());
				reportRst = reportPStmt.executeQuery();
				
				if (reportRst != null) {
					double sd_total = 0, app_total = 0, dev_total = 0, sv_total = 0, other_total = 0, sl_total = 0,
							tot_total = 0, adv_total = 0, cont_load_total = 0, temp_chgs_total = 0, tot_cgst = 0,
							tot_sgst = 0;
					while (reportRst.next()) {
						CscpayVO cscvoobj = new CscpayVO();

						cscvoobj.setCircleName(reportRst.getString(3));
						cscvoobj.setReg_no(reportRst.getString(1));
						cscvoobj.setConsumerName(reportRst.getString(4));
						cscvoobj.setCategory(reportRst.getString(5));
						cscvoobj.setAppFees(reportRst.getString(6));
						cscvoobj.setContractLoad(reportRst.getString(7));

						cscvoobj.setServicedeposit(reportRst.getString(8));
						cscvoobj.setDevChrgs(reportRst.getString(9));
						cscvoobj.setServLineChrgs(reportRst.getString(10));
						cscvoobj.setTotAmt(reportRst.getString(11));
						cscvoobj.setAdvChrgs(reportRst.getString(12));
						cscvoobj.setSupChrgs(reportRst.getString(13));
						cscvoobj.setOtherChrgs(reportRst.getString(14));
						cscvoobj.setComplaintType(reportRst.getString(15));

						cscvoobj.setTempconchgs(reportRst.getString(16));
						cscvoobj.setCsprno(reportRst.getString(17));
						cscvoobj.setCsprdt(reportRst.getString(18));

						cscvoobj.setCgst(reportRst.getString(19));
						cscvoobj.setSgst(reportRst.getString(20));

						sd_total = sd_total + reportRst.getInt(8);
						app_total = app_total + reportRst.getInt(6);
						dev_total = dev_total + reportRst.getInt(9);
						sv_total = sv_total + reportRst.getInt(13);
						other_total = other_total + reportRst.getInt(14);
						sl_total = sl_total + reportRst.getInt(10);
						tot_total = tot_total + reportRst.getInt(11);
						adv_total = adv_total + reportRst.getInt(12);

						temp_chgs_total = temp_chgs_total + reportRst.getInt(16);

						cont_load_total = cont_load_total + reportRst.getDouble(7);

						tot_cgst = tot_cgst + reportRst.getInt(19);
						tot_sgst = tot_sgst + reportRst.getInt(20);

						cscmap.put(reportRst.getString(17), cscvoobj);
						// dashList.add( cscvoobj);

					}
					cscvo.setAppFees(String.valueOf(app_total));
					cscvo.setContractLoad(String.valueOf(cont_load_total));

					cscvo.setServicedeposit(String.valueOf(sd_total));
					cscvo.setDevChrgs(String.valueOf(dev_total));
					cscvo.setServLineChrgs(String.valueOf(sl_total));
					cscvo.setTotAmt(String.valueOf(tot_total));
					cscvo.setAdvChrgs(String.valueOf(adv_total));
					cscvo.setSupChrgs(String.valueOf(sv_total));
					cscvo.setOtherChrgs(String.valueOf(other_total));
					cscvo.setTempconchgs(String.valueOf(temp_chgs_total));
					cscvo.setCgst(String.valueOf(tot_cgst));
					cscvo.setSgst(String.valueOf(tot_sgst));

					cscvo.setCscpaymap(cscmap);
					// cscvo.setList(dashList);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// AllCounters

	public CscpayVO getReportDetails1(CscpayVO cscvo) throws Exception {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				
				String query = "SELECT n.reg_no ,n.circle_code ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR',8,'KURNOOL',9,'CRDA','UNKNOWN') circle,n.consumer_name,n.category_supply,nvl(c.csappfee,0),n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0),nvl(c.cstempconchgs,0),nvl(c.csprno,0),csprdt,nvl(c.cgst,0),nvl(c.sgst,0) FROM new_connections n INNER JOIN cscpay c ON n.reg_no= c.csregno AND c.cscounter=? AND c.cscancelid='N' AND c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA' THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR' THEN 7 WHEN 'KURNOOL' THEN 8 WHEN 'CRDA' THEN 9  ELSE 10 END)";
				reportPStmt = con.prepareStatement(query);
				reportPStmt.setString(1, cscvo.getCounterName());

				reportPStmt.setString(2, cscvo.getFrom_date());
				reportPStmt.setString(3, cscvo.getTo_date());
				reportPStmt.setString(4, cscvo.getCircleName());

				reportRst = reportPStmt.executeQuery();
				// String query2="SELECT n.reg_no ,n.circle_code
				// ,m.cirname,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,c.csregno,nvl(sum(c.cssd),0),nvl(sum(c.csdevchg),0),nvl(sum(c.csslchg),0),nvl(sum(c.cstotamt),0),nvl(sum(c.csadvccchgs),0),nvl(sum(c.cssvchg),0),nvl(sum(c.csotherchgs),0)
				// FROM new_connections n,cscpay c,master.spdclmaster m where
				// n.reg_no=c.csregno and c.cscounter=? and
				// n.circle_code=m.circd and m.cirname=? and c.cscancelid='N'
				// and c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND
				// TO_DATE(?,'YYYY-MM-DD') group by
				// n.reg_no,c.csregno,n.circle_code,n.consumer_name,m.cirname,n.category_supply,n.application_fee,n.contracted_load";
				if (reportRst != null) {
					int sd_total = 0, app_total = 0, dev_total = 0, sv_total = 0, other_total = 0, sl_total = 0,
							tot_total = 0, adv_total = 0, cont_load_total = 0, temp_chgs_total = 0, tot_cgst = 0,
							tot_sgst = 0;
					while (reportRst.next()) {
						CscpayVO cscvoobj = new CscpayVO();

						cscvoobj.setCircleName(reportRst.getString(3));
						cscvoobj.setReg_no(reportRst.getString(1));
						cscvoobj.setConsumerName(reportRst.getString(4));
						cscvoobj.setCategory(reportRst.getString(5));
						cscvoobj.setAppFees(reportRst.getString(6));
						cscvoobj.setContractLoad(reportRst.getString(7));

						cscvoobj.setServicedeposit(reportRst.getString(8));

						cscvoobj.setDevChrgs(reportRst.getString(9));
						cscvoobj.setServLineChrgs(reportRst.getString(10));
						cscvoobj.setTotAmt(reportRst.getString(11));
						cscvoobj.setAdvChrgs(reportRst.getString(12));
						cscvoobj.setSupChrgs(reportRst.getString(13));
						cscvoobj.setOtherChrgs(reportRst.getString(14));
						cscvoobj.setTempconchgs(reportRst.getString(15));
						cscvoobj.setCsprno(reportRst.getString(16));
						cscvoobj.setCsprdt(reportRst.getString(17));

						cscvoobj.setCgst(reportRst.getString(18));
						cscvoobj.setSgst(reportRst.getString(19));

						sd_total = sd_total + reportRst.getInt(8);
						app_total = app_total + reportRst.getInt(6);
						dev_total = dev_total + reportRst.getInt(9);
						sv_total = sv_total + reportRst.getInt(13);
						other_total = other_total + reportRst.getInt(14);
						sl_total = sl_total + reportRst.getInt(10);
						tot_total = tot_total + reportRst.getInt(11);
						adv_total = adv_total + reportRst.getInt(12);
						cont_load_total = cont_load_total + reportRst.getInt(7);
						temp_chgs_total = temp_chgs_total + reportRst.getInt(15);

						tot_cgst = tot_cgst + reportRst.getInt(18);
						tot_sgst = tot_sgst + reportRst.getInt(19);

						// cscmap.put(reportRst.getString(1), cscvoobj);
						dashList.add(cscvoobj);

					}
					cscvo.setAppFees(String.valueOf(app_total));
					cscvo.setContractLoad(String.valueOf(cont_load_total));

					cscvo.setServicedeposit(String.valueOf(sd_total));
					cscvo.setDevChrgs(String.valueOf(dev_total));
					cscvo.setServLineChrgs(String.valueOf(sl_total));
					cscvo.setTotAmt(String.valueOf(tot_total));
					cscvo.setAdvChrgs(String.valueOf(adv_total));
					cscvo.setSupChrgs(String.valueOf(sv_total));
					cscvo.setOtherChrgs(String.valueOf(other_total));
					cscvo.setTempconchgs(String.valueOf(temp_chgs_total));

					cscvo.setCgst(String.valueOf(tot_cgst));
					cscvo.setSgst(String.valueOf(tot_sgst));

					// cscvo.setCscpaymap(cscmap);
					cscvo.setList(dashList);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	
	
	public CscpayVO getAllCountersDetailsTWO(CscpayVO cscvo) throws SQLException, DatabaseFailureException {
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					
					String query = " select NVL(DIVNAME,'ZTOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) registered ,\r\n" + 
							"sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) totreg,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' then 1 else 0 end) EST_TOBE_SANC,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for payment by consumer' then 1 else 0 end) PAYMENT_PENDING,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected' then 1 else 0 end) REJECTED,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) paid,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end)+ \r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) released ,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt, sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from " + 
							"rep_final,  spdclmaster     where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') \r\n" + 
							"AND CIRNAME=? group by  rollup(DIVNAME) ORDER BY DIVNAME";
					
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					
					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					
					String query = " select NVL(SUBNAME,'ZTOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) registered ,\r\n" + 
							"sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) totreg,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' then 1 else 0 end) EST_TOBE_SANC,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for payment by consumer' then 1 else 0 end) PAYMENT_PENDING,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected' then 1 else 0 end) REJECTED,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) paid,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end)+ \r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) released ,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt, sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from\r\n" + 
							"rep_final,  spdclmaster     where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') \r\n" + 
							"AND CIRNAME=? AND DIVNAME=? group by  rollup(SUBNAME) ORDER BY SUBNAME";
					
					
					
					reportPStmt = con.prepareStatement(query);

					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					String query = " select NVL(SECNAME,'ZTOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) registered ,\r\n" + 
							"sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) totreg,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' then 1 else 0 end) EST_TOBE_SANC,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for payment by consumer' then 1 else 0 end) PAYMENT_PENDING,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected' then 1 else 0 end) REJECTED,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) paid,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end)+ \r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) released ,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt, sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from\r\n" + 
							"rep_final,  spdclmaster     where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') \r\n" + 
							"AND CIRNAME=? AND DIVNAME=? AND SUBNAME=? group by  rollup(SECNAME) ORDER BY SECNAME";
					
					
					reportPStmt = con.prepareStatement(query);

					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					

					String query = "select NVL(cirname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) registered ,\r\n" + 
							"sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) totreg,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' then 1 else 0 end) EST_TOBE_SANC,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for payment by consumer' then 1 else 0 end) PAYMENT_PENDING,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected' then 1 else 0 end) REJECTED,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) paid,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end)+ \r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) released ,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt, sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from\r\n" + 
							"rep_final,  spdclmaster     where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') \r\n" + 
							"group by  rollup(cirname)";

					System.out.println("NEW 1:" + query);
					reportPStmt = con.prepareStatement(query);
					
					//System.out.println("NEW 1:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							
							dmapobj.setTot_reg(reportRst.getString(4));
							dmapobj.setTot_reg_two(reportRst.getString(5));
							dmapobj.setEstimation_san(reportRst.getString(6));
							dmapobj.setPayment_pen(reportRst.getString(7));
							

							dmapobj.setAppPaid(reportRst.getString(8));
							dmapobj.setAppDeleted(reportRst.getString(9));
							dmapobj.setAppReleased(reportRst.getString(10));
							dmapobj.setTot_crt(reportRst.getString(11));

							dmapobj.setWrt(reportRst.getString(12));
							dmapobj.setBeyondReleased(reportRst.getString(13));
							dmapobj.setTurnKey(reportRst.getString(14));
						/*	dmapobj.setTot_brt_turnkey(reportRst.getString(15));
							dmapobj.setTot_pen(reportRst.getString(16));*/

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							
							dmapobj.setTot_reg(reportRst.getString(4));
							dmapobj.setTot_reg_two(reportRst.getString(5));
							dmapobj.setEstimation_san(reportRst.getString(6));
							dmapobj.setPayment_pen(reportRst.getString(7));
							

							dmapobj.setAppPaid(reportRst.getString(8));
							dmapobj.setAppDeleted(reportRst.getString(9));
							dmapobj.setAppReleased(reportRst.getString(10));
							dmapobj.setTot_crt(reportRst.getString(11));

							dmapobj.setWrt(reportRst.getString(12));
							dmapobj.setBeyondReleased(reportRst.getString(13));
							dmapobj.setTurnKey(reportRst.getString(14));
							/*dmapobj.setTot_brt_turnkey(reportRst.getString(15));
							dmapobj.setTot_pen(reportRst.getString(16));*/

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
		
		
		
	}

	// AllCounter Details

	public CscpayVO getAllCountersDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					
					String query = "select NVL(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted , sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot, "
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,"
							+ " sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT, "
							// + " sum(case when upper(REPSTAT) like '%WRT' or
							// upper(REPSTAT) like '%BRT' or upper(REPSTAT) like
							// '%TKEY%' then 1 else 0 end) balance from "
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from "
							+ " rep_final,  spdclmaster     where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and cirname=?   group by  rollup(divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = "select NVL(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted , sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot, "
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,"
							+ " sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT, "
							// + " sum(case when upper(REPSTAT) like '%WRT' or
							// upper(REPSTAT) like '%BRT' or upper(REPSTAT) like
							// '%TKEY%' then 1 else 0 end) balance from "
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from "
							+ " rep_final,  spdclmaster     where    NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')  and cirname=?  and divname=?   group by  rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					String query = "select NVL(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted , sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot, "
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,"
							+ " sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT, "
							// + " sum(case when upper(REPSTAT) like '%WRT' or
							// upper(REPSTAT) like '%BRT' or upper(REPSTAT) like
							// '%TKEY%' then 1 else 0 end) balance from "
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from "
							+ " rep_final,  spdclmaster     where    NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO')  and cirname=?  and divname=?   and subname=?  group by  rollup(secname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					

					String query = "select NVL(cirname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted , sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot, "
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,"
							+ " sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT, "
							// + " sum(case when upper(REPSTAT) like '%WRT' or
							// upper(REPSTAT) like '%BRT' or upper(REPSTAT) like
							// '%TKEY%' then 1 else 0 end) balance from "
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from "
							+ " rep_final,  spdclmaster     where    NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')   group by  rollup(cirname)";
					//System.out.println("allcounter"+query);
					reportPStmt = con.prepareStatement(query);
					//System.out.println("allcounter"+query);
					//System.out.println("AGRI2:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));
							dmapobj.setTot_pen(reportRst.getString(13));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));
							dmapobj.setTot_pen(reportRst.getString(13));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	public CscpayVO getAllCountersLtDetailsTWO(CscpayVO cscvo) throws SQLException, DatabaseFailureException {
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		if ("1".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = "and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')  AND   CATEGORY_SUPPLY like '1%'";
		} else if ("2".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') AND CATEGORY_SUPPLY like '2%'";
		} else if ("3".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = "and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') AND CATEGORY_SUPPLY like '3%'";
		} else if ("4".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = "and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') AND CATEGORY_SUPPLY like '4%'";
		}
		else if ("5".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') AND CATEGORY_SUPPLY like '5%'";
		}
		
		else if ("5A".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " and nvl(consumer_status_val,'NA')='YSR JALAKALA' AND CATEGORY_SUPPLY like '5A%'";
		}
		else if ("5B".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " AND CATEGORY_SUPPLY like '5B%'";
		}
		else if ("5A2".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') AND CATEGORY_SUPPLY like '5A2%'";
		}
		
		else if ("6".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = "and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')    AND CATEGORY_SUPPLY like '6%'";
		} else if ("7".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') AND CATEGORY_SUPPLY like '7%'";
		} else if ("8".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') AND CATEGORY_SUPPLY like '8%'";
		} else {
			ltcat = "and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')  ";
		}

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "select NVL(DIVNAME,'ZTOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) registered ,\r\n" + 
							"sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) totreg,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' then 1 else 0 end) EST_TOBE_SANC,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for payment by consumer' then 1 else 0 end) PAYMENT_PENDING,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected' then 1 else 0 end) REJECTED,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) paid,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end)+ \r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) released ,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt, sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from\r\n" + 
							"rep_final,  spdclmaster     where    NCPARTCD=seccd  AND  circd not in('1','4','6','9')  "+ltcat+" \r\n" + 
							"AND CIRNAME=?   group by  rollup(DIVNAME) ORDER BY DIVNAME";
					
					
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = " select NVL(SUBNAME,'ZTOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) registered ,\r\n" + 
							"sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) totreg,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' then 1 else 0 end) EST_TOBE_SANC,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for payment by consumer' then 1 else 0 end) PAYMENT_PENDING,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected' then 1 else 0 end) REJECTED,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) paid,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end)+ \r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) released ,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt, sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from\r\n" + 
							"rep_final,  spdclmaster     where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') "+ltcat+" \r\n" + 
							"AND CIRNAME=?  AND DIVNAME=? group by  rollup(SUBNAME) ORDER BY SUBNAME";
					
					reportPStmt = con.prepareStatement(query);

					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {



					

					String query = " select NVL(SECNAME,'ZTOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) registered ,\r\n" + 
							"sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) totreg,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' then 1 else 0 end) EST_TOBE_SANC,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for payment by consumer' then 1 else 0 end) PAYMENT_PENDING,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected' then 1 else 0 end) REJECTED,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) paid,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end)+ \r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) released ,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt, sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from\r\n" + 
							"rep_final,  spdclmaster     where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') "+ltcat+" \r\n" + 
							"AND CIRNAME=?  AND DIVNAME=?  AND SUBNAME=? group by  rollup(SECNAME) ORDER BY SECNAME";
					
					reportPStmt = con.prepareStatement(query);

					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					
					String query = " select NVL(CIRNAME,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) registered ,\r\n" + 
							"sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) totreg,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' then 1 else 0 end) EST_TOBE_SANC,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for payment by consumer' then 1 else 0 end) PAYMENT_PENDING,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected' then 1 else 0 end) REJECTED,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) paid,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end)+ \r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) released ,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt, sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from\r\n" + 
							"rep_final,  spdclmaster     where    NCPARTCD=seccd  AND  circd not in('1','4','6','9')  "+ltcat+" \r\n" + 
							" group by  rollup(CIRNAME) ORDER BY CIRNAME";
					

					reportPStmt = con.prepareStatement(query);
					System.out.println("NEW LT:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));
							dmapobj.setTot_reg_two(reportRst.getString(5));
							dmapobj.setEstimation_san(reportRst.getString(6));
							dmapobj.setPayment_pen(reportRst.getString(7));

							dmapobj.setAppPaid(reportRst.getString(8));
							dmapobj.setAppDeleted(reportRst.getString(9));
							dmapobj.setAppReleased(reportRst.getString(10));
							dmapobj.setTot_crt(reportRst.getString(11));

							dmapobj.setWrt(reportRst.getString(12));
							dmapobj.setBeyondReleased(reportRst.getString(13));
							dmapobj.setTurnKey(reportRst.getString(14));
							/*dmapobj.setTot_brt_turnkey(reportRst.getString(15));
							dmapobj.setTot_pen(reportRst.getString(16));*/

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));
							dmapobj.setTot_reg_two(reportRst.getString(5));
							dmapobj.setEstimation_san(reportRst.getString(6));
							dmapobj.setPayment_pen(reportRst.getString(7));

							dmapobj.setAppPaid(reportRst.getString(8));
							dmapobj.setAppDeleted(reportRst.getString(9));
							dmapobj.setAppReleased(reportRst.getString(10));
							dmapobj.setTot_crt(reportRst.getString(11));

							dmapobj.setWrt(reportRst.getString(12));
							dmapobj.setBeyondReleased(reportRst.getString(13));
							dmapobj.setTurnKey(reportRst.getString(14));
							/*dmapobj.setTot_brt_turnkey(reportRst.getString(15));
							dmapobj.setTot_pen(reportRst.getString(16));*/

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException("Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
		
	}
	public CscpayVO getAllCountersLtDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		if ("1".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where     NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(reg_no)  not like '%H%' AND   CATEGORY_SUPPLY like '1%'";
		} else if ("2".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(reg_no)  not like '%H%' AND CATEGORY_SUPPLY like '2%'";
		} else if ("3".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(reg_no)  not like '%H%' AND CATEGORY_SUPPLY like '3%'";
		} else if ("4".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(reg_no)  not like '%H%' AND CATEGORY_SUPPLY like '4%'";
		}
		else if ("5".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where   NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and  upper(reg_no)  not like '%H%' AND CATEGORY_SUPPLY like '5%'";
		}
		
		else if ("5A".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where   NCPARTCD=seccd   AND  circd not in('1','4','6','9') and nvl(consumer_status_val,'NA')='YSR JALAKALA' and  upper(reg_no)  not like '%H%' AND CATEGORY_SUPPLY like '5A%'";
		}
		
		else if ("6".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(reg_no)  not like '%H%'  AND CATEGORY_SUPPLY like '6%'";
		} else if ("7".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(reg_no)  not like '%H%'  AND CATEGORY_SUPPLY like '7%'";
		} else if ("8".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(reg_no)  not like '%H%' AND CATEGORY_SUPPLY like '8%'";
		} else {
			ltcat = " where    NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(REG_NO) not like '%H%' ";
		}

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					
					String query = "select NVL(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted , sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot, "
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,"
							+ " sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT, "
							// + " sum(case when upper(REPSTAT) like '%WRT' or
							// upper(REPSTAT) like '%BRT' or upper(REPSTAT) like
							// '%TKEY%' then 1 else 0 end) balance from "
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from "
							+ " rep_final,  spdclmaster  " + ltcat + "  and cirname=? group by  rollup(divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = "select NVL(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted , sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot, "
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,"
							+ " sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT, "
							// + " sum(case when upper(REPSTAT) like '%WRT' or
							// upper(REPSTAT) like '%BRT' or upper(REPSTAT) like
							// '%TKEY%' then 1 else 0 end) balance from "
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from "
							+ " rep_final,  spdclmaster  " + ltcat
							+ "  and cirname=? and divname=? group by  rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {



					

					String query = "select NVL(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted , sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot, "
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,"
							+ " sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT, "
							// + " sum(case when upper(REPSTAT) like '%WRT' or
							// upper(REPSTAT) like '%BRT' or upper(REPSTAT) like
							// '%TKEY%' then 1 else 0 end) balance from "
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from "
							+ " rep_final,  spdclmaster  " + ltcat
							+ "  and cirname=? and divname=? and subname=? group by  rollup(secname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					
					String query = "select NVL(cirname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted , sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot, "
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,"
							+ " sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT, "
							// + " sum(case when upper(REPSTAT) like '%WRT' or
							// upper(REPSTAT) like '%BRT' or upper(REPSTAT) like
							// '%TKEY%' then 1 else 0 end) balance from "
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from "
							+ " rep_final,  spdclmaster  " + ltcat + "  group by  rollup(cirname)";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("AGRI1:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));
							dmapobj.setTot_pen(reportRst.getString(13));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));
							dmapobj.setTot_pen(reportRst.getString(13));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	public CscpayVO getAllCountersHtDetailsTWO(CscpayVO cscvo) throws SQLException, DatabaseFailureException {
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		
		ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') AND SUBSTR(REG_NO,6,1) = 'H' ";
		

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					
					String query = " select NVL(DIVNAME,'ZTOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) registered ,\r\n" + 
							"sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) totreg,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' then 1 else 0 end) EST_TOBE_SANC,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for payment by consumer' then 1 else 0 end) PAYMENT_PENDING,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected' then 1 else 0 end) REJECTED,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) paid,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end)+ \r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) released ,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt, sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from\r\n" + 
							"rep_final,  spdclmaster     where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') AND SUBSTR(REG_NO,6,1) = 'H' \r\n" + 
							"AND CIRNAME=?   group by  rollup(DIVNAME) ORDER BY DIVNAME";
					
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = " select NVL(SUBNAME,'ZTOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) registered ,\r\n" + 
							"sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) totreg,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' then 1 else 0 end) EST_TOBE_SANC,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for payment by consumer' then 1 else 0 end) PAYMENT_PENDING,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected' then 1 else 0 end) REJECTED,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) paid,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end)+ \r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) released ,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt, sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from\r\n" + 
							"rep_final,  spdclmaster     where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') AND SUBSTR(REG_NO,6,1) = 'H' \r\n" + 
							"AND CIRNAME=? AND DIVNAME=?  group by  rollup(SUBNAME) ORDER BY SUBNAME";
					
					
					reportPStmt = con.prepareStatement(query);

					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = " select NVL(SECNAME,'ZTOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) registered ,\r\n" + 
							"sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) totreg,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' then 1 else 0 end) EST_TOBE_SANC,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for payment by consumer' then 1 else 0 end) PAYMENT_PENDING,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected' then 1 else 0 end) REJECTED,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) paid,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end)+ \r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) released ,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt, sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from\r\n" + 
							"rep_final,  spdclmaster     where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') AND SUBSTR(REG_NO,6,1) = 'H' \r\n" + 
							"AND CIRNAME=? AND DIVNAME=? AND SUBNAME=?  group by  rollup(SECNAME) ORDER BY SECNAME";

					reportPStmt = con.prepareStatement(query);

					

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					

					

					String query = " select NVL(CIRNAME,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) registered ,\r\n" + 
							"sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  AND repstat NOT IN ('REG')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' and sladesc ='Pending for service release' then 1 else 0 end) totreg,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' then 1 else 0 end) EST_TOBE_SANC,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for payment by consumer' then 1 else 0 end) PAYMENT_PENDING,\r\n" + 
							"sum(case when (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected' then 1 else 0 end) REJECTED,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release')  then 1 else 0 end)+\r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) paid,\r\n" + 
							"sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end)+ \r\n" + 
							"sum(case when upper(REPSTAT) ='OB' AND SLADESC = 'Service released' then 1 else 0 end) released ,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt, sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,\r\n" + 
							"sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT,\r\n" + 
							"sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from\r\n" + 
							"rep_final,  spdclmaster     where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY') AND SUBSTR(REG_NO,6,1) = 'H' \r\n" + 
							"  group by  rollup(CIRNAME) ORDER BY CIRNAME";

					reportPStmt = con.prepareStatement(query);
					
					//System.out.println("NEW HT:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));
							dmapobj.setTot_reg_two(reportRst.getString(5));
							dmapobj.setEstimation_san(reportRst.getString(6));
							dmapobj.setPayment_pen(reportRst.getString(7));
							dmapobj.setAppPaid(reportRst.getString(8));
							dmapobj.setAppDeleted(reportRst.getString(9));
							dmapobj.setAppReleased(reportRst.getString(10));
							dmapobj.setTot_crt(reportRst.getString(11));

							dmapobj.setWrt(reportRst.getString(12));
							dmapobj.setBeyondReleased(reportRst.getString(13));
							dmapobj.setTurnKey(reportRst.getString(14));
							/*dmapobj.setTot_brt_turnkey(reportRst.getString(15));
							dmapobj.setTot_pen(reportRst.getString(16));*/

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));
							dmapobj.setTot_reg_two(reportRst.getString(5));
							dmapobj.setEstimation_san(reportRst.getString(6));
							dmapobj.setPayment_pen(reportRst.getString(7));
							dmapobj.setAppPaid(reportRst.getString(8));
							dmapobj.setAppDeleted(reportRst.getString(9));
							dmapobj.setAppReleased(reportRst.getString(10));
							dmapobj.setTot_crt(reportRst.getString(11));

							dmapobj.setWrt(reportRst.getString(12));
							dmapobj.setBeyondReleased(reportRst.getString(13));
							dmapobj.setTurnKey(reportRst.getString(14));
							/*dmapobj.setTot_brt_turnkey(reportRst.getString(15));
							dmapobj.setTot_pen(reportRst.getString(16));
*/
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
		
	}
	
	// AllCounter ht Details

	public CscpayVO getAllCountersHtDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		
		ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(REG_NO)  like '%H%' ";
		// }

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					
					
					String query = "select NVL(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted , sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot, "
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,"
							+ " sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT, "
							// + " sum(case when upper(REPSTAT) like '%WRT' or
							// upper(REPSTAT) like '%BRT' or upper(REPSTAT) like
							// '%TKEY%' then 1 else 0 end) balance from "
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from "
							+ " rep_final,  spdclmaster     where    NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(REG_NO)  like '%H%'  AND cirname=?  group by  rollup(divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = "select NVL(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted , sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot, "
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,"
							+ " sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT, "
							// + " sum(case when upper(REPSTAT) like '%WRT' or
							// upper(REPSTAT) like '%BRT' or upper(REPSTAT) like
							// '%TKEY%' then 1 else 0 end) balance from "
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from "
							+ " rep_final,  spdclmaster     where    NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(REG_NO)  like '%H%'  AND cirname=?  and divname=?  group by  rollup(subname)";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					String query = "select NVL(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted , sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot, "
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,"
							+ " sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT, "
							// + " sum(case when upper(REPSTAT) like '%WRT' or
							// upper(REPSTAT) like '%BRT' or upper(REPSTAT) like
							// '%TKEY%' then 1 else 0 end) balance from "
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from "
							+ " rep_final,  spdclmaster     where    NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(REG_NO)  like '%H%'  AND cirname=?  and divname=?  and subname=?  group by  rollup(secname)";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					

					

					String query = "select NVL(cirname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, "
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted , sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot, "
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' then 1 else 0 end) TWrt,"
							+ " sum(case when upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) TBRT, "
							// + " sum(case when upper(REPSTAT) like '%WRT' or
							// upper(REPSTAT) like '%BRT' or upper(REPSTAT) like
							// '%TKEY%' then 1 else 0 end) balance from "
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) balance from "
							+ " rep_final,  spdclmaster     where    NCPARTCD=seccd   AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(REG_NO)  like '%H%'   group by  rollup(cirname)";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					//System.out.println("ALL:" + query);
					//System.out.println("AGRI3:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));
							dmapobj.setTot_pen(reportRst.getString(13));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));
							dmapobj.setTot_pen(reportRst.getString(13));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// All Webiste

	public CscpayVO getAllWebsiteDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				// String query="SELECT n.reg_no ,n.circle_code
				// ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR','UNKNOWN')
				// circle,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0)
				// FROM new_connections n INNER JOIN cscpay c ON n.reg_no=
				// c.csregno AND c.cscounter=? AND c.cscancelid='N' AND c.CSPRDT
				// BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')
				// AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA'
				// THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN
				// 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR'
				// THEN 7 ELSE 1 END)";
				String query = "SELECT n.reg_no ,n.circle_code ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR',8,'KURNOOL',9,'CRDA','UNKNOWN') circle,n.consumer_name,n.category_supply,nvl(c.csappfee,0),n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0),nvl(c.cstempconchgs,0),nvl(c.csprno,0),csprdt,nvl(c.cgst,0),nvl(c.sgst,0) FROM new_connections n INNER JOIN cscpay c ON n.reg_no= c.csregno AND c.cscounter=? AND c.cscancelid='N' AND c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA' THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR' THEN 7 WHEN 'KURNOOL' THEN 8 WHEN 'CRDA' THEN 9  ELSE 10 END)";
				reportPStmt = con.prepareStatement(query);
				reportPStmt.setString(1, cscvo.getCounterName());

				reportPStmt.setString(2, cscvo.getFrom_date());
				reportPStmt.setString(3, cscvo.getTo_date());
				reportPStmt.setString(4, cscvo.getCircleName());

				reportRst = reportPStmt.executeQuery();
				// String query2="SELECT n.reg_no ,n.circle_code
				// ,m.cirname,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,c.csregno,nvl(sum(c.cssd),0),nvl(sum(c.csdevchg),0),nvl(sum(c.csslchg),0),nvl(sum(c.cstotamt),0),nvl(sum(c.csadvccchgs),0),nvl(sum(c.cssvchg),0),nvl(sum(c.csotherchgs),0)
				// FROM new_connections n,cscpay c,master.spdclmaster m where
				// n.reg_no=c.csregno and c.cscounter=? and
				// n.circle_code=m.circd and m.cirname=? and c.cscancelid='N'
				// and c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND
				// TO_DATE(?,'YYYY-MM-DD') group by
				// n.reg_no,c.csregno,n.circle_code,n.consumer_name,m.cirname,n.category_supply,n.application_fee,n.contracted_load";
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setAppPaid(reportRst.getString(4));
							dmapobj.setAppDeleted(reportRst.getString(5));
							dmapobj.setAppReleased(reportRst.getString(6));
							dmapobj.setBeyondReleased(reportRst.getString(7));
							dmapobj.setTurnKey(reportRst.getString(8));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setAppPaid(reportRst.getString(4));
							dmapobj.setAppDeleted(reportRst.getString(5));
							dmapobj.setAppReleased(reportRst.getString(6));
							dmapobj.setBeyondReleased(reportRst.getString(7));
							dmapobj.setTurnKey(reportRst.getString(8));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);
					;

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// Single Desk

	public CscpayVO getSingleDeskPortalDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				// String query="SELECT n.reg_no ,n.circle_code
				// ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR','UNKNOWN')
				// circle,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0)
				// FROM new_connections n INNER JOIN cscpay c ON n.reg_no=
				// c.csregno AND c.cscounter=? AND c.cscancelid='N' AND c.CSPRDT
				// BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')
				// AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA'
				// THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN
				// 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR'
				// THEN 7 ELSE 1 END)";
				String query = "SELECT n.reg_no ,n.circle_code ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR',8,'KURNOOL',9,'CRDA','UNKNOWN') circle,n.consumer_name,n.category_supply,nvl(c.csappfee,0),n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0),nvl(c.cstempconchgs,0),nvl(c.csprno,0),csprdt,nvl(c.cgst,0),nvl(c.sgst,0) FROM new_connections n INNER JOIN cscpay c ON n.reg_no= c.csregno AND c.cscounter=? AND c.cscancelid='N' AND c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA' THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR' THEN 7 WHEN 'KURNOOL' THEN 8 WHEN 'CRDA' THEN 9  ELSE 10 END)";
				reportPStmt = con.prepareStatement(query);
				reportPStmt.setString(1, cscvo.getCounterName());

				reportPStmt.setString(2, cscvo.getFrom_date());
				reportPStmt.setString(3, cscvo.getTo_date());
				reportPStmt.setString(4, cscvo.getCircleName());

				reportRst = reportPStmt.executeQuery();
				// String query2="SELECT n.reg_no ,n.circle_code
				// ,m.cirname,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,c.csregno,nvl(sum(c.cssd),0),nvl(sum(c.csdevchg),0),nvl(sum(c.csslchg),0),nvl(sum(c.cstotamt),0),nvl(sum(c.csadvccchgs),0),nvl(sum(c.cssvchg),0),nvl(sum(c.csotherchgs),0)
				// FROM new_connections n,cscpay c,master.spdclmaster m where
				// n.reg_no=c.csregno and c.cscounter=? and
				// n.circle_code=m.circd and m.cirname=? and c.cscancelid='N'
				// and c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND
				// TO_DATE(?,'YYYY-MM-DD') group by
				// n.reg_no,c.csregno,n.circle_code,n.consumer_name,m.cirname,n.category_supply,n.application_fee,n.contracted_load";
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setAppPaid(reportRst.getString(4));
							dmapobj.setAppDeleted(reportRst.getString(5));
							dmapobj.setAppReleased(reportRst.getString(6));
							dmapobj.setBeyondReleased(reportRst.getString(7));
							dmapobj.setTurnKey(reportRst.getString(8));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setAppPaid(reportRst.getString(4));
							dmapobj.setAppDeleted(reportRst.getString(5));
							dmapobj.setAppReleased(reportRst.getString(6));
							dmapobj.setBeyondReleased(reportRst.getString(7));
							dmapobj.setTurnKey(reportRst.getString(8));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);
					;

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	
	public CscpayVO getAllServiceReportDetails_New(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String counter = "";
		String complaint_type = "";

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		
		String query = "";
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {


		if (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType()))
		{
			/*complaint_type = " where (A.complaint||A.sub_complaint||'~'||substr(A.complaint_description,1,20)) like '"
					+ cscvo.getComplaintType() + "'";*/
			
			complaint_type=" and  COMPLAINT||SUB_COMPLAINT='"+cscvo.getComplaintType()+"'  ";
			/*System.out.println("complaint_type:"+complaint_type);*/
			
		}
				/*if (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType())) {
					complaint_type = " where (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
							+ cscvo.getComplaintType() + "'";
				}*/
		else {
			complaint_type = "";
		}
		
			if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) 
			{
				if ("DIV".equals(cscvo.getFlag())) {
					query="SELECT NVL(ltrim(S.SUBNAME,'z'),'DISCOM'),NVL(ltrim(S.SECNAME,'z'),'TOTAL') SECNAME,COUNT(A.REG_NO) REGISTERED,COUNT(B.REG_NO) RELEASED_WRT,COUNT(C.REG_NO)RELEASED_BRT,COUNT(D.REG_NO) DELETED,COUNT(E.REG_NO) BALANCE_WRT,COUNT(F.REG_NO) BALANCE_BRT FROM " 
							+ "(select reg_no,CSPARTCD,COMPLAINT,SUB_COMPLAINT,COMPLAINT||SUB_COMPLAINT||'~'||substr(complaint_description,1,20) complaint_description,MESEVA_REF from newcomp_tab )A,"
							+ "(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='WRT')B, "
					        + "(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='BRT')C, "
					        + "(select reg_no,CSPARTCD from newcomp_tab where status='deleted')D, "
					        + "(select reg_no,CSPARTCD from newcomp_tab where status='balance' AND REMARKS='WRT')E, "
					        + "(select cspartcd,reg_no from newcomp_tab where status='balance' AND REMARKS='BRT')F, "
					        + "(SELECT  cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
					        + " WHERE A.CSPARTCD=S.SECCD  "
					        + "AND A.REG_NO=B.REG_NO(+) "
					        + "AND A.REG_NO=C.REG_NO(+) "
					        + "AND A.REG_NO=D.REG_NO(+) "
					        + "AND A.REG_NO=E.REG_NO(+) "
					        + "AND A.REG_NO=F.REG_NO(+) "
					         + complaint_type + "" 
					        + "AND A.MESEVA_REF LIKE 'WEB%' "
					        + "GROUP BY ROLLUP(S.SUBNAME,S.SECNAME) ORDER BY  S.SUBNAME,S.SECNAME";
					            reportPStmt = con.prepareStatement(query);
								/*System.out.println("div_WEB_Qry:"+query);*/
								reportRst = reportPStmt.executeQuery();

					
				
				   }
				   else{
					   query="SELECT NVL(ltrim(S.CIRNAME,'z'),'DISCOM'),NVL(ltrim(S.DIVNAME,'z'),'TOTAL') DIVNAME,COUNT(A.REG_NO) REGISTERED,COUNT(B.REG_NO) RELEASED_WRT,COUNT(C.REG_NO)RELEASED_BRT,COUNT(D.REG_NO) DELETED,COUNT(E.REG_NO) BALANCE_WRT,COUNT(F.REG_NO) BALANCE_BRT FROM "
							      + "(select reg_no,CSPARTCD,COMPLAINT,SUB_COMPLAINT,COMPLAINT||SUB_COMPLAINT||'~'||substr(complaint_description,1,20) complaint_description,MESEVA_REF from newcomp_tab )A, "
							      + "(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='WRT')B, "
							      + "(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='BRT')C, "
							      + "(select reg_no,CSPARTCD from newcomp_tab where status='deleted')D, "
							      + "(select reg_no,CSPARTCD from newcomp_tab where status='balance' AND REMARKS='WRT')E,"
							      + "(select cspartcd,reg_no from newcomp_tab where status='balance' AND REMARKS='BRT')F, "
							      + "(SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER)S "
							      + " WHERE A.CSPARTCD=S.SECCD "
							      + "AND A.REG_NO=B.REG_NO(+) "
							      + "AND A.REG_NO=C.REG_NO(+) "
							      + "AND A.REG_NO=D.REG_NO(+) "
							      + "AND A.REG_NO=E.REG_NO(+) "
							      + "AND A.REG_NO=F.REG_NO(+) "
							      + complaint_type + ""
							      + "AND A.MESEVA_REF LIKE 'WEB%' "
							      + "GROUP BY ROLLUP(S.CIRNAME,DIVNAME) order by S.CIRNAME,DIVNAME";
										reportPStmt = con.prepareStatement(query);
										/*System.out.println("cir_WEB_Qry:"+query);*/
										reportRst = reportPStmt.executeQuery();
										
				   }
				
				//counter = " where  (A.MESEVA_REF LIKE 'WEB%' ) ";
			} else 
				if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName()))
			{
					if ("DIV".equals(cscvo.getFlag())) {
						query="SELECT  NVL(ltrim(S.SUBNAME,'z'),'DISCOM'),NVL(ltrim(S.secname,'z'),'TOTAL') secname,COUNT(A.REG_NO) REGISTERED,COUNT(B.REG_NO) RELEASED_WRT,COUNT(C.REG_NO)RELEASED_BRT,COUNT(D.REG_NO) DELETED,COUNT(E.REG_NO) BALANCE_WRT,COUNT(F.REG_NO) BALANCE_BRT FROM " 
								+ "(select reg_no,CSPARTCD,COMPLAINT,SUB_COMPLAINT,COMPLAINT||SUB_COMPLAINT||'~'||substr(complaint_description,1,20) complaint_description,MESEVA_REF from newcomp_tab )A,"
								+ "(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='WRT')B, "
						        + "(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='BRT')C, "
						        + "(select reg_no,CSPARTCD from newcomp_tab where status='deleted')D, "
						        + "(select reg_no,CSPARTCD from newcomp_tab where status='balance' AND REMARKS='WRT')E, "
						        + "(select cspartcd,reg_no from newcomp_tab where status='balance' AND REMARKS='BRT')F, "
						        + "(SELECT  cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
						        + "WHERE A.CSPARTCD=S.SECCD "  
						        + "AND A.REG_NO=B.REG_NO(+) "
						        + "AND A.REG_NO=C.REG_NO(+) "
						        + "AND A.REG_NO=D.REG_NO(+) "
						        + "AND A.REG_NO=E.REG_NO(+) "
						        + "AND A.REG_NO=F.REG_NO(+) "
						         + complaint_type + "" 
						        + "AND A.MESEVA_REF LIKE 'MEE%' "
						        + "GROUP BY ROLLUP(S.SUBNAME,S.SECNAME) ORDER BY  S.SUBNAME,S.SECNAME";
						            reportPStmt = con.prepareStatement(query);
									/*System.out.println("div_MEE_Qry:"+query);*/
									reportRst = reportPStmt.executeQuery();
					   }
					   else{
				query="SELECT NVL(ltrim(S.CIRNAME,'z'),'DISCOM'),NVL(ltrim(S.DIVNAME,'z'),'TOTAL') DIVNAME,COUNT(A.REG_NO) REGISTERED,COUNT(B.REG_NO) RELEASED_WRT,COUNT(C.REG_NO)RELEASED_BRT,COUNT(D.REG_NO) DELETED,COUNT(E.REG_NO) BALANCE_WRT,COUNT(F.REG_NO) BALANCE_BRT FROM  "
	                + "(select reg_no,CSPARTCD,COMPLAINT,SUB_COMPLAINT,COMPLAINT||SUB_COMPLAINT||'~'||substr(complaint_description,1,20) complaint_description,MESEVA_REF from newcomp_tab )A, "
	                + "(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='WRT')B, "
	                + "(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='BRT')C, "
	                + "(select reg_no,CSPARTCD from newcomp_tab where status='deleted')D, "
	                + "(select reg_no,CSPARTCD from newcomp_tab where status='balance' AND REMARKS='WRT')E, "
	                + "(select cspartcd,reg_no from newcomp_tab where status='balance' AND REMARKS='BRT')F, "
	                + "(SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER)S "
	                + "WHERE A.CSPARTCD=S.SECCD "
	                + "AND A.REG_NO=B.REG_NO(+) "
	                + "AND A.REG_NO=C.REG_NO(+) "
	                + "AND A.REG_NO=D.REG_NO(+) "
	                + "AND A.REG_NO=E.REG_NO(+) "
	                + "AND A.REG_NO=F.REG_NO(+) "
	                +  complaint_type  + ""
	                + "AND A.MESEVA_REF LIKE 'MEE%' "
	                + "GROUP BY ROLLUP (S.CIRNAME,DIVNAME) order by S.CIRNAME,DIVNAME";
	            reportPStmt = con.prepareStatement(query);
				/*System.out.println("CIR_MEESEVA_Qry:"+query);*/
				reportRst = reportPStmt.executeQuery();
				//counter = " where  (A.MESEVA_REF LIKE 'MEE%' ) ";
			}
			}else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) 
			{
				if ("DIV".equals(cscvo.getFlag())) {
					query="SELECT NVL(ltrim(S.SUBNAME,'z'),'DISCOM'),NVL(ltrim(S.secname,'z'),'TOTAL') secname,COUNT(A.REG_NO) REGISTERED,COUNT(B.REG_NO) RELEASED_WRT,COUNT(C.REG_NO)RELEASED_BRT,COUNT(D.REG_NO) DELETED,COUNT(E.REG_NO) BALANCE_WRT,COUNT(F.REG_NO) BALANCE_BRT FROM " 
							+ "(select reg_no,CSPARTCD,COMPLAINT,SUB_COMPLAINT,COMPLAINT||SUB_COMPLAINT||'~'||substr(complaint_description,1,20) complaint_description,MESEVA_REF from newcomp_tab )A,"
							+ "(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='WRT')B, "
					        + "(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='BRT')C, "
					        + "(select reg_no,CSPARTCD from newcomp_tab where status='deleted')D, "
					        + "(select reg_no,CSPARTCD from newcomp_tab where status='balance' AND REMARKS='WRT')E, "
					        + "(select cspartcd,reg_no from newcomp_tab where status='balance' AND REMARKS='BRT')F, "
					        + "(SELECT unique cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
					        + "WHERE A.CSPARTCD=S.SECCD "
					        + "AND A.REG_NO=B.REG_NO(+) "
					        + "AND A.REG_NO=C.REG_NO(+) "
					        + "AND A.REG_NO=D.REG_NO(+) "
					        + "AND A.REG_NO=E.REG_NO(+) "
					        + "AND A.REG_NO=F.REG_NO(+) "
					         + complaint_type + "" 
					        + "AND A.MESEVA_REF LIKE 'PRAJA%' "
					        + "GROUP BY  ROLLUP(S.SUBNAME,S.SECNAME) ORDER BY  S.SUBNAME,S.SECNAME";
					            reportPStmt = con.prepareStatement(query);
								/*System.out.println("div_GSWS_Qry:"+query);*/
								reportRst = reportPStmt.executeQuery();
					
				   }
				   else{
				query="SELECT NVL(ltrim(S.CIRNAME,'z'),'DISCOM'),NVL(ltrim(S.DIVNAME,'z'),'TOTAL') DIVNAME,COUNT(A.REG_NO) REGISTERED,COUNT(B.REG_NO) RELEASED_WRT,COUNT(C.REG_NO)RELEASED_BRT,COUNT(D.REG_NO) DELETED,COUNT(E.REG_NO) BALANCE_WRT,COUNT(F.REG_NO) BALANCE_BRT FROM " 
			+ "(select reg_no,CSPARTCD,COMPLAINT,SUB_COMPLAINT,COMPLAINT||SUB_COMPLAINT||'~'||substr(complaint_description,1,20) complaint_description,MESEVA_REF from newcomp_tab )A,"
			+ "(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='WRT')B, "
	        + "(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='BRT')C, "
	        + "(select reg_no,CSPARTCD from newcomp_tab where status='deleted')D, "
	        + "(select reg_no,CSPARTCD from newcomp_tab where status='balance' AND REMARKS='WRT')E, "
	        + "(select cspartcd,reg_no from newcomp_tab where status='balance' AND REMARKS='BRT')F, "
	        + "(SELECT unique cirname,divname,SECCD FROM SPDCLMASTER)S "
	        + "WHERE A.CSPARTCD=S.SECCD "
	        + "AND A.REG_NO=B.REG_NO(+) "
	        + "AND A.REG_NO=C.REG_NO(+) "
	        + "AND A.REG_NO=D.REG_NO(+) "
	        + "AND A.REG_NO=E.REG_NO(+) "
	        + "AND A.REG_NO=F.REG_NO(+) "
	         + complaint_type + "" 
	        + "AND A.MESEVA_REF LIKE 'PRAJA%' "
	        + "GROUP BY ROLLUP(S.CIRNAME,DIVNAME) order by S.CIRNAME,DIVNAME";
	            reportPStmt = con.prepareStatement(query);
				/*System.out.println("CIR_GSWS_Qry:"+query);*/

				reportRst = reportPStmt.executeQuery();
				//counter = " where ((A.MESEVA_REF LIKE 'PRAJA%' ) ";
			} 
			}
			else {
				if ("DIV".equals(cscvo.getFlag())) {
					query="SELECT NVL(ltrim(S.SUBNAME,'z'),'DISCOM'),NVL(ltrim(S.SECNAME,'z'),'TOTAL') SECNAME,COUNT(A.REG_NO) REGISTERED,COUNT(B.REG_NO) RELEASED_WRT,COUNT(C.REG_NO)RELEASED_BRT,COUNT(D.REG_NO) DELETED,COUNT(E.REG_NO) BALANCE_WRT,COUNT(F.REG_NO) BALANCE_BRT FROM "+ 
							"(select reg_no,CSPARTCD,COMPLAINT,SUB_COMPLAINT,COMPLAINT||SUB_COMPLAINT||'~'||substr(complaint_description,1,20) complaint_description from newcomp_tab )A,"+ 
							"(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='WRT')B,"+ 
							"(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='BRT')C,"+ 
							"(select reg_no,CSPARTCD from newcomp_tab where status='deleted')D,"+ 
							"(select reg_no,CSPARTCD from newcomp_tab where status='balance' AND REMARKS='WRT')E,"+ 
							"(select cspartcd,reg_no from newcomp_tab where status='balance' AND REMARKS='BRT')F,"+ 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"+ 
							" WHERE A.CSPARTCD=S.SECCD  "+
							" AND A.REG_NO=B.REG_NO(+)"+ 
							" AND A.REG_NO=C.REG_NO(+)"+ 
							" AND A.REG_NO=D.REG_NO(+)"+ 
							" AND A.REG_NO=E.REG_NO(+)"+
							" AND A.REG_NO=F.REG_NO(+)"+ 
							 complaint_type + "" 
							+ " GROUP BY ROLLUP(S.SUBNAME,S.SECNAME) ORDER BY  S.SUBNAME,S.SECNAME";
					 reportPStmt = con.prepareStatement(query);
						
						/*reportPStmt.setString(1, cscvo.getCircle());
						reportPStmt.setString(2, cscvo.getDivision());*/
						 
						/*System.out.println("All_Div_Qry:"+query);*/
						reportRst = reportPStmt.executeQuery();		
					
				   }
				   else{
				query="SELECT NVL(ltrim(S.CIRNAME,'z'),'DISCOM'),NVL(ltrim(S.DIVNAME,'z'),'TOTAL') DIVNAME,COUNT(A.REG_NO) REGISTERED,COUNT(B.REG_NO) RELEASED_WRT,COUNT(C.REG_NO)RELEASED_BRT,COUNT(D.REG_NO) DELETED,COUNT(E.REG_NO) BALANCE_WRT,COUNT(F.REG_NO) BALANCE_BRT FROM "+ 
	                  "(select reg_no,CSPARTCD,COMPLAINT,SUB_COMPLAINT,COMPLAINT||SUB_COMPLAINT||'~'||substr(complaint_description,1,20) complaint_description from newcomp_tab )A,"+ 
	                  "(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='WRT')B,"+ 
	                  "(select REG_NO,CSPARTCD FROM newcomp_tab where status='released' AND REMARKS='BRT')C,"+ 
	                  "(select reg_no,CSPARTCD from newcomp_tab where status='deleted')D,"+ 
	                  "(select reg_no,CSPARTCD from newcomp_tab where status='balance' AND REMARKS='WRT')E,"+ 
	                  "(select cspartcd,reg_no from newcomp_tab where status='balance' AND REMARKS='BRT')F,"+ 
	                  "(SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER)S"+ 
	                  " WHERE A.CSPARTCD=S.SECCD"+ 
	                  " AND A.REG_NO=B.REG_NO(+)"+ 
	                  " AND A.REG_NO=C.REG_NO(+)"+ 
	                  " AND A.REG_NO=D.REG_NO(+)"+ 
	                  " AND A.REG_NO=E.REG_NO(+)"+
	                  " AND A.REG_NO=F.REG_NO(+)"+ 
	                   complaint_type + "" 
	                  + " GROUP BY ROLLUP(S.CIRNAME,DIVNAME) order by S.CIRNAME,DIVNAME";
				
				 reportPStmt = con.prepareStatement(query);
				 
				 
				
				/*reportPStmt.setString(1, cscvo.getCircle());
				reportPStmt.setString(2, cscvo.getDivision());*/
				 
				/*System.out.println("All_Qry:"+query);*/
				reportRst = reportPStmt.executeQuery();
				//counter = "";
			}
		}
	
		
						if (reportRst != null) {

					while (reportRst.next()) {
						CscpayVO cscvoobj = new CscpayVO();
						cscvoobj.setCircle(reportRst.getString(1));
						cscvoobj.setDivision(reportRst.getString(2));
						cscvoobj.setRegistered(reportRst.getString(3));
						//cscvoobj.setCompleted(reportRst.getString(3));
						
						//cscvoobj.setBalance(reportRst.getString(6));
						cscvoobj.setReleased_Wrt(reportRst.getString(4));
						cscvoobj.setReleased_Brt(reportRst.getString(5));
						cscvoobj.setDeleted(reportRst.getString(6));
						cscvoobj.setBalance_Wrt(reportRst.getString(7));
						cscvoobj.setBalance_Brt(reportRst.getString(8));

						cscvoobj.setCircleCode(reportRst.getString(7));

						// cscmap.put(reportRst.getString(1), cscvoobj);
						dashList.add(cscvoobj);

					}

					// cscvo.setCscpaymap(cscmap);
					cscvo.setList(dashList);

					
					

			}
			}else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		}

		finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	}
	
	public CscpayVO getAverageDaysTakenForServiceReleaseScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		/*Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String counter = "";
		String complaint_type = "";*/
		String Executiontype = "";
		String Cattype = "";
		
		
		
	
		
		//System.out.println("cat:"+cscvo.getCattype());
		//System.out.println("exe:"+cscvo.getExecutiontype());
		
		if (cscvo.getExecutiontype().equalsIgnoreCase("Extension")) {
			Executiontype="and NVL(ESTSTATUS,'03')='02' ";
			
		}
       if (cscvo.getExecutiontype().equalsIgnoreCase("Simplified")) {
    	   Executiontype="and NVL(ESTSTATUS,'03')='01' ";
		
       }
        if (cscvo.getExecutiontype().equalsIgnoreCase("All")) {
        	Executiontype="";
       
        
        }
        if ("LT1".equalsIgnoreCase(cscvo.getCattype())) {
			Cattype="AND R.CAT='LT1'";
		}else
			if ("LT2".equalsIgnoreCase(cscvo.getCattype())) {
				Cattype="AND R.CAT='LT2'";
			}else
				if ("LT3".equalsIgnoreCase(cscvo.getCattype())) {
					Cattype="AND R.CAT='LT3'";
				}else
					if ("LT4".equalsIgnoreCase(cscvo.getCattype())) {
						Cattype="AND R.CAT='LT4'";
					}else
						if ("LT5".equalsIgnoreCase(cscvo.getCattype())) {
							Cattype="AND R.CAT='LT5'";
						}else
							if ("HT".equalsIgnoreCase(cscvo.getCattype())) {
								Cattype="AND R.CAT='HT'";
							}
							else if ("ALL".equalsIgnoreCase(cscvo.getCattype())) {
								Cattype="";
							}
		
        

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		String query = "";
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				 	
				if ("DIV".equals(cscvo.getFlag())) {
					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						query="SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CAT,R.CONTRACTED_LOAD,R.REG_DATE,\r\n" + 
								"R.PHONE_NO ,R.Simplified_Extension,R.PAYMENT_DATE,R.SUPPLY_RELEASE_DATE,R.REL_NOOFDAYS,R.USCNO,A.AVG_DAYS FROM\r\n" + 
								"(SELECT REG_NO,CEIL(SUM(NVL(REL_NOOFDAYS,0))/COUNT(REG_NO)) AVG_DAYS FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') AND NVL(EXECUTION_TYPE,'NA') <> 'Turnkey'  and category_supply not in ('5A1','5A2') GROUP BY REG_NO)A,\r\n" + 
								"(SELECT CONSUMER_NAME,NCPARTCD,REG_NO,GRPAPPNUM,VOLTAGE,CONTRACTED_LOAD,REG_DATE,\r\n" + 
								"PHONE_NO ,ESTSTATUS,(CASE WHEN(NVL(ESTSTATUS,'03')='01') THEN 'Simplified' ELSE 'Extension' END)Simplified_Extension,(CASE WHEN (GRPAPPNUM IS NULL) THEN MAXPRDT ELSE GREATEST(GRP_PRDT,MAXPRDT) END ) PAYMENT_DATE,\r\n" + 
								"SUPPLY_RELEASE_DATE,REL_NOOFDAYS,USCNO,(CASE WHEN (SUBSTR(REG_NO,6,1) IN ('N','S')) THEN 'LT' ELSE 'HT' END)SCTYPE,(CASE WHEN (SUBSTR(REG_NO,6,1) IN ('N','S')) THEN 'LT' ELSE 'HT' END)||SUBSTR(CATEGORY_SUPPLY,1,1) CAT  FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')) R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER) S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND A.REG_NO=R.REG_NO(+) "+ Executiontype +" and S.SUBNAME=? and s.secname=? \r\n" + 
								" "+ Cattype +" ";
					
					
					
						reportPStmt = con.prepareStatement(query);
						// reportPStmt.setString(1, cscvo.getCounterName());

						 reportPStmt.setString(1, cscvo.getFrom_date());
						 reportPStmt.setString(2, cscvo.getTo_date());
						 reportPStmt.setString(3, cscvo.getFrom_date());
						 reportPStmt.setString(4, cscvo.getTo_date());
						reportPStmt.setString(5, cscvo.getCircle());
						/*reportPStmt.setString(5, cscvo.getSubDiv());
						reportPStmt.setString(6, cscvo.getSec());*/
						reportPStmt.setString(6, cscvo.getDivision());
						//System.out.println("test1_div:"+query);
						
						/*System.out.println("cir1:"+cscvo.getCircle());
						System.out.println("div1:"+cscvo.getDivision());*/

						reportRst = reportPStmt.executeQuery();

					}else
					{
					query="SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CAT,R.CONTRACTED_LOAD,R.REG_DATE,\r\n" + 
							"R.PHONE_NO ,R.Simplified_Extension,R.PAYMENT_DATE,R.SUPPLY_RELEASE_DATE,R.REL_NOOFDAYS,R.USCNO,A.AVG_DAYS FROM\r\n" + 
							"(SELECT REG_NO,CEIL(SUM(NVL(REL_NOOFDAYS,0))/COUNT(REG_NO)) AVG_DAYS FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') AND NVL(EXECUTION_TYPE,'NA') <> 'Turnkey'  and category_supply not in ('5A1','5A2') GROUP BY REG_NO)A,\r\n" + 
							"(SELECT CONSUMER_NAME,NCPARTCD,REG_NO,GRPAPPNUM,VOLTAGE,CONTRACTED_LOAD,REG_DATE,\r\n" + 
							"PHONE_NO ,ESTSTATUS,(CASE WHEN(NVL(ESTSTATUS,'03')='01') THEN 'Simplified' ELSE 'Extension' END)Simplified_Extension,(CASE WHEN (GRPAPPNUM IS NULL) THEN MAXPRDT ELSE GREATEST(GRP_PRDT,MAXPRDT) END ) PAYMENT_DATE,\r\n" + 
							"SUPPLY_RELEASE_DATE,REL_NOOFDAYS,USCNO,(CASE WHEN (SUBSTR(REG_NO,6,1) IN ('N','S')) THEN 'LT' ELSE 'HT' END)SCTYPE,(CASE WHEN (SUBSTR(REG_NO,6,1) IN ('N','S')) THEN 'LT' ELSE 'HT' END)||SUBSTR(CATEGORY_SUPPLY,1,1) CAT  FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')) R,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER) S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD AND A.REG_NO=R.REG_NO(+) "+ Executiontype +" and S.SUBNAME=?   \r\n" + 
							" "+ Cattype +" ";
				
				
				
					reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					 reportPStmt.setString(1, cscvo.getFrom_date());
					 reportPStmt.setString(2, cscvo.getTo_date());
					 reportPStmt.setString(3, cscvo.getFrom_date());
					 reportPStmt.setString(4, cscvo.getTo_date());
					reportPStmt.setString(5, cscvo.getCircle());
					/*reportPStmt.setString(5, cscvo.getSubDiv());
					reportPStmt.setString(6, cscvo.getSec());*/
					//reportPStmt.setString(6, cscvo.getDivision());
					//System.out.println("test2_div:"+query);
					
					/*System.out.println("cir1:"+cscvo.getCircle());
					System.out.println("div1:"+cscvo.getDivision());*/

					reportRst = reportPStmt.executeQuery();
					}
				}
				
				else	
					
											
					
				{
					if ("TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
					
					query="SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CAT,R.CONTRACTED_LOAD,R.REG_DATE,\r\n" + 
							"R.PHONE_NO ,R.Simplified_Extension,R.PAYMENT_DATE,R.SUPPLY_RELEASE_DATE,R.REL_NOOFDAYS,R.USCNO,A.AVG_DAYS FROM\r\n" + 
							"(SELECT REG_NO,CEIL(SUM(NVL(REL_NOOFDAYS,0))/COUNT(REG_NO)) AVG_DAYS FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') AND NVL(EXECUTION_TYPE,'NA') <> 'Turnkey'  and category_supply not in ('5A1','5A2') GROUP BY REG_NO)A,\r\n" + 
							"(SELECT CONSUMER_NAME,NCPARTCD,REG_NO,GRPAPPNUM,VOLTAGE,CONTRACTED_LOAD,REG_DATE,\r\n" + 
							"PHONE_NO ,ESTSTATUS,(CASE WHEN(NVL(ESTSTATUS,'03')='01') THEN 'Simplified' ELSE 'Extension' END)Simplified_Extension,(CASE WHEN (GRPAPPNUM IS NULL) THEN MAXPRDT ELSE GREATEST(GRP_PRDT,MAXPRDT) END ) PAYMENT_DATE,\r\n" + 
							"SUPPLY_RELEASE_DATE,REL_NOOFDAYS,USCNO,(CASE WHEN (SUBSTR(REG_NO,6,1) IN ('N','S')) THEN 'LT' ELSE 'HT' END)SCTYPE,(CASE WHEN (SUBSTR(REG_NO,6,1) IN ('N','S')) THEN 'LT' ELSE 'HT' END)||SUBSTR(CATEGORY_SUPPLY,1,1) CAT  FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')) R,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER) S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD AND A.REG_NO=R.REG_NO(+) "+ Executiontype +" and S.CIRNAME=?    "+
							 " " + Cattype + " ";
					reportPStmt = con.prepareStatement(query);
					 reportPStmt.setString(1, cscvo.getFrom_date());
					 reportPStmt.setString(2, cscvo.getTo_date());
					 reportPStmt.setString(3, cscvo.getFrom_date());
					 reportPStmt.setString(4, cscvo.getTo_date());
					 reportPStmt.setString(5, cscvo.getCircle());
					//reportPStmt.setString(6, cscvo.getDivision());
					
					/*System.out.println("avg_passfromdate_circle:"+cscvo.getFrom_date());
					System.out.println("avg_pastodate_circle:"+cscvo.getTo_date());*/
						/*System.out.println("cir2 isssss:"+cscvo.getCircle());*/
						//System.out.println("div2:"+cscvo.getDivision());
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(4, cscvo.getCircleName());
					//System.out.println("test1_cir :"+query);
					reportRst = reportPStmt.executeQuery();
				}
					else
					{
						query="SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CAT,R.CONTRACTED_LOAD,R.REG_DATE,\r\n" + 
								"R.PHONE_NO ,R.Simplified_Extension,R.PAYMENT_DATE,R.SUPPLY_RELEASE_DATE,R.REL_NOOFDAYS,R.USCNO,A.AVG_DAYS FROM\r\n" + 
								"(SELECT REG_NO,CEIL(SUM(NVL(REL_NOOFDAYS,0))/COUNT(REG_NO)) AVG_DAYS FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') AND NVL(EXECUTION_TYPE,'NA') <> 'Turnkey'  and category_supply not in ('5A1','5A2') GROUP BY REG_NO)A,\r\n" + 
								"(SELECT CONSUMER_NAME,NCPARTCD,REG_NO,GRPAPPNUM,VOLTAGE,CONTRACTED_LOAD,REG_DATE,\r\n" + 
								"PHONE_NO ,ESTSTATUS,(CASE WHEN(NVL(ESTSTATUS,'03')='01') THEN 'Simplified' ELSE 'Extension' END)Simplified_Extension,(CASE WHEN (GRPAPPNUM IS NULL) THEN MAXPRDT ELSE GREATEST(GRP_PRDT,MAXPRDT) END ) PAYMENT_DATE,\r\n" + 
								"SUPPLY_RELEASE_DATE,REL_NOOFDAYS,USCNO,(CASE WHEN (SUBSTR(REG_NO,6,1) IN ('N','S')) THEN 'LT' ELSE 'HT' END)SCTYPE,(CASE WHEN (SUBSTR(REG_NO,6,1) IN ('N','S')) THEN 'LT' ELSE 'HT' END)||SUBSTR(CATEGORY_SUPPLY,1,1) CAT  FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')) R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER) S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND A.REG_NO=R.REG_NO(+) "+ Executiontype +" and S.CIRNAME=? AND S.DIVNAME=? "+
								 " " + Cattype + " ";
						reportPStmt = con.prepareStatement(query);
						 reportPStmt.setString(1, cscvo.getFrom_date());
						 reportPStmt.setString(2, cscvo.getTo_date());
						 reportPStmt.setString(3, cscvo.getFrom_date());
						 reportPStmt.setString(4, cscvo.getTo_date());
						 reportPStmt.setString(5, cscvo.getCircle());
						reportPStmt.setString(6, cscvo.getDivision());
						
						
						//System.out.println("test2_cir :"+query);
						reportRst = reportPStmt.executeQuery();
					}
				}
			
				 
			
				
			
				
//DISCOM_TOTAL				
					  			
				
				
									
				
				if (reportRst != null) {

					while (reportRst.next()) {
						CscpayVO cscvoobj = new CscpayVO();                  
						cscvoobj.setCircleName(reportRst.getString(1));
						cscvoobj.setDivision(reportRst.getString(2));
						cscvoobj.setSubDiv(reportRst.getString(3));
						cscvoobj.setSec(reportRst.getString(4));
						cscvoobj.setCunsu_name(reportRst.getString(5));
						cscvoobj.setReg_no(reportRst.getString(6));
						cscvoobj.setSapSno(reportRst.getString(7));
						cscvoobj.setVolt(reportRst.getString(8));
						cscvoobj.setCat(reportRst.getString(9));
						cscvoobj.setContractedLoad(reportRst.getString(10));
						cscvoobj.setRegDate(reportRst.getString(11));
						cscvoobj.setPhonenumber(reportRst.getString(12));
						cscvoobj.setEstatus(reportRst.getString(13));
						cscvoobj.setRegDate(reportRst.getString(14));
						cscvoobj.setSupply_Rel_date(reportRst.getString(15));
						cscvoobj.setNoOfDays(reportRst.getString(16));
						cscvoobj.setUscNumber(reportRst.getString(17));
						cscvoobj.setAvgDays(reportRst.getString(18));
						
						
						
						
						dashList.add(cscvoobj);

					}

					// cscvo.setCscpaymap(cscmap);
					cscvo.setList(dashList);

					}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
		
	}
	
	public CscpayVO getAverageDaysTakenForServiceReleaseDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {
		

		

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		/*Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String counter = "";
		String complaint_type = "";
		
		*/
		String Executiontype = "";
		String Cattype = "";
		
		
		
	
		
		//System.out.println("cat:"+cscvo.getCattype());
		//System.out.println("exe:"+cscvo.getExecutiontype());
		
		if (cscvo.getExecutiontype().equalsIgnoreCase("Extension")) {
			Executiontype="where NVL(ESTSTATUS,'03')='02' and";
			
			
			
				
		}
       if (cscvo.getExecutiontype().equalsIgnoreCase("Simplified")) {
    	   Executiontype="where NVL(ESTSTATUS,'03')='01' and";
		
       }
        if (cscvo.getExecutiontype().equalsIgnoreCase("All")) {
        	Executiontype="where";
       
        
        }
        if ("LT1".equalsIgnoreCase(cscvo.getCattype())) {
			Cattype="AND R.CAT='LT1'";
		}else
			if ("LT2".equalsIgnoreCase(cscvo.getCattype())) {
				Cattype="AND R.CAT='LT2'";
			}else
				if ("LT3".equalsIgnoreCase(cscvo.getCattype())) {
					Cattype="AND R.CAT='LT3'";
				}else
					if ("LT4".equalsIgnoreCase(cscvo.getCattype())) {
						Cattype="AND R.CAT='LT4'";
					}else
						if ("LT5".equalsIgnoreCase(cscvo.getCattype())) {
							Cattype="AND R.CAT='LT5'";
						}else
							if ("HT2".equalsIgnoreCase(cscvo.getCattype())) {
								Cattype="AND R.CAT='HT2'";
							}
							else if ("ALL".equalsIgnoreCase(cscvo.getCattype())) {
								Cattype="";
							}
		
        
        
        


		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		String query = "";
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				
				if ("DIV".equals(cscvo.getFlag())) {
					query="SELECT NVL(S.SUBNAME,'Discom_Total'),NVL(S.SECNAME,'TOTAL'),CEIL(SUM(NVL(REL_NOOFDAYS,0))/COUNT(R.REG_NO)) AVG_DAYS,COUNT(R.REG_NO) TOT_SCS FROM\r\n" + 
							"(select reg_no,REL_NOOFDAYS,ncpartcd,(CASE WHEN (SUBSTR(REG_NO,6,1) IN ('N','S')) THEN 'LT' ELSE 'HT' END)SCTYPE,(CASE WHEN (SUBSTR(REG_NO,6,1) IN ('N','S')) THEN 'LT' ELSE 'HT' END)||SUBSTR(CATEGORY_SUPPLY,1,1) CAT from rep_final "+Executiontype+"  NVL(EXECUTION_TYPE,'NA') <> 'Turnkey'  and category_supply not in ('5A1','5A2')\r\n" + 
							"AND SUPPLY_RELEASE_DATE BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD'))R,\r\n" + 
							"(SELECT  CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME, SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD AND CIRNAME=? and DIVNAME=?   \r\n" + 
							""+Cattype+"\r\n" +
							"GROUP BY ROLLUP (S.SUBNAME,S.SECNAME) order by SUBNAME,SECNAME";
				
					reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					 reportPStmt.setString(1, cscvo.getFrom_date());
					 reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());
					//System.out.println("div:avg:main:"+query);
					
					//System.out.println("frodate1:"+cscvo.getFrom_date());
					//System.out.println("todate1:"+cscvo.getTo_date());
					//System.out.println("circle_avg _days:"+cscvo.getCircle());
					//System.out.println("Div_avg _days:"+cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
				} else {
					query="SELECT NVL(S.CIRNAME,'Discom_Total'),NVL(S.DIVNAME,'TOTAL'),CEIL(SUM(NVL(REL_NOOFDAYS,0))/COUNT(R.REG_NO)) AVG_DAYS,COUNT(R.REG_NO) TOT_SCS FROM\r\n" + 
							"(select reg_no,REL_NOOFDAYS,ncpartcd,(CASE WHEN (SUBSTR(REG_NO,6,1) IN ('N','S')) THEN 'LT' ELSE 'HT' END)SCTYPE,(CASE WHEN (SUBSTR(REG_NO,6,1) IN ('N','S')) THEN 'LT' ELSE 'HT' END)||SUBSTR(CATEGORY_SUPPLY,1,1) CAT from rep_final "+Executiontype+" NVL(EXECUTION_TYPE,'NA') <> 'Turnkey'  and category_supply not in ('5A1','5A2')\r\n" + 
							"AND SUPPLY_RELEASE_DATE BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD'))R,\r\n" + 
							"(SELECT  CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME, SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD\r\n" + 
							""+Cattype+"\r\n" + 
							"GROUP BY ROLLUP (S.CIRNAME,S.DIVNAME) order by cirname";
					reportPStmt = con.prepareStatement(query);
					 reportPStmt.setString(1, cscvo.getFrom_date());
					 reportPStmt.setString(2, cscvo.getTo_date());
					// System.out.println("frodate2:"+cscvo.getFrom_date());
						//System.out.println("todate2:"+cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(4, cscvo.getCircleName());
					//System.out.println("circle:avg1:main:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				
				if (reportRst != null) {

					while (reportRst.next()) {
						CscpayVO cscvoobj = new CscpayVO();
						cscvoobj.setCircle(reportRst.getString(1));
						cscvoobj.setDivision(reportRst.getString(2));
						cscvoobj.setRegistered(reportRst.getString(3));
						cscvoobj.setCompleted(reportRst.getString(4));
						//cscvoobj.setDeleted(reportRst.getString(5));
						//cscvoobj.setBalance(reportRst.getString(6));

						//cscvoobj.setCircleCode(reportRst.getString(7));

						// cscmap.put(reportRst.getString(1), cscvoobj);
						dashList.add(cscvoobj);

					}

					// cscvo.setCscpaymap(cscmap);
					cscvo.setList(dashList);

					}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	}

	//getAverageDaysTakenInApprovalProcessDetails  abstract method
	public CscpayVO getAverageDaysTakenInApprovalProcessDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		
     
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";
		String scsType = "";
		String TYPE = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		if ("LT".equalsIgnoreCase(cscvo.getType())) {
			TYPE="";	
		}
		if ("HT".equalsIgnoreCase(cscvo.getType())) {
			
			TYPE="";
		}
         if ("ALL".equalsIgnoreCase(cscvo.getType())) {
			
			TYPE="";
		}
		
	

		

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					 
					String query="";
                    
					

                    reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query="";
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {
					 
					String query="";
					
					
					
					 reportPStmt = con.prepareStatement(query);
						
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();
					

				} else {
					
					
					String query="";
					 
					

					reportPStmt = con.prepareStatement(query);
					System.out.println("avg2_cir_abs:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAelogin(reportRst.getString(2));
							dmapobj.setDeelogin(reportRst.getString(3));
							dmapobj.setEelogin(reportRst.getString(4));

							dmapobj.setDeecomml(reportRst.getString(5));
							dmapobj.setEetlogin(reportRst.getString(6));
							 dmapobj.setSelogin(reportRst.getString(7));

							 dmapobj.setCgmlogin(reportRst.getString(8));
							 /*dmapobj.setSE_REG(reportRst.getString(9));
							 dmapobj.setCORP_WBS(reportRst.getString(10));
							 dmapobj.setCORP_REG(reportRst.getString(11));
							 dmapobj.setTOT_WBS(reportRst.getString(12));
							 dmapobj.setTOT_REG(reportRst.getString(13));*/
							//dmapobj.setTot_pen(reportRst.getString(7));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAelogin(reportRst.getString(2));
							dmapobj.setDeelogin(reportRst.getString(3));
							dmapobj.setEelogin(reportRst.getString(4));

							dmapobj.setDeecomml(reportRst.getString(5));
							dmapobj.setEetlogin(reportRst.getString(6));
							 dmapobj.setSelogin(reportRst.getString(7));

							 dmapobj.setCgmlogin(reportRst.getString(8));
							/*dmapobj.setSE_REG(reportRst.getString(9));
							dmapobj.setCORP_WBS(reportRst.getString(10));
							dmapobj.setCORP_REG(reportRst.getString(11));
							dmapobj.setTOT_WBS(reportRst.getString(12));
							dmapobj.setTOT_REG(reportRst.getString(13));*/
							
							
							//dmapobj.setTot_pen(reportRst.getString(7));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
		
	}
	
	public CscpayVO getAverageDaysTakenInApprovalProcessScsDetails(CscpayVO cscvo) throws Exception {




		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";
		String TYPE = "";
		String Estimate = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {
				
				if ("LT".equalsIgnoreCase(cscvo.getType())) {
					TYPE="";	
				
				}else
				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					
					TYPE="";
				}else
				 if ("ALL".equalsIgnoreCase(cscvo.getType())) {
					
					TYPE="";
					
				}
		         /*if ("getAE_WBS".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='AEE'";
					}
					if ("getAE_REG".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='AEE'";
					}
					
					if ("getADE_WBS".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='ADE'";
					}
					if ("getADE_REG".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='ADE'";
					}
					
					if ("getDE_WBS".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='DE'";
					}
					if ("getDE_REG".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='DE'";
					}
					
					if ("getSE_WBS".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='SE'";
					}
					if ("getSE_REG".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='SE'";
					}
					if ("getCORP_WBS".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='CORPORATE'";
					}
					if ("getCORP_REG".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='CORPORATE'";
					}
					
					if ("getTOT_WBS".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "";
					}
					if ("getTOT_REG".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "";
					}
				*/
				
				

				

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					
					String qry="";
						
						
					resultSet = statement.executeQuery(qry);

					
					
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String qry="";
						
				
					resultSet = statement.executeQuery(qry);						

				} else if ("SEC".equals(cscvo.getFlag())) {

					String qry="";
					
					
				
					resultSet = statement.executeQuery(qry);
					
				} else {
					
					String qry="";
					
					//System.out.println(""+qry);
				
					resultSet = statement.executeQuery(qry);
					
				
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();
//method names are different but functionality is same
						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCat(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setRel_date(resultSet.getString(9));
						vo.setSapSno(resultSet.getString(10));
						vo.setStatus(resultSet.getString(11));
						vo.setEstatus(resultSet.getString(12));
						vo.setEstwrtbrt(resultSet.getString(13));
						

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	
	
		
	}
	// All Services Requests

	public CscpayVO getAllServiceReportDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String counter = "";
		String complaint_type = "";

		if (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType())) {
			complaint_type = " where (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
					+ cscvo.getComplaintType() + "'";
			if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
				counter = "  and (meseva_ref like '%WEBSITE%' ) ";
			} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
				counter = " and  (meseva_ref like '%MEESEVA%' ) ";
			} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
				counter = " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) ";
			} else {
				counter = "";
			}
		} else {
			complaint_type = "";
			if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
				counter = " where  (meseva_ref like '%WEBSITE%' ) ";
			} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
				counter = " where  (meseva_ref like '%MEESEVA%' ) ";
			} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
				counter = " where ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))";
			} else {
				counter = "";
			}
		}

		// complaint_type="(complaint||sub_complaint||'~'||substr(complaint_description,1,20))
		// like '96~Meter Burnt/Glass Br'"

		/*
		 * if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * "   (meseva_ref like '%WEBSITE%' ) "; } else if
		 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " and  (meseva_ref like '%MEESEVA%' ) "; } else if
		 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * "  (meseva_ref like '%SACHIVALAYAM%' ) "; } else { counter = ""; }
		 */

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		String query = "";
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				
				if ("DIV".equals(cscvo.getFlag())) {

					query = "select   NVL(ltrim(subname,'z'),'DISCOM'),NVL(ltrim(secname,'z'),'TOTAL') secname,"
							+ " registered,completed,deleted,balance,cirname  from"
							+ " (select cirname,subname,secname,(ROW_NUMBER() OVER (partition by secname order by subname,secname,cirname)), "
							+ " (case when secname is not null then sum(reg) else sum(reg) end) registered,"
							+ " (case when secname is not null then sum(rel) else sum(rel) end) completed, "
							+ " (case when secname is not null then sum(del) else sum(del) end) deleted, "
							+ " (case when secname is not null then sum(bal) else sum(bal) end) balance  "
							+ " from (select cspartcd,complaint,sub_complaint,count(reg_no) reg, "
							+ " sum(case when status='released' then 1 else 0 end) rel,"
							+ " sum(case when status='deleted' then 1 else 0 end) del, "
							+ " sum(case when status='balance' then 1 else 0 end) bal from newcomp_tab "
							+ complaint_type + " " + counter + "" + " group by cspartcd,complaint,sub_complaint) a,"
							+ " (select unique cirname,divname,subname,secname,divcd,seccd from spdclmaster where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd AND CIRNAME=? and divname=? group by rollup(subname,secname),divname,cirname)  ";
					reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
				} else {
					query = "select  NVL(ltrim(cirname,'z'),'DISCOM'), NVL(ltrim(divname,'z'),'TOTAL') divname,registered,completed,deleted,balance,'' from"
							+ " (select cirname, divname,(ROW_NUMBER() OVER (partition by cirname order by divname)),"
							+ " (case when cirname is null then 'DISCOM' else cirname end),"
							+ " (case when divname is not null then sum(reg) else sum(reg) end) registered,"
							+ " (case when divname is not null then sum(rel) else sum(rel) end) completed,"
							+ " (case when divname is not null then sum(del) else sum(del) end) deleted,"
							+ " (case when divname is not null then sum(bal) else sum(bal) end) balance    from"
							+ " (select cspartcd,complaint,sub_complaint,count(reg_no) reg,"
							+ " sum(case when status='released' then 1 else 0 end) rel,"
							+ " sum(case when status='deleted' then 1 else 0 end) del,"
							+ " sum(case when status='balance' then 1 else 0 end) bal" + " from newcomp_tab  "
							+ complaint_type + " " + counter + "" + " group by cspartcd,complaint,sub_complaint) a,"
							+ " (select unique cirname,divname,divcd,seccd from spdclmaster where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd"
							+ " group by rollup(cirname,divname))order by cirname ";
					reportPStmt = con.prepareStatement(query);
					//System.out.println("circle:"+query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(4, cscvo.getCircleName());
					
					reportRst = reportPStmt.executeQuery();
				}
				
				System.out.println("circle:"+query);
				
				if (reportRst != null) {

					while (reportRst.next()) {
						CscpayVO cscvoobj = new CscpayVO();
						cscvoobj.setCircle(reportRst.getString(1));
						cscvoobj.setDivision(reportRst.getString(2));
						cscvoobj.setRegistered(reportRst.getString(3));
						cscvoobj.setCompleted(reportRst.getString(4));
						cscvoobj.setDeleted(reportRst.getString(5));
						cscvoobj.setBalance(reportRst.getString(6));

						cscvoobj.setCircleCode(reportRst.getString(7));

						// cscmap.put(reportRst.getString(1), cscvoobj);
						dashList.add(cscvoobj);

					}

					// cscvo.setCscpaymap(cscmap);
					cscvo.setList(dashList);

					/*
					 * while (reportRst.next()) {
					 * 
					 * if (cscmap.containsKey(reportRst.getString(1))) {
					 * CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
					 * dmapobj.setDivision(reportRst.getString(2));
					 * dmapobj.setRegistered(reportRst.getString(3));
					 * dmapobj.setCompleted(reportRst.getString(4));
					 * dmapobj.setDeleted(reportRst.getString(5));
					 * dmapobj.setBalance(reportRst.getString(6));
					 * 
					 * 
					 * } else { CscpayVO dmapobj = new CscpayVO();
					 * 
					 * dmapobj.setDivision(reportRst.getString(2));
					 * dmapobj.setRegistered(reportRst.getString(3));
					 * dmapobj.setCompleted(reportRst.getString(4));
					 * dmapobj.setDeleted(reportRst.getString(5));
					 * dmapobj.setBalance(reportRst.getString(6));
					 * 
					 * cscmap.put(reportRst.getString(1), dmapobj); } }
					 * cscvo.setCscpaymap(cscmap);;
					 * 
					 */}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// Get Meeseva Service Details

	public CscpayVO getAllServiceComplaintDetails(CscpayVO cscvo) throws Exception {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				// String query="SELECT n.reg_no ,n.circle_code
				// ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR','UNKNOWN')
				// circle,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0)
				// FROM new_connections n INNER JOIN cscpay c ON n.reg_no=
				// c.csregno AND c.cscounter=? AND c.cscancelid='N' AND c.CSPRDT
				// BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')
				// AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA'
				// THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN
				// 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR'
				// THEN 7 ELSE 1 END)";
				String query = "SELECT n.reg_no ,n.circle_code ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR',8,'KURNOOL',9,'CRDA','UNKNOWN') circle,n.consumer_name,n.category_supply,nvl(c.csappfee,0),n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0),nvl(c.cstempconchgs,0),nvl(c.csprno,0),csprdt,nvl(c.cgst,0),nvl(c.sgst,0) FROM new_connections n INNER JOIN cscpay c ON n.reg_no= c.csregno AND c.cscounter=? AND c.cscancelid='N' AND c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA' THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR' THEN 7 WHEN 'KURNOOL' THEN 8 WHEN 'CRDA' THEN 9  ELSE 10 END)";
				reportPStmt = con.prepareStatement(query);
				reportPStmt.setString(1, cscvo.getCounterName());

				reportPStmt.setString(2, cscvo.getFrom_date());
				reportPStmt.setString(3, cscvo.getTo_date());
				reportPStmt.setString(4, cscvo.getCircleName());

				reportRst = reportPStmt.executeQuery();
				// String query2="SELECT n.reg_no ,n.circle_code
				// ,m.cirname,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,c.csregno,nvl(sum(c.cssd),0),nvl(sum(c.csdevchg),0),nvl(sum(c.csslchg),0),nvl(sum(c.cstotamt),0),nvl(sum(c.csadvccchgs),0),nvl(sum(c.cssvchg),0),nvl(sum(c.csotherchgs),0)
				// FROM new_connections n,cscpay c,master.spdclmaster m where
				// n.reg_no=c.csregno and c.cscounter=? and
				// n.circle_code=m.circd and m.cirname=? and c.cscancelid='N'
				// and c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND
				// TO_DATE(?,'YYYY-MM-DD') group by
				// n.reg_no,c.csregno,n.circle_code,n.consumer_name,m.cirname,n.category_supply,n.application_fee,n.contracted_load";
				if (reportRst != null) {

					while (reportRst.next()) {
						CscpayVO cscvoobj = new CscpayVO();

						cscvoobj.setReg_no(reportRst.getString(1));
						cscvoobj.setRegDate(reportRst.getString(1));
						cscvoobj.setServieconn_no(reportRst.getString(4));
						cscvoobj.setCunsu_name(reportRst.getString(5));
						cscvoobj.setCunsu_fname(reportRst.getString(6));
						cscvoobj.setAddress(reportRst.getString(7));
						cscvoobj.setPhono(reportRst.getString(8));

						cscvoobj.setComplaint_desc(reportRst.getString(9));
						cscvoobj.setContractLoad(reportRst.getString(10));
						cscvoobj.setAdditional_load(reportRst.getString(11));
						cscvoobj.setMeeseva_ref(reportRst.getString(12));

						// cscmap.put(reportRst.getString(1), cscvoobj);
						dashList.add(cscvoobj);

					}
					// cscvo.setCscpaymap(cscmap);
					cscvo.setList(dashList);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	@SuppressWarnings("unused")
	public void generateExcel(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo) throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		
		OutputStream outputStream =null;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType())) {
					complaint_type = "  and (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
							+ cscvo.getComplaintType() + "'";
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = "  and (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) ";
					} else {
						counter = "";
					}
				} else {
					complaint_type = "";
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))";
					} else {
						counter = "";
					}
				}

				
				/* * if("Copm".equalsIgnoreCase(cscvo.getType())){ status=
				 * "  AND status = 'balance' "; }*/
				 
				if ("Del".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'deleted' ";
				} else if ("Bal".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'balance' ";
				} else if ("Comp".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'released' ";
				} else {
					status = "  AND status in( 'released','balance' , 'deleted' ) ";
				}

				
				
//NEW_21062022
				
				/*if (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType())) {
					complaint_type = "  and (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
							+ cscvo.getComplaintType() + "'";
					complaint_type=" and  COMPLAINT||SUB_COMPLAINT='"+cscvo.getComplaintType()+"'  ";
					
					
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) ";
					} else {
						counter = "";
					}
				} else {
					complaint_type = "";
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))";
					} else {
						counter = "";
					}
				}

				
				
				
				if ("Del".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'deleted' ";
				} 
				
				
				if ("BalWrt".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'balance' AND REMARKS= 'WRT' ";
				 }
				 
				 if ("BalBrt".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'balance' AND REMARKS='BRT' ";
					
				} 
				 
				 if ("CompWrt".equalsIgnoreCase(cscvo.getType()))
				 {
					status = "  AND status = 'released' AND REMARKS= 'WRT' ";
				}
				 if ("CompBrt".equalsIgnoreCase(cscvo.getType()))
				 {
					status = "  AND status = 'released' AND REMARKS= 'BRT' ";
				}
				
*/
				
				
				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("Comp".equalsIgnoreCase(cscvo.getType())) {
					if (((cscvo.getComplaintType().substring(0, 3)).equals("91~"))
							|| ((cscvo.getComplaintType().substring(0, 3)).equals("92~"))
							|| ((cscvo.getComplaintType().substring(0, 3)).equals("98~"))
							|| ((cscvo.getComplaintType().substring(0, 4)).equals("913~"))) {
						if ("DIV".equals(cscvo.getFlag())) {

							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,to_char(REG_DATE,'DD-MM-YYYY')  REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY,to_char(CLOSE_DATE,'DD-MM-YYYY') CLOSE_DATE "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and subname='" + cscvo.getCircle() + "' AND secname='" + cscvo.getDivision()
									+ "'");
							// reportPStmt = con.prepareStatement(query);
							// reportPStmt.setString(1, cscvo.getCounterName());

							// reportPStmt.setString(2, cscvo.getFrom_date());
							// reportPStmt.setString(3, cscvo.getTo_date());
							// reportPStmt.setString(1, cscvo.getCircle());
							// reportPStmt.setString(2, cscvo.getDivision());

							// reportRst = reportPStmt.executeQuery();
						} else {

							String qry = " select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,to_char(REG_DATE,'DD-MM-YYYY')  REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY,to_char(CLOSE_DATE,'DD-MM-YYYY') CLOSE_DATE "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision()
									+ "'";

							System.out.println(qry);
							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,to_char(REG_DATE,'DD-MM-YYYY')  REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY,to_char(CLOSE_DATE,'DD-MM-YYYY') CLOSE_DATE "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision()
									+ "'");
							// }
						}
					}

					else {

						if ("DIV".equals(cscvo.getFlag())) {

							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,to_char(REG_DATE,'DD-MM-YYYY')  REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY  "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and subname='" + cscvo.getCircle() + "' AND secname='" + cscvo.getDivision()
									+ "'");
							// reportPStmt = con.prepareStatement(query);
							// reportPStmt.setString(1, cscvo.getCounterName());

							// reportPStmt.setString(2, cscvo.getFrom_date());
							// reportPStmt.setString(3, cscvo.getTo_date());
							// reportPStmt.setString(1, cscvo.getCircle());
							// reportPStmt.setString(2, cscvo.getDivision());

							// reportRst = reportPStmt.executeQuery();
						} else {

							String qry = " select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,to_char(REG_DATE,'DD-MM-YYYY')  REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY  "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision()
									+ "'";

							System.out.println(qry);
							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,to_char(REG_DATE,'DD-MM-YYYY')  REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY  "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision()
									+ "'");
							// }
						}

					}
				} else {
					if ("DIV".equals(cscvo.getFlag())) {

						resultSet = statement.executeQuery(" select "
								+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,to_char(REG_DATE,'DD-MM-YYYY')  REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
								+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY  "
								+ " from newcomp_tab a,"
								+ " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
								+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
								+ " and subname='" + cscvo.getCircle() + "' AND secname='" + cscvo.getDivision() + "'");
						// reportPStmt = con.prepareStatement(query);
						// reportPStmt.setString(1, cscvo.getCounterName());

						// reportPStmt.setString(2, cscvo.getFrom_date());
						// reportPStmt.setString(3, cscvo.getTo_date());
						// reportPStmt.setString(1, cscvo.getCircle());
						// reportPStmt.setString(2, cscvo.getDivision());

						// reportRst = reportPStmt.executeQuery();
					} else {

						String qry = " select "
								+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,to_char(REG_DATE,'DD-MM-YYYY')  REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
								+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY  "
								+ " from newcomp_tab a,"
								+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
								+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
								+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision() + "'";

						System.out.println(qry);
						resultSet = statement.executeQuery(" select "
								+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,to_char(REG_DATE,'DD-MM-YYYY')  REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
								+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY  "
								+ " from newcomp_tab a,"
								+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
								+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
								+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision() + "'");
						// }
					}
					//// System.out.println.println(resultSet);
					//// System.out.println.println(monthYear);
				}

				response.setContentType("application/download");
				response.setHeader("Content-Disposition", "attachment; filename=CounterName:" + cscvo.getCounterName()
						+ "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				response.setHeader("Content-Disposition", "attachment; filename=CounterName:" + cscvo.getCounterName()
						+ "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
			 outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}
			
			 if(outputStream!=null)
				{
					outputStream.close();
				}
				
				if(workbook!=null)
				{
					workbook.close();
				}

		}

	}

	@SuppressWarnings("unused")
	public void generateDiscomeExcel(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo) throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		
		OutputStream outputStream =null;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType())) {
					complaint_type = "  and (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
							+ cscvo.getComplaintType() + "'";
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) ";
					} else {
						counter = "";
					}
				} else {
					complaint_type = "";
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))";
					} else {
						counter = "";
					}
				}

				
				 /* if("Copm".equalsIgnoreCase(cscvo.getType())){ status=
				  "  AND status = 'balance' "; }*/
				 
				if ("Del".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'deleted' ";
				} else if ("Bal".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'balance' ";
				} else if ("Comp".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'released' ";
				} else {
					status = "  AND status in( 'released','balance' , 'deleted' ) ";
				}

				
				//NEW_21062022
				
				/*if (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType())) {
					complaint_type = "  and (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
							+ cscvo.getComplaintType() + "'";
					complaint_type=" and  COMPLAINT||SUB_COMPLAINT='"+cscvo.getComplaintType()+"'  ";
					
					
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) ";
					} else {
						counter = "";
					}
				} else {
					complaint_type = "";
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))";
					} else {
						counter = "";
					}
				}

				
				
				
				if ("Del".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'deleted' ";
				} 
				
				
				if ("BalWrt".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'balance' AND REMARKS= 'WRT' ";
				 }
				 
				 if ("BalBrt".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'balance' AND REMARKS='BRT' ";
					
				} 
				 
				 if ("CompWrt".equalsIgnoreCase(cscvo.getType()))
				 {
					status = "  AND status = 'released' AND REMARKS= 'WRT' ";
				}
				 if ("CompBrt".equalsIgnoreCase(cscvo.getType()))
				 {
					status = "  AND status = 'released' AND REMARKS= 'BRT' ";
				}
*/				

				
				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("Comp".equalsIgnoreCase(cscvo.getType())) {
					if (((cscvo.getComplaintType().substring(0, 3)).equals("91~"))
							|| ((cscvo.getComplaintType().substring(0, 3)).equals("92~"))
							|| ((cscvo.getComplaintType().substring(0, 3)).equals("98~"))
							|| ((cscvo.getComplaintType().substring(0, 4)).equals("913~"))) {

						String qry = " select "
								+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
								+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY,to_char(CLOSE_DATE,'DD-MM-YYYY') CLOSE_DATE  "
								+ " from newcomp_tab a,"
								+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
								+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
								+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision() + "'";

						//System.out.println(qry);
						if (!"DISCOM".equalsIgnoreCase(cscvo.getCircle())) {
							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY,to_char(CLOSE_DATE,'DD-MM-YYYY') CLOSE_DATE  "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and CIRNAME='" + cscvo.getCircle() + "'");
						} else {
							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY,to_char(CLOSE_DATE,'DD-MM-YYYY') CLOSE_DATE  "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " "
									+ status);
							// + " and CIRNAME='" + cscvo.getCircle() + "'");
						}
						// }
					}

					else {

						String qry = " select "
								+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
								+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
								+ " from newcomp_tab a,"
								+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
								+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
								+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision() + "'";

						//System.out.println(qry);
						if (!"DISCOM".equalsIgnoreCase(cscvo.getCircle())) {
							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and subname='" + cscvo.getCircle() + "' AND CIRNAME='" + cscvo.getCircleCode()
									+ "'");
						} else {
							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " "
									+ status);
							// + " and CIRNAME='" + cscvo.getCircle() + "'");
						}
						// }
					}
				} else {

					if ("DIV".equals(cscvo.getFlag())) {

						resultSet = statement.executeQuery(" select "
								+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
								+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
								+ " from newcomp_tab a,"
								+ " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
								+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
								+ " and subname='" + cscvo.getCircle() + "' AND CIRNAME='" + cscvo.getCircleCode()
								+ "'");
						// + " and subname='" + cscvo.getCircle() + "' AND
						// secname='" + cscvo.getDivision() + "'");
						// reportPStmt = con.prepareStatement(query);
						// reportPStmt.setString(1, cscvo.getCounterName());

						// reportPStmt.setString(2, cscvo.getFrom_date());
						// reportPStmt.setString(3, cscvo.getTo_date());
						// reportPStmt.setString(1, cscvo.getCircle());
						// reportPStmt.setString(2, cscvo.getDivision());

						// reportRst = reportPStmt.executeQuery();
					} else {

						String qry = " select "
								+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
								+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
								+ " from newcomp_tab a,"
								+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
								+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
								+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision() + "'";

						//System.out.println(qry);
						if (!"DISCOM".equalsIgnoreCase(cscvo.getCircle())) {
							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and CIRNAME='" + cscvo.getCircle() + "'");
						} else {
							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " "
									+ status);
							// + " and CIRNAME='" + cscvo.getCircle() + "'");
						}
						// }
					}

				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				response.setHeader("Content-Disposition", "attachment; filename=CounterName:" + cscvo.getCounterName()
						+ "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				response.setHeader("Content-Disposition", "attachment; filename=CounterName:" + cscvo.getCounterName()
						+ "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				 outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

			

		         if(outputStream!=null)
					{
						outputStream.close();
					}
					
					if(workbook!=null)
					{
						workbook.close();
					}
		}

	}

	//
	// @SuppressWarnings("unused")

	@SuppressWarnings("unused")
	public void exportAllcounterYSRJALAKALAScsDetailsTWO(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		

		
		

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		OutputStream outputStream =null;
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO) like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'  and upper(REG_NO) like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'  and upper(REG_NO) like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} 
				
				else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%' ";
						 */
						status = "  and upper(REPSTAT) like '%WRTTKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%' ";
						 */
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%'   ";
						 */
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					/*
					 * if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
					 * status = "  and upper(REPSTAT) like '%TKEY%' "; }
					 */
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'   ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' ";
						status = "  AND upper(REPSTAT) like   '%WRT' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%'";
						status = "  AND upper(REPSTAT) like  '%BRT'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// + "
									// ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
									// paid_date "
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ " ,nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// "greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					

					
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// + "
									// ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ " ,nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))   AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
				} else {
					
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
							// +
							// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date"
							+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
							+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus  "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname";
					//System.out.println("EXPORT 5A:"+query);
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

					
				}
				

				response.setContentType("application/download");
				
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}
			if(outputStream!=null){
				outputStream.close();
			}
			if(workbook!=null){
				workbook.close();
			}

		}

		
	}
		public void exportAllcounterYSRJALAKALAScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
				throws Exception {
		
		

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		OutputStream outputStream =null;
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO) like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'  and upper(REG_NO) like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'  and upper(REG_NO) like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} 
				
				else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%' ";
						 */
						status = "  and upper(REPSTAT) like '%WRTTKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%' ";
						 */
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%'   ";
						 */
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					/*
					 * if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
					 * status = "  and upper(REPSTAT) like '%TKEY%' "; }
					 */
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'   ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' ";
						status = "  AND upper(REPSTAT) like   '%WRT' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%'";
						status = "  AND upper(REPSTAT) like  '%BRT'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// + "
									// ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
									// paid_date "
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ " ,nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// "greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					

					
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// + "
									// ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ " ,nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))   AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
				} else {
					
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
							// +
							// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date"
							+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
							+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus  "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname";
					//System.out.println("EXPORT 5A:"+query);
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

					
				}
				

				response.setContentType("application/download");
				
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}
			if(outputStream!=null){
				outputStream.close();
			}
			if(workbook!=null){
				workbook.close();
			}

		}

	
		
	}
	
	@SuppressWarnings("unused")
	public void exportAllcounterScsDetailsTWO(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		

		
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String consumer_val= "";
		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		OutputStream outputStream =null;
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {
				
				
	if ("HT".equalsIgnoreCase(cscvo.getType())) {
					
					if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release') and upper(REG_NO) like '%H%' ";
					}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
						status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release') and upper(REG_NO) like '%H%' ";
					}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' and upper(REG_NO) like '%H%' ";
					
				}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer' and upper(REG_NO) like '%H%' ";
				
				}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'  and upper(REG_NO) like '%H%' ";
				
					
				}
				else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
							"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) like '%H%'";
				}
				
				else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) like '%H%'";
				}
				else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRT'  and upper(REG_NO) like '%H%'";
				}
					
				else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRT' and upper(REG_NO) like '%H%'";
				}
				else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRTTKEY%' and upper(REG_NO) like '%H%'";
				}
				else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRTTKEY%' and upper(REG_NO) like '%H%'";
				}
				else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) like '%H%'";
				}
				else  {
					status = "";
				}
					
				}else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					
					 if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
						status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					
				}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				
				}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				
					
				}
				else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
							"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				
				else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRT'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
					
				else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRT' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRTTKEY%' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRTTKEY%' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else  {
					status = " ";
				}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {


					if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) not   like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release') and upper(REG_NO) not   like '%H%' ";
					}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
						status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release') and upper(REG_NO) not   like '%H%' ";
					}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' and upper(REG_NO) not   like '%H%' ";
					
				}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer' and upper(REG_NO) not   like '%H%' ";
				
				}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'  and upper(REG_NO) not   like '%H%' ";
				
					
				}
				else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
							"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not   like '%H%'";
				}
				
				else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not   like '%H%'";
				}
				else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRT'  and upper(REG_NO) not   like '%H%'";
				}
					
				else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRT' and upper(REG_NO) not   like '%H%'";
				}
				else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRTTKEY%' and upper(REG_NO) not   like '%H%'";
				}
				else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRTTKEY%' and upper(REG_NO) not   like '%H%'";
				}
				else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) not   like '%H%'";
				}
				else  {
					status = "";
				}
				
					
				}else{
					

					if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'   ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release')  ";
					}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
						status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release')  ";
					}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction'  ";
					
				}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer'  ";
				
				}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'   ";
				
					
				}
				else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
							"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') ";
				}
				
				else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') ";
				}
				else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRT'  ";
				}
					
				else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRT' ";
				}
				else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRTTKEY%' ";
				}
				else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRTTKEY%' ";
				}
				else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') ";
				}
				else  {
					status = "";
				}
				}
	
	
	
 	if ("ALL".equalsIgnoreCase(cscvo.getType())){
		
		consumer_val="and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')";
		
	}else
	
	if ("HT".equalsIgnoreCase(cscvo.getType())){
		
		consumer_val="and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')";
		
	}else if ("LT".equalsIgnoreCase(cscvo.getType()) && "5A".equalsIgnoreCase(cscvo.getCategory())){
		
		consumer_val=" and nvl(consumer_status_val,'NA')='YSR JALAKALA'";
		
	
    }
	
	
	else if ("LT".equalsIgnoreCase(cscvo.getType()) && "5B".equalsIgnoreCase(cscvo.getCategory())){
	
	consumer_val=" ";
	
    }else if ("LT".equalsIgnoreCase(cscvo.getType())){
		consumer_val="and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')";
		
	}
    else{
		consumer_val="";
	}
	
	
	
   // System.out.println("type:"+cscvo.getType());
	//System.out.println("ctype:"+cscvo.getCtype());
	//System.out.println("status:"+status);
	//System.out.println("consumer_val:"+consumer_val);
	

	                       SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

								if ("DIV".equals(cscvo.getFlag())) {

									if (!"ZTOTAL".equalsIgnoreCase(cscvo.getDivision())){

									resultSet = statement.executeQuery(
											" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
											"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
											"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
											"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
											"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
											"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
											" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
											"");
									// reportPStmt = con.prepareStatement(query);
									// reportPStmt.setString(1, cscvo.getCounterName());
									}else
									{
										resultSet = statement.executeQuery(
												" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
												"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
												"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
												"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
												"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
												"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
												" "+status+"  and cirname='"+ cscvo.getCircle() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
												"");
									}
									
									// reportRst = reportPStmt.executeQuery();
								} else if ("SUB_DIV".equals(cscvo.getFlag())) {

									if (!"ZTOTAL".equalsIgnoreCase(cscvo.getSubDiv())){

									resultSet = statement.executeQuery(
											" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
											"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
											"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
											"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
											"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
											"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
											" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"+ cscvo.getSubDiv() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
											"");
									}else{
										
										resultSet = statement.executeQuery(
												" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
												"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
												"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
												"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
												"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
												"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
												" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
												"");
										
										
									}
									// reportPStmt = con.prepareStatement(query);
									// reportPStmt.setString(1, cscvo.getCounterName());

									// reportRst = reportPStmt.executeQuery();
								} else if ("SEC".equals(cscvo.getFlag())) {

									if (!"ZTOTAL".equalsIgnoreCase(cscvo.getSec()))
									{
									resultSet = statement.executeQuery(
											" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
											"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
											"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
											"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
											"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
											"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
											" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"+ cscvo.getSubDiv() + "' and secname='" + cscvo.getSec() + "' "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
											"");
									
									}else{
										resultSet = statement.executeQuery(
												" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
												"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
												"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
												"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
												"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
												"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
												" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"+ cscvo.getSubDiv() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
												"");
									}
									

								} else {

									if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle()))
									{

									resultSet = statement.executeQuery(
											" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
											"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
											"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
											"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
											"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
											"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
											" "+status+"  and cirname='"+ cscvo.getCircle() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
											"");
									}else{

										resultSet = statement.executeQuery(
												" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
												"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
												"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
												"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
												"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
												"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
												" "+status+"  and cirname IN ('KADAPA','NELLORE','TIRUPATI','ANANTHAPUR','KURNOOL')  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
												"");
								}
								}	
								//System.out.println("circle"+cscvo.getCircle());
								//System.out.println("flag"+cscvo.getFlag());

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}
			if(outputStream!=null){
				outputStream.close();
			}
			if(workbook!=null){
				workbook.close();
			}

		}

	
		
	}
		public void exportAllcounterScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
				throws Exception {
		
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		OutputStream outputStream =null;
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO) like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'  and upper(REG_NO) like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'  and upper(REG_NO) like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} 
				
				else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%' ";
						 */
						status = "  and upper(REPSTAT) like '%WRTTKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%' ";
						 */
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%'   ";
						 */
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					/*
					 * if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
					 * status = "  and upper(REPSTAT) like '%TKEY%' "; }
					 */
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'   ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' ";
						status = "  AND upper(REPSTAT) like   '%WRT' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%'";
						status = "  AND upper(REPSTAT) like  '%BRT'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// + "
									// ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
									// paid_date "
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ " ,nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// "greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// + "
									// ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ " ,nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
				} else {
					
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
							// +
							// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date"
							+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
							+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus  "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname";
					System.out.println("export123:"+query);
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}
			if(outputStream!=null){
				outputStream.close();
			}
			if(workbook!=null){
				workbook.close();
			}

		}

	}

	// SINGLE DESK PORTAL
	// AllCounter Details

	public CscpayVO getSingleDeskAllScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(divname,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from rep_final_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')   and  upper(repstat) like '%CAE%'  and cirname=? )) group by  rollup(divname) ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(subname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from rep_final_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')   and  upper(repstat) like '%CAE%'  and cirname=? and divname=? )) group by  rollup(subname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select NVL(secname,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from rep_final_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')    and  upper(repstat) like '%CAE%' and cirname=?  and divname=?  and subname=? )) group by  rollup(secname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					String query = "select NVL(CIRNAME,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from rep_final_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9'))   and  upper(repstat) like '%CAE%'  ) group by  rollup(CIRNAME) ";

					reportPStmt = con.prepareStatement(query);
					//System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// LT HT Sinngle deskl
	public CscpayVO getSingleDeskLtHtScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		if ("LT".equalsIgnoreCase(cscvo.getType())) {
			ltcat = " where     NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%' and  upper(repstat) like '%CAE%' ";
		}
		if ("HT".equalsIgnoreCase(cscvo.getType())) {
			ltcat = " where     NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  LIKE  '%H%' and  upper(repstat) like '%CAE%' ";
		}

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					
					String query = "select NVL(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=? " + " group by  rollup(divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=?  and divname=?  " + " group by  rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select NVL(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=?  and divname=?  and subname=?   " + " group by  rollup(secname)";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					String query = "select NVL(cirname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " " + " group by  rollup(cirname)";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					//System.out.println("ALL:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// All Wesite Details

	public CscpayVO getApspdclWebsiteScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(divname,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from rep_final_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')    and  upper(repstat) like '%TCS%'  and cirname=? )) group by  rollup(divname) ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(subname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from rep_final_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')    and  upper(repstat) like '%TCS%'  and cirname=? and divname=? )) group by  rollup(subname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select NVL(secname,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from rep_final_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')    and  upper(repstat) like '%TCS%'  and cirname=?  and divname=?  and subname=? )) group by  rollup(secname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					String query = "select NVL(CIRNAME,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from rep_final_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')   and  upper(repstat) like '%TCS%'  )) group by  rollup(CIRNAME) ";

					reportPStmt = con.prepareStatement(query);
					System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	//

	public CscpayVO getApspdclWebsiteLtScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		if ("1".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where     NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'     and  upper(repstat) like '%TCS%' AND   CATEGORY_SUPPLY like '1%'";
		} else if ("2".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'    and  upper(repstat) like '%TCS%'   AND CATEGORY_SUPPLY like '2%'";
		} else if ("3".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'    and  upper(repstat) like '%TCS%'   AND CATEGORY_SUPPLY like '3%'";
		} else if ("4".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'     and  upper(repstat) like '%TCS%'  AND CATEGORY_SUPPLY like '4%'";
		} else if ("5".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where   NCPARTCD=seccd  AND  circd not in('1','4','6','9') and  upper(reg_no)  not like '%H%'     and  upper(repstat) like '%TCS%'  AND CATEGORY_SUPPLY like '5%'";
		} else if ("6".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'     and  upper(repstat) like '%TCS%'   AND CATEGORY_SUPPLY like '6%'";
		} else if ("7".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'     and  upper(repstat) like '%TCS%'  AND CATEGORY_SUPPLY like '7%'";
		} else if ("8".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'    and  upper(repstat) like '%TCS%'   AND CATEGORY_SUPPLY like '8%'";
		} else {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(REG_NO) not like '%H%'    and  upper(repstat) like '%TCS%'   ";
		}

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "select NVL(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=? " + " group by  rollup(divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=?  and divname=?  " + " group by  rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select NVL(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  csc.rep_final@colldblink,"
							+ "  spdclmaster    " + ltcat + " AND cirname=?  and divname=?  and subname=?   "
							+ " group by  rollup(secname)";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					String query = "select NVL(cirname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " " + " group by  rollup(cirname)";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					//System.out.println("ALL:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// ht wEBSITE dETAILS

	// AllCounter ht Details

	public CscpayVO getApspdclWebsiteHtScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		/*
		 * if ("1".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where     NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  like '%L%' AND   CATEGORY_SUPPLY like '1%'"
		 * ; } else if ("2".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  like '%L%' AND CATEGORY_SUPPLY like '2%'"
		 * ; } else if ("3".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  like '%L%' AND CATEGORY_SUPPLY like '3%'"
		 * ; } else if ("4".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  like '%L%' AND CATEGORY_SUPPLY like '4%'"
		 * ; } else if ("5".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where   NCPARTCD=seccd  AND  circd not in('1','4','6','9') and  upper(reg_no)  like '%L%' AND CATEGORY_SUPPLY like '5%'"
		 * ; } else if ("6".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  like '%L%'  AND CATEGORY_SUPPLY like '6%'"
		 * ; } else if ("7".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  like '%L%'  AND CATEGORY_SUPPLY like '7%'"
		 * ; } else if ("8".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where    NCPARTCD=seccd  AND circd not in('1','4','6','9') and upper(reg_no)  like '%L%' AND CATEGORY_SUPPLY like '8%'"
		 * ; } else {
		 */
		ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(REG_NO)  like '%H%' and  upper(repstat) like '%TCS%' ";
		// }

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					
					String query = "select NVL(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=? " + " group by  rollup(divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = "select NVL(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=?  and divname=?  " + " group by  rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					String query = "select NVL(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=?  and divname=?  and subname=?   " + " group by  rollup(secname)";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					
					String query = "select NVL(cirname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " " + " group by  rollup(cirname)";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					//System.out.println("ALL:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	// Export Website details

	@SuppressWarnings("unused")
	public void exportAllWebsiteScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		
		OutputStream outputStream =null;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO) like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'  and upper(REG_NO) like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'  and upper(REG_NO) like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno, cirname Circle,Divname Division,subname SubDivision,secname Section , (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date, consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL, greatest(nvl(grp_prdt,reg_date), nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE , meseva_ref reference_no , PENDING_STAT,SLADESC,EXECUTION_TYPE "
									+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%TCS%'  ) order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());adsda
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					
					String qry = "select row_number() over (partition by null order by null) sno, cirname Circle,Divname Division,subname SubDivision,secname Section , (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date, consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL, greatest(nvl(grp_prdt,reg_date), nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE , meseva_ref reference_no , PENDING_STAT,SLADESC,EXECUTION_TYPE "
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
							+ "' and subname='" + cscvo.getSubDiv()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%TCS%'  ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					//System.out.println(qry);
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno, cirname Circle,Divname Division,subname SubDivision,secname Section , (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date, consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL, greatest(nvl(grp_prdt,reg_date), nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE , meseva_ref reference_no , PENDING_STAT,SLADESC,EXECUTION_TYPE "
									+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%TCS%'  ) order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno, cirname Circle,Divname Division,subname SubDivision,secname Section , (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date, consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL, greatest(nvl(grp_prdt,reg_date), nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE , meseva_ref reference_no , PENDING_STAT,SLADESC,EXECUTION_TYPE "
									+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%TCS%'  ) order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
				} else {
					
					String query = " select row_number() over (partition by null order by null) sno, cirname Circle,Divname Division,subname SubDivision,secname Section , (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date, consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL, greatest(nvl(grp_prdt,reg_date), nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE , meseva_ref reference_no , PENDING_STAT,SLADESC,EXECUTION_TYPE "
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%TCS%'  ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					//System.out.println(query);
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno, cirname Circle,Divname Division,subname SubDivision,secname Section , (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date, consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL, greatest(nvl(grp_prdt,reg_date), nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE , meseva_ref reference_no , PENDING_STAT,SLADESC,EXECUTION_TYPE "
									+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%TCS%'  ) order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered in APSPDCL Website " + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered in APSPDCL Website " + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

			if(outputStream!=null)
			{
				outputStream.close();
			}
			
			if(workbook!=null)
			{
				workbook.close();
			}
		}

	}

	// display All Website Details
	// Export Website details

	@SuppressWarnings("unused")
	public CscpayVO AllWebsiteScsDetails(CscpayVO cscvo) throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		
		OutputStream outputStream =null;
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO) like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'  and upper(REG_NO) like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'  and upper(REG_NO) like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno, cirname Circle,Divname Division,subname SubDivision,secname Section , (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date, consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL, greatest(nvl(grp_prdt,reg_date), nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE , meseva_ref reference_no , PENDING_STAT,SLADESC,EXECUTION_TYPE "
									+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%TCS%'  ) order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());adsda
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					
					String qry = "select row_number() over (partition by null order by null) sno, cirname Circle,Divname Division,subname SubDivision,secname Section , (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date, consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL, greatest(nvl(grp_prdt,reg_date), nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE , meseva_ref reference_no , PENDING_STAT,SLADESC,EXECUTION_TYPE "
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
							+ "' and subname='" + cscvo.getSubDiv()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%TCS%'  ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					//System.out.println(qry);
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno, cirname Circle,Divname Division,subname SubDivision,secname Section , (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date, consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL, greatest(nvl(grp_prdt,reg_date), nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE , meseva_ref reference_no , PENDING_STAT,SLADESC,EXECUTION_TYPE "
									+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%TCS%'  ) order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno, cirname Circle,Divname Division,subname SubDivision,secname Section , (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date, consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL, greatest(nvl(grp_prdt,reg_date), nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE , meseva_ref reference_no , PENDING_STAT,SLADESC,EXECUTION_TYPE "
									+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%TCS%'  ) order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
				} else {
					
					String query = " select row_number() over (partition by null order by null) sno, cirname Circle,Divname Division,subname SubDivision,secname Section , (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date, consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL, greatest(nvl(grp_prdt,reg_date), nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE , meseva_ref reference_no , PENDING_STAT,SLADESC,EXECUTION_TYPE "
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%TCS%'  ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					//System.out.println(query);
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno, cirname Circle,Divname Division,subname SubDivision,secname Section , (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date, consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL, greatest(nvl(grp_prdt,reg_date), nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE , meseva_ref reference_no , PENDING_STAT,SLADESC,EXECUTION_TYPE "
									+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%TCS%'  ) order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						/*
						 * * vo.setCircleName(reportRst.getString(1));
						 * vo.setDivisionName(reportRst.getString(2));
						 * vo.setDcbCollection(reportRst.getString(3));
						 * vo.setDcbDemand(reportRst.getString(4));
						 * vo.setDcbPerCent(reportRst.getString(5));
						 * vo.setCummColl(reportRst.getString(8));
						 */

						vo.setCircleName(resultSet.getString(2));
						vo.setDivision(resultSet.getString(3));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(4));
						vo.setSec(resultSet.getString(5));
						vo.setType(resultSet.getString(6));
						vo.setReg_no(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setCunsu_name(resultSet.getString(9));

						vo.setAddress(resultSet.getString(10));
						vo.setPhono(resultSet.getString(11));
						vo.setEmail(resultSet.getString(12));
						vo.setS_group(resultSet.getString(13));

						vo.setCat(resultSet.getString(14));
						vo.setLoad(resultSet.getString(15));
						vo.setPurpose(resultSet.getString(16));
						vo.setDemand(resultSet.getString(17));
						vo.setPaid(resultSet.getString(18));

						vo.setGroup_demand(resultSet.getString(19));
						vo.setGroup_coll(resultSet.getString(20));

						vo.setPaid_date(resultSet.getString(21));
						vo.setRel_date(resultSet.getString(22));

						// vo.setUscno(resultSet.getString(23));
						vo.setRef_no(resultSet.getString(23));

						vo.setPen_simply_brt(resultSet.getString(24));
						vo.setSla_desc(resultSet.getString(25));

						vo.setExe_type(resultSet.getString(26));
						vo.setStatus(resultSet.getString(27));
						// vo.setCategory(reportRst.getString(4));
						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}
	// }

	// Export Single Desk Portal details

	@SuppressWarnings("unused")
	public void exportSingleDeskPortalScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		
		 OutputStream outputStream =null;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO) like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'  and upper(REG_NO) like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'  and upper(REG_NO) like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery("select row_number() over (partition by null order by null) sno,"
							+ " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
							+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
							+ " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
							+ " greatest(nvl(grp_prdt,reg_date),"
							+ " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
							+ " meseva_ref reference_no ," + " PENDING_STAT,SLADESC,EXECUTION_TYPE,"
							+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%CAE%'  ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());adsda
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

				
					resultSet = statement
							.executeQuery(" select row_number() over (partition by null order by null) sno,"
									+ " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
									+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
									+ " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
									+ " greatest(nvl(grp_prdt,reg_date),"
									+ " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
									+ " meseva_ref reference_no ," + " PENDING_STAT,SLADESC,EXECUTION_TYPE,"
									+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%CAE%'  ) order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					resultSet = statement
							.executeQuery(" select row_number() over (partition by null order by null) sno,"
									+ " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
									+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
									+ " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
									+ " greatest(nvl(grp_prdt,reg_date),"
									+ " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
									+ " meseva_ref reference_no ," + " PENDING_STAT,SLADESC,EXECUTION_TYPE,"
									+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%CAE%'  ) order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
				} else {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
					 * +
					 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
					 * +
					 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
					 * +
					 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * +
					 * " from csc.rep_final@colldblink a,master.spdclmaster@colldblink b"
					 * + " where a.ncpartcd=b.seccd " + status + "" +
					 * cscvo.getCircle() + "" +
					 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					String query = " select row_number() over (partition by null order by null) sno,"
							+ " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
							+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
							+ " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
							+ " greatest(nvl(grp_prdt,reg_date),"
							+ " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
							+ " meseva_ref reference_no ," + " PENDING_STAT,SLADESC,EXECUTION_TYPE,"
							+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%CAE%'  ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					//System.out.println(query);
					resultSet = statement
							.executeQuery(" select row_number() over (partition by null order by null) sno,"
									+ " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
									+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
									+ " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
									+ " greatest(nvl(grp_prdt,reg_date),"
									+ " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
									+ " meseva_ref reference_no ," + " PENDING_STAT,SLADESC,EXECUTION_TYPE,"
									+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%CAE%'  ) order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered in Single Desk Portal " + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + "Industrial.xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered in Single Desk Portal " + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + "Industrial.xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				 outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}
			
			if(outputStream!=null)
			{
				outputStream.close();
			}
			
			if(workbook!=null)
			{
				workbook.close();
			}

		}

	}
	// Service wise Single desk portal

	@SuppressWarnings("unused")
	public CscpayVO getSingleDeskPortalScsDetails(CscpayVO cscvo) throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO) like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'  and upper(REG_NO) like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'  and upper(REG_NO) like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery("select row_number() over (partition by null order by null) sno,"
							+ " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
							+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
							+ " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
							+ " greatest(nvl(grp_prdt,reg_date),"
							+ " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
							+ " meseva_ref reference_no ," + " PENDING_STAT,SLADESC,EXECUTION_TYPE,"
							+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%CAE%'  ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());adsda
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement
							.executeQuery(" select row_number() over (partition by null order by null) sno,"
									+ " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
									+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
									+ " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
									+ " greatest(nvl(grp_prdt,reg_date),"
									+ " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
									+ " meseva_ref reference_no ," + " PENDING_STAT,SLADESC,EXECUTION_TYPE,"
									+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%CAE%'  ) order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement
							.executeQuery(" select row_number() over (partition by null order by null) sno,"
									+ " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
									+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
									+ " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
									+ " greatest(nvl(grp_prdt,reg_date),"
									+ " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
									+ " meseva_ref reference_no ," + " PENDING_STAT,SLADESC,EXECUTION_TYPE,"
									+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%CAE%'  ) order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
				} else {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
					 * +
					 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
					 * +
					 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
					 * +
					 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * +
					 * " from csc.rep_final@colldblink a,master.spdclmaster@colldblink b"
					 * + " where a.ncpartcd=b.seccd " + status + "" +
					 * cscvo.getCircle() + "" +
					 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					String query = " select row_number() over (partition by null order by null) sno,"
							+ " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
							+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
							+ " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
							+ " greatest(nvl(grp_prdt,reg_date),"
							+ " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
							+ " meseva_ref reference_no ," + " PENDING_STAT,SLADESC,EXECUTION_TYPE,"
							+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%CAE%'  ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					//System.out.println(query);
					resultSet = statement
							.executeQuery(" select row_number() over (partition by null order by null) sno,"
									+ " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
									+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
									+ " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
									+ " greatest(nvl(grp_prdt,reg_date),"
									+ " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
									+ " meseva_ref reference_no ," + " PENDING_STAT,SLADESC,EXECUTION_TYPE,"
									+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    and  upper(repstat) like '%CAE%'  ) order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						/*
						 * * vo.setCircleName(reportRst.getString(1));
						 * vo.setDivisionName(reportRst.getString(2));
						 * vo.setDcbCollection(reportRst.getString(3));
						 * vo.setDcbDemand(reportRst.getString(4));
						 * vo.setDcbPerCent(reportRst.getString(5));
						 * vo.setCummColl(reportRst.getString(8));
						 */

						vo.setCircleName(resultSet.getString(2));
						vo.setDivision(resultSet.getString(3));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(4));
						vo.setSec(resultSet.getString(5));
						vo.setType(resultSet.getString(6));
						vo.setReg_no(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setCunsu_name(resultSet.getString(9));

						vo.setAddress(resultSet.getString(10));
						vo.setPhono(resultSet.getString(11));
						vo.setEmail(resultSet.getString(12));
						vo.setS_group(resultSet.getString(13));

						vo.setCat(resultSet.getString(14));
						vo.setLoad(resultSet.getString(15));
						vo.setPurpose(resultSet.getString(16));
						vo.setDemand(resultSet.getString(17));
						vo.setPaid(resultSet.getString(18));

						vo.setGroup_demand(resultSet.getString(19));
						vo.setGroup_coll(resultSet.getString(20));

						vo.setPaid_date(resultSet.getString(21));
						vo.setRel_date(resultSet.getString(22));

						// vo.setUscno(resultSet.getString(23));
						vo.setRef_no(resultSet.getString(23));

						vo.setPen_simply_brt(resultSet.getString(24));
						vo.setSla_desc(resultSet.getString(25));

						vo.setExe_type(resultSet.getString(26));
						vo.setStatus(resultSet.getString(27));
						// vo.setCategory(reportRst.getString(4));
						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}
	// Aqua solar
	// AllCounter Details

	public CscpayVO getAquaNtrSolarScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(divname,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from rep_final_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')   and purpose in ('AQUA')  and cirname=? )) group by  rollup(divname) ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(subname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from rep_final_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')  and purpose in ('AQUA')  and cirname=? and divname=? )) group by  rollup(subname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select NVL(secname,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from rep_final_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')    and purpose in ('AQUA') and cirname=?  and divname=?  and subname=? )) group by  rollup(secname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					String query = "select NVL(CIRNAME,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from rep_final_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9'))   and purpose in ('AQUA')  ) group by  rollup(CIRNAME) ";

					reportPStmt = con.prepareStatement(query);
					//System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	// lt aqva ntr solar

	public CscpayVO getLtAquaNtrSolarScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		if ("AQUA".equalsIgnoreCase(cscvo.getPurpose())) {
			ltcat = " where     NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'   and purpose in ('AQUA') ";
		}
		if ("NTRJS".equalsIgnoreCase(cscvo.getPurpose())) {
			ltcat = " where     NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'   and purpose in ('NTRJS')  ";
		} else if ("SPS".equalsIgnoreCase(cscvo.getPurpose())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'   and purpose in ('SPS') ";
		}

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select nvl(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * + " where circd not in('1','4','6','9') and cirname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(divname) ";
					 */
					String query = "select NVL(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=? " + " group by  rollup(divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					/*
					 * String query =
					 * "select nvl(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * +
					 * " where circd not in('1','4','6','9') and cirname=? and divname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(subname) ";
					 */
					String query = "select NVL(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=?  and divname=?  " + " group by  rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select nvl(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * +
					 * " where circd not in('1','4','6','9') and cirname=? and divname=? and subname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(secname) ";
					 */
					String query = "select NVL(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=?  and divname=?  and subname=?   " + " group by  rollup(secname)";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					/*
					 * String query =
					 * "select nvl(CIRNAME,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * + " where circd not in('1','4','6','9'))" +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(CIRNAME) ";
					 */
					String query = "select NVL(cirname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " " + " group by  rollup(cirname)";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("ALL:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	// Export NTR SoLAR

	@SuppressWarnings("unused")
	public void exportAquaNtrSolarScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if (("LT".equalsIgnoreCase(cscvo.getType())) && ("AQUA".equalsIgnoreCase(cscvo.getPurpose()))) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) not like '%H%' and purpose in ('AQUA') ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO)  not like '%H%' and purpose in ('AQUA') ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO)  not like '%H%' and purpose in ('AQUA') ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) not  like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%' and purpose in ('AQUA') ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) not  like '%H%' and purpose in ('AQUA') ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) not  like '%H%' and purpose in ('AQUA') ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'  and upper(REG_NO)  not like '%H%' and purpose in ('AQUA') ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'  and upper(REG_NO)  not like '%H%' and purpose in ('AQUA') ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT)   like  '%REG%' ) and upper(REG_NO) not like '%H%' and purpose in ('AQUA') ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT)   like '%REL%' ) and upper(REG_NO) not like '%H%' and purpose in ('AQUA') ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT)   like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) not like '%H%' and purpose in ('AQUA') ";
					} else {
						status = "";
					}
				} else if (("LT".equalsIgnoreCase(cscvo.getType())) && ("NTRJS".equalsIgnoreCase(cscvo.getPurpose()))) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   and purpose in ('NTRJS')   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   and purpose in ('NTRJS')   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' ) and upper(REG_NO) not like '%H%'   and purpose in ('NTRJS')   ";
					} else {
						status = "";
					}
				} else if (("LT".equalsIgnoreCase(cscvo.getType())) && ("SPS".equalsIgnoreCase(cscvo.getPurpose()))) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%' and purpose in ('SPS')   ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' and purpose in ('SPS')   ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  and purpose in ('SPS')  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  and purpose in ('SPS')  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' and purpose in ('SPS')   ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' and purpose in ('SPS')   ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%'  and purpose in ('SPS')  ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' and purpose in ('SPS')   ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'  and purpose in ('SPS')    ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'  and purpose in ('SPS')    ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' ) and upper(REG_NO) not like '%H%'  and purpose in ('SPS')    ";
					} else {
						status = "";
					}
				}
				/*
				 * else { if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  and upper(REPSTAT) like '%TKEY%' and purpose in ('AQUA')  "
				 * ; } else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * " and upper(REPSTAT) like '%OB%' and purpose in ('AQUA') "; }
				 * else if ("REG".equalsIgnoreCase(cscvo.getCtype())) { status =
				 * "  AND upper(REPSTAT) like  '%REG%' and purpose in ('AQUA') "
				 * ; } else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%') and purpose in ('AQUA') )"
				 * ; } else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  and upper(REPSTAT) like '%DEL%' and purpose in ('AQUA') ";
				 * } else if ("REL".equalsIgnoreCase(cscvo.getCtype())) { status
				 * =
				 * "  and upper(REPSTAT) like '%REL%' and purpose in ('AQUA') ";
				 * } else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) { status
				 * =
				 * "  AND upper(REPSTAT) like   '%WRT%' and purpose in ('AQUA') "
				 * ; } else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  AND upper(REPSTAT) like  '%BRT%' and purpose in ('AQUA') "
				 * ; } else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and purpose in ('AQUA') "
				 * ; } else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and purpose in ('AQUA') "
				 * ; } else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and purpose in ('AQUA') "
				 * ; } else { status = ""; }
				 */
				// }

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(" select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name"
							+ " ,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)   ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());adsda
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(" select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name"
							+ " ,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
							+ "' and subname='" + cscvo.getSubDiv()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)     ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(" select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name"
							+ " ,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
							+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
							+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
				} else {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
					 * +
					 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
					 * +
					 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
					 * +
					 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * +
					 * " from csc.rep_final@colldblink a,master.spdclmaster@colldblink b"
					 * + " where a.ncpartcd=b.seccd " + status + "" +
					 * cscvo.getCircle() + "" +
					 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					String query = " select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name"
							+ " ,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					System.out.println(query);
					resultSet = statement.executeQuery(" select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name"
							+ " ,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered in Other "
						+ cscvo.getCtype() + "  Type:" + cscvo.getType() + "Industrial.xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered in Other "
						+ cscvo.getCtype() + "  Type:" + cscvo.getType() + "Industrial.xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}
	// Display Export Aqua NTR
	// Export NTR SoLAR

	@SuppressWarnings("unused")
	public CscpayVO AquaNtrSolarScsDetails(CscpayVO cscvo) throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		try {
			if (con != null) {

				if (("LT".equalsIgnoreCase(cscvo.getType())) && ("AQUA".equalsIgnoreCase(cscvo.getPurpose()))) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) not like '%H%' and purpose in ('AQUA') ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO)  not like '%H%' and purpose in ('AQUA') ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO)  not like '%H%' and purpose in ('AQUA') ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) not  like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%' and purpose in ('AQUA') ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) not  like '%H%' and purpose in ('AQUA') ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) not  like '%H%' and purpose in ('AQUA') ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'  and upper(REG_NO)  not like '%H%' and purpose in ('AQUA') ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'  and upper(REG_NO)  not like '%H%' and purpose in ('AQUA') ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT)   like  '%REG%' ) and upper(REG_NO) not like '%H%' and purpose in ('AQUA') ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT)   like '%REL%' ) and upper(REG_NO) not like '%H%' and purpose in ('AQUA') ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT)   like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) not like '%H%' and purpose in ('AQUA') ";
					} else {
						status = "";
					}
				} else if (("LT".equalsIgnoreCase(cscvo.getType())) && ("NTRJS".equalsIgnoreCase(cscvo.getPurpose()))) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%'  and purpose in ('NTRJS')  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   and purpose in ('NTRJS')   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   and purpose in ('NTRJS')   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' ) and upper(REG_NO) not like '%H%'   and purpose in ('NTRJS')   ";
					} else {
						status = "";
					}
				} else if (("LT".equalsIgnoreCase(cscvo.getType())) && ("SPS".equalsIgnoreCase(cscvo.getPurpose()))) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%' and purpose in ('SPS')   ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' and purpose in ('SPS')   ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  and purpose in ('SPS')  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  and purpose in ('SPS')  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' and purpose in ('SPS')   ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' and purpose in ('SPS')   ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%'  and purpose in ('SPS')  ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' and purpose in ('SPS')   ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'  and purpose in ('SPS')    ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'  and purpose in ('SPS')    ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' ) and upper(REG_NO) not like '%H%'  and purpose in ('SPS')    ";
					} else {
						status = "";
					}
				}
				/*
				 * else { if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  and upper(REPSTAT) like '%TKEY%' and purpose in ('AQUA')  "
				 * ; } else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * " and upper(REPSTAT) like '%OB%' and purpose in ('AQUA') "; }
				 * else if ("REG".equalsIgnoreCase(cscvo.getCtype())) { status =
				 * "  AND upper(REPSTAT) like  '%REG%' and purpose in ('AQUA') "
				 * ; } else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%') and purpose in ('AQUA') )"
				 * ; } else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  and upper(REPSTAT) like '%DEL%' and purpose in ('AQUA') ";
				 * } else if ("REL".equalsIgnoreCase(cscvo.getCtype())) { status
				 * =
				 * "  and upper(REPSTAT) like '%REL%' and purpose in ('AQUA') ";
				 * } else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) { status
				 * =
				 * "  AND upper(REPSTAT) like   '%WRT%' and purpose in ('AQUA') "
				 * ; } else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  AND upper(REPSTAT) like  '%BRT%' and purpose in ('AQUA') "
				 * ; } else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and purpose in ('AQUA') "
				 * ; } else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and purpose in ('AQUA') "
				 * ; } else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and purpose in ('AQUA') "
				 * ; } else { status = ""; }
				 */
				// }

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(" select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name"
							+ " ,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)   ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());adsda
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(" select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name"
							+ " ,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
							+ "' and subname='" + cscvo.getSubDiv()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)     ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(" select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name"
							+ " ,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
							+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
							+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
				} else {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
					 * +
					 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
					 * +
					 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
					 * +
					 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * +
					 * " from csc.rep_final@colldblink a,master.spdclmaster@colldblink b"
					 * + " where a.ncpartcd=b.seccd " + status + "" +
					 * cscvo.getCircle() + "" +
					 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					String query = " select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name"
							+ " ,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					System.out.println(query);
					resultSet = statement.executeQuery(" select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name"
							+ " ,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)    ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						/*
						 * * vo.setCircleName(reportRst.getString(1));
						 * vo.setDivisionName(reportRst.getString(2));
						 * vo.setDcbCollection(reportRst.getString(3));
						 * vo.setDcbDemand(reportRst.getString(4));
						 * vo.setDcbPerCent(reportRst.getString(5));
						 * vo.setCummColl(reportRst.getString(8));
						 */

						vo.setCircleName(resultSet.getString(2));
						// vo.setDivision(resultSet.getString(3));
						// vo.setEro(resultSet.getString(4));
						// vo.setSubDiv(resultSet.getString(4));
						vo.setSec(resultSet.getString(3));
						vo.setType(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setRegDate(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));

						// vo.setAddress(resultSet.getString(10));
						// vo.setPhono(resultSet.getString(11));
						// vo.setS_group(resultSet.getString(12));

						vo.setCat(resultSet.getString(8));
						vo.setLoad(resultSet.getString(9));
						vo.setPurpose(resultSet.getString(10));
						vo.setDemand(resultSet.getString(11));
						vo.setPaid(resultSet.getString(12));
						vo.setPaid_date(resultSet.getString(13));

						// vo.setGroup_demand(resultSet.getString(18));
						// vo.setGroup_coll(resultSet.getString(19));

						// vo.setPaid_date(resultSet.getString(20));
						// vo.setRel_date(resultSet.getString(21));

						// vo.setUscno(resultSet.getString(22));
						vo.setRef_no(resultSet.getString(14));
						vo.setExe_type(resultSet.getString(15));

						// vo.setPen_simply_brt(resultSet.getString(24));
						// vo.setSla_desc(resultSet.getString(25));

						// vo.setExe_type(resultSet.getString(26));
						// vo.setStatus(resultSet.getString(27));
						// vo.setCategory(reportRst.getString(4));
						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}

	// New Connections Under BRT
	// All Services Requests
	@SuppressWarnings("unchecked")
	public CscpayVO getTopTenBrtNewConnReportDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String counter = "";
		String complaint_type = "";
		/*
		 * if (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType()))
		 * { complaint_type =
		 * " where (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
		 * + cscvo.getComplaintType() + "'"; if
		 * ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * "  and (meseva_ref like '%WEBSITE%' ) "; } else if
		 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " and  (meseva_ref like '%MEESEVA%' ) "; } else if
		 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) "
		 * ; } else { counter = ""; } } else { complaint_type = ""; if
		 * ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " where  (meseva_ref like '%WEBSITE%' ) "; } else if
		 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " where  (meseva_ref like '%MEESEVA%' ) "; } else if
		 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " where ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))"
		 * ; } else { counter = ""; } }
		 */
		// complaint_type="(complaint||sub_complaint||'~'||substr(complaint_description,1,20))
		// like '96~Meter Burnt/Glass Br'"

		/*
		 * if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * "   (meseva_ref like '%WEBSITE%' ) "; } else if
		 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " and  (meseva_ref like '%MEESEVA%' ) "; } else if
		 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * "  (meseva_ref like '%SACHIVALAYAM%' ) "; } else { counter = ""; }
		 */

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		String query = "";
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {
				List<String> list = Arrays.asList("1", "2", "3", "4", "5");
				/*
				 * List<String> list = Arrays.asList("LT1", "LT2", "LT3", "LT4",
				 * "LT5");
				 */
				List<String> list1 = Arrays.asList("cat1", "cat2", "cat3", "cat4", "cat5");

				// String query="SELECT n.reg_no ,n.circle_code
				// ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR','UNKNOWN')
				// circle,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0)
				// FROM new_connections n INNER JOIN cscpay c ON n.reg_no=
				// c.csregno AND c.cscounter=? AND c.cscancelid='N' AND c.CSPRDT
				// BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')
				// AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA'
				// THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN
				// 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR'
				// THEN 7 ELSE 1 END)";

				Iterator<String> iterator = list.iterator();
				Iterator<String> iterator1 = list1.iterator();

				while (iterator.hasNext()) {
					query = "select  row_number() over (partition by null order by null) sno,cirname, divname, nvl(sum("
							+ iterator1.next() + "),0) cat1 from" + " (select ncpartcd,"
							+ " sum(case when repstat like 'MEELT1%BRT%' then 1 end) cat1,"
							+ " sum(case when repstat like 'MEELT2%BRT%' then 1 end) cat2,"
							+ " sum(case when repstat like 'MEELT3%BRT%' then 1 end) cat3,"
							+ " sum(case when repstat like 'MEELT4%BRT%' then 1 end) cat4,"
							+ " sum(case when repstat like 'MEELT5%BRT%' then 1 end) cat5,"
							+ " sum(case when repstat like 'MEELT6%BRT%' then 1 end) cat6,"
							+ " sum(case when repstat like 'MEELT7%BRT%' then 1 end) cat7,"
							+ " sum(case when repstat like 'MEELT8%BRT%' then 1 end) cat8 from rep_final"
							+ " where category_supply like '" + iterator.next()
							+ "%' AND eststatus='02' group by ncpartcd) a,"
							+ " (select seccd, cirname, divname from spdclmaster where circd not in ('1','4','6','9') ) b"
							+ " where a.ncpartcd=b.seccd  group by (cirname,divname) order by CAT1 desc"
							+ " FETCH FIRST 10 ROWS ONLY";
					// }
					reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(4, cscvo.getCircleName());
					// System.out.println(query);
					System.out.println(query);
					reportRst = reportPStmt.executeQuery();

					if (reportRst != null) {

						while (reportRst.next()) {
							CscpayVO cscvoobj = new CscpayVO();
							cscvoobj.setCircleCode(reportRst.getString(1));
							cscvoobj.setCircle(reportRst.getString(2));
							cscvoobj.setDivision(reportRst.getString(3));
							cscvoobj.setCat1Scs(reportRst.getInt(4));
							/*
							 * cscvoobj.setCat2Scs(reportRst.getInt(4));
							 * cscvoobj.setCat3Scs(reportRst.getInt(5));
							 * cscvoobj.setCat4Scs(reportRst.getInt(6));
							 * cscvoobj.setCat5Scs(reportRst.getInt(7));
							 * cscvoobj.setCat6Scs(reportRst.getInt(8));
							 * cscvoobj.setCat7Scs(reportRst.getInt(9));
							 * cscvoobj.setCat8Scs(reportRst.getInt(10));
							 */

							// cscmap.put(reportRst.getString(1), cscvoobj);
							dashList.add(cscvoobj);

						}

					}

					/*
					 * List[] lists = split(dashList); //
					 * cscvo.setCscpaymap(cscmap); cscvo.setList(lists[0]);
					 * cscvo.setList2(lists[1]); cscvo.setList3(lists[2]);
					 * cscvo.setList4(lists[3]); cscvo.setList5(lists[4]);
					 */
					/*
					 * if (reportRst != null) {
					 * 
					 * while (reportRst.next()) { CscpayVO cscvoobj = new
					 * CscpayVO(); cscvoobj.setCircle(reportRst.getString(1));
					 * cscvoobj.setDivision(reportRst.getString(2));
					 * cscvoobj.setCat1Scs(reportRst.getInt(3)); //
					 * cscmap.put(reportRst.getString(1), cscvoobj);
					 * dashList.add(cscvoobj);
					 * 
					 * } List[] lists = split(dashList); //
					 * cscvo.setCscpaymap(cscmap); cscvo.setList(lists[0]);
					 * cscvo.setList2(lists[1]); cscvo.setList3(lists[2]);
					 * cscvo.setList4(lists[3]); cscvo.setList5(lists[4]);
					 * 
					 * 
					 * }
					 */
				}
				@SuppressWarnings("rawtypes")
				List[] lists = splittopTen(dashList);
				// cscvo.setCscpaymap(cscmap);
				cscvo.setList(lists[0]);
				cscvo.setList2(lists[1]);
				cscvo.setList3(lists[2]);
				cscvo.setList4(lists[3]);
				cscvo.setList5(lists[4]);

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// Export Bryt New Connections
	/*
	 * private List[] split(List<CscpayVO> dashList) { // TODO Auto-generated
	 * method stub return null; }
	 */
	public static List[] splittopTen(List<CscpayVO> list) {
		// create two empty lists
		List<CscpayVO> first = new ArrayList<CscpayVO>();
		List<CscpayVO> second = new ArrayList<CscpayVO>();
		List<CscpayVO> third = new ArrayList<CscpayVO>();
		List<CscpayVO> fourth = new ArrayList<CscpayVO>();
		List<CscpayVO> fifth = new ArrayList<CscpayVO>();

		// get size of the list
		int size = list.size();

		// First size)/2 element copy into list
		// first and rest second list
		for (int i = 0; i < 10; i++)
			first.add(list.get(i));
		// size=size-10;
		// Second size)/2 element copy into list
		// first and rest second list
		for (int i = 10; i < 20; i++)
			second.add(list.get(i));

		// size=size-10;
		for (int i = 20; i < 30; i++)
			third.add(list.get(i));

		// size=size-10;
		for (int i = 30; i < 40; i++)
			fourth.add(list.get(i));

		// size=size-10;
		for (int i = 40; i < 50; i++)
			fifth.add(list.get(i));

		// return a List of array
		return new List[] { first, second, third, fourth, fifth };
	}

	public static List[] split(List<CscpayVO> list) {
		// create two empty lists
		List<CscpayVO> first = new ArrayList<CscpayVO>();
		List<CscpayVO> second = new ArrayList<CscpayVO>();
		List<CscpayVO> third = new ArrayList<CscpayVO>();
		List<CscpayVO> fourth = new ArrayList<CscpayVO>();
		List<CscpayVO> fifth = new ArrayList<CscpayVO>();

		// get size of the list
		int size = list.size();

		// First size)/2 element copy into list
		// first and rest second list
		for (int i = 0; i < 3; i++)
			first.add(list.get(i));
		// size=size-10;
		// Second size)/2 element copy into list
		// first and rest second list
		for (int i = 3; i < 6; i++)
			second.add(list.get(i));

		// size=size-10;
		for (int i = 6; i < 9; i++)
			third.add(list.get(i));

		// size=size-10;
		for (int i = 9; i < 12; i++)
			fourth.add(list.get(i));

		// size=size-10;
		for (int i = 12; i < 15; i++)
			fifth.add(list.get(i));

		// return a List of array
		return new List[] { first, second, third, fourth, fifth };
	}

	@SuppressWarnings("unused")
	public void getBrtNewConnReportDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String cattype = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				/*
				 * if
				 * (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType
				 * ())) { complaint_type =
				 * "  and (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
				 * + cscvo.getComplaintType() + "'"; if
				 * ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter = "   (meseva_ref like '%WEBSITE%' ) "; } else if
				 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter = " and  (meseva_ref like '%MEESEVA%' ) "; } else if
				 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter =
				 * " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) "
				 * ; } else { counter = ""; } } else { complaint_type = ""; if
				 * ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter = " and   (meseva_ref like '%WEBSITE%' ) "; } else if
				 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter = " and   (meseva_ref like '%MEESEVA%' ) "; } else if
				 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter =
				 * " and  ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))"
				 * ; } else { counter = ""; } }
				 */
				/*
				 * if("Copm".equalsIgnoreCase(cscvo.getType())){ status=
				 * "  AND status = 'balance' "; }
				 */
				if ("1".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = "  and a.category_supply like '1%' ";
				} else if ("2".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = "  and a.category_supply like '2%' ";
				} else if ("3".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = " and a.category_supply like '3%' ";
				} else if ("4".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = " and a.category_supply like '4%' ";
				} else {
					cattype = " and a.category_supply like '5%'";
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname Subdivision,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
							+ " ,reg_no,reg_date,consumer_name,address,PHONE_NO,EMAIL"
							+ " ,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group"
							+ " ,category_supply CAT,contracted_load Load,purpose"
							+ " ,nvl(sapdem,extdem) Demand,totamt Paid,GRP_DEMAND Group_Demand,GRP_COLL Group_Coll"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date"
							+ " ,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')    Release_date,uscno,meseva_ref reference_no,pending_stat"
							+ " ,slastat||sladesc sla_description,execution_type"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension'	else 'Simplified' end) eststatus"
							+ " from rep_final a,spdclmaster b"
							+ " where a.ncpartcd=b.seccd and a.repstat like 'MEELT%BRT%'" + " and b.subname='"
							+ cscvo.getCircle() + "' AND  b.secname='" + cscvo.getDivision() + "'" + " " + cattype
							+ " and a.eststatus='02' order by cirname,divname,subname,secname ,(case when reg_no like '%H%' then 'HT' else 'LT' end) ,reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else {
					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,divcd,seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and CIRNAME='" +
					 * cscvo.getCircle() + "' AND DIVNAME='" +
					 * cscvo.getDivision() + "'");
					 * 
					 * 
					 */
					String qry = "select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname Subdivision,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
							+ " ,reg_no,reg_date,consumer_name,address,PHONE_NO,EMAIL"
							+ " ,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group"
							+ " ,category_supply CAT,contracted_load Load,purpose"
							+ " ,nvl(sapdem,extdem) Demand,totamt Paid,GRP_DEMAND Group_Demand,GRP_COLL Group_Coll"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date"
							+ " ,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')    Release_date,uscno,meseva_ref reference_no,pending_stat"
							+ " ,slastat||sladesc sla_description,execution_type"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension'	else 'Simplified' end) eststatus"
							+ " from rep_final a,spdclmaster b"
							+ " where a.ncpartcd=b.seccd and a.repstat like 'MEELT%BRT%'" + " and b.CIRNAME='"
							+ cscvo.getCircle() + "' AND  b.DIVNAME='" + cscvo.getDivision() + "'" + " " + cattype
							+ " and a.eststatus='02' order by cirname,divname,subname,secname ,(case when reg_no like '%H%' then 'HT' else 'LT' end) ,reg_date";
					//System.out.println(qry);
					resultSet = statement.executeQuery("select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname Subdivision,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
							+ " ,reg_no,reg_date,consumer_name,address,PHONE_NO,EMAIL"
							+ " ,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group"
							+ " ,category_supply CAT,contracted_load Load,purpose"
							+ " ,nvl(sapdem,extdem) Demand,totamt Paid,GRP_DEMAND Group_Demand,GRP_COLL Group_Coll"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date"
							+ " ,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')    Release_date,uscno,meseva_ref reference_no,pending_stat"
							+ " ,slastat||sladesc sla_description,execution_type"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension'	else 'Simplified' end) eststatus"
							+ " from rep_final a,spdclmaster b"
							+ " where a.ncpartcd=b.seccd and a.repstat like 'MEELT%BRT%'" + " and b.CIRNAME='"
							+ cscvo.getCircle() + "' AND  b.DIVNAME='" + cscvo.getDivision() + "'" + " " + cattype
							+ " and a.eststatus='02' order by cirname,divname,subname,secname ,(case when reg_no like '%H%' then 'HT' else 'LT' end) ,reg_date");
					// }
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				response.setHeader("Content-Disposition",
						"attachment; filename=NewConnectionS_Under_BTR_Category_:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=NewConnectionS_Under_BTR_Category_:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}
	// BRT New Connectio0n Servcie wise Display

	@SuppressWarnings("unused")
	public CscpayVO getBrtNewConnReportScsDetails(CscpayVO cscvo) throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String cattype = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				/*
				 * if
				 * (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType
				 * ())) { complaint_type =
				 * "  and (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
				 * + cscvo.getComplaintType() + "'"; if
				 * ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter = "   (meseva_ref like '%WEBSITE%' ) "; } else if
				 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter = " and  (meseva_ref like '%MEESEVA%' ) "; } else if
				 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter =
				 * " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) "
				 * ; } else { counter = ""; } } else { complaint_type = ""; if
				 * ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter = " and   (meseva_ref like '%WEBSITE%' ) "; } else if
				 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter = " and   (meseva_ref like '%MEESEVA%' ) "; } else if
				 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter =
				 * " and  ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))"
				 * ; } else { counter = ""; } }
				 */
				/*
				 * if("Copm".equalsIgnoreCase(cscvo.getType())){ status=
				 * "  AND status = 'balance' "; }
				 */
				if ("1".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = "  and a.category_supply like '1%' ";
				} else if ("2".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = "  and a.category_supply like '2%' ";
				} else if ("3".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = " and a.category_supply like '3%' ";
				} else if ("4".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = " and a.category_supply like '4%' ";
				} else {
					cattype = " and a.category_supply like '5%'";
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname Subdivision,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
							+ " ,reg_no,reg_date,consumer_name,address,PHONE_NO,EMAIL"
							+ " ,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group"
							+ " ,category_supply CAT,contracted_load Load,purpose"
							+ " ,nvl(sapdem,extdem) Demand,totamt Paid,GRP_DEMAND Group_Demand,GRP_COLL Group_Coll"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date"
							+ " ,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')    Release_date,uscno,meseva_ref reference_no,pending_stat"
							+ " ,slastat||sladesc sla_description,execution_type"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension'	else 'Simplified' end) eststatus"
							+ " from rep_final a,spdclmaster b"
							+ " where a.ncpartcd=b.seccd and a.repstat like 'MEELT%BRT%'" + " and b.subname='"
							+ cscvo.getCircle() + "' AND  b.secname='" + cscvo.getDivision() + "'" + " " + cattype
							+ " and a.eststatus='02' order by cirname,divname,subname,secname ,(case when reg_no like '%H%' then 'HT' else 'LT' end) ,reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else {
					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,divcd,seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and CIRNAME='" +
					 * cscvo.getCircle() + "' AND DIVNAME='" +
					 * cscvo.getDivision() + "'");
					 * 
					 * 
					 */
					String qry = "select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname Subdivision,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
							+ " ,reg_no,reg_date,consumer_name,address,PHONE_NO,EMAIL"
							+ " ,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group"
							+ " ,category_supply CAT,contracted_load Load,purpose"
							+ " ,nvl(sapdem,extdem) Demand,totamt Paid,GRP_DEMAND Group_Demand,GRP_COLL Group_Coll"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date"
							+ " ,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')    Release_date,uscno,meseva_ref reference_no,pending_stat"
							+ " ,slastat||sladesc sla_description,execution_type"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension'	else 'Simplified' end) eststatus"
							+ " from rep_final a,spdclmaster b"
							+ " where a.ncpartcd=b.seccd and a.repstat like 'MEELT%BRT%'" + " and b.CIRNAME='"
							+ cscvo.getCircle() + "' AND  b.DIVNAME='" + cscvo.getDivision() + "'" + " " + cattype
							+ " and a.eststatus='02' order by cirname,divname,subname,secname ,(case when reg_no like '%H%' then 'HT' else 'LT' end) ,reg_date";
					System.out.println(qry);
					resultSet = statement.executeQuery("select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname Subdivision,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
							+ " ,reg_no,reg_date,consumer_name,address,PHONE_NO,EMAIL"
							+ " ,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group"
							+ " ,category_supply CAT,contracted_load Load,purpose"
							+ " ,nvl(sapdem,extdem) Demand,totamt Paid,GRP_DEMAND Group_Demand,GRP_COLL Group_Coll"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date"
							+ " ,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')    Release_date,uscno,meseva_ref reference_no,pending_stat"
							+ " ,slastat||sladesc sla_description,execution_type"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension'	else 'Simplified' end) eststatus"
							+ " from rep_final a,spdclmaster b"
							+ " where a.ncpartcd=b.seccd and a.repstat like 'MEELT%BRT%'" + " and b.CIRNAME='"
							+ cscvo.getCircle() + "' AND  b.DIVNAME='" + cscvo.getDivision() + "'" + " " + cattype
							+ " and a.eststatus='02' order by cirname,divname,subname,secname ,(case when reg_no like '%H%' then 'HT' else 'LT' end) ,reg_date");
					// }
				}
				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						/*
						 * * vo.setCircleName(reportRst.getString(1));
						 * vo.setDivisionName(reportRst.getString(2));
						 * vo.setDcbCollection(reportRst.getString(3));
						 * vo.setDcbDemand(reportRst.getString(4));
						 * vo.setDcbPerCent(reportRst.getString(5));
						 * vo.setCummColl(reportRst.getString(8));
						 */

						vo.setCircleName(resultSet.getString(2));
						vo.setDivision(resultSet.getString(3));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(4));
						vo.setSec(resultSet.getString(5));
						vo.setType(resultSet.getString(6));
						vo.setReg_no(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setCunsu_name(resultSet.getString(9));

						vo.setAddress(resultSet.getString(10));
						vo.setPhono(resultSet.getString(11));
						vo.setEmail(resultSet.getString(12));
						vo.setS_group(resultSet.getString(13));

						vo.setCat(resultSet.getString(14));
						vo.setLoad(resultSet.getString(15));
						vo.setPurpose(resultSet.getString(16));
						vo.setDemand(resultSet.getString(17));
						vo.setPaid(resultSet.getString(18));

						vo.setGroup_demand(resultSet.getString(19));
						vo.setGroup_coll(resultSet.getString(20));

						vo.setPaid_date(resultSet.getString(21));
						vo.setRel_date(resultSet.getString(22));

						vo.setUscno(resultSet.getString(23));
						vo.setRef_no(resultSet.getString(24));

						vo.setPen_simply_brt(resultSet.getString(25));
						vo.setSla_desc(resultSet.getString(26));

						vo.setExe_type(resultSet.getString(27));
						vo.setStatus(resultSet.getString(28));
						// vo.setCategory(reportRst.getString(4));
						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;

	}
	// top ten Brt New Connection
	// getBrtNewConnReportDetails
	// getTopTenBrtNewConnReportDetails

	public CscpayVO getBrtNewConnReportDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String counter = "";
		String complaint_type = "";
		/*
		 * if (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType()))
		 * { complaint_type =
		 * " where (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
		 * + cscvo.getComplaintType() + "'"; if
		 * ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * "  and (meseva_ref like '%WEBSITE%' ) "; } else if
		 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " and  (meseva_ref like '%MEESEVA%' ) "; } else if
		 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) "
		 * ; } else { counter = ""; } } else { complaint_type = ""; if
		 * ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " where  (meseva_ref like '%WEBSITE%' ) "; } else if
		 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " where  (meseva_ref like '%MEESEVA%' ) "; } else if
		 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " where ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))"
		 * ; } else { counter = ""; } }
		 */
		// complaint_type="(complaint||sub_complaint||'~'||substr(complaint_description,1,20))
		// like '96~Meter Burnt/Glass Br'"

		/*
		 * if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * "   (meseva_ref like '%WEBSITE%' ) "; } else if
		 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " and  (meseva_ref like '%MEESEVA%' ) "; } else if
		 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * "  (meseva_ref like '%SACHIVALAYAM%' ) "; } else { counter = ""; }
		 */

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		String query = "";
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				// String query="SELECT n.reg_no ,n.circle_code
				// ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR','UNKNOWN')
				// circle,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0)
				// FROM new_connections n INNER JOIN cscpay c ON n.reg_no=
				// c.csregno AND c.cscounter=? AND c.cscancelid='N' AND c.CSPRDT
				// BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')
				// AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA'
				// THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN
				// 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR'
				// THEN 7 ELSE 1 END)";
				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * query =
					 * "select   NVL(ltrim(subname,'z'),'DISCOM'),NVL(ltrim(secname,'z'),'TOTAL') secname,"
					 * + " registered,completed,deleted,balance from" +
					 * " (select subname,secname,(ROW_NUMBER() OVER (partition by secname order by subname,secname)), "
					 * +
					 * " (case when secname is not null then sum(reg) else sum(reg) end) registered,"
					 * +
					 * " (case when secname is not null then sum(rel) else sum(rel) end) completed, "
					 * +
					 * " (case when secname is not null then sum(del) else sum(del) end) deleted, "
					 * +
					 * " (case when secname is not null then sum(bal) else sum(bal) end) balance  "
					 * +
					 * " from (select cspartcd,complaint,sub_complaint,count(reg_no) reg, "
					 * +
					 * " sum(case when status='released' then 1 else 0 end) rel,"
					 * +
					 * " sum(case when status='deleted' then 1 else 0 end) del, "
					 * +
					 * " sum(case when status='balance' then 1 else 0 end) bal from newcomp_tab "
					 * + complaint_type + " " + counter + "" +
					 * " group by cspartcd,complaint,sub_complaint) a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd from spdclmaster where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd AND CIRNAME=? and divname=? group by rollup(subname,secname),divname)order by subname,secname "
					 * ;
					 */
					query = "select NVL(subname,'DISCOM'), NVL(secname,'TOTAL'),nvl(sum(cat1),0),nvl(sum(cat2),0),nvl(sum(cat3),0),nvl(sum(cat4),0),nvl(sum(cat5),0),nvl(sum(cat6),0),nvl(sum(cat7),0),nvl(sum(cat8),0) from "
							+ " (select ncpartcd, sum(case when repstat like 'MEELT1%BRT%' then 1 end) cat1, "
							+ " sum(case when repstat like 'MEELT2%BRT%' then 1 end) cat2,"
							+ " sum(case when repstat like 'MEELT3%BRT%' then 1 end) cat3,"
							+ " sum(case when repstat like 'MEELT4%BRT%' then 1 end) cat4,"
							+ " sum(case when repstat like 'MEELT5%BRT%' then 1 end) cat5,"
							+ " sum(case when repstat like 'MEELT6%BRT%' then 1 end) cat6,"
							+ " sum(case when repstat like 'MEELT7%BRT%' then 1 end) cat7,"
							+ " sum(case when repstat like 'MEELT8%BRT%' then 1 end) cat8 from"
							+ " rep_final where eststatus='02' group by ncpartcd ) a,"
							+ " (select cirname,divname,subname,secname,divcd,seccd from spdclmaster where circd not in ('1','4','6','9')) b"
							+ " where a.ncpartcd=b.seccd  AND CIRNAME=? and divname=?  "
							+ " group by rollup(subname,secname) order by subname,secname";
					reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					//System.out.println(query);

					reportRst = reportPStmt.executeQuery();
				} else {
					query = "select NVL(cirname,'DISCOM'), NVL(DIVNAME,'TOTAL'),nvl(sum(cat1),0),nvl(sum(cat2),0),nvl(sum(cat3),0),nvl(sum(cat4),0),nvl(sum(cat5),0),nvl(sum(cat6),0),nvl(sum(cat7),0),nvl(sum(cat8),0) from "
							+ " (select ncpartcd, sum(case when repstat like 'MEELT1%BRT%' then 1 end) cat1, "
							+ " sum(case when repstat like 'MEELT2%BRT%' then 1 end) cat2,"
							+ " sum(case when repstat like 'MEELT3%BRT%' then 1 end) cat3,"
							+ " sum(case when repstat like 'MEELT4%BRT%' then 1 end) cat4,"
							+ " sum(case when repstat like 'MEELT5%BRT%' then 1 end) cat5,"
							+ " sum(case when repstat like 'MEELT6%BRT%' then 1 end) cat6,"
							+ " sum(case when repstat like 'MEELT7%BRT%' then 1 end) cat7,"
							+ " sum(case when repstat like 'MEELT8%BRT%' then 1 end) cat8 from"
							+ " rep_final where eststatus='02' group by ncpartcd) a,"
							+ " (select seccd,cirname,divname from spdclmaster where circd not in ('1','4','6','9')) b"
							+ " where a.ncpartcd=b.seccd"
							+ " group by rollup(cirname,divname) order by cirname,divname";
					reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(4, cscvo.getCircleName());
					// System.out.println(query);
					//System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}
				// String query2="SELECT n.reg_no ,n.circle_code
				// ,m.cirname,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,c.csregno,nvl(sum(c.cssd),0),nvl(sum(c.csdevchg),0),nvl(sum(c.csslchg),0),nvl(sum(c.cstotamt),0),nvl(sum(c.csadvccchgs),0),nvl(sum(c.cssvchg),0),nvl(sum(c.csotherchgs),0)
				// FROM new_connections n,cscpay c,master.spdclmaster m where
				// n.reg_no=c.csregno and c.cscounter=? and
				// n.circle_code=m.circd and m.cirname=? and c.cscancelid='N'
				// and c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND
				// TO_DATE(?,'YYYY-MM-DD') group by
				// n.reg_no,c.csregno,n.circle_code,n.consumer_name,m.cirname,n.category_supply,n.application_fee,n.contracted_load";
				if (reportRst != null) {

					while (reportRst.next()) {
						CscpayVO cscvoobj = new CscpayVO();
						cscvoobj.setCircle(reportRst.getString(1));
						cscvoobj.setDivision(reportRst.getString(2));
						cscvoobj.setCat1Scs(reportRst.getInt(3));
						cscvoobj.setCat2Scs(reportRst.getInt(4));
						cscvoobj.setCat3Scs(reportRst.getInt(5));
						cscvoobj.setCat4Scs(reportRst.getInt(6));
						cscvoobj.setCat5Scs(reportRst.getInt(7));
						cscvoobj.setCat6Scs(reportRst.getInt(8));
						cscvoobj.setCat7Scs(reportRst.getInt(9));
						cscvoobj.setCat8Scs(reportRst.getInt(10));

						// cscmap.put(reportRst.getString(1), cscvoobj);
						dashList.add(cscvoobj);

					}

					// cscvo.setCscpaymap(cscmap);
					cscvo.setList(dashList);

					/*
					 * while (reportRst.next()) {
					 * 
					 * if (cscmap.containsKey(reportRst.getString(1))) {
					 * CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
					 * dmapobj.setDivision(reportRst.getString(2));
					 * dmapobj.setRegistered(reportRst.getString(3));
					 * dmapobj.setCompleted(reportRst.getString(4));
					 * dmapobj.setDeleted(reportRst.getString(5));
					 * dmapobj.setBalance(reportRst.getString(6));
					 * 
					 * 
					 * } else { CscpayVO dmapobj = new CscpayVO();
					 * 
					 * dmapobj.setDivision(reportRst.getString(2));
					 * dmapobj.setRegistered(reportRst.getString(3));
					 * dmapobj.setCompleted(reportRst.getString(4));
					 * dmapobj.setDeleted(reportRst.getString(5));
					 * dmapobj.setBalance(reportRst.getString(6));
					 * 
					 * cscmap.put(reportRst.getString(1), dmapobj); } }
					 * cscvo.setCscpaymap(cscmap);;
					 * 
					 */}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// Export Top ten Brt New Services

	@SuppressWarnings("unused")
	public void getExportToptenBrtNewConnReportDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String cattype = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		
		OutputStream outputStream =null;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				/*
				 * if
				 * (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType
				 * ())) { complaint_type =
				 * "  and (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
				 * + cscvo.getComplaintType() + "'"; if
				 * ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter = "   (meseva_ref like '%WEBSITE%' ) "; } else if
				 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter = " and  (meseva_ref like '%MEESEVA%' ) "; } else if
				 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter =
				 * " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) "
				 * ; } else { counter = ""; } } else { complaint_type = ""; if
				 * ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter = " and   (meseva_ref like '%WEBSITE%' ) "; } else if
				 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter = " and   (meseva_ref like '%MEESEVA%' ) "; } else if
				 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
				 * counter =
				 * " and  ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))"
				 * ; } else { counter = ""; } }
				 */
				/*
				 * if("Copm".equalsIgnoreCase(cscvo.getType())){ status=
				 * "  AND status = 'balance' "; }
				 */
				if ("1".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = "  and a.category_supply like '1%' ";
				} else if ("2".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = "  and a.category_supply like '2%' ";
				} else if ("3".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = " and a.category_supply like '3%' ";
				} else if ("4".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = " and a.category_supply like '4%' ";
				} else {
					cattype = " and a.category_supply like '5%'";
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname Subdivision,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
							+ " ,reg_no,reg_date,consumer_name,address,PHONE_NO,EMAIL"
							+ " ,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group"
							+ " ,category_supply CAT,contracted_load Load,purpose"
							+ " ,nvl(sapdem,extdem) Demand,totamt Paid,GRP_DEMAND Group_Demand,GRP_COLL Group_Coll"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date"
							+ " ,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE  Release_date,uscno,meseva_ref reference_no,pending_stat"
							+ " ,slastat||sladesc sla_description,execution_type"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension'	else 'Simplified' end) eststatus"
							+ " from rep_final a,spdclmaster b"
							+ " where a.ncpartcd=b.seccd and a.repstat like 'MEELT%BRT%'" + " and b.subname='"
							+ cscvo.getCircle() + "' AND  b.secname='" + cscvo.getDivision() + "'" + " " + cattype
							+ " and a.eststatus='02' order by cirname,divname,subname,secname ,(case when reg_no like '%H%' then 'HT' else 'LT' end) ,reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else {
					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,divcd,seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and CIRNAME='" +
					 * cscvo.getCircle() + "' AND DIVNAME='" +
					 * cscvo.getDivision() + "'");
					 * 
					 * 
					 */
					String qry = "select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_date,consumer_name"
							+ " ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no "
							+ "  from rep_final a,spdclmaster b" + " where a.ncpartcd=b.seccd"
							+ " and a.repstat like 'MEELT%BRT%' and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='"
							+ cscvo.getDivision() + "'" + " " + cattype + " and a.eststatus='02'"
							+ " order by cirname,divname,subname,secname ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					System.out.println(qry);
					resultSet = statement.executeQuery(
							"select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_date,consumer_name"
									+ " ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
									+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no "
									+ "  from rep_final a,spdclmaster b" + " where a.ncpartcd=b.seccd"
									+ " and a.repstat like 'MEELT%BRT%'  and CIRNAME='" + cscvo.getCircle()
									+ "' AND DIVNAME='" + cscvo.getDivision() + "'" + cattype + " and a.eststatus='02'"
									+ " order by cirname,divname,subname,secname ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// }
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				response.setHeader("Content-Disposition",
						"attachment; filename=NewConnectionS_Under_BTR_Category_:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=NewConnectionS_Under_BTR_Category_:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
			     outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// Top Three Brt
	@SuppressWarnings("unchecked")
	public CscpayVO getTopThreeBrtNewConnReportDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String counter = "";
		String complaint_type = "";
		/*
		 * if (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType()))
		 * { complaint_type =
		 * " where (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
		 * + cscvo.getComplaintType() + "'"; if
		 * ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * "  and (meseva_ref like '%WEBSITE%' ) "; } else if
		 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " and  (meseva_ref like '%MEESEVA%' ) "; } else if
		 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) "
		 * ; } else { counter = ""; } } else { complaint_type = ""; if
		 * ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " where  (meseva_ref like '%WEBSITE%' ) "; } else if
		 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " where  (meseva_ref like '%MEESEVA%' ) "; } else if
		 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " where ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))"
		 * ; } else { counter = ""; } }
		 */
		// complaint_type="(complaint||sub_complaint||'~'||substr(complaint_description,1,20))
		// like '96~Meter Burnt/Glass Br'"

		/*
		 * if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * "   (meseva_ref like '%WEBSITE%' ) "; } else if
		 * ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * " and  (meseva_ref like '%MEESEVA%' ) "; } else if
		 * ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) { counter =
		 * "  (meseva_ref like '%SACHIVALAYAM%' ) "; } else { counter = ""; }
		 */

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		String query = "";
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {
				List<String> list = Arrays.asList("1", "2", "3", "4", "5");
				/*
				 * List<String> list = Arrays.asList("LT1", "LT2", "LT3", "LT4",
				 * "LT5");
				 */
				List<String> list1 = Arrays.asList("cat1", "cat2", "cat3", "cat4", "cat5");

				// String query="SELECT n.reg_no ,n.circle_code
				// ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR','UNKNOWN')
				// circle,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0)
				// FROM new_connections n INNER JOIN cscpay c ON n.reg_no=
				// c.csregno AND c.cscounter=? AND c.cscancelid='N' AND c.CSPRDT
				// BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')
				// AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA'
				// THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN
				// 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR'
				// THEN 7 ELSE 1 END)";

				Iterator<String> iterator = list.iterator();
				Iterator<String> iterator1 = list1.iterator();

				while (iterator.hasNext()) {
					query = "select  row_number() over (partition by null order by null) sno,cirname,  nvl(sum("
							+ iterator1.next() + "),0) cat1 from" + " (select ncpartcd,"
							+ " sum(case when repstat like 'MEELT1%BRT%' then 1 end) cat1,"
							+ " sum(case when repstat like 'MEELT2%BRT%' then 1 end) cat2,"
							+ " sum(case when repstat like 'MEELT3%BRT%' then 1 end) cat3,"
							+ " sum(case when repstat like 'MEELT4%BRT%' then 1 end) cat4,"
							+ " sum(case when repstat like 'MEELT5%BRT%' then 1 end) cat5,"
							+ " sum(case when repstat like 'MEELT6%BRT%' then 1 end) cat6,"
							+ " sum(case when repstat like 'MEELT7%BRT%' then 1 end) cat7,"
							+ " sum(case when repstat like 'MEELT8%BRT%' then 1 end) cat8 from rep_final"
							+ " where category_supply like '" + iterator.next()
							+ "%' AND eststatus='02' group by ncpartcd) a,"
							+ " (select seccd, cirname, divname from spdclmaster where circd not in ('1','4','6','9') ) b"
							+ " where a.ncpartcd=b.seccd  group by (cirname) order by CAT1 desc"
							+ " FETCH FIRST 3 ROWS ONLY";
					// }
					reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(4, cscvo.getCircleName());
					// System.out.println(query);
					System.out.println(query);
					reportRst = reportPStmt.executeQuery();

					if (reportRst != null) {

						while (reportRst.next()) {
							CscpayVO cscvoobj = new CscpayVO();
							cscvoobj.setCircleCode(reportRst.getString(1));
							cscvoobj.setCircle(reportRst.getString(2));
							/* cscvoobj.setDivision(reportRst.getString(3)); */
							cscvoobj.setCat1Scs(reportRst.getInt(3));
							/*
							 * cscvoobj.setCat2Scs(reportRst.getInt(4));
							 * cscvoobj.setCat3Scs(reportRst.getInt(5));
							 * cscvoobj.setCat4Scs(reportRst.getInt(6));
							 * cscvoobj.setCat5Scs(reportRst.getInt(7));
							 * cscvoobj.setCat6Scs(reportRst.getInt(8));
							 * cscvoobj.setCat7Scs(reportRst.getInt(9));
							 * cscvoobj.setCat8Scs(reportRst.getInt(10));
							 */

							// cscmap.put(reportRst.getString(1), cscvoobj);
							dashList.add(cscvoobj);

						}

					}

					/*
					 * List[] lists = split(dashList); //
					 * cscvo.setCscpaymap(cscmap); cscvo.setList(lists[0]);
					 * cscvo.setList2(lists[1]); cscvo.setList3(lists[2]);
					 * cscvo.setList4(lists[3]); cscvo.setList5(lists[4]);
					 */
					/*
					 * if (reportRst != null) {
					 * 
					 * while (reportRst.next()) { CscpayVO cscvoobj = new
					 * CscpayVO(); cscvoobj.setCircle(reportRst.getString(1));
					 * cscvoobj.setDivision(reportRst.getString(2));
					 * cscvoobj.setCat1Scs(reportRst.getInt(3)); //
					 * cscmap.put(reportRst.getString(1), cscvoobj);
					 * dashList.add(cscvoobj);
					 * 
					 * } List[] lists = split(dashList); //
					 * cscvo.setCscpaymap(cscmap); cscvo.setList(lists[0]);
					 * cscvo.setList2(lists[1]); cscvo.setList3(lists[2]);
					 * cscvo.setList4(lists[3]); cscvo.setList5(lists[4]);
					 * 
					 * 
					 * }
					 */
				}
				@SuppressWarnings("rawtypes")
				List[] lists = split(dashList);
				// cscvo.setCscpaymap(cscmap);
				cscvo.setList(lists[0]);
				cscvo.setList2(lists[1]);
				cscvo.setList3(lists[2]);
				cscvo.setList4(lists[3]);
				cscvo.setList5(lists[4]);

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// Top three
	@SuppressWarnings("unused")
	public void getExportTopThreeBrtNewConnReportDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String cattype = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("1".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = "  and a.category_supply like '1%' ";
				} else if ("2".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = "  and a.category_supply like '2%' ";
				} else if ("3".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = " and a.category_supply like '3%' ";
				} else if ("4".equalsIgnoreCase(cscvo.getCategory())) {
					cattype = " and a.category_supply like '4%' ";
				} else {
					cattype = " and a.category_supply like '5%'";
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("select"
							+ " row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname Subdivision,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
							+ " ,reg_no,reg_date,consumer_name,address,PHONE_NO,EMAIL"
							+ " ,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group"
							+ " ,category_supply CAT,contracted_load Load,purpose"
							+ " ,nvl(sapdem,extdem) Demand,totamt Paid,GRP_DEMAND Group_Demand,GRP_COLL Group_Coll"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date"
							+ " ,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE  Release_date,uscno,meseva_ref reference_no,pending_stat"
							+ " ,slastat||sladesc sla_description,execution_type"
							+ " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension'	else 'Simplified' end) eststatus"
							+ " from rep_final a,spdclmaster b"
							+ " where a.ncpartcd=b.seccd and a.repstat like 'MEELT%BRT%'" + " and b.subname='"
							+ cscvo.getCircle() + "' AND  b.secname='" + cscvo.getDivision() + "'" + " " + cattype
							+ " and a.eststatus='02' order by cirname,divname,subname,secname ,(case when reg_no like '%H%' then 'HT' else 'LT' end) ,reg_date");

				} else {

					String qry = "select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,secname Section"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_date,consumer_name"
							+ " ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
							+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no "
							+ "  from rep_final a,spdclmaster b" + " where a.ncpartcd=b.seccd"
							+ " and a.repstat like 'MEELT%BRT%' and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='"
							+ cscvo.getDivision() + "'" + " " + cattype + " and a.eststatus='02'"
							+ " order by cirname,divname,subname,secname ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					System.out.println(qry);
					resultSet = statement.executeQuery(
							"select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_date,consumer_name"
									+ " ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
									+ " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no "
									+ "  from rep_final a,spdclmaster b" + " where a.ncpartcd=b.seccd"
									+ " and a.repstat like 'MEELT%BRT%'  and CIRNAME='" + cscvo.getCircle() + "'"
									+ cattype + " and a.eststatus='02'"
									+ " order by cirname,divname,subname,secname ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// }
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				response.setHeader("Content-Disposition",
						"attachment; filename=Top_three_Paid_NewConnectionS_Under_BTR_Category_:" + cscvo.getCategory()
								+ ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=Top_three_Paid_NewConnectionS_Under_BTR_Category_:" + cscvo.getCategory()
								+ ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {

			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	//
	// AllCounter Details

	public CscpayVO getAditionalLoadScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(divname,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from Newcomp_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9') and cirname=? "
							+ ")) group by  rollup(divname) ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(subname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from Newcomp_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')   and cirname=? and divname=?  )) group by  rollup(subname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select NVL(secname,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from Newcomp_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')    and cirname=?  and divname=?  and subname=?  )) group by  rollup(secname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					String query = "select NVL(CIRNAME,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from Newcomp_abs "
							+ " where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9'))  ) group by  rollup(CIRNAME) ";

					reportPStmt = con.prepareStatement(query);
					System.out.println("HTAdditionalLoadScsServlet:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	public CscpayVO getAditionalLoadLtHtScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String complaint = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		if ("LT".equalsIgnoreCase(cscvo.getType())) {
			complaint = "  and (complaint||sub_complaint) like '99'  ";
		}
		if ("HT".equalsIgnoreCase(cscvo.getType())) {
			complaint = "  and (complaint||sub_complaint) like '911'  ";
		}

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select nvl(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * + " where circd not in('1','4','6','9') and cirname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(divname) ";
					 */
					String query = " select NVL(divname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , "
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt, sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey, sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT)  like '%TKEY%' then 1 else 0 end) balance from  newcomp_tab,  spdclmaster     where     CSPARTCD=seccd  AND  circd not in('1','4','6','9')"
							+ complaint + "  and cirname=?  group by  rollup(divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					/*
					 * String query =
					 * "select nvl(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * +
					 * " where circd not in('1','4','6','9') and cirname=? and divname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from rep_final "
					 * + ltcat + ")) group by  rollup(subname) ";
					 */
					String query = " select NVL(subname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , "
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt, sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey, sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT)  like '%TKEY%' then 1 else 0 end) balance from  newcomp_tab,  spdclmaster     where     CSPARTCD=seccd  AND  circd not in('1','4','6','9')"
							+ complaint + "  and cirname=?   and divname=?  group by  rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select nvl(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * +
					 * " where circd not in('1','4','6','9') and cirname=? and divname=? and subname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(secname) ";
					 */
					String query = " select NVL(secname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , "
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt, sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey, sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT)  like '%TKEY%' then 1 else 0 end) balance from  newcomp_tab,  spdclmaster     where     CSPARTCD=seccd  AND  circd not in('1','4','6','9')"
							+ complaint + "  and cirname=?   and divname=?   and subname=?  group by  rollup(secname)";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					/*
					 * String query =
					 * "select nvl(CIRNAME,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * + " where circd not in('1','4','6','9'))" +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(CIRNAME) ";
					 */
					String query = " select NVL(cirname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , "
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt, sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey, sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT)  like '%TKEY%' then 1 else 0 end) balance from  newcomp_tab,  spdclmaster     where     CSPARTCD=seccd  AND  circd not in('1','4','6','9')"
							+ complaint + "  group by  rollup(cirname)";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("ALL:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	// Export Additional Load Details

	// Export Single Desk Portal details

	@SuppressWarnings("unused")
	public void exportAditionalLoadScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'  and (complaint||sub_complaint) like '911'    ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and (complaint||sub_complaint) like '911'    ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and (complaint||sub_complaint) like '911'    ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and (complaint||sub_complaint) like '911'     ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and (complaint||sub_complaint) like '911'    ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and (complaint||sub_complaint) like '911'    ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'  and (complaint||sub_complaint) like '911'    ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'  and (complaint||sub_complaint) like '911'    ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and (complaint||sub_complaint) like '911'    ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and (complaint||sub_complaint) like '911'    ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and (complaint||sub_complaint) like '911'    ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'    and (complaint||sub_complaint) like '99'   ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and (complaint||sub_complaint) like '99'   ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and (complaint||sub_complaint) like '99'   ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and (complaint||sub_complaint) like '99'   ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and (complaint||sub_complaint) like '99'   ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and (complaint||sub_complaint) like '99'   ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and (complaint||sub_complaint) like '99'   ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and (complaint||sub_complaint) like '99'   ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and (complaint||sub_complaint) like '99'     ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and (complaint||sub_complaint) like '99'     ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' ) and (complaint||sub_complaint) like '99'     ";
					} else {
						status = "";
					}
				} else {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					/*
					 * resultSet = statement.executeQuery(
					 * "select row_number() over (partition by null order by null) sno,"
					 * +
					 * " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
					 * +
					 * " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
					 * +
					 * " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
					 * + " greatest(nvl(grp_prdt,reg_date)," +
					 * " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
					 * + " meseva_ref reference_no ," +
					 * " PENDING_STAT,SLADESC,EXECUTION_TYPE," +
					 * " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() + "' and divname='" +
					 * cscvo.getDivision() +
					 * "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)  ) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "'");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());adsda
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					/*
					 * resultSet = statement .executeQuery(
					 * " select row_number() over (partition by null order by null) sno,"
					 * +
					 * " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
					 * +
					 * " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
					 * +
					 * " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
					 * + " greatest(nvl(grp_prdt,reg_date)," +
					 * " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
					 * + " meseva_ref reference_no ," +
					 * " PENDING_STAT,SLADESC,EXECUTION_TYPE," +
					 * " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() + "' and divname='" +
					 * cscvo.getDivision() + "' and subname='" +
					 * cscvo.getSubDiv() +
					 * "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)  ) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "' and subname='" + cscvo.getSubDiv() + "'");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					/*
					 * resultSet = statement .executeQuery(
					 * " select row_number() over (partition by null order by null) sno,"
					 * +
					 * " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
					 * +
					 * " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
					 * +
					 * " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
					 * + " greatest(nvl(grp_prdt,reg_date)," +
					 * " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
					 * + " meseva_ref reference_no ," +
					 * " PENDING_STAT,SLADESC,EXECUTION_TYPE," +
					 * " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() + "' and divname='" +
					 * cscvo.getDivision() + "' and subname='" +
					 * cscvo.getSubDiv() + "' and secname='" + cscvo.getSec() +
					 * "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9) ) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "' and subname='" + cscvo.getSubDiv() + "' and secname='"
									+ cscvo.getSec() + "'");
				} else {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
					 * +
					 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
					 * +
					 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
					 * +
					 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * +
					 * " from csc.rep_final@colldblink a,master.spdclmaster@colldblink b"
					 * + " where a.ncpartcd=b.seccd " + status + "" +
					 * cscvo.getCircle() + "" +
					 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					String query = " select row_number() over (partition by null order by null) sno,"
							+ " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
							+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
							+ " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
							+ " greatest(nvl(grp_prdt,reg_date),"
							+ " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
							+ " meseva_ref reference_no ," + " PENDING_STAT,SLADESC,EXECUTION_TYPE,"
							+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)  ) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					System.out.println(query);
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "'");
					/*
					 * .executeQuery(
					 * " select row_number() over (partition by null order by null) sno,"
					 * +
					 * " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
					 * +
					 * " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
					 * +
					 * " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
					 * + " greatest(nvl(grp_prdt,reg_date)," +
					 * " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
					 * + " meseva_ref reference_no ," +
					 * " PENDING_STAT,SLADESC,EXECUTION_TYPE," +
					 * " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() +
					 * "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)  ) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=Status Additional Load as "
						+ cscvo.getCtype() + "  Type:" + cscvo.getType() + "Industrial.xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered in Single Desk Portal " + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + "Industrial.xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// Get Ht Additional Load Report Deatisal amount Paid

	public CscpayVO getHtLoadAmountPaidReportDetails(CscpayVO cscvo) throws Exception {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {

				// String query="SELECT n.reg_no ,n.circle_code
				// ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR','UNKNOWN')
				// circle,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0)
				// FROM new_connections n INNER JOIN cscpay c ON n.reg_no=
				// c.csregno AND c.cscounter=? AND c.cscancelid='N' AND c.CSPRDT
				// BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')
				// AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA'
				// THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN
				// 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR'
				// THEN 7 ELSE 1 END)";
				String query = "select s.CIRNAME,s.divname,s.eroname,s.subname,s.secname,N.REG_NO,N.CUSTOMER_NAME,N.SERVICE_CONNECTION_NO,N.present_category,N.CONTRACTLOAD,N.additional_load,C.PRDT,S.SDEMAND,C.PAYMENT,N.APPLICATION_STATUS,N.CLOSE_STATUS FROM "
						+ " (SELECT TRUNC(REG_DATE) REG_DATE,TO_CHAR(REG_DATE,'YYYYMMDD') REGDATE,REG_NO,CUSTOMER_name,present_category,CONTRACTLOAD,additional_load,CSPARTCD,SERVICE_CONNECTION_NO,APPLICATION_STATUS,CLOSE_STATUS FROM NEW_COMPLAINTS WHERE  NVL(REJECTED,'N') <> 'X' AND APPLICATION_STATUS <> 4 AND CLOSE_STATUS <> 'S' AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND CIRCLE_CODE IN ('2','3','5','7','8'))N,"
						+ " (SELECT REG_NO,SUM(NVL(APPLICATION_FEE,0)+NVL(DEVELOPMENT_CHARGES,0)+NVL(SECURITY_DEPOSIT,0)+NVL(ADDL_SECURITY_DEPOSIT,0)+NVL(EXSLCHG,0)+NVL(SERVICE_LINE_CHARGES,0))EDEMAND FROM EXTDEMAND GROUP BY REG_NO)E,"
						+ " (SELECT REG_NO,SUM(NVL(DEVCHARGES,0)+NVL(SDCHARGES,0)+NVL(SLCHARGES,0)+NVL(DCWORKSESTCHG,0)+NVL(SPVCHARGES,0)+NVL(ADVCCCHARGES,0)+NVL(OTHERCHARGES,0)) SDEMAND FROM SAPESTDEMAND WHERE "
						+ " (reg_no,DEMAND_RISED_DATE) in (SELECT REG_NO,MAX(DEMAND_RISED_DATE) from SAPESTDEMAND GROUP BY REG_NO)GROUP BY REG_NO)S,"
						+ " (SELECT CSREGNO,MAX(CSPRDT) PRDT,SUM(NVL(CSSD,0)+NVL(CSDEVCHG,0)+NVL(CSSLCHG,0)+NVL(CSSVCHG,0)+ NVL(CSADVCCCHGS,0)+NVL(CSTEMPCONCHGS,0)+NVL(CSOTHERCHGS,0)) PAYMENT  FROM CSCPAY  WHERE NVL(CSTOTAMT,0) > 500  AND CSCANCELID='N' GROUP BY CSREGNO)C,"
						+ " (SELECT CIRNAME,divname,eroname,subname,secname,SECCD FROM SPDCLMASTER )S "
						+ " WHERE N.REG_NO=E.REG_NO(+)" + " AND N.REG_NO=S.REG_NO" + " AND N.REG_NO=C.CSREGNO"
						+ " AND N.CSPARTCD=S.SECCD " + " AND NVL(C.PAYMENT,0)>=NVL(S.SDEMAND,0) ";
				reportPStmt = con.prepareStatement(query);
				// reportPStmt.setString(1, cscvo.getCounterName());

				// reportPStmt.setString(2, cscvo.getFrom_date());
				// reportPStmt.setString(3, cscvo.getTo_date());
				/// reportPStmt.setString(4, cscvo.getCircleName());

				reportRst = reportPStmt.executeQuery();
				// String query2="SELECT n.reg_no ,n.circle_code
				// ,m.cirname,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,c.csregno,nvl(sum(c.cssd),0),nvl(sum(c.csdevchg),0),nvl(sum(c.csslchg),0),nvl(sum(c.cstotamt),0),nvl(sum(c.csadvccchgs),0),nvl(sum(c.cssvchg),0),nvl(sum(c.csotherchgs),0)
				// FROM new_connections n,cscpay c,master.spdclmaster m where
				// n.reg_no=c.csregno and c.cscounter=? and
				// n.circle_code=m.circd and m.cirname=? and c.cscancelid='N'
				// and c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND
				// TO_DATE(?,'YYYY-MM-DD') group by
				// n.reg_no,c.csregno,n.circle_code,n.consumer_name,m.cirname,n.category_supply,n.application_fee,n.contracted_load";
				if (reportRst != null) {

					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();
						/*
						 * vo.setCircleName(reportRst.getString(1));
						 * vo.setDivisionName(reportRst.getString(2));
						 * vo.setDcbCollection(reportRst.getString(3));
						 * vo.setDcbDemand(reportRst.getString(4));
						 * vo.setDcbPerCent(reportRst.getString(5));
						 * vo.setCummColl(reportRst.getString(8));
						 */
						vo.setCircleName(reportRst.getString(1));
						vo.setDivision(reportRst.getString(2));
						vo.setEro(reportRst.getString(3));
						vo.setSubDiv(reportRst.getString(4));
						vo.setSec(reportRst.getString(5));

						vo.setReg_no(reportRst.getString(6));
						vo.setCunsu_name(reportRst.getString(7));
						vo.setServieconn_no(reportRst.getString(8));
						vo.setCategory(reportRst.getString(9));
						vo.setContractLoad(reportRst.getString(10));

						vo.setAdditional_load(reportRst.getString(11));
						vo.setPaid_date(reportRst.getString(12));
						vo.setEstatus(reportRst.getString(13));
						vo.setSgst(reportRst.getString(14));

						vo.setAppDeleted(reportRst.getString(15));
						vo.setAppReleased(reportRst.getString(16));
						// vo.setCategory(reportRst.getString(4));
						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);

					/*
					 * int sd_total = 0, app_total = 0, dev_total = 0, sv_total
					 * = 0, other_total = 0, sl_total = 0, tot_total = 0,
					 * adv_total = 0, cont_load_total = 0, temp_chgs_total = 0,
					 * tot_cgst = 0, tot_sgst = 0; while (reportRst.next()) {
					 * CscpayVO cscvoobj = new CscpayVO();
					 * 
					 * cscvoobj.setCircleName(reportRst.getString(3));
					 * cscvoobj.setReg_no(reportRst.getString(1));
					 * cscvoobj.setConsumerName(reportRst.getString(4));
					 * cscvoobj.setCategory(reportRst.getString(5));
					 * cscvoobj.setAppFees(reportRst.getString(6));
					 * cscvoobj.setContractLoad(reportRst.getString(7));
					 * 
					 * cscvoobj.setServicedeposit(reportRst.getString(8));
					 * 
					 * cscvoobj.setDevChrgs(reportRst.getString(9));
					 * cscvoobj.setServLineChrgs(reportRst.getString(10));
					 * cscvoobj.setTotAmt(reportRst.getString(11));
					 * cscvoobj.setAdvChrgs(reportRst.getString(12));
					 * cscvoobj.setSupChrgs(reportRst.getString(13));
					 * cscvoobj.setOtherChrgs(reportRst.getString(14));
					 * cscvoobj.setTempconchgs(reportRst.getString(15));
					 * cscvoobj.setCsprno(reportRst.getString(16));
					 * cscvoobj.setCsprdt(reportRst.getString(17));
					 * 
					 * cscvoobj.setCgst(reportRst.getString(18));
					 * cscvoobj.setSgst(reportRst.getString(19));
					 * 
					 * sd_total = sd_total + reportRst.getInt(8); app_total =
					 * app_total + reportRst.getInt(6); dev_total = dev_total +
					 * reportRst.getInt(9); sv_total = sv_total +
					 * reportRst.getInt(13); other_total = other_total +
					 * reportRst.getInt(14); sl_total = sl_total +
					 * reportRst.getInt(10); tot_total = tot_total +
					 * reportRst.getInt(11); adv_total = adv_total +
					 * reportRst.getInt(12); cont_load_total = cont_load_total +
					 * reportRst.getInt(7); temp_chgs_total = temp_chgs_total +
					 * reportRst.getInt(15);
					 * 
					 * tot_cgst = tot_cgst + reportRst.getInt(18); tot_sgst =
					 * tot_sgst + reportRst.getInt(19);
					 * 
					 * // cscmap.put(reportRst.getString(1), cscvoobj);
					 * dashList.add(cscvoobj);
					 * 
					 * } cscvo.setAppFees(String.valueOf(app_total));
					 * cscvo.setContractLoad(String.valueOf(cont_load_total));
					 * 
					 * cscvo.setServicedeposit(String.valueOf(sd_total));
					 * cscvo.setDevChrgs(String.valueOf(dev_total));
					 * cscvo.setServLineChrgs(String.valueOf(sl_total));
					 * cscvo.setTotAmt(String.valueOf(tot_total));
					 * cscvo.setAdvChrgs(String.valueOf(adv_total));
					 * cscvo.setSupChrgs(String.valueOf(sv_total));
					 * cscvo.setOtherChrgs(String.valueOf(other_total));
					 * cscvo.setTempconchgs(String.valueOf(temp_chgs_total));
					 * 
					 * cscvo.setCgst(String.valueOf(tot_cgst));
					 * cscvo.setSgst(String.valueOf(tot_sgst));
					 * 
					 * // cscvo.setCscpaymap(cscmap); cscvo.setList(dashList);
					 * 
					 */}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// Ht Aadirional Load Amount Not Paid

	// Get Ht Additional Load Report Deatisal amount Paid

	public CscpayVO getHtLoadAmountNotPaidReportDetails(CscpayVO cscvo) throws Exception {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {

				// String query="SELECT n.reg_no ,n.circle_code
				// ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR','UNKNOWN')
				// circle,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0)
				// FROM new_connections n INNER JOIN cscpay c ON n.reg_no=
				// c.csregno AND c.cscounter=? AND c.cscancelid='N' AND c.CSPRDT
				// BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD')
				// AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA'
				// THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN
				// 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR'
				// THEN 7 ELSE 1 END)";
				String query = "select s.CIRNAME,s.divname,s.eroname,s.subname,s.secname,N.REG_NO,N.CUSTOMER_NAME,N.SERVICE_CONNECTION_NO,N.present_category,N.CONTRACTLOAD,N.additional_load,S.SANCTION_DATE,C.PRDT,S.SDEMAND,C.PAYMENT,N.APPLICATION_STATUS,N.CLOSE_STATUS FROM "
						+ " (SELECT TRUNC(REG_DATE) REG_DATE,TO_CHAR(REG_DATE,'YYYYMMDD') REGDATE,REG_NO,CUSTOMER_name,present_category,CONTRACTLOAD,additional_load,CSPARTCD,SERVICE_CONNECTION_NO,APPLICATION_STATUS,CLOSE_STATUS FROM NEW_COMPLAINTS WHERE  NVL(REJECTED,'N') <> 'X' AND APPLICATION_STATUS <> 4 AND CLOSE_STATUS <> 'S' AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND CIRCLE_CODE IN ('2','3','5','7','8'))N,"
						+ " (SELECT REG_NO,SUM(NVL(APPLICATION_FEE,0)+NVL(DEVELOPMENT_CHARGES,0)+NVL(SECURITY_DEPOSIT,0)+NVL(ADDL_SECURITY_DEPOSIT,0)+NVL(EXSLCHG,0)+NVL(SERVICE_LINE_CHARGES,0))EDEMAND FROM EXTDEMAND GROUP BY REG_NO)E,"
						+ " (SELECT REG_NO,MAX(DEMAND_RISED_DATE) SANCTION_DATE,SUM(NVL(DEVCHARGES,0)+NVL(SDCHARGES,0)+NVL(SLCHARGES,0)+NVL(DCWORKSESTCHG,0)+NVL(SPVCHARGES,0)+NVL(ADVCCCHARGES,0)+NVL(OTHERCHARGES,0)) SDEMAND FROM SAPESTDEMAND WHERE "
						+ " (reg_no,DEMAND_RISED_DATE) in (SELECT REG_NO,MAX(DEMAND_RISED_DATE)  from SAPESTDEMAND GROUP BY REG_NO)GROUP BY REG_NO)S,"
						+ " (SELECT CSREGNO,MAX(CSPRDT) PRDT,SUM(NVL(CSSD,0)+NVL(CSDEVCHG,0)+NVL(CSSLCHG,0)+NVL(CSSVCHG,0)+ NVL(CSADVCCCHGS,0)+NVL(CSTEMPCONCHGS,0)+NVL(CSOTHERCHGS,0)) PAYMENT  FROM CSCPAY  WHERE NVL(CSTOTAMT,0) > 500  AND CSCANCELID='N' GROUP BY CSREGNO)C,"
						+ " (SELECT CIRNAME,divname,eroname,subname,secname,SECCD FROM SPDCLMASTER )S"
						+ " WHERE N.REG_NO=E.REG_NO(+) AND N.REG_NO=S.REG_NO AND N.REG_NO=C.CSREGNO AND N.CSPARTCD=S.SECCD AND NVL(C.PAYMENT,0)<=NVL(S.SDEMAND,0) ";
				reportPStmt = con.prepareStatement(query);
				// reportPStmt.setString(1, cscvo.getCounterName());

				// reportPStmt.setString(2, cscvo.getFrom_date());
				// reportPStmt.setString(3, cscvo.getTo_date());
				/// reportPStmt.setString(4, cscvo.getCircleName());

				reportRst = reportPStmt.executeQuery();
				// String query2="SELECT n.reg_no ,n.circle_code
				// ,m.cirname,n.consumer_name,n.category_supply,n.application_fee,n.contracted_load,c.csregno,nvl(sum(c.cssd),0),nvl(sum(c.csdevchg),0),nvl(sum(c.csslchg),0),nvl(sum(c.cstotamt),0),nvl(sum(c.csadvccchgs),0),nvl(sum(c.cssvchg),0),nvl(sum(c.csotherchgs),0)
				// FROM new_connections n,cscpay c,master.spdclmaster m where
				// n.reg_no=c.csregno and c.cscounter=? and
				// n.circle_code=m.circd and m.cirname=? and c.cscancelid='N'
				// and c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND
				// TO_DATE(?,'YYYY-MM-DD') group by
				// n.reg_no,c.csregno,n.circle_code,n.consumer_name,m.cirname,n.category_supply,n.application_fee,n.contracted_load";
				if (reportRst != null) {

					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();
						/*
						 * vo.setCircleName(reportRst.getString(1));
						 * vo.setDivisionName(reportRst.getString(2));
						 * vo.setDcbCollection(reportRst.getString(3));
						 * vo.setDcbDemand(reportRst.getString(4));
						 * vo.setDcbPerCent(reportRst.getString(5));
						 * vo.setCummColl(reportRst.getString(8));
						 */
						vo.setCircleName(reportRst.getString(1));
						vo.setDivision(reportRst.getString(2));
						vo.setEro(reportRst.getString(3));
						vo.setSubDiv(reportRst.getString(4));
						vo.setSec(reportRst.getString(5));

						vo.setReg_no(reportRst.getString(6));
						vo.setCunsu_name(reportRst.getString(7));
						vo.setServieconn_no(reportRst.getString(8));
						vo.setCategory(reportRst.getString(9));
						vo.setContractLoad(reportRst.getString(10));

						vo.setAdditional_load(reportRst.getString(11));
						vo.setSanction_date(reportRst.getString(12));
						vo.setPaid_date(reportRst.getString(13));
						vo.setEstatus(reportRst.getString(14));
						vo.setSgst(reportRst.getString(15));

						vo.setAppDeleted(reportRst.getString(16));
						vo.setAppReleased(reportRst.getString(17));
						// vo.setCategory(reportRst.getString(4));
						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);

					/*
					 * int sd_total = 0, app_total = 0, dev_total = 0, sv_total
					 * = 0, other_total = 0, sl_total = 0, tot_total = 0,
					 * adv_total = 0, cont_load_total = 0, temp_chgs_total = 0,
					 * tot_cgst = 0, tot_sgst = 0; while (reportRst.next()) {
					 * CscpayVO cscvoobj = new CscpayVO();
					 * 
					 * cscvoobj.setCircleName(reportRst.getString(3));
					 * cscvoobj.setReg_no(reportRst.getString(1));
					 * cscvoobj.setConsumerName(reportRst.getString(4));
					 * cscvoobj.setCategory(reportRst.getString(5));
					 * cscvoobj.setAppFees(reportRst.getString(6));
					 * cscvoobj.setContractLoad(reportRst.getString(7));
					 * 
					 * cscvoobj.setServicedeposit(reportRst.getString(8));
					 * 
					 * cscvoobj.setDevChrgs(reportRst.getString(9));
					 * cscvoobj.setServLineChrgs(reportRst.getString(10));
					 * cscvoobj.setTotAmt(reportRst.getString(11));
					 * cscvoobj.setAdvChrgs(reportRst.getString(12));
					 * cscvoobj.setSupChrgs(reportRst.getString(13));
					 * cscvoobj.setOtherChrgs(reportRst.getString(14));
					 * cscvoobj.setTempconchgs(reportRst.getString(15));
					 * cscvoobj.setCsprno(reportRst.getString(16));
					 * cscvoobj.setCsprdt(reportRst.getString(17));
					 * 
					 * cscvoobj.setCgst(reportRst.getString(18));
					 * cscvoobj.setSgst(reportRst.getString(19));
					 * 
					 * sd_total = sd_total + reportRst.getInt(8); app_total =
					 * app_total + reportRst.getInt(6); dev_total = dev_total +
					 * reportRst.getInt(9); sv_total = sv_total +
					 * reportRst.getInt(13); other_total = other_total +
					 * reportRst.getInt(14); sl_total = sl_total +
					 * reportRst.getInt(10); tot_total = tot_total +
					 * reportRst.getInt(11); adv_total = adv_total +
					 * reportRst.getInt(12); cont_load_total = cont_load_total +
					 * reportRst.getInt(7); temp_chgs_total = temp_chgs_total +
					 * reportRst.getInt(15);
					 * 
					 * tot_cgst = tot_cgst + reportRst.getInt(18); tot_sgst =
					 * tot_sgst + reportRst.getInt(19);
					 * 
					 * // cscmap.put(reportRst.getString(1), cscvoobj);
					 * dashList.add(cscvoobj);
					 * 
					 * } cscvo.setAppFees(String.valueOf(app_total));
					 * cscvo.setContractLoad(String.valueOf(cont_load_total));
					 * 
					 * cscvo.setServicedeposit(String.valueOf(sd_total));
					 * cscvo.setDevChrgs(String.valueOf(dev_total));
					 * cscvo.setServLineChrgs(String.valueOf(sl_total));
					 * cscvo.setTotAmt(String.valueOf(tot_total));
					 * cscvo.setAdvChrgs(String.valueOf(adv_total));
					 * cscvo.setSupChrgs(String.valueOf(sv_total));
					 * cscvo.setOtherChrgs(String.valueOf(other_total));
					 * cscvo.setTempconchgs(String.valueOf(temp_chgs_total));
					 * 
					 * cscvo.setCgst(String.valueOf(tot_cgst));
					 * cscvo.setSgst(String.valueOf(tot_sgst));
					 * 
					 * // cscvo.setCscpaymap(cscmap); cscvo.setList(dashList);
					 * 
					 */}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// Lt Deomestick L dETAILS

	public CscpayVO getAllCountersLtCategoryDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		String ltcat = "";
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		if ("1".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where     NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%' AND   CATEGORY_SUPPLY like '1%'";
		} else if ("2".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%' AND CATEGORY_SUPPLY like '2%'";
		} else if ("3".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%' AND CATEGORY_SUPPLY like '3%'";
		}
		/*
		 * if ("1".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where     NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  like '%L%' AND   CATEGORY_SUPPLY like '1%'"
		 * ; } else if ("2".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  like '%L%' AND CATEGORY_SUPPLY like '2%'"
		 * ; } else if ("3".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  like '%L%' AND CATEGORY_SUPPLY like '3%'"
		 * ; } else if ("4".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  like '%L%' AND CATEGORY_SUPPLY like '4%'"
		 * ; } else if ("5".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where   NCPARTCD=seccd  AND  circd not in('1','4','6','9') and  upper(reg_no)  like '%L%' AND CATEGORY_SUPPLY like '5%'"
		 * ; } else if ("6".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  like '%L%'  AND CATEGORY_SUPPLY like '6%'"
		 * ; } else if ("7".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  like '%L%'  AND CATEGORY_SUPPLY like '7%'"
		 * ; } else if ("8".equalsIgnoreCase(cscvo.getCategory())) { ltcat =
		 * " where    NCPARTCD=seccd  AND circd not in('1','4','6','9') and upper(reg_no)  like '%L%' AND CATEGORY_SUPPLY like '8%'"
		 * ; } else {
		 */
		// ltcat = " where NCPARTCD=seccd AND circd not in('1','4','6','9') and
		// upper(REG_NO) like '%H%' ";
		// }

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					
					String query = "SELECT NVL(divname,'TOTAL') ,SUM(CASE  WHEN upper(REPSTAT) LIKE '%OB%' THEN 1 ELSE 0END) ob ,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%REG%'  THEN 1  ELSE 0 END) registered ,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%OB%'  OR upper(REPSTAT) LIKE '%REG%'  THEN 1  ELSE 0 END) totreg,"
							+ " SUM( CASE  WHEN upper(REPSTAT) LIKE '%DEL%'  OR upper(REPSTAT) LIKE '%REL%'  OR upper(REPSTAT) LIKE '%WRT%'  OR upper(REPSTAT) LIKE '%BRT%'  OR upper(REPSTAT) LIKE '%TKEY%'THEN 1ELSE 0 END) paid,"
							+ " SUM( CASE WHEN upper(REPSTAT) LIKE '%DEL%' THEN 1 ELSE 0 END) deleted ,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%DEL%'    OR upper(REPSTAT) LIKE '%REL%'   THEN 1    ELSE 0  END) crttot,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%WRT%'   THEN 1   ELSE 0 END) wrt,"
							+ " SUM( CASE  WHEN upper(REPSTAT) LIKE '%BRT%'  THEN 1  ELSE 0 END) brt,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%TKEY%'   THEN 1   ELSE 0 END) tkey,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%WRT%'  OR upper(REPSTAT) LIKE '%BRT%'  OR upper(REPSTAT) LIKE '%TKEY%'  THEN 1   ELSE 0  END) balance,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%WRT%' and ESTSTATUS='01'  THEN 1   ELSE 0  END) simpli_PEN_WRT,"
							+ " SUM(CASE   WHEN upper(REPSTAT) LIKE '%BRT%' and ESTSTATUS='01'  THEN 1   ELSE 0 END) simpli_PEN_BRT,"
							+ " SUM( CASE  WHEN upper(REPSTAT) LIKE '%WRT%' and ESTSTATUS='02'  THEN 1  ELSE 0 END) esti_PEN_WRT,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%BRT%' and ESTSTATUS='02'  THEN 1   ELSE 0 END) esti_PEN_BRT,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%REL%' and ESTSTATUS='01'  THEN 1   ELSE 0 END) simpli_rel ,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%REL%' and ESTSTATUS='02'  THEN 1  ELSE 0 END) esti_rel "
							+ "  FROM rep_final,spdclmaster    " + ltcat + "  AND cirname=?  GROUP BY rollup(divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = "SELECT NVL(subname,'TOTAL') ,SUM(CASE  WHEN upper(REPSTAT) LIKE '%OB%' THEN 1 ELSE 0END) ob ,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%REG%'  THEN 1  ELSE 0 END) registered ,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%OB%'  OR upper(REPSTAT) LIKE '%REG%'  THEN 1  ELSE 0 END) totreg,"
							+ " SUM( CASE  WHEN upper(REPSTAT) LIKE '%DEL%'  OR upper(REPSTAT) LIKE '%REL%'  OR upper(REPSTAT) LIKE '%WRT%'  OR upper(REPSTAT) LIKE '%BRT%'  OR upper(REPSTAT) LIKE '%TKEY%'THEN 1ELSE 0 END) paid,"
							+ " SUM( CASE WHEN upper(REPSTAT) LIKE '%DEL%' THEN 1 ELSE 0 END) deleted ,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%DEL%'    OR upper(REPSTAT) LIKE '%REL%'   THEN 1    ELSE 0  END) crttot,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%WRT%'   THEN 1   ELSE 0 END) wrt,"
							+ " SUM( CASE  WHEN upper(REPSTAT) LIKE '%BRT%'  THEN 1  ELSE 0 END) brt,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%TKEY%'   THEN 1   ELSE 0 END) tkey,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%WRT%'  OR upper(REPSTAT) LIKE '%BRT%'  OR upper(REPSTAT) LIKE '%TKEY%'  THEN 1   ELSE 0  END) balance,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%WRT%' and ESTSTATUS='01'  THEN 1   ELSE 0  END) simpli_PEN_WRT,"
							+ " SUM(CASE   WHEN upper(REPSTAT) LIKE '%BRT%' and ESTSTATUS='01'  THEN 1   ELSE 0 END) simpli_PEN_BRT,"
							+ " SUM( CASE  WHEN upper(REPSTAT) LIKE '%WRT%' and ESTSTATUS='02'  THEN 1  ELSE 0 END) esti_PEN_WRT,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%BRT%' and ESTSTATUS='02'  THEN 1   ELSE 0 END) esti_PEN_BRT,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%REL%' and ESTSTATUS='01'  THEN 1   ELSE 0 END) simpli_rel ,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%REL%' and ESTSTATUS='02'  THEN 1  ELSE 0 END) esti_rel "
							+ "  FROM rep_final,spdclmaster    " + ltcat
							+ "  AND cirname=?   and divname=?   GROUP BY rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					

					String query = "SELECT NVL(secname,'TOTAL') ,SUM(CASE  WHEN upper(REPSTAT) LIKE '%OB%' THEN 1 ELSE 0END) ob ,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%REG%'  THEN 1  ELSE 0 END) registered ,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%OB%'  OR upper(REPSTAT) LIKE '%REG%'  THEN 1  ELSE 0 END) totreg,"
							+ " SUM( CASE  WHEN upper(REPSTAT) LIKE '%DEL%'  OR upper(REPSTAT) LIKE '%REL%'  OR upper(REPSTAT) LIKE '%WRT%'  OR upper(REPSTAT) LIKE '%BRT%'  OR upper(REPSTAT) LIKE '%TKEY%'THEN 1ELSE 0 END) paid,"
							+ " SUM( CASE WHEN upper(REPSTAT) LIKE '%DEL%' THEN 1 ELSE 0 END) deleted ,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%DEL%'    OR upper(REPSTAT) LIKE '%REL%'   THEN 1    ELSE 0  END) crttot,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%WRT%'   THEN 1   ELSE 0 END) wrt,"
							+ " SUM( CASE  WHEN upper(REPSTAT) LIKE '%BRT%'  THEN 1  ELSE 0 END) brt,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%TKEY%'   THEN 1   ELSE 0 END) tkey,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%WRT%'  OR upper(REPSTAT) LIKE '%BRT%'  OR upper(REPSTAT) LIKE '%TKEY%'  THEN 1   ELSE 0  END) balance,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%WRT%' and ESTSTATUS='01'  THEN 1   ELSE 0  END) simpli_PEN_WRT,"
							+ " SUM(CASE   WHEN upper(REPSTAT) LIKE '%BRT%' and ESTSTATUS='01'  THEN 1   ELSE 0 END) simpli_PEN_BRT,"
							+ " SUM( CASE  WHEN upper(REPSTAT) LIKE '%WRT%' and ESTSTATUS='02'  THEN 1  ELSE 0 END) esti_PEN_WRT,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%BRT%' and ESTSTATUS='02'  THEN 1   ELSE 0 END) esti_PEN_BRT,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%REL%' and ESTSTATUS='01'  THEN 1   ELSE 0 END) simpli_rel ,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%REL%' and ESTSTATUS='02'  THEN 1  ELSE 0 END) esti_rel "
							+ "  FROM rep_final,spdclmaster    " + ltcat
							+ "  AND cirname=?   and divname=?   and subname=?    GROUP BY rollup(secname)";
					reportPStmt = con.prepareStatement(query);

					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					

					String query = "SELECT NVL(cirname,'TOTAL') ,SUM(CASE  WHEN upper(REPSTAT) LIKE '%OB%' THEN 1 ELSE 0END) ob ,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%REG%'  THEN 1  ELSE 0 END) registered ,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%OB%'  OR upper(REPSTAT) LIKE '%REG%'  THEN 1  ELSE 0 END) totreg,"
							+ " SUM( CASE  WHEN upper(REPSTAT) LIKE '%DEL%'  OR upper(REPSTAT) LIKE '%REL%'  OR upper(REPSTAT) LIKE '%WRT%'  OR upper(REPSTAT) LIKE '%BRT%'  OR upper(REPSTAT) LIKE '%TKEY%'THEN 1ELSE 0 END) paid,"
							+ " SUM( CASE WHEN upper(REPSTAT) LIKE '%DEL%' THEN 1 ELSE 0 END) deleted ,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%DEL%'    OR upper(REPSTAT) LIKE '%REL%'   THEN 1    ELSE 0  END) crttot,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%WRT%'   THEN 1   ELSE 0 END) wrt,"
							+ " SUM( CASE  WHEN upper(REPSTAT) LIKE '%BRT%'  THEN 1  ELSE 0 END) brt,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%TKEY%'   THEN 1   ELSE 0 END) tkey,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%WRT%'  OR upper(REPSTAT) LIKE '%BRT%'  OR upper(REPSTAT) LIKE '%TKEY%'  THEN 1   ELSE 0  END) balance,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%WRT%' and ESTSTATUS='01'  THEN 1   ELSE 0  END) simpli_PEN_WRT,"
							+ " SUM(CASE   WHEN upper(REPSTAT) LIKE '%BRT%' and ESTSTATUS='01'  THEN 1   ELSE 0 END) simpli_PEN_BRT,"
							+ " SUM( CASE  WHEN upper(REPSTAT) LIKE '%WRT%' and ESTSTATUS='02'  THEN 1  ELSE 0 END) esti_PEN_WRT,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%BRT%' and ESTSTATUS='02'  THEN 1   ELSE 0 END) esti_PEN_BRT,"
							+ " SUM( CASE   WHEN upper(REPSTAT) LIKE '%REL%' and ESTSTATUS='01'  THEN 1   ELSE 0 END) simpli_rel ,"
							+ " SUM(CASE  WHEN upper(REPSTAT) LIKE '%REL%' and ESTSTATUS='02'  THEN 1  ELSE 0 END) esti_rel "
							+ "  FROM rep_final,spdclmaster    " + ltcat + " GROUP BY rollup(cirname)";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					//System.out.println("ALL:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							// dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(7));

							dmapobj.setWrt(reportRst.getString(8));
							dmapobj.setBeyondReleased(reportRst.getString(9));
							dmapobj.setTurnKey(reportRst.getString(10));
							dmapobj.setTot_pen(reportRst.getString(11));

							dmapobj.setPen_simply_wrt(reportRst.getString(12));
							dmapobj.setPen_simply_brt(reportRst.getString(13));

							dmapobj.setPen_esti_wrt(reportRst.getString(14));
							dmapobj.setPen_est_brt(reportRst.getString(15));

							dmapobj.setSimply_rel(reportRst.getString(16));
							dmapobj.setEsti_rel(reportRst.getString(17));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							// dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(7));

							dmapobj.setWrt(reportRst.getString(8));
							dmapobj.setBeyondReleased(reportRst.getString(9));
							dmapobj.setTurnKey(reportRst.getString(10));
							dmapobj.setTot_pen(reportRst.getString(11));

							dmapobj.setPen_simply_wrt(reportRst.getString(12));
							dmapobj.setPen_simply_brt(reportRst.getString(13));

							dmapobj.setPen_esti_wrt(reportRst.getString(14));
							dmapobj.setPen_est_brt(reportRst.getString(15));

							dmapobj.setSimply_rel(reportRst.getString(16));
							dmapobj.setEsti_rel(reportRst.getString(17));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	// Simplified Allcounters

	public CscpayVO getSimplifiedAllcounterDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = c.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));
		String endDate1 = String.valueOf(curr_date);
		if (endDate1.length() == 1)
			endDate1 = "0".concat(endDate1);
		endDate = endDate1.concat("-")
				.concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		System.out.println("Date:" + startDate);

		if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			cattype = " AND upper(A.reg_no)   like '%H%' AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') ";
		}
		
		else if ("5A".equalsIgnoreCase(cscvo.getCat())) {
			cattype = " AND upper(A.reg_no)  not like '%H%' and nvl(consumer_status_val,'NA')='YSR JALAKALA' ";
		}
		
		else{
			cattype = " AND upper(A.reg_no)  not like '%H%' AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') ";
		}

		
		if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			category = " ";
		} else {
			category = " AND A.CATEGORY_SUPPLY LIKE '" + cscvo.getCat() + "%' ";
		}

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					
					
						String query = "SELECT NVL(S.divname,'TOTAL')" + " ,COUNT(I.REG_NO) OB"
							+ " ,COUNT(J.REG_NO) REGISTERED" + " ,COUNT(B.REG_NO) DELETED"
							+ " ,COUNT(C.REG_NO) RELEASED"
							+ " ,(COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL"
							+ " ,COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP" + " ,COUNT(M.REG_NO) TOBE_PAID_BEYOND_SOP"
							+ " ,COUNT(E.REG_NO) PENDING_WRT" + " ,COUNT(F.REG_NO) PENDING_BRT"
							+ " ,COUNT(G.REG_NO) REL_WRT,COUNT(H.REG_NO) REL_BRT FROM  "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL ) A"
							+ " ,(SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE ) J"
							+ " ,(SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN       '"
							+ startDate + "'      AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%') ) B"
							+ " ,(SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21' ) C"
							+ " ,(SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X' AND SUPPLY_RELEASE_DATE IS NULL  AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '3')D"
							+ " ,(SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) > 3)M"
							+ " ,(SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT='WRT' and ( repstat like '%OB%'  or repstat like '%REG%') )E"
							+ " ,(SELECT REG_NO,NCPARTCD FROM REP_FINAL  WHERE PENDING_STAT='BRT' and ( repstat like '%OB%'  or repstat like '%REG%') )F"
							+ " ,(SELECT REG_NO,NCPARTCD,MAXPRDT  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '7' AND TRUNC(REG_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE)G"
							+ " ,(SELECT REG_NO,NCPARTCD,MAXPRDT FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 7 AND  TRUNC(REG_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE )H"
							+ " ,(SELECT REG_NO,NCPARTCD ,REPSTAT FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I"
							+ " ,(SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S " + " WHERE A.REG_NO=B.REG_NO(+) "
							+ " AND A.REG_NO=C.REG_NO(+) " + " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+) "
							+ " AND A.REG_NO=F.REG_NO(+) " + " AND A.REG_NO=G.REG_NO(+) " + " AND A.REG_NO=H.REG_NO(+) "
							+ " AND A.REG_NO=I.REG_NO(+) " + " AND A.REG_NO=J.REG_NO(+) " + " AND A.REG_NO=M.REG_NO(+) "
							+ " AND A.NCPARTCD=S.SECCD  " + " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.NCPARTCD=J.NCPARTCD(+) " + " AND NVL(A.ESTSTATUS,'01')='01'  "
							// + " AND A.CATEGORY_SUPPLY LIKE '2%' "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + category + " " + " " + cattype + " "
							+ "   and cirname=?  GROUP BY rollup(S.divname) ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "SELECT NVL(S.subname,'TOTAL')" + " ,COUNT(I.REG_NO) OB"
							+ " ,COUNT(J.REG_NO) REGISTERED" + " ,COUNT(B.REG_NO) DELETED"
							+ " ,COUNT(C.REG_NO) RELEASED"
							+ " ,(COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL"
							+ " ,COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP" + " ,COUNT(M.REG_NO) TOBE_PAID_BEYOND_SOP"
							+ " ,COUNT(E.REG_NO) PENDING_WRT" + " ,COUNT(F.REG_NO) PENDING_BRT"
							+ " ,COUNT(G.REG_NO) REL_WRT,COUNT(H.REG_NO) REL_BRT FROM  "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL ) A"
							+ " ,(SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE ) J"
							+ " ,(SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN       '"
							+ startDate + "'      AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%') ) B"
							+ " ,(SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21' ) C"
							+ " ,(SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X' AND SUPPLY_RELEASE_DATE IS NULL  AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '3')D"
							+ " ,(SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) > 3)M"
							+ " ,(SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT='WRT' and ( repstat like '%OB%'  or repstat like '%REG%') )E"
							+ " ,(SELECT REG_NO,NCPARTCD FROM REP_FINAL  WHERE PENDING_STAT='BRT' and ( repstat like '%OB%'  or repstat like '%REG%') )F"
							+ " ,(SELECT REG_NO,NCPARTCD,MAXPRDT  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '7' AND TRUNC(REG_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE)G"
							+ " ,(SELECT REG_NO,NCPARTCD,MAXPRDT FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 7 AND  TRUNC(REG_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE )H"
							+ " ,(SELECT REG_NO,NCPARTCD ,REPSTAT FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I"
							+ " ,(SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+) " + " AND A.REG_NO=C.REG_NO(+) "
							+ " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+) " + " AND A.REG_NO=F.REG_NO(+) "
							+ " AND A.REG_NO=G.REG_NO(+) " + " AND A.REG_NO=H.REG_NO(+) " + " AND A.REG_NO=I.REG_NO(+) "
							+ " AND A.REG_NO=J.REG_NO(+) " + " AND A.REG_NO=M.REG_NO(+) " + " AND A.NCPARTCD=S.SECCD  "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) " + " AND A.NCPARTCD=J.NCPARTCD(+) "
							+ " AND NVL(A.ESTSTATUS,'01')='01'  "
							// + " AND A.CATEGORY_SUPPLY LIKE '2%' "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + category + " " + " " + cattype + " "
							+ "    and cirname=?  and divname=?   GROUP BY rollup(S.subname) ";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.secname,'TOTAL')" + " ,COUNT(I.REG_NO) OB"
							+ " ,COUNT(J.REG_NO) REGISTERED" + " ,COUNT(B.REG_NO) DELETED"
							+ " ,COUNT(C.REG_NO) RELEASED"
							+ " ,(COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL"
							+ " ,COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP" + " ,COUNT(M.REG_NO) TOBE_PAID_BEYOND_SOP"
							+ " ,COUNT(E.REG_NO) PENDING_WRT" + " ,COUNT(F.REG_NO) PENDING_BRT"
							+ " ,COUNT(G.REG_NO) REL_WRT,COUNT(H.REG_NO) REL_BRT FROM  "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL ) A"
							+ " ,(SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE ) J"
							+ " ,(SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN       '"
							+ startDate + "'      AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%') ) B"
							+ " ,(SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21' ) C"
							+ " ,(SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X' AND SUPPLY_RELEASE_DATE IS NULL  AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '3')D"
							+ " ,(SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) > 3)M"
							+ " ,(SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT='WRT' and ( repstat like '%OB%'  or repstat like '%REG%') )E"
							+ " ,(SELECT REG_NO,NCPARTCD FROM REP_FINAL  WHERE PENDING_STAT='BRT' and ( repstat like '%OB%'  or repstat like '%REG%') )F"
							+ " ,(SELECT REG_NO,NCPARTCD,MAXPRDT  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '7' AND TRUNC(REG_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE)G"
							+ " ,(SELECT REG_NO,NCPARTCD,MAXPRDT FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 7 AND  TRUNC(REG_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE )H"
							+ " ,(SELECT REG_NO,NCPARTCD ,REPSTAT FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I"
							+ " ,(SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+) " + " AND A.REG_NO=C.REG_NO(+) "
							+ " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+) " + " AND A.REG_NO=F.REG_NO(+) "
							+ " AND A.REG_NO=G.REG_NO(+) " + " AND A.REG_NO=H.REG_NO(+) " + " AND A.REG_NO=I.REG_NO(+) "
							+ " AND A.REG_NO=J.REG_NO(+) " + " AND A.REG_NO=M.REG_NO(+) " + " AND A.NCPARTCD=S.SECCD  "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) " + " AND A.NCPARTCD=J.NCPARTCD(+) "
							+ " AND NVL(A.ESTSTATUS,'01')='01'  "
							// + " AND A.CATEGORY_SUPPLY LIKE '2%' "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + category + " " + " " + cattype + " "
							+ "    and cirname=?  and divname=? and subname=?   GROUP BY rollup(S.secname) ";

					reportPStmt = con.prepareStatement(query);

					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT NVL(S.CIRNAME,'TOTAL')" + " ,COUNT(I.REG_NO) OB"
							+ " ,COUNT(J.REG_NO) REGISTERED" + " ,COUNT(B.REG_NO) DELETED"
							+ " ,COUNT(C.REG_NO) RELEASED"
							+ " ,(COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL"
							+ " ,COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP" + " ,COUNT(M.REG_NO) TOBE_PAID_BEYOND_SOP"
							+ " ,COUNT(E.REG_NO) PENDING_WRT" + " ,COUNT(F.REG_NO) PENDING_BRT"
							+ " ,COUNT(G.REG_NO) REL_WRT,COUNT(H.REG_NO) REL_BRT FROM  "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL ) A"
							+ " ,(SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE ) J"
							+ " ,(SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN       '"
							+ startDate + "'      AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%') ) B"
							+ " ,(SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21' ) C"
							+ " ,(SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X' AND SUPPLY_RELEASE_DATE IS NULL  AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '3')D"
							+ " ,(SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) > 3)M"
							+ " ,(SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT='WRT' and ( repstat like '%OB%'  or repstat like '%REG%') )E"
							+ " ,(SELECT REG_NO,NCPARTCD FROM REP_FINAL  WHERE PENDING_STAT='BRT' and ( repstat like '%OB%'  or repstat like '%REG%') )F"
							+ " ,(SELECT REG_NO,NCPARTCD,MAXPRDT  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '7' AND TRUNC(REG_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE)G"
							+ " ,(SELECT REG_NO,NCPARTCD,MAXPRDT FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 7 AND  TRUNC(REG_DATE) BETWEEN       '"
							+ startDate + "'      AND SYSDATE )H"
							+ " ,(SELECT REG_NO,NCPARTCD ,REPSTAT FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I"
							+ " ,(SELECT CIRNAME,SECCD FROM SPDCLMASTER)S " + " WHERE A.REG_NO=B.REG_NO(+) "
							+ " AND A.REG_NO=C.REG_NO(+) " + " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+) "
							+ " AND A.REG_NO=F.REG_NO(+) " + " AND A.REG_NO=G.REG_NO(+) " + " AND A.REG_NO=H.REG_NO(+) "
							+ " AND A.REG_NO=I.REG_NO(+) " + " AND A.REG_NO=J.REG_NO(+) " + " AND A.REG_NO=M.REG_NO(+) "
							+ " AND A.NCPARTCD=S.SECCD  " + " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.NCPARTCD=J.NCPARTCD(+) " + " AND NVL(A.ESTSTATUS,'01')='01'  "
							// + " AND A.CATEGORY_SUPPLY LIKE '2%' "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + category + " " + " " + cattype + " " + " GROUP BY rollup(S.CIRNAME) ";

					reportPStmt = con.prepareStatement(query);
					//System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setOb(reportRst.getString(2));
							dmapobj.setRegistered(reportRst.getString(3));
							dmapobj.setDeleted(reportRst.getString(4));
							dmapobj.setAppReleased(reportRst.getString(5));
							dmapobj.setOb_after_rel(reportRst.getString(6));

							// dmapobj.setDem_within_sop(reportRst.getString(7));
							// dmapobj.setDem_beyond_sop(reportRst.getString(8));

							dmapobj.setAmt_paid_within_sop(reportRst.getString(7));
							dmapobj.setAmt_paid_dem_beyond_sop(reportRst.getString(8));

							dmapobj.setPen_est_brt(reportRst.getString(9));
							dmapobj.setPen_esti_wrt(reportRst.getString(10));

							dmapobj.setRel_est_brt(reportRst.getString(11));
							dmapobj.setRel_esti_wrt(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setOb(reportRst.getString(2));
							dmapobj.setRegistered(reportRst.getString(3));
							dmapobj.setDeleted(reportRst.getString(4));
							dmapobj.setAppReleased(reportRst.getString(5));
							dmapobj.setOb_after_rel(reportRst.getString(6));

							// dmapobj.setDem_within_sop(reportRst.getString(7));
							// dmapobj.setDem_beyond_sop(reportRst.getString(8));

							dmapobj.setAmt_paid_within_sop(reportRst.getString(7));
							dmapobj.setAmt_paid_dem_beyond_sop(reportRst.getString(8));

							dmapobj.setPen_est_brt(reportRst.getString(9));
							dmapobj.setPen_esti_wrt(reportRst.getString(10));

							dmapobj.setRel_est_brt(reportRst.getString(11));
							dmapobj.setRel_esti_wrt(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// Extention Allcounters

	public CscpayVO getExtentionAllcounterDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = c.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));
		String endDate1 = String.valueOf(curr_date);
		if (endDate1.length() == 1)
			endDate1 = "0".concat(endDate1);
		endDate = endDate1.concat("-")
				.concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		//System.out.println("Date:" + startDate);

		/*if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			cattype = " AND upper(A.reg_no)   like '%H%' AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') ";
		} else {
			cattype = " AND upper(A.reg_no)  not like '%H%' AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') ";
		}
*/
		
		if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			cattype = " AND upper(A.reg_no)   like '%H%' AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') ";
		} else if ("5A".equalsIgnoreCase(cscvo.getCat())) {
			cattype = " AND upper(A.reg_no)  not like '%H%' and nvl(consumer_status_val,'NA')='YSR JALAKALA' ";
		}else{
			cattype = " AND upper(A.reg_no)  not like '%H%' AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') ";
		}

		

		
		if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			category = " ";
		} else {
			category = " AND A.CATEGORY_SUPPLY LIKE '" + cscvo.getCat() + "%' ";
			//System.out.println(cscvo.getCat());
		}

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					
					String query = "SELECT NVL(S.divname,'TOTAL'),COUNT(I.REG_NO)OB,COUNT(J.REG_NO) REGISTERED,COUNT(B.REG_NO) DELETED,COUNT(C.REG_NO)RELEASED,(COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL, COUNT(K.REG_NO)WITHIN_SOP,COUNT(L.REG_NO)BEYOND_SOP,COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP,COUNT(M.REG_NO)TOBE_PAID_BEYOND_SOP,COUNT(E.REG_NO) PENDING_WRT, COUNT(F.REG_NO) PENDING_BRT,COUNT(G.REG_NO) REL_WRT,COUNT(H.REG_NO) REL_BRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL )A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE )J, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)B, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE)K, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE)L, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
							+ startDate + "'   AND SYSDATE  and SUPPLY_RELEASE_DATE is null )C, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7')D, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null )M, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT='WRT' AND  SLADESC='Pending for service release')E, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT='BRT' AND  SLADESC='Pending for service release')F, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '15' AND SUPPLY_RELEASE_DATE BETWEEN  '"
							+ startDate + "'   AND SYSDATE)G, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 15 AND  SUPPLY_RELEASE_DATE BETWEEN  '"
							+ startDate + "'   AND SYSDATE )H, "
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I, "
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S " + " WHERE A.REG_NO=B.REG_NO(+) "
							+ " AND A.REG_NO=C.REG_NO(+) " + " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+) "
							+ " AND A.REG_NO=F.REG_NO(+) " + " AND A.REG_NO=G.REG_NO(+) " + " AND A.REG_NO=H.REG_NO(+) "
							+ " AND A.REG_NO=I.REG_NO(+) " + " AND A.REG_NO=J.REG_NO(+) " + " AND A.REG_NO=K.REG_NO(+) "
							+ " AND A.REG_NO=L.REG_NO(+) " + " AND A.REG_NO=M.REG_NO(+) " + " AND A.NCPARTCD=S.SECCD  "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) " + " AND A.NCPARTCD=J.NCPARTCD(+) "
							// + " AND A.CATEGORY_SUPPLY LIKE '2%' "
							+ " AND NVL(A.ESTSTATUS,'01')='02' " + " " + category + " " + " " + cattype + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ "  and cirname=?  GROUP BY rollup(S.divname) ORDER BY S.divname ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = "SELECT NVL(S.subname,'TOTAL'),COUNT(I.REG_NO)OB,COUNT(J.REG_NO) REGISTERED,COUNT(B.REG_NO) DELETED,COUNT(C.REG_NO)RELEASED,(COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL, COUNT(K.REG_NO)WITHIN_SOP,COUNT(L.REG_NO)BEYOND_SOP,COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP,COUNT(M.REG_NO)TOBE_PAID_BEYOND_SOP,COUNT(E.REG_NO) PENDING_WRT, COUNT(F.REG_NO) PENDING_BRT,COUNT(G.REG_NO) REL_WRT,COUNT(H.REG_NO) REL_BRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL )A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE )J, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)B, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE)K, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE)L, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
							+ startDate + "'   AND SYSDATE  and SUPPLY_RELEASE_DATE is null )C, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7')D, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null )M, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT='WRT' AND  SLADESC='Pending for service release')E, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT='BRT' AND  SLADESC='Pending for service release')F, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '15' AND SUPPLY_RELEASE_DATE BETWEEN  '"
							+ startDate + "'   AND SYSDATE)G, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 15 AND  SUPPLY_RELEASE_DATE BETWEEN  '"
							+ startDate + "'   AND SYSDATE )H, "
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I, "
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+) " + " AND A.REG_NO=C.REG_NO(+) "
							+ " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+) " + " AND A.REG_NO=F.REG_NO(+) "
							+ " AND A.REG_NO=G.REG_NO(+) " + " AND A.REG_NO=H.REG_NO(+) " + " AND A.REG_NO=I.REG_NO(+) "
							+ " AND A.REG_NO=J.REG_NO(+) " + " AND A.REG_NO=K.REG_NO(+) " + " AND A.REG_NO=L.REG_NO(+) "
							+ " AND A.REG_NO=M.REG_NO(+) " + " AND A.NCPARTCD=S.SECCD  "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) " + " AND A.NCPARTCD=J.NCPARTCD(+) "
							// + " AND A.CATEGORY_SUPPLY LIKE '2%' "
							+ " AND NVL(A.ESTSTATUS,'01')='02' " + " " + category + " " + " " + cattype + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ "  and cirname=? and divname=?  GROUP BY rollup(S.subname) ORDER BY S.subname ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					String query = "SELECT NVL(S.secname,'TOTAL'),COUNT(I.REG_NO)OB,COUNT(J.REG_NO) REGISTERED,COUNT(B.REG_NO) DELETED,COUNT(C.REG_NO)RELEASED,(COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL, COUNT(K.REG_NO)WITHIN_SOP,COUNT(L.REG_NO)BEYOND_SOP,COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP,COUNT(M.REG_NO)TOBE_PAID_BEYOND_SOP,COUNT(E.REG_NO) PENDING_WRT, COUNT(F.REG_NO) PENDING_BRT,COUNT(G.REG_NO) REL_WRT,COUNT(H.REG_NO) REL_BRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL )A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE )J, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)B, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE)K, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE)L, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
							+ startDate + "'   AND SYSDATE  and SUPPLY_RELEASE_DATE is null )C, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7')D, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null )M, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT='WRT' AND  SLADESC='Pending for service release')E, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT='BRT' AND  SLADESC='Pending for service release')F, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '15' AND SUPPLY_RELEASE_DATE BETWEEN  '"
							+ startDate + "'   AND SYSDATE)G, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 15 AND  SUPPLY_RELEASE_DATE BETWEEN  '"
							+ startDate + "'   AND SYSDATE )H, "
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I, "
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+) " + " AND A.REG_NO=C.REG_NO(+) "
							+ " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+) " + " AND A.REG_NO=F.REG_NO(+) "
							+ " AND A.REG_NO=G.REG_NO(+) " + " AND A.REG_NO=H.REG_NO(+) " + " AND A.REG_NO=I.REG_NO(+) "
							+ " AND A.REG_NO=J.REG_NO(+) " + " AND A.REG_NO=K.REG_NO(+) " + " AND A.REG_NO=L.REG_NO(+) "
							+ " AND A.REG_NO=M.REG_NO(+) " + " AND A.NCPARTCD=S.SECCD  "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) " + " AND A.NCPARTCD=J.NCPARTCD(+) "
							// + " AND A.CATEGORY_SUPPLY LIKE '2%' "
							+ " AND NVL(A.ESTSTATUS,'01')='02' " + " " + category + " " + " " + cattype + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ "  and cirname=?  and divname=?  and subname=?  GROUP BY rollup(S.secname) ORDER BY S.secname ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					
					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(I.REG_NO)OB,COUNT(J.REG_NO) REGISTERED,COUNT(B.REG_NO) DELETED,COUNT(C.REG_NO)RELEASED,(COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL, COUNT(K.REG_NO)WITHIN_SOP,COUNT(L.REG_NO)BEYOND_SOP,COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP,COUNT(M.REG_NO)TOBE_PAID_BEYOND_SOP,COUNT(E.REG_NO) PENDING_WRT, COUNT(F.REG_NO) PENDING_BRT,COUNT(G.REG_NO) REL_WRT,COUNT(H.REG_NO) REL_BRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL )A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE )J, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)B, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE)K, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN  '"
							+ startDate + "'   AND SYSDATE)L, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS null  AND  SUPPLY_RELEASE_DATE BETWEEN  '"
							+ startDate + "'   AND SYSDATE )C, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7')D, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null )M, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT='WRT' AND  SLADESC='Pending for service release')E, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT='BRT' AND  SLADESC='Pending for service release')F, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '15' AND SUPPLY_RELEASE_DATE BETWEEN  '"
							+ startDate + "'   AND SYSDATE)G, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 15 AND  SUPPLY_RELEASE_DATE BETWEEN  '"
							+ startDate + "'   AND SYSDATE )H, "
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I, "
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S " + " WHERE A.REG_NO=B.REG_NO(+) "
							+ " AND A.REG_NO=C.REG_NO(+) " + " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+) "
							+ " AND A.REG_NO=F.REG_NO(+) " + " AND A.REG_NO=G.REG_NO(+) " + " AND A.REG_NO=H.REG_NO(+) "
							+ " AND A.REG_NO=I.REG_NO(+) " + " AND A.REG_NO=J.REG_NO(+) " + " AND A.REG_NO=K.REG_NO(+) "
							+ " AND A.REG_NO=L.REG_NO(+) " + " AND A.REG_NO=M.REG_NO(+) " + " AND A.NCPARTCD=S.SECCD  "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) " + " AND A.NCPARTCD=J.NCPARTCD(+) "
							// + " AND A.CATEGORY_SUPPLY LIKE '2%' "
							+ " AND NVL(A.ESTSTATUS,'01')='02' " + " " + category + " " + " " + cattype + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " GROUP BY rollup(S.CIRNAME) ORDER BY S.CIRNAME ";

					reportPStmt = con.prepareStatement(query);
					//System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setOb(reportRst.getString(2));
							dmapobj.setRegistered(reportRst.getString(3));
							dmapobj.setDeleted(reportRst.getString(4));
							dmapobj.setAppReleased(reportRst.getString(5));
							dmapobj.setOb_after_rel(reportRst.getString(6));

							dmapobj.setDem_within_sop(reportRst.getString(7));
							dmapobj.setDem_beyond_sop(reportRst.getString(8));

							dmapobj.setAmt_paid_within_sop(reportRst.getString(9));
							dmapobj.setAmt_paid_dem_beyond_sop(reportRst.getString(10));

							dmapobj.setPen_est_brt(reportRst.getString(11));
							dmapobj.setPen_esti_wrt(reportRst.getString(12));

							dmapobj.setRel_est_brt(reportRst.getString(13));
							dmapobj.setRel_esti_wrt(reportRst.getString(14));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setOb(reportRst.getString(2));
							dmapobj.setRegistered(reportRst.getString(3));
							dmapobj.setDeleted(reportRst.getString(4));
							dmapobj.setAppReleased(reportRst.getString(5));
							dmapobj.setOb_after_rel(reportRst.getString(6));

							dmapobj.setDem_within_sop(reportRst.getString(7));
							dmapobj.setDem_beyond_sop(reportRst.getString(8));

							dmapobj.setAmt_paid_within_sop(reportRst.getString(9));
							dmapobj.setAmt_paid_dem_beyond_sop(reportRst.getString(10));

							dmapobj.setPen_est_brt(reportRst.getString(11));
							dmapobj.setPen_esti_wrt(reportRst.getString(12));

							dmapobj.setRel_est_brt(reportRst.getString(13));
							dmapobj.setRel_esti_wrt(reportRst.getString(14));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	
	public CscpayVO getAllCountersYSRJALAKALAObReportDetailsTWO(CscpayVO cscvo) throws Exception {
		

		


		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO)  like '%H%'  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO)  like '%H%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO) like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'  and upper(REG_NO) like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'  and upper(REG_NO) like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						
						status = "  and upper(REPSTAT) like '%WRTTKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like
						// '"
						// + cscvo.getCategory() + "%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%'   ";
						 */
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					/*
					 * if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
					 * status = "  and upper(REPSTAT) like '%TKEY%' "; }
					 */
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  and upper(REPSTAT) like '%WRTTKEY%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%BRTTKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  and upper(REPSTAT) like '%BRTTKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' ";
						status = "  AND upper(REPSTAT) like   '%WRT' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%'";
						status = "  AND upper(REPSTAT) like  '%BRT'";

					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-')  as reg_date ,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
									} 
				
				else if ("SUB_DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
									} 
									
									else if ("SEC".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
				} else {
					
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					
					
					//System.out.println("testing 5A:"+query);
					
					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,nvl(a.uscno,'-'),meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle()
									+ "' and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						

						vo.setCircleName(resultSet.getString(2));
						vo.setDivision(resultSet.getString(3));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(4));
						vo.setSec(resultSet.getString(5));
						vo.setType(resultSet.getString(6));
						vo.setReg_no(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setCunsu_name(resultSet.getString(9));

						vo.setAddress(resultSet.getString(10));
						vo.setPhono(resultSet.getString(11));
						vo.setS_group(resultSet.getString(12));

						vo.setCat(resultSet.getString(13));
						vo.setLoad(resultSet.getString(14));
						vo.setPurpose(resultSet.getString(15));
						vo.setDemand(resultSet.getString(16));
						vo.setPaid(resultSet.getString(17));

						vo.setGroup_demand(resultSet.getString(18));
						vo.setGroup_coll(resultSet.getString(19));

						vo.setPaid_date(resultSet.getString(20));
						vo.setRel_date(resultSet.getString(21));

						vo.setUscno(resultSet.getString(22));
						vo.setRef_no(resultSet.getString(23));

						vo.setPen_simply_brt(resultSet.getString(24));
						vo.setSla_desc(resultSet.getString(25));

						vo.setExe_type(resultSet.getString(26));
						vo.setStatus(resultSet.getString(27));
						// vo.setCategory(reportRst.getString(4));
						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;

				
	
		
	}
		public CscpayVO getAllCountersYSRJALAKALAObReportDetails(CscpayVO cscvo) throws Exception {
		


		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO)  like '%H%'  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO)  like '%H%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO) like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'  and upper(REG_NO) like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'  and upper(REG_NO) like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						
						status = "  and upper(REPSTAT) like '%WRTTKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like
						// '"
						// + cscvo.getCategory() + "%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%'   ";
						 */
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					/*
					 * if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
					 * status = "  and upper(REPSTAT) like '%TKEY%' "; }
					 */
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  and upper(REPSTAT) like '%WRTTKEY%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%BRTTKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  and upper(REPSTAT) like '%BRTTKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' ";
						status = "  AND upper(REPSTAT) like   '%WRT' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%'";
						status = "  AND upper(REPSTAT) like  '%BRT'";

					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-')  as reg_date ,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
									} 
				
				else if ("SUB_DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
									} 
									
									else if ("SEC".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
				} else {
					
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					
					
					//System.out.println("testing 5A:"+query);
					
					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,nvl(a.uscno,'-'),meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle()
									+ "' and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						/*
						 * * vo.setCircleName(reportRst.getString(1));
						 * vo.setDivisionName(reportRst.getString(2));
						 * vo.setDcbCollection(reportRst.getString(3));
						 * vo.setDcbDemand(reportRst.getString(4));
						 * vo.setDcbPerCent(reportRst.getString(5));
						 * vo.setCummColl(reportRst.getString(8));
						 */

						vo.setCircleName(resultSet.getString(2));
						vo.setDivision(resultSet.getString(3));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(4));
						vo.setSec(resultSet.getString(5));
						vo.setType(resultSet.getString(6));
						vo.setReg_no(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setCunsu_name(resultSet.getString(9));

						vo.setAddress(resultSet.getString(10));
						vo.setPhono(resultSet.getString(11));
						vo.setS_group(resultSet.getString(12));

						vo.setCat(resultSet.getString(13));
						vo.setLoad(resultSet.getString(14));
						vo.setPurpose(resultSet.getString(15));
						vo.setDemand(resultSet.getString(16));
						vo.setPaid(resultSet.getString(17));

						vo.setGroup_demand(resultSet.getString(18));
						vo.setGroup_coll(resultSet.getString(19));

						vo.setPaid_date(resultSet.getString(20));
						vo.setRel_date(resultSet.getString(21));

						vo.setUscno(resultSet.getString(22));
						vo.setRef_no(resultSet.getString(23));

						vo.setPen_simply_brt(resultSet.getString(24));
						vo.setSla_desc(resultSet.getString(25));

						vo.setExe_type(resultSet.getString(26));
						vo.setStatus(resultSet.getString(27));
						// vo.setCategory(reportRst.getString(4));
						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;

				
	}
	

	// Allcounters OD SCS
	// Get Ht Additional Load Report Deatisal amount Paid
	
		public CscpayVO getAllCountersObReportDetailsTWO(CscpayVO cscvo) throws Exception {
			


			List<String> headerValues = new ArrayList<String>();

			// XSSFWorkbook workbook = new XSSFWorkbook();
			SXSSFWorkbook workbook = new SXSSFWorkbook();
			ResultSet resultSet = null;
			String table = "";
			String govttype = "";
			String counter = "";
			String complaint_type = "";
			String status = "";
			String consumer_val= "";

			Calendar c = Calendar.getInstance();
			int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
												// you must add 1900 to the value
												// recevie.i.e., 1990+112 = 2012
			int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
													// receive 3 instead of 4.
			int cday = c.get(Calendar.DAY_OF_MONTH);

			String currentyear = String.valueOf(cyear);// calender year starts from
														// 1900 so you must add 1900
														// to the value
														// recevie.i.e., 1990+112 =
														// 2012
			String currentmonth = String.valueOf(cmonth);

			if (currentmonth.length() == 1) {
				currentmonth = "0" + currentmonth;
			}

			String currentmonthYear = currentmonth + "-" + currentyear;
			List<CscpayVO> dashList = new ArrayList<CscpayVO>();

			Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
			Statement statement = con.createStatement();

			try {
				if (con != null) {

					if ("HT".equalsIgnoreCase(cscvo.getType())) {
						
						if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release') and upper(REG_NO) like '%H%' ";
						}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
							status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release') and upper(REG_NO) like '%H%' ";
						}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
							status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' and upper(REG_NO) like '%H%' ";
						
					}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer' and upper(REG_NO) like '%H%' ";
					
					}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'  and upper(REG_NO) like '%H%' ";
					
						
					}
					else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
								"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) like '%H%'";
					}
					
					else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) like '%H%'";
					}
					else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%WRT'  and upper(REG_NO) like '%H%'";
					}
						
					else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%BRT' and upper(REG_NO) like '%H%'";
					}
					else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%WRTTKEY%' and upper(REG_NO) like '%H%'";
					}
					else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%BRTTKEY%' and upper(REG_NO) like '%H%'";
					}
					else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) like '%H%'";
					}
					else  {
						status = "";
					}
						
					}else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
						
						 if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
						}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
							status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
						}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
							status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
						
					}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					
					}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					
						
					}
					else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
								"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					}
					
					else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					}
					else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%WRT'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					}
						
					else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%BRT' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					}
					else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%WRTTKEY%' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					}
					else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%BRTTKEY%' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					}
					else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					}
					else  {
						status = " ";
					}
					} else if ("LT".equalsIgnoreCase(cscvo.getType())) {


						if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) not   like '%H%' ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release') and upper(REG_NO) not   like '%H%' ";
						}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
							status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release') and upper(REG_NO) not   like '%H%' ";
						}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
							status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' and upper(REG_NO) not   like '%H%' ";
						
					}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer' and upper(REG_NO) not   like '%H%' ";
					
					}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'  and upper(REG_NO) not   like '%H%' ";
					
						
					}
					else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
								"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not   like '%H%'";
					}
					
					else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not   like '%H%'";
					}
					else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%WRT'  and upper(REG_NO) not   like '%H%'";
					}
						
					else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%BRT' and upper(REG_NO) not   like '%H%'";
					}
					else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%WRTTKEY%' and upper(REG_NO) not   like '%H%'";
					}
					else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%BRTTKEY%' and upper(REG_NO) not   like '%H%'";
					}
					else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) not   like '%H%'";
					}
					else  {
						status = "";
					}
					
						
					}else{
						

						if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							status = " and upper(REPSTAT) like '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release')  ";
						}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
							status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release')  ";
						}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
							status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction'  ";
						
					}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer'  ";
					
					}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'   ";
					
						
					}
					else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
								"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') ";
					}
					
					else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') ";
					}
					else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%WRT'  ";
					}
						
					else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%BRT' ";
					}
					else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%WRTTKEY%' ";
					}
					else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and upper (REPSTAT) like '%BRTTKEY%' ";
					}
					else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
						status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') ";
					}
					else  {
						status = "";
					}
					}

					
					if ("ALL".equalsIgnoreCase(cscvo.getType())){
						
						consumer_val="and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')";
						
					}else
					
					if ("HT".equalsIgnoreCase(cscvo.getType())){
						
						consumer_val="and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')";
						
					}else if ("LT".equalsIgnoreCase(cscvo.getType()) && "5A".equalsIgnoreCase(cscvo.getCategory())){
						
						consumer_val=" and nvl(consumer_status_val,'NA')='YSR JALAKALA'";
						
					
				    }
					
					
					else if ("LT".equalsIgnoreCase(cscvo.getType()) && "5B".equalsIgnoreCase(cscvo.getCategory())){
					
					consumer_val=" ";
					
				    }else if ("LT".equalsIgnoreCase(cscvo.getType())){
						consumer_val="and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')";
						
					}
				    else{
						consumer_val="";
					}
					
					
					
				    System.out.println("type:"+cscvo.getType());
					System.out.println("ctype:"+cscvo.getCtype());
					System.out.println("status:"+status);
					System.out.println("consumer_val:"+consumer_val);
					
					
					SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

					if ("DIV".equals(cscvo.getFlag())) {

						if (!"ZTOTAL".equalsIgnoreCase(cscvo.getDivision())){

						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
								"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
								"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
								"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
								"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
								"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
								" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
								"");
						
						}else{
							resultSet = statement.executeQuery(
									" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
									"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
									"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
									"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
									"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
									"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
									" "+status+"  and cirname='"+ cscvo.getCircle() + "' "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
									"");
							
						}
						// reportPStmt = con.prepareStatement(query);
						// reportPStmt.setString(1, cscvo.getCounterName());

						// reportRst = reportPStmt.executeQuery();
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {

						if (!"ZTOTAL".equalsIgnoreCase(cscvo.getSubDiv())){

						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
								"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
								"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
								"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
								"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
								"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
								" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"+ cscvo.getSubDiv() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
								"");
						}else{
							resultSet = statement.executeQuery(
									" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
									"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
									"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
									"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
									"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
									"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
									" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
									"");
							
						}
						// reportPStmt = con.prepareStatement(query);
						// reportPStmt.setString(1, cscvo.getCounterName());

						// reportRst = reportPStmt.executeQuery();
					} else if ("SEC".equals(cscvo.getFlag())) {

						if (!"ZTOTAL".equalsIgnoreCase(cscvo.getSec())){
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
								"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
								"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
								"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
								"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
								"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
								" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"+ cscvo.getSubDiv() + "' and secname='" + cscvo.getSec() + "' "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
								"");
						}else{
							
							resultSet = statement.executeQuery(
									" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
									"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
									"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
									"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
									"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
									"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
									" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"+ cscvo.getSubDiv() + "' "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
									"");
						}
					} else {

						if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())){

						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
								"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
								"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
								"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
								"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
								"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
								" "+status+"  and cirname='"+ cscvo.getCircle() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
								"");
						}else{
							
							resultSet = statement.executeQuery(
									" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
									"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
									"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
									"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
									"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
									"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
									" "+status+" and cirname IN ('KADAPA','NELLORE','TIRUPATI','ANANTHAPUR','KURNOOL')  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
									"");
							
						}

						/*System.out.println("exportall2"+query);*/
					}


					
					
					
					
									//// System.out.println.println(resultSet);
					//// System.out.println.println(monthYear);

					if (resultSet != null) {

						while (resultSet.next()) {

							CscpayVO vo = new CscpayVO();

							vo.setCircleName(resultSet.getString(2));
							vo.setDivision(resultSet.getString(3));
							// vo.setEro(resultSet.getString(4));
							vo.setSubDiv(resultSet.getString(4));
							vo.setSec(resultSet.getString(5));
							vo.setType(resultSet.getString(6));
							
							
							vo.setReg_no(resultSet.getString(7));
							vo.setRegDate(resultSet.getString(8));
							vo.setCunsu_name(resultSet.getString(9));
							vo.setPhono(resultSet.getString(10));
							
							vo.setS_group(resultSet.getString(11));
							vo.setCat(resultSet.getString(12));
							vo.setPurpose(resultSet.getString(13));
							vo.setLoad(resultSet.getString(14));
							vo.setDemand(resultSet.getString(15));
							vo.setPaid(resultSet.getString(16));

							
							
							vo.setGroup_demand(resultSet.getString(17));
							vo.setGroup_coll(resultSet.getString(18));
							vo.setPaid_date(resultSet.getString(19));
							vo.setRel_date(resultSet.getString(20));

							
							
							
							vo.setUscno(resultSet.getString(21));
							vo.setRef_no(resultSet.getString(22));
							vo.setPen_simply_brt(resultSet.getString(23));
							vo.setSla_desc(resultSet.getString(24));

							vo.setExe_type(resultSet.getString(25));
							vo.setStatus(resultSet.getString(26));
							
							vo.setRemarks(resultSet.getString(27));
							dashList.add(vo);

						}
						cscvo.setList(dashList);
					}
				}

			} catch (Exception e) {
				e.printStackTrace();
				// logger.error("Exception: DcbReportsDAO " + e.getMessage());
				// System.out.println.println(e);
			} finally {

				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (statement != null) {
					statement.close();
				}

			}
			return cscvo;


			
			
		}
			public CscpayVO getAllCountersObReportDetails(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					/*
					 * if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
					 * status =
					 * "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) like '%H%' "
					 * ; } else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
					 * status =
					 * " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' "
					 * ; }
					 */
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO)  like '%H%'  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO)  like '%H%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO) like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'  and upper(REG_NO) like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'  and upper(REG_NO) like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					/*
					 * if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
					 * status =
					 * "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
					 * + cscvo.getCategory() + "%' "; } else if
					 * ("OB".equalsIgnoreCase(cscvo.getCtype())) { status =
					 * " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
					 * + cscvo.getCategory() + "%'  "; }
					 */
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%' ";
						 */
						status = "  and upper(REPSTAT) like '%WRTTKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like
						// '"
						// + cscvo.getCategory() + "%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%'   ";
						 */
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					/*
					 * if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
					 * status =
					 * "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%' "
					 * ; } else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
					 * status =
					 * " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' "
					 * ; }
					 */
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					/*
					 * if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
					 * status = "  and upper(REPSTAT) like '%TKEY%' "; }
					 */
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  and upper(REPSTAT) like '%WRTTKEY%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%BRTTKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  and upper(REPSTAT) like '%BRTTKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' ";
						status = "  AND upper(REPSTAT) like   '%WRT' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%'";
						status = "  AND upper(REPSTAT) like  '%BRT'";

					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-')  as reg_date ,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
									} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
				} else {
					
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					
					
					//System.out.println("testing2:"+query);
					
					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
									+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
									// +
									// ",to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')
									// paid_date"
									+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
									+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,nvl(a.uscno,'-'),meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle()
									+ "' and seccd in (select seccd from  spdclmaster  where   circd not in('1','4','6','9')) AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') order by cirname,divname,subname,secname"
									+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						/*
						 * * vo.setCircleName(reportRst.getString(1));
						 * vo.setDivisionName(reportRst.getString(2));
						 * vo.setDcbCollection(reportRst.getString(3));
						 * vo.setDcbDemand(reportRst.getString(4));
						 * vo.setDcbPerCent(reportRst.getString(5));
						 * vo.setCummColl(reportRst.getString(8));
						 */

						vo.setCircleName(resultSet.getString(2));
						vo.setDivision(resultSet.getString(3));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(4));
						vo.setSec(resultSet.getString(5));
						vo.setType(resultSet.getString(6));
						vo.setReg_no(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setCunsu_name(resultSet.getString(9));

						vo.setAddress(resultSet.getString(10));
						vo.setPhono(resultSet.getString(11));
						vo.setS_group(resultSet.getString(12));

						vo.setCat(resultSet.getString(13));
						vo.setLoad(resultSet.getString(14));
						vo.setPurpose(resultSet.getString(15));
						vo.setDemand(resultSet.getString(16));
						vo.setPaid(resultSet.getString(17));

						vo.setGroup_demand(resultSet.getString(18));
						vo.setGroup_coll(resultSet.getString(19));

						vo.setPaid_date(resultSet.getString(20));
						vo.setRel_date(resultSet.getString(21));

						vo.setUscno(resultSet.getString(22));
						vo.setRef_no(resultSet.getString(23));

						vo.setPen_simply_brt(resultSet.getString(24));
						vo.setSla_desc(resultSet.getString(25));

						vo.setExe_type(resultSet.getString(26));
						vo.setStatus(resultSet.getString(27));
						// vo.setCategory(reportRst.getString(4));
						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;

		}

	// Discome All Service Requests Scs

	@SuppressWarnings("unused")
	public CscpayVO generateDiscomeScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType())) {
					complaint_type = "  and (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
							+ cscvo.getComplaintType() + "'";
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) ";
					} else {
						counter = "";
					}
				} else {
					complaint_type = "";
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))";
					} else {
						counter = "";
					}
				}

				
				 /** if("Copm".equalsIgnoreCase(cscvo.getType())){ status=
				 * "  AND status = 'balance' "; }*/
				 
				if ("Del".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'deleted' ";
				} else if ("Bal".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'balance' ";
				} else if ("Comp".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'released' ";
				} else {
					status = "  AND status in( 'released','balance' , 'deleted' ) ";
				}
				
				
//NEW_21062022
				
				/*if (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType())) {
					complaint_type = "  and (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
							+ cscvo.getComplaintType() + "'";
					complaint_type=" and  COMPLAINT||SUB_COMPLAINT='"+cscvo.getComplaintType()+"'  ";
					
					
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) ";
					} else {
						counter = "";
					}
				} else {
					complaint_type = "";
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))";
					} else {
						counter = "";
					}
				}

				
				
				
				if ("Del".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'deleted' ";
				} 
				
				
				if ("BalWrt".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'balance' AND REMARKS= 'WRT' ";
				 }
				 
				 if ("BalBrt".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'balance' AND REMARKS='BRT' ";
					
				} 
				 
				 if ("CompWrt".equalsIgnoreCase(cscvo.getType()))
				 {
					status = "  AND status = 'released' AND REMARKS= 'WRT' ";
				}
				 if ("CompBrt".equalsIgnoreCase(cscvo.getType()))
				 {
					status = "  AND status = 'released' AND REMARKS= 'BRT' ";
				}
*/				

				
				

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("Comp".equalsIgnoreCase(cscvo.getType())) {
					if (((cscvo.getComplaintType().substring(0, 3)).equals("91~"))
							|| ((cscvo.getComplaintType().substring(0, 3)).equals("92~"))
							|| ((cscvo.getComplaintType().substring(0, 3)).equals("98~"))
							|| ((cscvo.getComplaintType().substring(0, 4)).equals("913~"))) {

						if ("DIV".equals(cscvo.getFlag())) {

							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY ,to_char(CLOSE_DATE,'DD-MM-YYYY') CLOSE_DATE "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and subname='" + cscvo.getCircle() + "'");
							// + " and subname='" + cscvo.getCircle() + "' AND
							// secname='" + cscvo.getDivision() + "'");
							// reportPStmt = con.prepareStatement(query);
							// reportPStmt.setString(1, cscvo.getCounterName());

							// reportPStmt.setString(2, cscvo.getFrom_date());
							// reportPStmt.setString(3, cscvo.getTo_date());
							// reportPStmt.setString(1, cscvo.getCircle());
							// reportPStmt.setString(2, cscvo.getDivision());

							// reportRst = reportPStmt.executeQuery();
						} else {

							String qry = " select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY,to_char(CLOSE_DATE,'DD-MM-YYYY') CLOSE_DATE "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision()
									+ "'";

							/*System.out.println(qry);*/
							if (!"DISCOM".equalsIgnoreCase(cscvo.getCircle())) {
								resultSet = statement.executeQuery(" select "
										+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
										+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY,to_char(CLOSE_DATE,'DD-MM-YYYY') CLOSE_DATE "
										+ " from newcomp_tab a,"
										+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
										+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " "
										+ status + " and CIRNAME='" + cscvo.getCircle() + "'");
							} else {
								resultSet = statement.executeQuery(" select "
										+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
										+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY,to_char(CLOSE_DATE,'DD-MM-YYYY') CLOSE_DATE "
										+ " from newcomp_tab a,"
										+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
										+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " "
										+ status);
								// + " and CIRNAME='" + cscvo.getCircle() +
								// "'");
							}
							// }
						}

					}

					else {

						if ("DIV".equals(cscvo.getFlag())) {

							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY  "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and subname='" + cscvo.getCircle() + "' AND cirname='" + cscvo.getCircleCode()
									+ "'");
							// + " and subname='" + cscvo.getCircle() + "' AND
							// secname='" + cscvo.getDivision() + "'");
							// reportPStmt = con.prepareStatement(query);
							// reportPStmt.setString(1, cscvo.getCounterName());

							// reportPStmt.setString(2, cscvo.getFrom_date());
							// reportPStmt.setString(3, cscvo.getTo_date());
							// reportPStmt.setString(1, cscvo.getCircle());
							// reportPStmt.setString(2, cscvo.getDivision());

							// reportRst = reportPStmt.executeQuery();
						} else {

							String qry = " select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision()
									+ "'";

							/*System.out.println(qry);*/
							if (!"DISCOM".equalsIgnoreCase(cscvo.getCircle())) {
								resultSet = statement.executeQuery(" select "
										+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
										+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
										+ " from newcomp_tab a,"
										+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
										+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " "
										+ status + " and CIRNAME='" + cscvo.getCircle() + "'");
							} else {
								resultSet = statement.executeQuery(" select "
										+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
										+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
										+ " from newcomp_tab a,"
										+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
										+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " "
										+ status);
								// + " and CIRNAME='" + cscvo.getCircle() +
								// "'");
							}
							// }
						}

					}
				}

				else {

					if ("DIV".equals(cscvo.getFlag())) {

						resultSet = statement.executeQuery(" select "
								+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
								+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY  "
								+ " from newcomp_tab a,"
								+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
								+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
								+ " and subname='" + cscvo.getCircle() + "' AND CIRNAME='" + cscvo.getCircleCode()
								+ "'");
						// + " and subname='" + cscvo.getCircle() + "' AND
						// secname='" + cscvo.getDivision() + "'");
						// reportPStmt = con.prepareStatement(query);
						// reportPStmt.setString(1, cscvo.getCounterName());

						// reportPStmt.setString(2, cscvo.getFrom_date());
						// reportPStmt.setString(3, cscvo.getTo_date());
						// reportPStmt.setString(1, cscvo.getCircle());
						// reportPStmt.setString(2, cscvo.getDivision());

						// reportRst = reportPStmt.executeQuery();
					} else {

						String qry = " select "
								+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
								+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
								+ " from newcomp_tab a,"
								+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
								+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
								+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision() + "'";

						/*System.out.println(qry);*/
						if (!"DISCOM".equalsIgnoreCase(cscvo.getCircle())) {
							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and CIRNAME='" + cscvo.getCircle() + "'");
						} else {
							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " "
									+ status);
							// + " and CIRNAME='" + cscvo.getCircle() + "'");
						}
						// }
					}

				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);
				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						/*
						 * * vo.setCircleName(reportRst.getString(1));
						 * vo.setDivisionName(reportRst.getString(2));
						 * vo.setDcbCollection(reportRst.getString(3));
						 * vo.setDcbDemand(reportRst.getString(4));
						 * vo.setDcbPerCent(reportRst.getString(5));
						 * vo.setCummColl(reportRst.getString(8));
						 */

						vo.setCircleName(resultSet.getString(2));
						vo.setDivision(resultSet.getString(3));
						 vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(5));
						vo.setSec(resultSet.getString(6));
						// vo.setType(resultSet.getString(6));
						vo.setReg_no(resultSet.getString(7));

						vo.setRegDate(resultSet.getString(8));
						vo.setServieconn_no(resultSet.getString(9));
						vo.setCunsu_name(resultSet.getString(10));
						vo.setCunsu_fname(resultSet.getString(11));

						vo.setAddress(resultSet.getString(12));
						vo.setPhono(resultSet.getString(13));
						vo.setComplaint_desc(resultSet.getString(14));

						vo.setContractLoad(resultSet.getString(15));
						vo.setConncted_load(resultSet.getString(16));
						vo.setMeeseva_ref(resultSet.getString(17));
						vo.setCat(resultSet.getString(18));

						if ("Comp".equalsIgnoreCase(cscvo.getType())) {
							if (((cscvo.getComplaintType().substring(0, 3)).equals("91~"))
									|| ((cscvo.getComplaintType().substring(0, 3)).equals("92~"))
									|| ((cscvo.getComplaintType().substring(0, 3)).equals("98~"))
									|| ((cscvo.getComplaintType().substring(0, 4)).equals("913~"))) {
								vo.setClose_date(resultSet.getString(19));
							}
						}

						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}

	// All Service Request circle wise

	@SuppressWarnings("unused")
	public CscpayVO generateCircleScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType())) {
					complaint_type = "  and (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
							+ cscvo.getComplaintType() + "'";
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) ";
					} else {
						counter = "";
					}
				} else {
					complaint_type = "";
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))";
					} else {
						counter = "";
					}
				}

				
				/* * if("Copm".equalsIgnoreCase(cscvo.getType())){ status=
				 * "  AND status = 'balance' "; }*/
				 
				if ("Del".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'deleted' ";
				} else if ("Bal".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'balance' ";
				} else if ("Comp".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'released' ";
				} else {
					status = "  AND status in( 'released','balance' , 'deleted' ) ";
				}

//NEW_21062022				
				/*if (!"00~ALL_complaints".equalsIgnoreCase(cscvo.getComplaintType())) {
					complaint_type = "  and (complaint||sub_complaint||'~'||substr(complaint_description,1,20)) like '"
							+ cscvo.getComplaintType() + "'";
					complaint_type=" and  COMPLAINT||SUB_COMPLAINT='"+cscvo.getComplaintType()+"'  ";
					
					
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' )) ";
					} else {
						counter = "";
					}
				} else {
					complaint_type = "";
					if ("WEBSITE".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%WEBSITE%' ) ";
					} else if ("MEESEVA".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and   (meseva_ref like '%MEESEVA%' ) ";
					} else if ("SACHIVALAYAM".equalsIgnoreCase(cscvo.getCounterName())) {
						counter = " and  ((meseva_ref like '%SACHIVALAYAM%' ) OR (meseva_ref like '%PRAJA%' ))";
					} else {
						counter = "";
					}
				}

				
				 * if("Copm".equalsIgnoreCase(cscvo.getType())){ status=
				 * "  AND status = 'balance' "; }
				 
				if ("Del".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'deleted' ";
				} else if ("Bal".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'balance' ";
				} else if ("Comp".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'released' ";
				} else {
					status = "  AND status in( 'released','balance' , 'deleted' ) ";
				}
				
				
				if ("Del".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'deleted' ";
				} 
				
				
				if ("BalWrt".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'balance' AND REMARKS= 'WRT' ";
				 }
				 
				 if ("BalBrt".equalsIgnoreCase(cscvo.getType())) {
					status = "  AND status = 'balance' AND REMARKS='BRT' ";
					
				} 
				 
				 if ("CompWrt".equalsIgnoreCase(cscvo.getType()))
				 {
					status = "  AND status = 'released' AND REMARKS= 'WRT' ";
				}
				 if ("CompBrt".equalsIgnoreCase(cscvo.getType()))
				 {
					status = "  AND status = 'released' AND REMARKS= 'BRT' ";
				}
				
*/
				
				
				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("Comp".equalsIgnoreCase(cscvo.getType())) {
					if (((cscvo.getComplaintType().substring(0, 3)).equals("91~"))
							|| ((cscvo.getComplaintType().substring(0, 3)).equals("92~"))
							|| ((cscvo.getComplaintType().substring(0, 3)).equals("98~"))
							|| ((cscvo.getComplaintType().substring(0, 4)).equals("913~"))) {

						if ("DIV".equals(cscvo.getFlag())) {

							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY ,to_char(CLOSE_DATE,'DD-MM-YYYY') CLOSE_DATE"
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and subname='" + cscvo.getCircle() + "' AND secname='" + cscvo.getDivision()
									+ "'");
							// reportPStmt = con.prepareStatement(query);
							// reportPStmt.setString(1, cscvo.getCounterName());

							// reportPStmt.setString(2, cscvo.getFrom_date());
							// reportPStmt.setString(3, cscvo.getTo_date());
							// reportPStmt.setString(1, cscvo.getCircle());
							// reportPStmt.setString(2, cscvo.getDivision());

							// reportRst = reportPStmt.executeQuery();
						} else {

							String qry = " select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision()
									+ "'";
							//System.out.println("1:"+qry);
							/*System.out.println(qry);*/
							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY,to_char(CLOSE_DATE,'DD-MM-YYYY') CLOSE_DATE "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision()
									+ "'");
							// }
						}
					}

					else {

						if ("DIV".equals(cscvo.getFlag())) {

							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and subname='" + cscvo.getCircle() + "' AND secname='" + cscvo.getDivision()
									+ "'");
							// reportPStmt = con.prepareStatement(query);
							// reportPStmt.setString(1, cscvo.getCounterName());

							// reportPStmt.setString(2, cscvo.getFrom_date());
							// reportPStmt.setString(3, cscvo.getTo_date());
							// reportPStmt.setString(1, cscvo.getCircle());
							// reportPStmt.setString(2, cscvo.getDivision());

							// reportRst = reportPStmt.executeQuery();
						} else {

							String qry = " select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision()
									+ "'";

							//System.out.println("2:"+qry);
							resultSet = statement.executeQuery(" select "
									+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
									+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
									+ " from newcomp_tab a,"
									+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
									+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
									+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision()
									+ "'");
							// }
						}
					}
				} else {

					if ("DIV".equals(cscvo.getFlag())) {

						resultSet = statement.executeQuery(" select "
								+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
								+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
								+ " from newcomp_tab a,"
								+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
								+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
								+ " and subname='" + cscvo.getCircle() + "' AND secname='" + cscvo.getDivision() + "'");
						// reportPStmt = con.prepareStatement(query);
						// reportPStmt.setString(1, cscvo.getCounterName());

						// reportPStmt.setString(2, cscvo.getFrom_date());
						// reportPStmt.setString(3, cscvo.getTo_date());
						// reportPStmt.setString(1, cscvo.getCircle());
						// reportPStmt.setString(2, cscvo.getDivision());

						// reportRst = reportPStmt.executeQuery();
					} else {

						String qry = " select "
								+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
								+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
								+ " from newcomp_tab a,"
								+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
								+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
								+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision() + "'";

						//System.out.println("allcir:10112022:"+qry);
						resultSet = statement.executeQuery(" select "
								+ " (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,eroname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
								+ " (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref,PRESENT_CATEGORY "
								+ " from newcomp_tab a,"
								+ " (select unique cirname,divname,eroname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b"
								+ " where a.cspartcd=b.seccd " + complaint_type + " " + counter + "" + " " + status
								+ " and CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision() + "'");
						// }
					}
				}
				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						/*
						 * * vo.setCircleName(reportRst.getString(1));
						 * vo.setDivisionName(reportRst.getString(2));
						 * vo.setDcbCollection(reportRst.getString(3));
						 * vo.setDcbDemand(reportRst.getString(4));
						 * vo.setDcbPerCent(reportRst.getString(5));
						 * vo.setCummColl(reportRst.getString(8));
						 */

						vo.setCircleName(resultSet.getString(2));
						vo.setDivision(resultSet.getString(3));
						 vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(5));
						vo.setSec(resultSet.getString(6));
						// vo.setType(resultSet.getString(6));
						vo.setReg_no(resultSet.getString(7));

						vo.setRegDate(resultSet.getString(8));
						vo.setServieconn_no(resultSet.getString(9));
						vo.setCunsu_name(resultSet.getString(10));
						vo.setCunsu_fname(resultSet.getString(11));

						vo.setAddress(resultSet.getString(12));
						vo.setPhono(resultSet.getString(13));
						vo.setComplaint_desc(resultSet.getString(14));

						vo.setContractLoad(resultSet.getString(15));
						vo.setConncted_load(resultSet.getString(16));
						vo.setMeeseva_ref(resultSet.getString(17));
						vo.setCat(resultSet.getString(18));
						if ("Comp".equalsIgnoreCase(cscvo.getType())) {
							if (((cscvo.getComplaintType().substring(0, 3)).equals("91~"))
									|| ((cscvo.getComplaintType().substring(0, 3)).equals("92~"))
									|| ((cscvo.getComplaintType().substring(0, 3)).equals("98~"))
									|| ((cscvo.getComplaintType().substring(0, 4)).equals("913~"))) {
								vo.setClose_date(resultSet.getString(19));
							}
						}

						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);

					/*
					 * 
					 * while (resultSet.next()) {
					 * 
					 * CscpayVO vo = new CscpayVO();
					 * 
					 * 
					 * * vo.setCircleName(reportRst.getString(1));
					 * vo.setDivisionName(reportRst.getString(2));
					 * vo.setDcbCollection(reportRst.getString(3));
					 * vo.setDcbDemand(reportRst.getString(4));
					 * vo.setDcbPerCent(reportRst.getString(5));
					 * vo.setCummColl(reportRst.getString(8));
					 * 
					 * 
					 * vo.setCircleName(resultSet.getString(2));
					 * vo.setDivision(resultSet.getString(3)); //
					 * vo.setEro(resultSet.getString(4));
					 * vo.setSubDiv(resultSet.getString(4));
					 * vo.setSec(resultSet.getString(5)); //
					 * vo.setType(resultSet.getString(6));
					 * vo.setReg_no(resultSet.getString(6));
					 * 
					 * vo.setRegDate(resultSet.getString(7));
					 * vo.setServieconn_no(resultSet.getString(8));
					 * vo.setCunsu_name(resultSet.getString(9));
					 * vo.setCunsu_fname(resultSet.getString(10));
					 * 
					 * vo.setAddress(resultSet.getString(11));
					 * vo.setPhono(resultSet.getString(12));
					 * vo.setComplaint_desc(resultSet.getString(13));
					 * 
					 * vo.setContractLoad(resultSet.getString(14));
					 * vo.setConncted_load(resultSet.getString(15));
					 * vo.setMeeseva_ref(resultSet.getString(16));
					 * vo.setCat(resultSet.getString(17));
					 * 
					 * // vo.setContractLoad(reportRst.getString(5));
					 * 
					 * dashList.add(vo);
					 * 
					 * } cscvo.setList(dashList);
					 */}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}

	// HT Paid Pending Applications

	public CscpayVO getHTPaidPendingDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String complaint = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		/*
		 * if ("LT".equalsIgnoreCase(cscvo.getType())) { complaint =
		 * "  and (complaint||sub_complaint) like '99'  "; } if
		 * ("HT".equalsIgnoreCase(cscvo.getType())) { complaint =
		 * "  and (complaint||sub_complaint) like '911'  "; }
		 */

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select nvl(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * + " where circd not in('1','4','6','9') and cirname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(divname) ";
					 */
					String query = " SELECT NVL(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_LESSTHAN_3,COUNT(E.REG_NO) BRT_GRATHER_3,COUNT(F.REG_NO) TURNKEY_LESSTHAN_3,COUNT(G.REG_NO) TURNKEY_GRATHER_3 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90)G,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND A.NCPARTCD=C.NCPARTCD(+)"
							+ " AND A.NCPARTCD=D.NCPARTCD(+)" + " AND A.NCPARTCD=E.NCPARTCD(+)"
							+ " AND A.NCPARTCD=F.NCPARTCD(+)" + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ "  and cirname=?  GROUP BY rollup(S.divname) ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = " SELECT NVL(S.subname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_LESSTHAN_3,COUNT(E.REG_NO) BRT_GRATHER_3,COUNT(F.REG_NO) TURNKEY_LESSTHAN_3,COUNT(G.REG_NO) TURNKEY_GRATHER_3 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90)G,"
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)" + " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
							+ " AND A.REG_NO=E.REG_NO(+)" + " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND A.NCPARTCD=C.NCPARTCD(+)" + " AND A.NCPARTCD=D.NCPARTCD(+)"
							+ " AND A.NCPARTCD=E.NCPARTCD(+)" + " AND A.NCPARTCD=F.NCPARTCD(+)"
							+ " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ "  and cirname=? and divname=?  GROUP BY rollup(S.subname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					String query = " SELECT NVL(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_LESSTHAN_3,COUNT(E.REG_NO) BRT_GRATHER_3,COUNT(F.REG_NO) TURNKEY_LESSTHAN_3,COUNT(G.REG_NO) TURNKEY_GRATHER_3 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90)G,"
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)" + " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
							+ " AND A.REG_NO=E.REG_NO(+)" + " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND A.NCPARTCD=C.NCPARTCD(+)" + " AND A.NCPARTCD=D.NCPARTCD(+)"
							+ " AND A.NCPARTCD=E.NCPARTCD(+)" + " AND A.NCPARTCD=F.NCPARTCD(+)"
							+ " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ "  and cirname=? and divname=?  and subname=?  GROUP BY rollup(S.secname) ";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					
					String query = " SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_LESSTHAN_3,COUNT(E.REG_NO) BRT_GRATHER_3,COUNT(F.REG_NO) TURNKEY_LESSTHAN_3,COUNT(G.REG_NO) TURNKEY_GRATHER_3 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90)G,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND A.NCPARTCD=C.NCPARTCD(+)"
							+ " AND A.NCPARTCD=D.NCPARTCD(+)" + " AND A.NCPARTCD=E.NCPARTCD(+)"
							+ " AND A.NCPARTCD=F.NCPARTCD(+)" + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ " GROUP BY rollup(S.CIRNAME) ";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					/*System.out.println("ALL:" + query);*/
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							dmapobj.setBrt_les_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));

							dmapobj.setTurnkey_les_3months(reportRst.getString(6));
							dmapobj.setTurnkey_gtr_3months(reportRst.getString(7));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							dmapobj.setBrt_les_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));

							dmapobj.setTurnkey_les_3months(reportRst.getString(6));
							dmapobj.setTurnkey_gtr_3months(reportRst.getString(7));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// Simplified Services
	@SuppressWarnings("unused")
	public void exportAllcounterSimplifiedScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Calendar cal = Calendar.getInstance();
		int curr_year = cal.get(Calendar.YEAR);
		int curr_month = cal.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = cal.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("Simplified".equalsIgnoreCase(cscvo.getStatus())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%OB%' and
						// upper(REG_NO) like '%H%' ";
						status = " AND NVL(ESTSTATUS,'01')='01'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
								+ "%'      AND upper(reg_no)  not like '%H%' and REPSTAT LIKE '%OB%'   ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						// TRUNC(REG_DATE) BETWEEN '01-JUN-2021' AND SYSDATE
						status = "   AND NVL(ESTSTATUS,'01')='01' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
								+ "'      AND SYSDATE)  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
								+ "%'      AND upper(reg_no)  not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   AND NVL(ESTSTATUS,'01')='01' and   NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN       '"
								+ startDate
								+ "'      AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%')  AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND NVL(ESTSTATUS,'01')='01'  and NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN       '"
								+ startDate
								+ "'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'  AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
					} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND NVL(ESTSTATUS,'01')='01' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
								+ " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory() + "%' "
								+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
								+ " and SUPPLY_RELEASE_DATE IS NULL      AND upper(reg_no)  not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND NVL(ESTSTATUS,'01')='01'  AND  PENDING_STAT='WRT'  AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   AND NVL(ESTSTATUS,'01')='01'  AND  PENDING_STAT='BRT' AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
					} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "    AND NVL(ESTSTATUS,'01')='01' AND PENDING_STAT IN('BRT','WRT')  AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%'  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY')  reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
				} else {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
					 * +
					 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
					 * +
					 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
					 * +
					 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * + " from rep_final a,master.spdclmaster@colldblink b" +
					 * " where a.ncpartcd=b.seccd " + status + "" +
					 * cscvo.getCircle() + "" +
					 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,to_char(reg_date,'DD-MM-YYYY')  reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ";
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date";
					/*System.out.println(query);*/

					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
					 * +
					 * " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,Round((SYSDATE-INTIMATE_DATE)/30) as AgePendency,PENDING_STAT,EXECUTION_TYPE "
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() +
					 * "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * resultSet = statement.executeQuery(
						 * " (select divname,secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,Round((SYSDATE-INTIMATE_DATE)/30) as AgePendency,PENDING_STAT,EXECUTION_TYPE "
						 * + " from rep_final a,spdclmaster  b  " +
						 * " where  a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
						 * + cscvo.getCategory() +
						 * "%' and upper(reg_no)  not like '%H%' and cirname='"
						 * + cscvo.getCircle()+
						 * "'  AND NVL(ESTSTATUS,'01')='02' and " +
						 * " ((REPSTAT LIKE '%OB%') or  ((TRUNC(REG_DATE) BETWEEN  '"
						 * + startDate +
						 * "'   AND SYSDATE)))   and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )"
						 * + " minus" +
						 * " (select divname,secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,Round((SYSDATE-INTIMATE_DATE)/30) as AgePendency,PENDING_STAT,EXECUTION_TYPE "
						 * + " from rep_final a,spdclmaster  b  " +
						 * " where    a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
						 * + cscvo.getCategory() +
						 * "%' and upper(reg_no)  not like '%H%'  and cirname='"
						 * + cscvo.getCircle()+
						 * "'   AND NVL(ESTSTATUS,'01')='02' and  ((NVL(REJECTED,'Y') <> 'X'  AND  SUPPLY_RELEASE_DATE BETWEEN  '"
						 * + startDate +
						 * "'   AND SYSDATE and SUPPLY_RELEASE_DATE is null) or  (PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN  '"
						 * + startDate +
						 * "'   AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL))  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )"
						 * );
						 */
						resultSet = statement.executeQuery(
								"  (select b.divname,b.secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')"
										+ " paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,"
										+ " PENDING_STAT,EXECUTION_TYPE  from rep_final a,spdclmaster  b   where  a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
										+ cscvo.getCategory() + "%' "
										+ " and upper(reg_no)  not like '%H%' and cirname='" + cscvo.getCircle()
										+ "'  AND NVL(ESTSTATUS,'01')='01' and  "
										+ " ((REPSTAT LIKE '%OB%') or  ((TRUNC(REG_DATE) BETWEEN   '" + startDate
										+ "'    AND SYSDATE)))  "
										+ "  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )"
										+ " minus "
										+ " (select b.divname,b.secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,"
										+ " category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,"
										+ " to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,"
										+ " PENDING_STAT,EXECUTION_TYPE  from rep_final a,spdclmaster  b   where    a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
										+ cscvo.getCategory() + "%' and upper(reg_no)  not like '%H%' "
										+ " and cirname='" + cscvo.getCircle()
										+ "'   AND NVL(ESTSTATUS,'01')='01' and  ((NVL(REJECTED,'Y') ='X' "
										+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN        '" + startDate
										+ "'      "
										+ " AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%')) or  "
										+ "  (NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  "
										+ " TRUNC(RESPONSE_DATE) BETWEEN       '01-MAY-2021'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'))  "
										+ "  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )");
					} else {
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
										+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
										+ " and cirname='" + cscvo.getCircle()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
						// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
						// end),reg_date");

					}

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters_Simplified " + cscvo.getCtype()
								+ " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters _Simplified" + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// Ctaegory 3

	@SuppressWarnings("unused")
	public void exportAllcounterSimplifiedScsDetails3(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Calendar cal = Calendar.getInstance();
		int curr_year = cal.get(Calendar.YEAR);
		int curr_month = cal.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = cal.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("Simplified".equalsIgnoreCase(cscvo.getStatus())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%OB%' and
						// upper(REG_NO) like '%H%' ";
						status = " AND NVL(ESTSTATUS,'01')='01'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
								+ "%'      AND upper(reg_no)  not like '%H%' and REPSTAT LIKE '%OB%'   ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   AND NVL(ESTSTATUS,'01')='01' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
								+ "'      AND SYSDATE)  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
								+ "%'      AND upper(reg_no)  not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   AND NVL(ESTSTATUS,'01')='01' and   NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN       '"
								+ startDate
								+ "'      AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%')  AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND NVL(ESTSTATUS,'01')='01'  and NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN       '"
								+ startDate
								+ "'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'  AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
					} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND NVL(ESTSTATUS,'01')='01' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
								+ " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory() + "%' "
								+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
								+ " and SUPPLY_RELEASE_DATE IS NOT NULL      AND upper(reg_no)  not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND NVL(ESTSTATUS,'01')='01'  AND  PENDING_STAT='WRT'  AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   AND NVL(ESTSTATUS,'01')='01'  AND  PENDING_STAT='BRT' AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
					} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "    AND NVL(ESTSTATUS,'01')='01' AND PENDING_STAT IN('BRT','WRT')  AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%'  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY')  reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
				} else {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
					 * +
					 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
					 * +
					 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
					 * +
					 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * + " from rep_final a,master.spdclmaster@colldblink b" +
					 * " where a.ncpartcd=b.seccd " + status + "" +
					 * cscvo.getCircle() + "" +
					 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,to_char(reg_date,'DD-MM-YYYY')  reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					/*System.out.println(query);*/
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
					 * +
					 * " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,Round((SYSDATE-INTIMATE_DATE)/30) as AgePendency, PENDING_STAT,EXECUTION_TYPE "
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() +
					 * "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * resultSet = statement.executeQuery(
						 * " (select divname,secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,Round((SYSDATE-INTIMATE_DATE)/30) as AgePendency,PENDING_STAT,EXECUTION_TYPE "
						 * + " from rep_final a,spdclmaster  b  " +
						 * " where  a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
						 * + cscvo.getCategory() +
						 * "%' and upper(reg_no)  not like '%H%' and cirname='"
						 * + cscvo.getCircle()+
						 * "'  AND NVL(ESTSTATUS,'01')='02' and " +
						 * " ((REPSTAT LIKE '%OB%') or  ((TRUNC(REG_DATE) BETWEEN  '"
						 * + startDate +
						 * "'   AND SYSDATE)))   and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )"
						 * + " minus" +
						 * " (select divname,secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,Round((SYSDATE-INTIMATE_DATE)/30) as AgePendency,PENDING_STAT,EXECUTION_TYPE "
						 * + " from rep_final a,spdclmaster  b  " +
						 * " where    a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
						 * + cscvo.getCategory() +
						 * "%' and upper(reg_no)  not like '%H%'  and cirname='"
						 * + cscvo.getCircle()+
						 * "'   AND NVL(ESTSTATUS,'01')='02' and  ((NVL(REJECTED,'Y') <> 'X'  AND  SUPPLY_RELEASE_DATE BETWEEN  '"
						 * + startDate +
						 * "'   AND SYSDATE and SUPPLY_RELEASE_DATE is null) or  (PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN  '"
						 * + startDate +
						 * "'   AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL))  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )"
						 * );
						 */
						resultSet = statement.executeQuery(
								"  (select b.divname,b.secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')"
										+ " paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,"
										+ " PENDING_STAT,EXECUTION_TYPE  from rep_final a,spdclmaster  b   where  a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
										+ cscvo.getCategory() + "%' "
										+ " and upper(reg_no)  not like '%H%' and cirname='" + cscvo.getCircle()
										+ "'  AND NVL(ESTSTATUS,'01')='01' and  "
										+ " ((REPSTAT LIKE '%OB%') or  ((TRUNC(REG_DATE) BETWEEN   '" + startDate
										+ "'    AND SYSDATE)))  "
										+ "  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )"
										+ " minus "
										+ " (select b.divname,b.secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,"
										+ " category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,"
										+ " to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,"
										+ " PENDING_STAT,EXECUTION_TYPE  from rep_final a,spdclmaster  b   where    a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
										+ cscvo.getCategory() + "%' and upper(reg_no)  not like '%H%' "
										+ " and cirname='" + cscvo.getCircle()
										+ "'   AND NVL(ESTSTATUS,'01')='01' and  ((NVL(REJECTED,'Y') ='X' "
										+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN        '" + startDate
										+ "'      "
										+ " AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%')) or  "
										+ "  (NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  "
										+ " TRUNC(RESPONSE_DATE) BETWEEN       '01-MAY-2021'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'))  "
										+ "  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )");
					} else {
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
										+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
										+ " and cirname='" + cscvo.getCircle()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
						// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
						// end),reg_date");

					}

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters_Simplified " + cscvo.getCtype()
								+ " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters _Simplified" + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// category 2
	@SuppressWarnings("unused")
	public void exportAllcounterSimplifiedScsDetails2(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Calendar cal = Calendar.getInstance();
		int curr_year = cal.get(Calendar.YEAR);
		int curr_month = cal.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = cal.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("Simplified".equalsIgnoreCase(cscvo.getStatus())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%OB%' and
						// upper(REG_NO) like '%H%' ";
						status = " AND NVL(ESTSTATUS,'01')='01'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
								+ "%'      AND upper(reg_no)  not like '%H%' and REPSTAT LIKE '%OB%'   ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   AND NVL(ESTSTATUS,'01')='01' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
								+ "'      AND SYSDATE)  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
								+ "%'      AND upper(reg_no)  not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   AND NVL(ESTSTATUS,'01')='01' and   NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN       '"
								+ startDate
								+ "'      AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%')  AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND NVL(ESTSTATUS,'01')='01'  and NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN       '"
								+ startDate
								+ "'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'  AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
					} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND NVL(ESTSTATUS,'01')='01' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
								+ " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory() + "%' "
								+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
								+ " and SUPPLY_RELEASE_DATE IS NULL      AND upper(reg_no)  not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND NVL(ESTSTATUS,'01')='01'  AND  PENDING_STAT='WRT'  AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   AND NVL(ESTSTATUS,'01')='01'  AND  PENDING_STAT='BRT' AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
					} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "    AND NVL(ESTSTATUS,'01')='01' AND PENDING_STAT IN('BRT','WRT')  AND CATEGORY_SUPPLY LIKE '"
								+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%'  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY')  reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
				} else {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
					 * +
					 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
					 * +
					 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
					 * +
					 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * + " from rep_final a,master.spdclmaster@colldblink b" +
					 * " where a.ncpartcd=b.seccd " + status + "" +
					 * cscvo.getCircle() + "" +
					 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,to_char(reg_date,'DD-MM-YYYY')  reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					/*System.out.println(query);*/
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
					 * +
					 * " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,Round((SYSDATE-INTIMATE_DATE)/30) as AgePendency,PENDING_STAT,EXECUTION_TYPE "
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() +
					 * "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * resultSet = statement.executeQuery(
						 * " (select divname,secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,Round((SYSDATE-INTIMATE_DATE)/30) as AgePendency,PENDING_STAT,EXECUTION_TYPE "
						 * + " from rep_final a,spdclmaster  b  " +
						 * " where  a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
						 * + cscvo.getCategory() +
						 * "%' and upper(reg_no)  not like '%H%' and cirname='"
						 * + cscvo.getCircle()+
						 * "'  AND NVL(ESTSTATUS,'01')='02' and " +
						 * " ((REPSTAT LIKE '%OB%') or  ((TRUNC(REG_DATE) BETWEEN  '"
						 * + startDate +
						 * "'   AND SYSDATE)))   and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )"
						 * + " minus" +
						 * " (select divname,secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,Round((SYSDATE-INTIMATE_DATE)/30) as AgePendency,PENDING_STAT,EXECUTION_TYPE "
						 * + " from rep_final a,spdclmaster  b  " +
						 * " where    a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
						 * + cscvo.getCategory() +
						 * "%' and upper(reg_no)  not like '%H%'  and cirname='"
						 * + cscvo.getCircle()+
						 * "'   AND NVL(ESTSTATUS,'01')='02' and  ((NVL(REJECTED,'Y') <> 'X'  AND  SUPPLY_RELEASE_DATE BETWEEN  '"
						 * + startDate +
						 * "'   AND SYSDATE and SUPPLY_RELEASE_DATE is null) or  (PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN  '"
						 * + startDate +
						 * "'   AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL))  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )"
						 * );
						 */
						resultSet = statement.executeQuery(
								"  (select b.divname,b.secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')"
										+ " paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,"
										+ " PENDING_STAT,EXECUTION_TYPE  from rep_final a,spdclmaster  b   where  a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
										+ cscvo.getCategory() + "%' "
										+ " and upper(reg_no)  not like '%H%' and cirname='" + cscvo.getCircle()
										+ "'  AND NVL(ESTSTATUS,'01')='01' and  "
										+ " ((REPSTAT LIKE '%OB%') or  ((TRUNC(REG_DATE) BETWEEN   '" + startDate
										+ "'    AND SYSDATE)))  "
										+ "  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )"
										+ " minus "
										+ " (select b.divname,b.secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,"
										+ " category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,"
										+ " to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,"
										+ " PENDING_STAT,EXECUTION_TYPE  from rep_final a,spdclmaster  b   where    a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
										+ cscvo.getCategory() + "%' and upper(reg_no)  not like '%H%' "
										+ " and cirname='" + cscvo.getCircle()
										+ "'   AND NVL(ESTSTATUS,'01')='01' and  ((NVL(REJECTED,'Y') ='X' "
										+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN        '" + startDate
										+ "'      "
										+ " AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%')) or  "
										+ "  (NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  "
										+ " TRUNC(RESPONSE_DATE) BETWEEN       '01-MAY-2021'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'))  "
										+ "  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )");
					} else {
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
										+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
										+ " and cirname='" + cscvo.getCircle()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
						// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
						// end),reg_date");

					}

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters_Simplified " + cscvo.getCtype()
								+ " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters _Simplified" + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// Estimated Scs
	@SuppressWarnings("unused")
	public void exportAllcounterEstimatedScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Calendar cal = Calendar.getInstance();
		int curr_year = cal.get(Calendar.YEAR);
		int curr_month = cal.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = cal.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("Extension".equalsIgnoreCase(cscvo.getStatus())) {

					if (!"HT".equalsIgnoreCase(cscvo.getCategory())) {
						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = " AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and    PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
									+ startDate
									+ "'     AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
									+ startDate + "'   AND SYSDATE  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									+ " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NOT NULL      AND upper(reg_no)  not like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and   PENDING_STAT='WRT' AND  SLADESC='Pending for service release'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and PENDING_STAT='BRT' AND  SLADESC='Pending for service release' AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    AND NVL(ESTSTATUS,'01')='02' AND PENDING_STAT IN('BRT','WRT') and SLADESC='Pending for service release'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%'  ";
						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
						} else if ("DEM_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   AND  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("DEM_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   AND   NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("PAID_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'  AND   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7' ";
						} else if ("PAID_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   "
									+ " AND  NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null ";
						} else {
							status = "";
						}
					} else {
						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = " AND NVL(ESTSTATUS,'01')='02'      AND upper(reg_no)   like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  AND upper(reg_no)   like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and    PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
									+ startDate
									+ "'     AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL  AND upper(reg_no)   like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
									+ startDate + "'   AND SYSDATE  AND upper(reg_no)   like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									// + " AND CATEGORY_SUPPLY LIKE '"+
									// cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NOT NULL      AND upper(reg_no)  like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and   PENDING_STAT='WRT' AND  SLADESC='Pending for service release'     AND upper(reg_no)  not like '%H%' ";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and PENDING_STAT='BRT' AND  SLADESC='Pending for service release'     AND upper(reg_no)   like '%H%' ";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    AND NVL(ESTSTATUS,'01')='02' AND PENDING_STAT IN('BRT','WRT') and SLADESC='Pending for service release'     AND upper(reg_no)   like '%H%'  ";
						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
						} else if ("DEM_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02'     AND upper(reg_no)   like '%H%'   AND  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("DEM_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'    AND upper(reg_no)   like '%H%'   AND   NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("PAID_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'     AND upper(reg_no)   like '%H%'  AND   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7' ";
						} else if ("PAID_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'     AND upper(reg_no)   like '%H%'   AND  NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null  ";
						} else {
							status = "";
						}
					}
					// }
				} else {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))   order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
				} else {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
					 * +
					 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
					 * +
					 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
					 * +
					 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * + " from rep_final a,master.spdclmaster@colldblink b" +
					 * " where a.ncpartcd=b.seccd " + status + "" +
					 * cscvo.getCircle() + "" +
					 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ";
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date";
					/*System.out.println(query);*/

					if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
						resultSet = statement.executeQuery(
								" (select divname,secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
										+ " from rep_final a,spdclmaster  b  "
										+ " where  a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
										+ "%' and upper(reg_no)  not like '%H%' and cirname='" + cscvo.getCircle()
										+ "'  AND NVL(ESTSTATUS,'01')='02' and "
										+ " ((REPSTAT LIKE '%OB%') or  ((TRUNC(REG_DATE) BETWEEN  '" + startDate
										+ "'   AND SYSDATE)))   and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )"
										+ " minus"
										+ " (select divname,secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
										+ " from rep_final a,spdclmaster  b  "
										+ " where    a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
										+ cscvo.getCategory() + "%' and upper(reg_no)  not like '%H%'  and cirname='"
										+ cscvo.getCircle()
										+ "'   AND NVL(ESTSTATUS,'01')='02' and  ((NVL(REJECTED,'Y') <> 'X'  AND  SUPPLY_RELEASE_DATE BETWEEN  '"
										+ startDate
										+ "'   AND SYSDATE and SUPPLY_RELEASE_DATE is null) or  (PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN  '"
										+ startDate
										+ "'   AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL))  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )");
					} else {
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE  "
										+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
										+ " and cirname='" + cscvo.getCircle()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by ((SYSDATE-INTIMATE_DATE)/30) ");

					}

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// Category 2
	@SuppressWarnings("unused")
	public void exportAllcounterEstimatedScsDetails2(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Calendar cal = Calendar.getInstance();
		int curr_year = cal.get(Calendar.YEAR);
		int curr_month = cal.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = cal.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("Extension".equalsIgnoreCase(cscvo.getStatus())) {

					if (!"HT".equalsIgnoreCase(cscvo.getCategory())) {
						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = " AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and    PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
									+ startDate
									+ "'     AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
									+ startDate + "'   AND SYSDATE  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									+ " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NULL      AND upper(reg_no)  not like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and   PENDING_STAT='WRT' AND  SLADESC='Pending for service release'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and PENDING_STAT='BRT' AND  SLADESC='Pending for service release' AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    AND NVL(ESTSTATUS,'01')='02' AND PENDING_STAT IN('BRT','WRT') and SLADESC='Pending for service release'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%'  ";
						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
						} else if ("DEM_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   AND  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("DEM_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   AND   NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("PAID_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'  AND   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7' ";
						} else if ("PAID_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   "
									+ " AND  NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null ";
						} else {
							status = "";
						}
					} else {
						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = " AND NVL(ESTSTATUS,'01')='02'      AND upper(reg_no)   like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  AND upper(reg_no)   like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and    PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
									+ startDate
									+ "'     AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL  AND upper(reg_no)   like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
									+ startDate + "'   AND SYSDATE  AND upper(reg_no)   like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									// + " AND CATEGORY_SUPPLY LIKE '"+
									// cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NULL      AND upper(reg_no)  like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and   PENDING_STAT='WRT' AND  SLADESC='Pending for service release'     AND upper(reg_no)  not like '%H%' ";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and PENDING_STAT='BRT' AND  SLADESC='Pending for service release'     AND upper(reg_no)   like '%H%' ";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    AND NVL(ESTSTATUS,'01')='02' AND PENDING_STAT IN('BRT','WRT') and SLADESC='Pending for service release'     AND upper(reg_no)   like '%H%'  ";
						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
						} else if ("DEM_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02'     AND upper(reg_no)   like '%H%'   AND  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("DEM_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'    AND upper(reg_no)   like '%H%'   AND   NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("PAID_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'     AND upper(reg_no)   like '%H%'  AND   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7' ";
						} else if ("PAID_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'     AND upper(reg_no)   like '%H%'   AND  NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null  ";
						} else {
							status = "";
						}
					}
					// }
				} else {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,PENDING_STAT,EXECUTION_TYPE  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,PENDING_STAT,EXECUTION_TYPE  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))   order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,PENDING_STAT,EXECUTION_TYPE  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))   order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
				} else {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
					 * +
					 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
					 * +
					 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
					 * +
					 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * + " from rep_final a,master.spdclmaster@colldblink b" +
					 * " where a.ncpartcd=b.seccd " + status + "" +
					 * cscvo.getCircle() + "" +
					 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					/*System.out.println(query);*/
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
					 * +
					 * " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,PENDING_STAT,EXECUTION_TYPE  "
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() +
					 * "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
						resultSet = statement.executeQuery(
								" (select divname,secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
										+ " from rep_final a,spdclmaster  b  "
										+ " where  a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
										+ "%' and upper(reg_no)  not like '%H%' and cirname='" + cscvo.getCircle()
										+ "'  AND NVL(ESTSTATUS,'01')='02' and "
										+ " ((REPSTAT LIKE '%OB%') or  ((TRUNC(REG_DATE) BETWEEN  '" + startDate
										+ "'   AND SYSDATE)))   and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )"
										+ " minus"
										+ " (select divname,secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
										+ " from rep_final a,spdclmaster  b  "
										+ " where    a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
										+ cscvo.getCategory() + "%' and upper(reg_no)  not like '%H%'  and cirname='"
										+ cscvo.getCircle()
										+ "'   AND NVL(ESTSTATUS,'01')='02' and  ((NVL(REJECTED,'Y') <> 'X'  AND  SUPPLY_RELEASE_DATE BETWEEN  '"
										+ startDate
										+ "'   AND SYSDATE and SUPPLY_RELEASE_DATE is null) or  (PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN  '"
										+ startDate
										+ "'   AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL))  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )");
					} else {
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE  "
										+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
										+ " and cirname='" + cscvo.getCircle()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
						// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
						// end),reg_date");

					}

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// category 3
	@SuppressWarnings("unused")
	public void exportAllcounterEstimatedScsDetails3(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Calendar cal = Calendar.getInstance();
		int curr_year = cal.get(Calendar.YEAR);
		int curr_month = cal.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = cal.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("Extension".equalsIgnoreCase(cscvo.getStatus())) {

					if (!"HT".equalsIgnoreCase(cscvo.getCategory())) {
						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = " AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and    PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
									+ startDate
									+ "'     AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
									+ startDate + "'   AND SYSDATE  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									+ " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NULL      AND upper(reg_no)  not like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and   PENDING_STAT='WRT' AND  SLADESC='Pending for service release'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and PENDING_STAT='BRT' AND  SLADESC='Pending for service release' AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    AND NVL(ESTSTATUS,'01')='02' AND PENDING_STAT IN('BRT','WRT') and SLADESC='Pending for service release'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%'  ";
						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
						} else if ("DEM_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   AND  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("DEM_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   AND   NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("PAID_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'  AND   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7' ";
						} else if ("PAID_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   "
									+ " AND  NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null ";
						} else {
							status = "";
						}
					} else {
						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = " AND NVL(ESTSTATUS,'01')='02'      AND upper(reg_no)   like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  AND upper(reg_no)   like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and    PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
									+ startDate
									+ "'     AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL  AND upper(reg_no)   like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
									+ startDate + "'   AND SYSDATE  AND upper(reg_no)   like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									// + " AND CATEGORY_SUPPLY LIKE '"+
									// cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NULL      AND upper(reg_no)  like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and   PENDING_STAT='WRT' AND  SLADESC='Pending for service release'     AND upper(reg_no)  not like '%H%' ";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and PENDING_STAT='BRT' AND  SLADESC='Pending for service release'     AND upper(reg_no)   like '%H%' ";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    AND NVL(ESTSTATUS,'01')='02' AND PENDING_STAT IN('BRT','WRT') and SLADESC='Pending for service release'     AND upper(reg_no)   like '%H%'  ";
						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
						} else if ("DEM_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02'     AND upper(reg_no)   like '%H%'   AND  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("DEM_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'    AND upper(reg_no)   like '%H%'   AND   NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("PAID_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'     AND upper(reg_no)   like '%H%'  AND   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7' ";
						} else if ("PAID_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'     AND upper(reg_no)   like '%H%'   AND  NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null  ";
						} else {
							status = "";
						}
					}
					// }
				} else {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,PENDING_STAT,EXECUTION_TYPE  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))   order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,PENDING_STAT,EXECUTION_TYPE  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv()
									+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,PENDING_STAT,EXECUTION_TYPE  "
									+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
									+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
									+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))   order by ((SYSDATE-INTIMATE_DATE)/30) ");
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date");
				} else {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
					 * +
					 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
					 * +
					 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
					 * +
					 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * + " from rep_final a,master.spdclmaster@colldblink b" +
					 * " where a.ncpartcd=b.seccd " + status + "" +
					 * cscvo.getCircle() + "" +
					 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							+ " and cirname='" + cscvo.getCircle()
							+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					/*System.out.println(query);*/
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
					 * +
					 * " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,PENDING_STAT,EXECUTION_TYPE  "
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() +
					 * "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
						resultSet = statement.executeQuery(
								" (select divname,secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
										+ " from rep_final a,spdclmaster  b  "
										+ " where  a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
										+ "%' and upper(reg_no)  not like '%H%' and cirname='" + cscvo.getCircle()
										+ "'  AND NVL(ESTSTATUS,'01')='02' and "
										+ " ((REPSTAT LIKE '%OB%') or  ((TRUNC(REG_DATE) BETWEEN  '" + startDate
										+ "'   AND SYSDATE)))   and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )"
										+ " minus"
										+ " (select divname,secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE "
										+ " from rep_final a,spdclmaster  b  "
										+ " where    a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
										+ cscvo.getCategory() + "%' and upper(reg_no)  not like '%H%'  and cirname='"
										+ cscvo.getCircle()
										+ "'   AND NVL(ESTSTATUS,'01')='02' and  ((NVL(REJECTED,'Y') <> 'X'  AND  SUPPLY_RELEASE_DATE BETWEEN  '"
										+ startDate
										+ "'   AND SYSDATE and SUPPLY_RELEASE_DATE is null) or  (PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN  '"
										+ startDate
										+ "'   AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL))  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )");
					} else {
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,PENDING_STAT,EXECUTION_TYPE  "
										+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
										+ " and cirname='" + cscvo.getCircle()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-INTIMATE_DATE)/30) ");
						// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
						// end),reg_date");

					}

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	//

	public CscpayVO getStatusOfPenHTNewScsEstNotCreatedReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					/*
					 * String query = "select NVL(divname,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9') and cirname=? "
					 * + ")) group by  rollup(divname) ";
					 */
					String query = "SELECT NVL(S.divname,'TOTAL'),COUNT(B.REG_NO) ESTIMATE_NOT_CREATED,COUNT(C.REG_NO) LESS_3,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9,COUNT(G.REG_NO) GRATHER_1 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE  NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE INTIMATE_DATE IS  NULL AND SUPPLY_RELEASE_DATE IS NULL)B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) <= 90)C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE)  <=179)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 180 AND (SYSDATE-INTIMATE_DATE) <=269)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 270 AND (SYSDATE-INTIMATE_DATE) <=374)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 375 )G,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S " + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND A.NCPARTCD=C.NCPARTCD(+)"
							+ " AND A.NCPARTCD=D.NCPARTCD(+)" + " AND A.NCPARTCD=E.NCPARTCD(+)"
							+ " AND A.NCPARTCD=F.NCPARTCD(+)" + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ "  and cirname=?  GROUP BY rollup(S.divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					/*
					 * String query = "select NVL(subname,'TOTAL') " +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')   and cirname=? and divname=?  )) group by  rollup(subname) "
					 * ;
					 */
					String query = "SELECT NVL(S.subname,'TOTAL'),COUNT(B.REG_NO) ESTIMATE_NOT_CREATED,COUNT(C.REG_NO) LESS_3,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9,COUNT(G.REG_NO) GRATHER_1 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE  NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE INTIMATE_DATE IS  NULL AND SUPPLY_RELEASE_DATE IS NULL)B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) <= 90)C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE)  <=179)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 180 AND (SYSDATE-INTIMATE_DATE) <=269)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 270 AND (SYSDATE-INTIMATE_DATE) <=374)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 375 )G,"
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+)" + " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
							+ " AND A.REG_NO=E.REG_NO(+)" + " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND A.NCPARTCD=C.NCPARTCD(+)" + " AND A.NCPARTCD=D.NCPARTCD(+)"
							+ " AND A.NCPARTCD=E.NCPARTCD(+)" + " AND A.NCPARTCD=F.NCPARTCD(+)"
							+ " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ "  and cirname=?  and divname=?  GROUP BY rollup(S.subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * String query = "select NVL(secname,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')    and cirname=?  and divname=?  and subname=?  )) group by  rollup(secname) "
					 * ;
					 */
					String query = "SELECT NVL(S.secname,'TOTAL'),COUNT(B.REG_NO) ESTIMATE_NOT_CREATED,COUNT(C.REG_NO) LESS_3,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9,COUNT(G.REG_NO) GRATHER_1 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE  NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE INTIMATE_DATE IS  NULL AND SUPPLY_RELEASE_DATE IS NULL)B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) <= 90)C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE)  <=179)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 180 AND (SYSDATE-INTIMATE_DATE) <=269)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 270 AND (SYSDATE-INTIMATE_DATE) <=374)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 375 )G,"
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+)" + " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
							+ " AND A.REG_NO=E.REG_NO(+)" + " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND A.NCPARTCD=C.NCPARTCD(+)" + " AND A.NCPARTCD=D.NCPARTCD(+)"
							+ " AND A.NCPARTCD=E.NCPARTCD(+)" + " AND A.NCPARTCD=F.NCPARTCD(+)"
							+ " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ "  and cirname=?  and divname=?   and subname=?   GROUP BY rollup(S.secname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					/*
					 * String query = "select NVL(CIRNAME,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * " where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9'))  ) group by  rollup(CIRNAME) "
					 * ;
					 */

					/*
					 * String query=
					 * "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) ESTIMATE_NOT_CREATED,COUNT(C.REG_NO) LESS_3,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9,COUNT(G.REG_NO) GRATHER_1 FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE  NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE INTIMATE_DATE IS  NULL AND SUPPLY_RELEASE_DATE IS NULL)B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) <= 90)C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE)  <=179)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 180 AND (SYSDATE-INTIMATE_DATE) <=269)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 270 AND (SYSDATE-INTIMATE_DATE) <=374)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS  NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 375 )G,"
					 * + " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S " +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.NCPARTCD=S.SECCD" +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " GROUP BY rollup(S.CIRNAME)";
					 */

					String query = "select NVL(NAME2,'TOTAL'),sum(TOT),sum(LT_3MON),sum(GT_3MON),sum(GT_6MON),sum(GT_9MON)"
							+ " ,sum(GT_1YR),sum(TOTAL) from  M_N_EST_N_CRE group by rollup(NAME2) order by NAME2";

					reportPStmt = con.prepareStatement(query);
					System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_les_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							dmapobj.setBrt_gtr_1year(reportRst.getString(7));
						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_les_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							dmapobj.setBrt_gtr_1year(reportRst.getString(7));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// estimate not Sanctioned
	public CscpayVO getStatusOfPenHTNewScsEstToBeSanctionedReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(divname,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from Newcomp_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9') and cirname=? "
							+ ")) group by  rollup(divname) ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(subname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from Newcomp_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')   and cirname=? and divname=?  )) group by  rollup(subname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select NVL(secname,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from Newcomp_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')    and cirname=?  and divname=?  and subname=?  )) group by  rollup(secname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					/*
					 * String query = "select NVL(CIRNAME,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * " where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9'))  ) group by  rollup(CIRNAME) "
					 * ;
					 */
					String query = "select NVL(NAME2,'TOTAL'),sum(TOT),sum(LT_3MON),sum(GT_3MON),sum(GT_6MON),sum(GT_9MON),sum(GT_1YR),sum(total) from M_N_NOT_SANC"
							+ " group by rollup(NAME2) order by NAME2";

					reportPStmt = con.prepareStatement(query);
					System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_les_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							dmapobj.setBrt_gtr_1year(reportRst.getString(7));
							dmapobj.setTotal(reportRst.getString(8));
							/*
							 * dmapobj.setTot_brt(reportRst.getString(7));
							 * 
							 * dmapobj.setTurnkey_les_3months(reportRst.
							 * getString(8));
							 * dmapobj.setTurnkey_gtr_3months(reportRst.
							 * getString(9));
							 * dmapobj.setTurnkey_gtr_1year(reportRst.getString(
							 * 10));
							 * dmapobj.setTot_turnkey(reportRst.getString(11));
							 */

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_les_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							dmapobj.setBrt_gtr_1year(reportRst.getString(7));
							dmapobj.setTotal(reportRst.getString(8));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	//
	public CscpayVO getStatusOfPenHTNewScsEstSanctionedAmtpaidReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					/*
					 * String query = "select NVL(divname,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9') and cirname=? "
					 * + ")) group by  rollup(divname) ";
					 */
					String query = "SELECT NVL(S.divname,'TOTAL'),COUNT(B.REG_NO) ESTIMATE_APPROVED,COUNT(C.REG_NO) LESS_3,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9 ,COUNT(G.REG_NO) GRATHER_1 FROM "
							+ "(SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE  NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE INTIMATE_DATE IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL  AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL)B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) <= 90)C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE)  <=179)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 180 AND (SYSDATE-INTIMATE_DATE) <=269)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 270 AND (SYSDATE-INTIMATE_DATE) <=374)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 375)G,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND A.NCPARTCD=C.NCPARTCD(+)"
							+ " AND A.NCPARTCD=D.NCPARTCD(+)" + " AND A.NCPARTCD=E.NCPARTCD(+)"
							+ " AND A.NCPARTCD=F.NCPARTCD(+)" + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ "  and cirname=?  GROUP BY rollup(S.divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					/*
					 * String query = "select NVL(subname,'TOTAL') " +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')   and cirname=? and divname=?  )) group by  rollup(subname) "
					 * ;
					 */
					String query = "SELECT NVL(S.subname,'TOTAL'),COUNT(B.REG_NO) ESTIMATE_APPROVED,COUNT(C.REG_NO) LESS_3,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9 ,COUNT(G.REG_NO) GRATHER_1 FROM "
							+ "(SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE  NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE INTIMATE_DATE IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL  AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL)B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) <= 90)C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE)  <=179)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 180 AND (SYSDATE-INTIMATE_DATE) <=269)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 270 AND (SYSDATE-INTIMATE_DATE) <=374)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 375)G,"
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)" + " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
							+ " AND A.REG_NO=E.REG_NO(+)" + " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND A.NCPARTCD=C.NCPARTCD(+)" + " AND A.NCPARTCD=D.NCPARTCD(+)"
							+ " AND A.NCPARTCD=E.NCPARTCD(+)" + " AND A.NCPARTCD=F.NCPARTCD(+)"
							+ " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ "  and cirname=?    and divname=?  GROUP BY rollup(S.subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * String query = "select NVL(secname,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')    and cirname=?  and divname=?  and subname=?  )) group by  rollup(secname) "
					 * ;
					 */
					String query = "SELECT NVL(S.secname,'TOTAL'),COUNT(B.REG_NO) ESTIMATE_APPROVED,COUNT(C.REG_NO) LESS_3,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9 ,COUNT(G.REG_NO) GRATHER_1 FROM "
							+ "(SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE  NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE INTIMATE_DATE IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL  AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL)B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) <= 90)C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE)  <=179)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 180 AND (SYSDATE-INTIMATE_DATE) <=269)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 270 AND (SYSDATE-INTIMATE_DATE) <=374)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 375)G,"
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)" + " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
							+ " AND A.REG_NO=E.REG_NO(+)" + " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND A.NCPARTCD=C.NCPARTCD(+)" + " AND A.NCPARTCD=D.NCPARTCD(+)"
							+ " AND A.NCPARTCD=E.NCPARTCD(+)" + " AND A.NCPARTCD=F.NCPARTCD(+)"
							+ " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ "  and cirname=?   and divname=?  and subname=?  GROUP BY rollup(S.secname)";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					/*
					 * String query = "select NVL(CIRNAME,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * " where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9'))  ) group by  rollup(CIRNAME) "
					 * ;
					 */

					/*
					 * String query=
					 * "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) ESTIMATE_APPROVED,COUNT(C.REG_NO) LESS_3,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9 ,COUNT(G.REG_NO) GRATHER_1 FROM "
					 * +
					 * "(SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE  NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE INTIMATE_DATE IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL  AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL)B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) <= 90)C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE)  <=179)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 180 AND (SYSDATE-INTIMATE_DATE) <=269)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 270 AND (SYSDATE-INTIMATE_DATE) <=374)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 375)G,"
					 * + " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.NCPARTCD=S.SECCD" +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " GROUP BY rollup(S.CIRNAME)";
					 */

					String query = "select NVL(NAME2,'TOTAL'),sum(TOT),sum(LT_3MON),sum(GT_3MON),sum(GT_6MON),sum(GT_9MON),sum(GT_1YR),sum(total) from M_N_NOT_PAID"
							+ " group by rollup(NAME2) order by NAME2 ";

					reportPStmt = con.prepareStatement(query);
					System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_les_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							dmapobj.setBrt_gtr_1year(reportRst.getString(7));
							/*
							 * dmapobj.setTot_brt(reportRst.getString(7));
							 * 
							 * dmapobj.setTurnkey_les_3months(reportRst.
							 * getString(8));
							 * dmapobj.setTurnkey_gtr_3months(reportRst.
							 * getString(9));
							 * dmapobj.setTurnkey_gtr_1year(reportRst.getString(
							 * 10));
							 * dmapobj.setTot_turnkey(reportRst.getString(11));
							 */

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_les_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							dmapobj.setBrt_gtr_1year(reportRst.getString(7));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// 4 BRT WRT New Services
	//
	public CscpayVO getStatusOfPenHTNewScsRelAfterPaidReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					/*
					 * String query = "select NVL(divname,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9') and cirname=? "
					 * + ")) group by  rollup(divname) ";
					 */
					String query = "SELECT NVL(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) BRT_TURNKEY_LESSTHAN_3,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) BRT_TURNKEY FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)I,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)" + " AND A.REG_NO=H.REG_NO(+)"
							+ " AND A.REG_NO=I.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND A.NCPARTCD=C.NCPARTCD(+)" + " AND A.NCPARTCD=D.NCPARTCD(+)"
							+ " AND A.NCPARTCD=E.NCPARTCD(+)" + " AND A.NCPARTCD=F.NCPARTCD(+)"
							+ " AND A.NCPARTCD=G.NCPARTCD(+)" + " AND A.NCPARTCD=H.NCPARTCD(+)"
							+ " AND A.NCPARTCD=I.NCPARTCD(+)" + "  and cirname=?  GROUP BY rollup(S.divname) ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					/*
					 * String query = "select NVL(subname,'TOTAL') " +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')   and cirname=? and divname=?  )) group by  rollup(subname) "
					 * ;
					 */
					String query = "SELECT NVL(S.subname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) BRT_TURNKEY_LESSTHAN_3,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) BRT_TURNKEY FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)I,"
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)" + " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
							+ " AND A.REG_NO=E.REG_NO(+)" + " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
							+ " AND A.REG_NO=H.REG_NO(+)" + " AND A.REG_NO=I.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND A.NCPARTCD=C.NCPARTCD(+)"
							+ " AND A.NCPARTCD=D.NCPARTCD(+)" + " AND A.NCPARTCD=E.NCPARTCD(+)"
							+ " AND A.NCPARTCD=F.NCPARTCD(+)" + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND A.NCPARTCD=I.NCPARTCD(+)"
							+ "  and cirname=?  and divname=?  GROUP BY rollup(S.subname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * String query = "select NVL(secname,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')    and cirname=?  and divname=?  and subname=?  )) group by  rollup(secname) "
					 * ;
					 */
					String query = "SELECT NVL(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) BRT_TURNKEY_LESSTHAN_3,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) BRT_TURNKEY FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)I,"
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)" + " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
							+ " AND A.REG_NO=E.REG_NO(+)" + " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
							+ " AND A.REG_NO=H.REG_NO(+)" + " AND A.REG_NO=I.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND A.NCPARTCD=C.NCPARTCD(+)"
							+ " AND A.NCPARTCD=D.NCPARTCD(+)" + " AND A.NCPARTCD=E.NCPARTCD(+)"
							+ " AND A.NCPARTCD=F.NCPARTCD(+)" + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND A.NCPARTCD=I.NCPARTCD(+)"
							+ "  and cirname=?  and divname=?  and subname=?  GROUP BY rollup(S.secname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					/*
					 * String query = "select NVL(CIRNAME,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * " where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9'))  ) group by  rollup(CIRNAME) "
					 * ;
					 */
					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) BRT_TURNKEY_LESSTHAN_3,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) BRT_TURNKEY FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)I,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)" + " AND A.REG_NO=H.REG_NO(+)"
							+ " AND A.REG_NO=I.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND A.NCPARTCD=C.NCPARTCD(+)" + " AND A.NCPARTCD=D.NCPARTCD(+)"
							+ " AND A.NCPARTCD=E.NCPARTCD(+)" + " AND A.NCPARTCD=F.NCPARTCD(+)"
							+ " AND A.NCPARTCD=G.NCPARTCD(+)" + " AND A.NCPARTCD=H.NCPARTCD(+)"
							+ " AND A.NCPARTCD=I.NCPARTCD(+)" + " GROUP BY rollup(S.CIRNAME) ";

					reportPStmt = con.prepareStatement(query);
					/*System.out.println(query);*/
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							dmapobj.setBrt_les_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt(reportRst.getString(7));

							dmapobj.setTurnkey_les_3months(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_3months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(10));
							dmapobj.setTot_turnkey(reportRst.getString(11));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							dmapobj.setBrt_les_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt(reportRst.getString(7));

							dmapobj.setTurnkey_les_3months(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_3months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(10));
							dmapobj.setTot_turnkey(reportRst.getString(11));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// rel 1
	public CscpayVO getStatusOfPenHTNewScsRelAfterPaidReportDetails1(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					/*
					 * String query = "select NVL(divname,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9') and cirname=? "
					 * + ")) group by  rollup(divname) ";
					 */
					/*
					 * String query=
					 * "SELECT NVL(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) BRT_TURNKEY_LESSTHAN_3,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) BRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)I,"
					 * + " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.REG_NO=H.REG_NO(+)" +
					 * " AND A.REG_NO=I.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD" +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * "  and cirname=?  GROUP BY rollup(S.divname) ";
					 */
					/*
					 * String query=
					 * "SELECT NVL(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY_LESSTHAN_3,COUNT(H.REG_NO) WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)I,"
					 * + " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * "  AND A.REG_NO=C.REG_NO(+)" +
					 * " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
					 * + " AND A.REG_NO=F.REG_NO(+)" +
					 * " AND A.REG_NO=G.REG_NO(+)" + " AND A.REG_NO=H.REG_NO(+)"
					 * + " AND A.REG_NO=I.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
					 * + " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+) " +
					 * " AND A.NCPARTCD=D.NCPARTCD(+) " +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)  " +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * "   and cirname=?   GROUP BY rollup(S.divname)";
					 */

					// changes intimate data to sysdate 16-07-2021

					/*
					 * String query =
					 * "SELECT NVL(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,"
					 * +
					 * " COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY_LESSTHAN_3,"
					 * +
					 * " COUNT(H.REG_NO) WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A, "
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND  SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C, "
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%')  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND (MAXPRDT-INTIMATE_DATE) <=90)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (MAXPRDT-INTIMATE_DATE) <=374)E, "
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 375)F, "
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%'  or upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (MAXPRDT-INTIMATE_DATE) <= 90)G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%'  or upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (MAXPRDT-INTIMATE_DATE) > 90 AND (MAXPRDT-INTIMATE_DATE) <=374)H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%'  or upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (MAXPRDT-INTIMATE_DATE) > 375)I,"
					 * + " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)  AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=E.REG_NO(+) AND A.REG_NO=F.REG_NO(+) AND A.REG_NO=G.REG_NO(+) AND A.REG_NO=H.REG_NO(+) AND A.REG_NO=I.REG_NO(+) AND A.NCPARTCD=S.SECCD AND A.NCPARTCD=B.NCPARTCD(+) AND A.NCPARTCD=C.NCPARTCD(+)  AND A.NCPARTCD=D.NCPARTCD(+)  AND A.NCPARTCD=E.NCPARTCD(+)   AND A.NCPARTCD=F.NCPARTCD(+) AND A.NCPARTCD=G.NCPARTCD(+) AND A.NCPARTCD=H.NCPARTCD(+) AND A.NCPARTCD=I.NCPARTCD(+)"
					 * + "   and cirname=?   GROUP BY rollup(S.divname)";
					 */
					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
						String query = "SELECT NVL(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,"
								+ " COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY_LESSTHAN_3,"
								+ " COUNT(H.REG_NO) WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM "
								+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND SUPPLY_RELEASE_DATE IS  NULL )B,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%' AND  SLADESC='Pending for service release') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND  SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <=90)D,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)E, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 375)F, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <= 90)G,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)H,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 375)I,"
								+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S"
								+ " WHERE A.REG_NO=B.REG_NO(+)  AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=E.REG_NO(+) AND A.REG_NO=F.REG_NO(+) AND A.REG_NO=G.REG_NO(+) AND A.REG_NO=H.REG_NO(+) AND A.REG_NO=I.REG_NO(+) AND A.NCPARTCD=S.SECCD AND A.NCPARTCD=B.NCPARTCD(+) AND A.NCPARTCD=C.NCPARTCD(+)  AND A.NCPARTCD=D.NCPARTCD(+)  AND A.NCPARTCD=E.NCPARTCD(+)   AND A.NCPARTCD=F.NCPARTCD(+) AND A.NCPARTCD=G.NCPARTCD(+) AND A.NCPARTCD=H.NCPARTCD(+) AND A.NCPARTCD=I.NCPARTCD(+)"
								+ "   and cirname=?   GROUP BY rollup(S.divname)";
						reportPStmt = con.prepareStatement(query);

						reportPStmt.setString(1, cscvo.getCircle());
						// reportPStmt.setString(2, chkVO.getCirname());
					} else {
						String query = "SELECT NVL(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,"
								+ " COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY_LESSTHAN_3,"
								+ " COUNT(H.REG_NO) WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM "
								+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND SUPPLY_RELEASE_DATE IS  NULL )B,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%' AND  SLADESC='Pending for service release') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND  SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <=90)D,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)E, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 375)F, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <= 90)G,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (  upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)H,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 375)I,"
								+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S"
								+ " WHERE A.REG_NO=B.REG_NO(+)  AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=E.REG_NO(+) AND A.REG_NO=F.REG_NO(+) AND A.REG_NO=G.REG_NO(+) AND A.REG_NO=H.REG_NO(+) AND A.REG_NO=I.REG_NO(+) AND A.NCPARTCD=S.SECCD AND A.NCPARTCD=B.NCPARTCD(+) AND A.NCPARTCD=C.NCPARTCD(+)  AND A.NCPARTCD=D.NCPARTCD(+)  AND A.NCPARTCD=E.NCPARTCD(+)   AND A.NCPARTCD=F.NCPARTCD(+) AND A.NCPARTCD=G.NCPARTCD(+) AND A.NCPARTCD=H.NCPARTCD(+) AND A.NCPARTCD=I.NCPARTCD(+)"
								+ "   GROUP BY rollup(S.divname)";
						reportPStmt = con.prepareStatement(query);

					}

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					/*
					 * String query = "select NVL(subname,'TOTAL') " +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')   and cirname=? and divname=?  )) group by  rollup(subname) "
					 * ;
					 */
					/*
					 * String query=
					 * "SELECT NVL(S.subname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) BRT_TURNKEY_LESSTHAN_3,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) BRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)I,"
					 * +
					 * " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S"
					 * + " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.REG_NO=H.REG_NO(+)" +
					 * " AND A.REG_NO=I.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD" +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * "  and cirname=?  and divname=?  GROUP BY rollup(S.subname) "
					 * ;
					 */
					/*
					 * String query=
					 * "SELECT NVL(S.subname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY_LESSTHAN_3,COUNT(H.REG_NO) WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)I,"
					 * +
					 * " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S"
					 * + " WHERE A.REG_NO=B.REG_NO(+)" +
					 * "  AND A.REG_NO=C.REG_NO(+)" +
					 * " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
					 * + " AND A.REG_NO=F.REG_NO(+)" +
					 * " AND A.REG_NO=G.REG_NO(+)" + " AND A.REG_NO=H.REG_NO(+)"
					 * + " AND A.REG_NO=I.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
					 * + " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+) " +
					 * " AND A.NCPARTCD=D.NCPARTCD(+) " +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)  " +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * "   and cirname=?   and divname=?   GROUP BY rollup(S.subname)"
					 * ;
					 */

					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						String query = "SELECT NVL(S.subname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,"
								+ " COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY_LESSTHAN_3,"
								+ " COUNT(H.REG_NO) WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM "
								+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND SUPPLY_RELEASE_DATE IS  NULL )B,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%' AND  SLADESC='Pending for service release') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND  SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <=90)D,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)E, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 375)F, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <= 90)G,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)H,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 375)I,"
								+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S"
								+ " WHERE A.REG_NO=B.REG_NO(+)  AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=E.REG_NO(+) AND A.REG_NO=F.REG_NO(+) AND A.REG_NO=G.REG_NO(+) AND A.REG_NO=H.REG_NO(+) AND A.REG_NO=I.REG_NO(+) AND A.NCPARTCD=S.SECCD AND A.NCPARTCD=B.NCPARTCD(+) AND A.NCPARTCD=C.NCPARTCD(+)  AND A.NCPARTCD=D.NCPARTCD(+)  AND A.NCPARTCD=E.NCPARTCD(+)   AND A.NCPARTCD=F.NCPARTCD(+) AND A.NCPARTCD=G.NCPARTCD(+) AND A.NCPARTCD=H.NCPARTCD(+) AND A.NCPARTCD=I.NCPARTCD(+)"
								+ "   and cirname=?    and divname=?    GROUP BY rollup(S.subname)";
						reportPStmt = con.prepareStatement(query);

						// reportPStmt.setString(1, month + "-" +
						// String.valueOf(curr_year));
						// reportPStmt.setString(2, chkVO.getCirname());
						// reportPStmt.setString(3, chkVO.getDivname());
						reportPStmt.setString(1, cscvo.getCircle());
						reportPStmt.setString(2, cscvo.getDivision());

					} else {

						if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
							String query = "SELECT NVL(S.subname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,"
									+ " COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY_LESSTHAN_3,"
									+ " COUNT(H.REG_NO) WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM "
									+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND SUPPLY_RELEASE_DATE IS  NULL )B,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%' AND  SLADESC='Pending for service release') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND  SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <=90)D,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)E, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 375)F, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <= 90)G,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)H,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 375)I,"
									+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S"
									+ " WHERE A.REG_NO=B.REG_NO(+)  AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=E.REG_NO(+) AND A.REG_NO=F.REG_NO(+) AND A.REG_NO=G.REG_NO(+) AND A.REG_NO=H.REG_NO(+) AND A.REG_NO=I.REG_NO(+) AND A.NCPARTCD=S.SECCD AND A.NCPARTCD=B.NCPARTCD(+) AND A.NCPARTCD=C.NCPARTCD(+)  AND A.NCPARTCD=D.NCPARTCD(+)  AND A.NCPARTCD=E.NCPARTCD(+)   AND A.NCPARTCD=F.NCPARTCD(+) AND A.NCPARTCD=G.NCPARTCD(+) AND A.NCPARTCD=H.NCPARTCD(+) AND A.NCPARTCD=I.NCPARTCD(+)"
									+ " and cirname=? GROUP BY rollup(S.subname)";

							/*
							 * SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO)
							 * PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO)
							 * BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO)
							 * BRT_DEPT_GRATHER_3, COUNT(F.REG_NO)
							 * BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO
							 * )+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO)
							 * WRT_TURNKEY_LESSTHAN_3, COUNT(H.REG_NO)
							 * WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO)
							 * WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.
							 * REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM (SELECT
							 * REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM
							 * REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <>
							 * 'DEL' AND NVL(ESTSTATUS,'01')='02' AND
							 * SUBSTR(REG_NO,6,1)='H')A, (SELECT REG_NO,NCPARTCD
							 * FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%'
							 * or upper(REPSTAT) like '%BRT%' or upper(REPSTAT)
							 * like '%TKEY%' ) AND INTIMATE_DATE IS NOT NULL AND
							 * MAXPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS
							 * NULL )B, (SELECT REG_NO,NCPARTCD FROM REP_FINAL
							 * WHERE (upper(REPSTAT) like '%WRT%') AND
							 * NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND
							 * INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL
							 * AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL
							 * AND SUPPLY_RELEASE_DATE IS NULL )C, (SELECT
							 * REG_NO,NCPARTCD FROM REP_FINAL WHERE
							 * (upper(REPSTAT) like '%BRT%') AND
							 * SUPPLY_RELEASE_DATE IS NULL AND INTIMATE_DATE IS
							 * NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS
							 * NOT NULL AND (SYSDATE-MAXPRDT) <=90)D, (SELECT
							 * REG_NO,NCPARTCD FROM REP_FINAL WHERE
							 * (upper(REPSTAT) like '%BRT%') AND
							 * SUPPLY_RELEASE_DATE IS NULL AND INTIMATE_DATE IS
							 * NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS
							 * NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND
							 * (SYSDATE-MAXPRDT) <=374)E, (SELECT
							 * REG_NO,NCPARTCD FROM REP_FINAL WHERE
							 * (upper(REPSTAT) like '%BRT%') AND
							 * SUPPLY_RELEASE_DATE IS NULL AND INTIMATE_DATE IS
							 * NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS
							 * NOT NULL AND (SYSDATE-MAXPRDT) > 375)F, (SELECT
							 * REG_NO,NCPARTCD FROM REP_FINAL WHERE
							 * (upper(REPSTAT) like '%WRT%' or upper(REPSTAT)
							 * like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS NULL
							 * AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND
							 * INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL
							 * AND (SYSDATE-MAXPRDT) <= 90)G, (SELECT
							 * REG_NO,NCPARTCD FROM REP_FINAL WHERE
							 * (upper(REPSTAT) like '%WRT%' or upper(REPSTAT)
							 * like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS NULL
							 * AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND
							 * INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL
							 * AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT)
							 * <=374)H, (SELECT REG_NO,NCPARTCD FROM REP_FINAL
							 * WHERE (upper(REPSTAT) like '%WRT%' or
							 * upper(REPSTAT) like '%TKEY%' ) AND
							 * SUPPLY_RELEASE_DATE IS NULL AND
							 * NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND
							 * INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL
							 * AND (SYSDATE-MAXPRDT) > 375)I, (SELECT
							 * CIRNAME,SECCD FROM SPDCLMASTER)S WHERE
							 * A.REG_NO=B.REG_NO(+) AND A.REG_NO=C.REG_NO(+) AND
							 * A.REG_NO=D.REG_NO(+) AND A.REG_NO=E.REG_NO(+) AND
							 * A.REG_NO=F.REG_NO(+) AND A.REG_NO=G.REG_NO(+) AND
							 * A.REG_NO=H.REG_NO(+) AND A.REG_NO=I.REG_NO(+) AND
							 * A.NCPARTCD=S.SECCD AND A.NCPARTCD=B.NCPARTCD(+)
							 * AND A.NCPARTCD=C.NCPARTCD(+) AND
							 * A.NCPARTCD=D.NCPARTCD(+) AND
							 * A.NCPARTCD=E.NCPARTCD(+) AND
							 * A.NCPARTCD=F.NCPARTCD(+) AND
							 * A.NCPARTCD=G.NCPARTCD(+) AND
							 * A.NCPARTCD=H.NCPARTCD(+) AND
							 * A.NCPARTCD=I.NCPARTCD(+) GROUP BY
							 * rollup(S.CIRNAME)
							 */
							reportPStmt = con.prepareStatement(query);
							reportPStmt.setString(1, cscvo.getCircle());
						}
						// }
						else {
							String query = "SELECT NVL(S.subname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,"
									+ " COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY_LESSTHAN_3,"
									+ " COUNT(H.REG_NO) WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM "
									+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND SUPPLY_RELEASE_DATE IS  NULL )B,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%' AND  SLADESC='Pending for service release') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND  SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <=90)D,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)E, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 375)F, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <= 90)G,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)H,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 375)I,"
									+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S"
									+ " WHERE A.REG_NO=B.REG_NO(+)  AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=E.REG_NO(+) AND A.REG_NO=F.REG_NO(+) AND A.REG_NO=G.REG_NO(+) AND A.REG_NO=H.REG_NO(+) AND A.REG_NO=I.REG_NO(+) AND A.NCPARTCD=S.SECCD AND A.NCPARTCD=B.NCPARTCD(+) AND A.NCPARTCD=C.NCPARTCD(+)  AND A.NCPARTCD=D.NCPARTCD(+)  AND A.NCPARTCD=E.NCPARTCD(+)   AND A.NCPARTCD=F.NCPARTCD(+) AND A.NCPARTCD=G.NCPARTCD(+) AND A.NCPARTCD=H.NCPARTCD(+) AND A.NCPARTCD=I.NCPARTCD(+)"
									+ "  GROUP BY rollup(S.subname)";
							reportPStmt = con.prepareStatement(query);
						}

					}
					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * String query = "select NVL(secname,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')    and cirname=?  and divname=?  and subname=?  )) group by  rollup(secname) "
					 * ;
					 */
					/*
					 * String query=
					 * "SELECT NVL(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) BRT_TURNKEY_LESSTHAN_3,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) BRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)I,"
					 * +
					 * " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
					 * + " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.REG_NO=H.REG_NO(+)" +
					 * " AND A.REG_NO=I.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD" +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * "  and cirname=?  and divname=?  and subname=?  GROUP BY rollup(S.secname) "
					 * ;
					 */
					/*
					 * String query=
					 * "SELECT NVL(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY_LESSTHAN_3,COUNT(H.REG_NO) WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)I,"
					 * +
					 * " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
					 * + " WHERE A.REG_NO=B.REG_NO(+)" +
					 * "  AND A.REG_NO=C.REG_NO(+)" +
					 * " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
					 * + " AND A.REG_NO=F.REG_NO(+)" +
					 * " AND A.REG_NO=G.REG_NO(+)" + " AND A.REG_NO=H.REG_NO(+)"
					 * + " AND A.REG_NO=I.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
					 * + " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+) " +
					 * " AND A.NCPARTCD=D.NCPARTCD(+) " +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)  " +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * "   and cirname=?   and divname=?    and subname=?   GROUP BY rollup(S.secname)"
					 * ;
					 */
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						String query = "SELECT NVL(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,"
								+ " COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY_LESSTHAN_3,"
								+ " COUNT(H.REG_NO) WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM "
								+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND SUPPLY_RELEASE_DATE IS  NULL )B,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%' AND  SLADESC='Pending for service release') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND  SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <=90)D,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)E, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 375)F, "
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <= 90)G,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)H,"
								+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 375)I,"
								+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
								+ " WHERE A.REG_NO=B.REG_NO(+)  AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=E.REG_NO(+) AND A.REG_NO=F.REG_NO(+) AND A.REG_NO=G.REG_NO(+) AND A.REG_NO=H.REG_NO(+) AND A.REG_NO=I.REG_NO(+) AND A.NCPARTCD=S.SECCD AND A.NCPARTCD=B.NCPARTCD(+) AND A.NCPARTCD=C.NCPARTCD(+)  AND A.NCPARTCD=D.NCPARTCD(+)  AND A.NCPARTCD=E.NCPARTCD(+)   AND A.NCPARTCD=F.NCPARTCD(+) AND A.NCPARTCD=G.NCPARTCD(+) AND A.NCPARTCD=H.NCPARTCD(+) AND A.NCPARTCD=I.NCPARTCD(+)"
								+ "   and cirname=?    and divname=?     and subname=?     GROUP BY rollup(S.secname)";
						reportPStmt = con.prepareStatement(query);

						// reportPStmt.setString(1, month + "-" +
						// String.valueOf(curr_year));
						// reportPStmt.setString(2, chkVO.getCirname());
						// reportPStmt.setString(3, chkVO.getDivname());
						// reportPStmt.setString(4, chkVO.getSubdivname());

						reportPStmt.setString(1, cscvo.getCircle());
						reportPStmt.setString(2, cscvo.getDivision());
						reportPStmt.setString(3, cscvo.getSubDiv());
					} else {

						if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
							String query = "SELECT NVL(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,"
									+ " COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY_LESSTHAN_3,"
									+ " COUNT(H.REG_NO) WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM "
									+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND SUPPLY_RELEASE_DATE IS  NULL )B,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%' AND  SLADESC='Pending for service release') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND  SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <=90)D,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)E, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 375)F, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <= 90)G,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)H,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 375)I,"
									+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
									+ " WHERE A.REG_NO=B.REG_NO(+)  AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=E.REG_NO(+) AND A.REG_NO=F.REG_NO(+) AND A.REG_NO=G.REG_NO(+) AND A.REG_NO=H.REG_NO(+) AND A.REG_NO=I.REG_NO(+) AND A.NCPARTCD=S.SECCD AND A.NCPARTCD=B.NCPARTCD(+) AND A.NCPARTCD=C.NCPARTCD(+)  AND A.NCPARTCD=D.NCPARTCD(+)  AND A.NCPARTCD=E.NCPARTCD(+)   AND A.NCPARTCD=F.NCPARTCD(+) AND A.NCPARTCD=G.NCPARTCD(+) AND A.NCPARTCD=H.NCPARTCD(+) AND A.NCPARTCD=I.NCPARTCD(+)"
									+ "    and cirname=?    and divname=?       GROUP BY rollup(S.secname)";
							reportPStmt = con.prepareStatement(query);
							reportPStmt.setString(1, cscvo.getCircle());
							reportPStmt.setString(2, cscvo.getDivision());
						} else {
							String query = "SELECT NVL(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,"
									+ " COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY_LESSTHAN_3,"
									+ " COUNT(H.REG_NO) WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM "
									+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND SUPPLY_RELEASE_DATE IS  NULL )B,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%' AND  SLADESC='Pending for service release') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND  SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <=90)D,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)E, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 375)F, "
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <= 90)G,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)H,"
									+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 375)I,"
									+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
									+ " WHERE A.REG_NO=B.REG_NO(+)  AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=E.REG_NO(+) AND A.REG_NO=F.REG_NO(+) AND A.REG_NO=G.REG_NO(+) AND A.REG_NO=H.REG_NO(+) AND A.REG_NO=I.REG_NO(+) AND A.NCPARTCD=S.SECCD AND A.NCPARTCD=B.NCPARTCD(+) AND A.NCPARTCD=C.NCPARTCD(+)  AND A.NCPARTCD=D.NCPARTCD(+)  AND A.NCPARTCD=E.NCPARTCD(+)   AND A.NCPARTCD=F.NCPARTCD(+) AND A.NCPARTCD=G.NCPARTCD(+) AND A.NCPARTCD=H.NCPARTCD(+) AND A.NCPARTCD=I.NCPARTCD(+)"
									+ "   GROUP BY rollup(S.secname)";
							reportPStmt = con.prepareStatement(query);
						}

					}

					reportRst = reportPStmt.executeQuery();

				} else {
					/*
					 * String query = "select NVL(CIRNAME,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * " where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9'))  ) group by  rollup(CIRNAME) "
					 * ;
					 */
					/*
					 * String query=
					 * "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) BRT_TURNKEY_LESSTHAN_3,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) BRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)I,"
					 * + " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.REG_NO=H.REG_NO(+)" +
					 * " AND A.REG_NO=I.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD" +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * " GROUP BY rollup(S.CIRNAME) ";
					 */
					/*
					 * String query=
					 * "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY_LESSTHAN_3,COUNT(H.REG_NO) WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)I,"
					 * + " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * "  AND A.REG_NO=C.REG_NO(+)" +
					 * " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
					 * + " AND A.REG_NO=F.REG_NO(+)" +
					 * " AND A.REG_NO=G.REG_NO(+)" + " AND A.REG_NO=H.REG_NO(+)"
					 * + " AND A.REG_NO=I.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
					 * + " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+) " +
					 * " AND A.NCPARTCD=D.NCPARTCD(+) " +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)  " +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * " GROUP BY rollup(S.CIRNAME)";
					 */
					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,"
							+ " COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY_LESSTHAN_3,"
							+ " COUNT(H.REG_NO) WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) WRT_TURNKEY FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%' AND  SLADESC='Pending for service release') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND  SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <=90)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)E, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 375)F, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <= 90)G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 375)I,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)  AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=E.REG_NO(+) AND A.REG_NO=F.REG_NO(+) AND A.REG_NO=G.REG_NO(+) AND A.REG_NO=H.REG_NO(+) AND A.REG_NO=I.REG_NO(+) AND A.NCPARTCD=S.SECCD AND A.NCPARTCD=B.NCPARTCD(+) AND A.NCPARTCD=C.NCPARTCD(+)  AND A.NCPARTCD=D.NCPARTCD(+)  AND A.NCPARTCD=E.NCPARTCD(+)   AND A.NCPARTCD=F.NCPARTCD(+) AND A.NCPARTCD=G.NCPARTCD(+) AND A.NCPARTCD=H.NCPARTCD(+) AND A.NCPARTCD=I.NCPARTCD(+)"
							+ "  GROUP BY rollup(S.CIRNAME)";

					/*
					 * SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO)
					 * PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO)
					 * BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,
					 * COUNT(F.REG_NO)
					 * BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(
					 * F.REG_NO) BRT_DEPT,COUNT(G.REG_NO)
					 * WRT_TURNKEY_LESSTHAN_3, COUNT(H.REG_NO)
					 * WRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO)
					 * WRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+
					 * count(I.REG_NO) WRT_TURNKEY FROM (SELECT
					 * REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL
					 * WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND
					 * NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,
					 * (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE
					 * (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like
					 * '%BRT%' or upper(REPSTAT) like '%TKEY%' ) AND
					 * INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND
					 * SUPPLY_RELEASE_DATE IS NULL )B, (SELECT REG_NO,NCPARTCD
					 * FROM REP_FINAL WHERE (upper(REPSTAT) like '%WRT%') AND
					 * NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND
					 * INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND
					 * SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND
					 * SUPPLY_RELEASE_DATE IS NULL )C, (SELECT REG_NO,NCPARTCD
					 * FROM REP_FINAL WHERE (upper(REPSTAT) like '%BRT%') AND
					 * SUPPLY_RELEASE_DATE IS NULL AND INTIMATE_DATE IS NOT NULL
					 * AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND
					 * (SYSDATE-MAXPRDT) <=90)D, (SELECT REG_NO,NCPARTCD FROM
					 * REP_FINAL WHERE (upper(REPSTAT) like '%BRT%') AND
					 * SUPPLY_RELEASE_DATE IS NULL AND INTIMATE_DATE IS NOT NULL
					 * AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND
					 * (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)E,
					 * (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE
					 * (upper(REPSTAT) like '%BRT%') AND SUPPLY_RELEASE_DATE IS
					 * NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT
					 * NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >
					 * 375)F, (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE
					 * (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like
					 * '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS NULL AND
					 * NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND
					 * INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND
					 * (SYSDATE-MAXPRDT) <= 90)G, (SELECT REG_NO,NCPARTCD FROM
					 * REP_FINAL WHERE (upper(REPSTAT) like '%WRT%' or
					 * upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS
					 * NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND
					 * INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND
					 * (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374)H,
					 * (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE
					 * (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like
					 * '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS NULL AND
					 * NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND
					 * INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND
					 * (SYSDATE-MAXPRDT) > 375)I, (SELECT CIRNAME,SECCD FROM
					 * SPDCLMASTER)S WHERE A.REG_NO=B.REG_NO(+) AND
					 * A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND
					 * A.REG_NO=E.REG_NO(+) AND A.REG_NO=F.REG_NO(+) AND
					 * A.REG_NO=G.REG_NO(+) AND A.REG_NO=H.REG_NO(+) AND
					 * A.REG_NO=I.REG_NO(+) AND A.NCPARTCD=S.SECCD AND
					 * A.NCPARTCD=B.NCPARTCD(+) AND A.NCPARTCD=C.NCPARTCD(+) AND
					 * A.NCPARTCD=D.NCPARTCD(+) AND A.NCPARTCD=E.NCPARTCD(+) AND
					 * A.NCPARTCD=F.NCPARTCD(+) AND A.NCPARTCD=G.NCPARTCD(+) AND
					 * A.NCPARTCD=H.NCPARTCD(+) AND A.NCPARTCD=I.NCPARTCD(+)
					 * GROUP BY rollup(S.CIRNAME)
					 */

					reportPStmt = con.prepareStatement(query);
					/*System.out.println(query);*/
					reportRst = reportPStmt.executeQuery();
					System.out.println("HT New Services(Incl M&P)_AMT_PAID:"+query);
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							dmapobj.setBrt_les_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt(reportRst.getString(7));

							dmapobj.setTurnkey_les_3months(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_3months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(10));
							dmapobj.setTot_turnkey(reportRst.getString(11));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							dmapobj.setBrt_les_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt(reportRst.getString(7));

							dmapobj.setTurnkey_les_3months(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_3months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(10));
							dmapobj.setTot_turnkey(reportRst.getString(11));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// Ht Pending New Services Report

	public CscpayVO getHTPendingNewScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String complaint = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		if ("LT".equalsIgnoreCase(cscvo.getType())) {
			complaint = "  and (complaint||sub_complaint) like '99'  ";
		}
		if ("HT".equalsIgnoreCase(cscvo.getType())) {
			complaint = "  and (complaint||sub_complaint) like '911'  ";
		}

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select nvl(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * + " where circd not in('1','4','6','9') and cirname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(divname) ";
					 */
					String query = " select NVL(divname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , "
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt, sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey, sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT)  like '%TKEY%' then 1 else 0 end) balance from  newcomp_tab,  spdclmaster     where     CSPARTCD=seccd  AND  circd not in('1','4','6','9')"
							+ complaint + "  and cirname=?  group by  rollup(divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					/*
					 * String query =
					 * "select nvl(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * +
					 * " where circd not in('1','4','6','9') and cirname=? and divname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from rep_final "
					 * + ltcat + ")) group by  rollup(subname) ";
					 */
					String query = " select NVL(subname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , "
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt, sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey, sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT)  like '%TKEY%' then 1 else 0 end) balance from  newcomp_tab,  spdclmaster     where     CSPARTCD=seccd  AND  circd not in('1','4','6','9')"
							+ complaint + "  and cirname=?   and divname=?  group by  rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select nvl(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * +
					 * " where circd not in('1','4','6','9') and cirname=? and divname=? and subname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(secname) ";
					 */
					String query = " select NVL(secname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , "
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt, sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey, sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT)  like '%TKEY%' then 1 else 0 end) balance from  newcomp_tab,  spdclmaster     where     CSPARTCD=seccd  AND  circd not in('1','4','6','9')"
							+ complaint + "  and cirname=?   and divname=?   and subname=?  group by  rollup(secname)";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					/*
					 * String query =
					 * "select nvl(CIRNAME,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * + " where circd not in('1','4','6','9'))" +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(CIRNAME) ";
					 */
					String query = " select NVL(cirname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , "
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt, sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey, sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT)  like '%TKEY%' then 1 else 0 end) balance from  newcomp_tab,  spdclmaster     where     CSPARTCD=seccd  AND  circd not in('1','4','6','9')"
							+ complaint + "  group by  rollup(cirname)";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("ALL:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	//
	// HT Addtional Load Scs
	// Ht Pending New Services Report

	public CscpayVO getHTAdditionalScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String complaint = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		if ("LT".equalsIgnoreCase(cscvo.getType())) {
			complaint = "  and (complaint||sub_complaint) like '99'  ";
		}
		if ("HT".equalsIgnoreCase(cscvo.getType())) {
			complaint = "  and (complaint||sub_complaint) like '911'  ";
		}

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select nvl(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * + " where circd not in('1','4','6','9') and cirname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(divname) ";
					 */
					String query = " select NVL(divname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , "
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt, sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey, sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT)  like '%TKEY%' then 1 else 0 end) balance from  newcomp_tab,  spdclmaster     where     CSPARTCD=seccd  AND  circd not in('1','4','6','9')"
							+ complaint + "  and cirname=?  group by  rollup(divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					/*
					 * String query =
					 * "select nvl(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * +
					 * " where circd not in('1','4','6','9') and cirname=? and divname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from rep_final "
					 * + ltcat + ")) group by  rollup(subname) ";
					 */
					String query = " select NVL(subname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , "
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt, sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey, sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT)  like '%TKEY%' then 1 else 0 end) balance from  newcomp_tab,  spdclmaster     where     CSPARTCD=seccd  AND  circd not in('1','4','6','9')"
							+ complaint + "  and cirname=?   and divname=?  group by  rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select nvl(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * +
					 * " where circd not in('1','4','6','9') and cirname=? and divname=? and subname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(secname) ";
					 */
					String query = " select NVL(secname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , "
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt, sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey, sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT)  like '%TKEY%' then 1 else 0 end) balance from  newcomp_tab,  spdclmaster     where     CSPARTCD=seccd  AND  circd not in('1','4','6','9')"
							+ complaint + "  and cirname=?   and divname=?   and subname=?  group by  rollup(secname)";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					/*
					 * String query =
					 * "select nvl(CIRNAME,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * + " where circd not in('1','4','6','9'))" +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(CIRNAME) ";
					 */
					String query = " select NVL(cirname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob , "
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered , "
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT)  like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid, sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt, sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey, sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT)  like '%TKEY%' then 1 else 0 end) balance from  newcomp_tab,  spdclmaster     where     CSPARTCD=seccd  AND  circd not in('1','4','6','9')"
							+ complaint + "  group by  rollup(cirname)";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					/*System.out.println("ALL:" + query);*/
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	//LT ADDITIONAL LOAD SERVICES
	public CscpayVO getStatusOfLTAddLoadEstNotCreatedReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {
					reportRst = reportPStmt.executeQuery();

				} else {

					

						String query="SELECT NVL(s.cirname,'TOTAL'),\r\n" + 
								"  COUNT(p.zregid),\r\n" + 
								"  COUNT(a.zregid) gra2,\r\n" + 
								"  COUNT(b.zregid) gra3,\r\n" + 
								"  COUNT(c.zregid) gr4\r\n" + 
								"FROM\r\n" + 
								"  (SELECT zregid,\r\n" + 
								"    SUBSTR(zregid,1,5)\r\n" + 
								"  FROM it_all_LT\r\n" + 
								"  WHERE status     ='Estimate not created'\r\n" + 
								"  AND zrequest_type='AL' AND TRIM(ZREGID) IN  (SELECT REG_NO FROM NEW_COMPLAINTS N WHERE  COMPLAINT=9 AND SUB_COMPLAINT=9 )\r\n" + 
								"  )p,\r\n" + 
								"  (SELECT zregid\r\n" + 
								"  FROM it_all_LT\r\n" + 
								"  WHERE status     ='Estimate not created'\r\n" + 
								"  AND zrequest_type='AL'\r\n" + 
								"  AND zmonth       = 2\r\n" + 
								"  AND zmonth       > =2\r\n" + 
								"  )a,\r\n" + 
								"  (SELECT zregid\r\n" + 
								"  FROM it_all_LT\r\n" + 
								"  WHERE status     ='Estimate not created'\r\n" + 
								"  AND zrequest_type='AL'\r\n" + 
								"  AND zmonth       =3\r\n" + 
								"  AND zmonth      >=3\r\n" + 
								"  )b,\r\n" + 
								"  (SELECT zregid\r\n" + 
								"  FROM it_all_LT\r\n" + 
								"  WHERE status     ='Estimate not created'\r\n" + 
								"  AND zrequest_type='AL'\r\n" + 
								"  AND zmonth       = 4\r\n" + 
								"  AND zmonth      >=4\r\n" + 
								"  )c,\r\n" + 
								"  (SELECT cirname,seccd FROM spdclmaster\r\n" + 
								"  )s\r\n" + 
								"WHERE p.zregid          =a.zregid(+)\r\n" + 
								"AND p.zregid            =b.zregid(+)\r\n" + 
								"AND p.zregid            =c.zregid(+)\r\n" + 
								"AND SUBSTR(p.zregid,1,5)=seccd\r\n" + 
								"GROUP BY rollup(s.cirname)\r\n" + 
								"ORDER BY s.cirname\r\n" + 
								"";

					

					reportPStmt = con.prepareStatement(query);
					System.out.println("EST"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));

							
							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_gtr_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_6months(reportRst.getString(4));
							dmapobj.setBrt_gtr_9months(reportRst.getString(5));
						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							
							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_gtr_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_6months(reportRst.getString(4));
							dmapobj.setBrt_gtr_9months(reportRst.getString(5));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	}
	
	public CscpayVO getStatusOfPenLTAddLoadEstToBeSanctionedReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
				} else if ("SEC".equals(cscvo.getFlag())) {
				} else {

					
					
					String query="SELECT NVL(s.cirname,'TOTAL'),\r\n" + 
							"  COUNT(p.zregid),\r\n" + 
							"  COUNT(a.zregid) gra2,\r\n" + 
							"  COUNT(b.zregid) gra3,\r\n" + 
							"  COUNT(c.zregid) gr4\r\n" + 
							"FROM\r\n" + 
							"  (SELECT zregid,\r\n" + 
							"    SUBSTR(zregid,1,5)\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Estimate not approved'\r\n" + 
							"  AND zrequest_type='AL' AND TRIM(ZREGID) IN  (SELECT REG_NO FROM NEW_COMPLAINTS N WHERE  COMPLAINT=9 AND SUB_COMPLAINT=9 )\r\n" + 
							"  )p,\r\n" + 
							"  (SELECT zregid\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Estimate not approved'\r\n" + 
							"  AND zrequest_type='AL'\r\n" + 
							"  AND zmonth       = 2\r\n" + 
							"  AND zmonth       > =2\r\n" + 
							"  )a,\r\n" + 
							"  (SELECT zregid\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Estimate not approved'\r\n" + 
							"  AND zrequest_type='AL'\r\n" + 
							"  AND zmonth       =3\r\n" + 
							"  AND zmonth      >=3\r\n" + 
							"  )b,\r\n" + 
							"  (SELECT zregid\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Estimate not approved'\r\n" + 
							"  AND zrequest_type='AL'\r\n" + 
							"  AND zmonth       = 4\r\n" + 
							"  AND zmonth      >=4\r\n" + 
							"  )c,\r\n" + 
							"  (SELECT cirname,seccd FROM spdclmaster\r\n" + 
							"  )s\r\n" + 
							"WHERE p.zregid          =a.zregid(+)\r\n" + 
							"AND p.zregid            =b.zregid(+)\r\n" + 
							"AND p.zregid            =c.zregid(+)\r\n" + 
							"AND SUBSTR(p.zregid,1,5)=seccd\r\n" + 
							"GROUP BY rollup(s.cirname)\r\n" + 
							"ORDER BY s.cirname";

					reportPStmt = con.prepareStatement(query);
					System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_gtr_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_6months(reportRst.getString(4));
							dmapobj.setBrt_gtr_9months(reportRst.getString(5));
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_gtr_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_6months(reportRst.getString(4));
							dmapobj.setBrt_gtr_9months(reportRst.getString(5));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	}
	
	public CscpayVO getStatusOfPenLTAddLoadEstSanctionedAmtpaidReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
				} else if ("SEC".equals(cscvo.getFlag())) {
				} else {
					
					
					String query="SELECT NVL(s.cirname,'TOTAL'),\r\n" + 
							"  COUNT(p.zregid),\r\n" + 
							"  COUNT(d.reg_no)wrt,\r\n" + 
							"  COUNT(a.zregid) gra2,\r\n" + 
							"  COUNT(b.zregid) gra3,\r\n" + 
							"  COUNT(c.zregid) gr4\r\n" + 
							"FROM\r\n" + 
							"  (SELECT trim(zregid)zregid,\r\n" + 
							"    SUBSTR(zregid,1,5)\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Payment not paid'\r\n" + 
							"  AND zrequest_type='AL' AND TRIM(ZREGID) IN  (SELECT REG_NO FROM NEW_COMPLAINTS N WHERE  COMPLAINT=9 AND SUB_COMPLAINT=9)\r\n" + 
							"  )p,\r\n" + 
							"  (SELECT trim(zregid)zregid\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Payment not paid'\r\n" + 
							"  AND zrequest_type='AL'\r\n" + 
							"  AND zmonth       = 2\r\n" + 
							"  AND zmonth       > =2\r\n" + 
							"  )a,\r\n" + 
							"  (SELECT trim(zregid)zregid\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Payment not paid'\r\n" + 
							"  AND zrequest_type='AL'\r\n" + 
							"  AND zmonth       =3\r\n" + 
							"  AND zmonth      >=3\r\n" + 
							"  )b,\r\n" + 
							"  (SELECT trim(zregid)zregid\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Payment not paid'\r\n" + 
							"  AND zrequest_type='AL'\r\n" + 
							"  AND zmonth       = 4\r\n" + 
							"  AND zmonth      >=4\r\n" + 
							"  )c,\r\n" + 
							"  (SELECT trim(reg_no) reg_no\r\n" + 
							"  FROM newcomp_tab\r\n" + 
							"  WHERE remarks='WRT'\r\n" + 
							"  AND reg_no  IN\r\n" + 
							"    (SELECT trim(zregid)\r\n" + 
							"    FROM it_all_LT\r\n" + 
							"    WHERE status     ='Payment not paid'\r\n" + 
							"    AND zrequest_type='AL'\r\n" + 
							"    )\r\n" + 
							"  )d,\r\n" + 
							"  (SELECT cirname,seccd FROM spdclmaster\r\n" + 
							"  )s\r\n" + 
							"WHERE p.zregid          =a.zregid(+)\r\n" + 
							"AND p.zregid            =b.zregid(+)\r\n" + 
							"AND p.zregid            =c.zregid(+)\r\n" + 
							"AND p.zregid            =d.reg_no(+)\r\n" + 
							"AND SUBSTR(p.zregid,1,5)=seccd\r\n" + 
							"GROUP BY rollup(s.cirname)\r\n" + 
							"ORDER BY s.cirname";

					reportPStmt = con.prepareStatement(query);
					System.out.println("Amount Not Paid"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_gtr_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_6months(reportRst.getString(4));
							dmapobj.setBrt_gtr_9months(reportRst.getString(5));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_gtr_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_6months(reportRst.getString(4));
							dmapobj.setBrt_gtr_9months(reportRst.getString(5));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
		
	}
	
	public CscpayVO getStatusOfPenLTAddLoadScsRelAfterPaidReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {} else if ("SUB_DIV".equals(cscvo.getFlag())) {} else if ("SEC".equals(cscvo.getFlag())) {} else {

					
					
					
					String query="SELECT NVL(s.cirname,'TOTAL'),\r\n" + 
							"  COUNT(p.zregid),\r\n" + 
							"  COUNT(d.reg_no)wrt,\r\n" + 
							"  COUNT(a.zregid) gra2,\r\n" + 
							"  COUNT(b.zregid) gra3,\r\n" + 
							"  COUNT(c.zregid) gr4\r\n" + 
							"FROM\r\n" + 
							"  (SELECT trim(zregid)zregid,\r\n" + 
							"    SUBSTR(zregid,1,5)\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Payment paid'\r\n" + 
							"  AND zrequest_type='AL' AND TRIM(ZREGID) IN  (SELECT REG_NO FROM NEW_COMPLAINTS N WHERE  COMPLAINT=9 AND SUB_COMPLAINT=9)\r\n" + 
							"  )p,\r\n" + 
							"  (SELECT trim(zregid)zregid\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Payment paid'\r\n" + 
							"  AND zrequest_type='AL'\r\n" + 
							"  AND zmonth       = 2\r\n" + 
							"  AND zmonth       > =2\r\n" + 
							"  )a,\r\n" + 
							"  (SELECT trim(zregid)zregid\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Payment paid'\r\n" + 
							"  AND zrequest_type='AL'\r\n" + 
							"  AND zmonth       =3\r\n" + 
							"  AND zmonth      >=3\r\n" + 
							"  )b,\r\n" + 
							"  (SELECT trim(zregid)zregid\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Payment paid'\r\n" + 
							"  AND zrequest_type='AL'\r\n" + 
							"  AND zmonth       = 4\r\n" + 
							"  AND zmonth      >=4\r\n" + 
							"  )c,\r\n" + 
							"  (SELECT trim(reg_no) reg_no\r\n" + 
							"  FROM newcomp_tab\r\n" + 
							"  WHERE remarks='WRT'\r\n" + 
							"  AND reg_no  IN\r\n" + 
							"    (SELECT trim(zregid)\r\n" + 
							"    FROM it_all_LT\r\n" + 
							"    WHERE status     ='Payment paid'\r\n" + 
							"    AND zrequest_type='AL'\r\n" + 
							"    )\r\n" + 
							"  )d,\r\n" + 
							"  (SELECT cirname,seccd FROM spdclmaster\r\n" + 
							"  )s\r\n" + 
							"WHERE p.zregid          =a.zregid(+)\r\n" + 
							"AND p.zregid            =b.zregid(+)\r\n" + 
							"AND p.zregid            =c.zregid(+)\r\n" + 
							"AND p.zregid            =d.reg_no(+)\r\n" + 
							"AND SUBSTR(p.zregid,1,5)=seccd\r\n" + 
							"group by rollup(s.cirname)\r\n" + 
							"ORDER BY s.cirname";
					
					reportPStmt = con.prepareStatement(query);
					System.out.println("PGKK:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							
							dmapobj.setBrt_gtr_1months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setBrt_gtr_6months(reportRst.getString(6));
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							
							dmapobj.setBrt_gtr_1months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setBrt_gtr_6months(reportRst.getString(6));
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	}
	// Ht Additinal Load EstimateNotCreated

	public CscpayVO getStatusOfHTAddLoadEstNotCreatedReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {
		



		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {
					reportRst = reportPStmt.executeQuery();

				} else {

					/*
					 * String query =
					 * "select NVL(NAME2,'TOTAL'),sum(TOT),sum(LT_3MON),sum(GT_3MON),sum(GT_6MON),sum(GT_9MON)"
					 * +
					 * " ,sum(GT_1YR),sum(TOTAL) from  M_AL_EST_N_CRE group by rollup(NAME2) order by NAME2"
					 * ;
					 */

					//String query = "select NVL(NAME2,'TOTAL'),sum(TOT),sum(GT_3MON),sum(GT_4MON),sum(GT_5MON) from  M_AL_EST_N_CRE group by rollup(NAME2) order by NAME2";
					String query="SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(P.ZREGID),COUNT(A.ZREGID) GRA2,COUNT(B.ZREGID) GRA3,COUNT(C.ZREGID) GR4 FROM"
							+ " (SELECT ZREGID,SUBSTR(ZREGID,1,5) FROM IT_ALL WHERE STATUS='Estimate not created' AND ZREQUEST_TYPE='AL')P,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Estimate not created' AND ZREQUEST_TYPE='AL' AND ZMONTH = 2 AND ZMONTH > =2)A,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Estimate not created' AND ZREQUEST_TYPE='AL' AND ZMONTH =3 AND ZMONTH >=3)B,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Estimate not created' AND ZREQUEST_TYPE='AL' AND ZMONTH = 4 AND ZMONTH >=4)C,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S"
							+ " WHERE P.ZREGID=A.ZREGID(+)"
							+ " AND  P.ZREGID=B.ZREGID(+)"
							+ " AND P.ZREGID=C.ZREGID(+)"
							+ " AND SUBSTR(P.ZREGID,1,5)=SECCD"
							+ " GROUP BY ROLLUP(S.CIRNAME) ORDER BY S.CIRNAME";

					/*
					 * String query =
					 * "select NVL(NAME2,'TOTAL'),sum(TOT),sum(GT_3MON),sum(GT_4MON),sum(GT_5MON),sum(GT_9MON)"
					 * +
					 * "  from  M_AL_EST_N_CRE group by rollup(NAME2) order by NAME2"
					 * ;
					 */

					reportPStmt = con.prepareStatement(query);
					System.out.println("EstimateNotCreated:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));

							/*
							 * dmapobj.setBrt_gtr_3months(reportRst.getString(4)
							 * );
							 * dmapobj.setBrt_gtr_6months(reportRst.getString(5)
							 * );
							 * dmapobj.setBrt_gtr_9months(reportRst.getString(6)
							 * );
							 * dmapobj.setBrt_gtr_1year(reportRst.getString(7));
							 */
							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_gtr_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_6months(reportRst.getString(4));
							dmapobj.setBrt_gtr_9months(reportRst.getString(5));
						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							/*
							 * dmapobj.setBrt_les_3months(reportRst.getString(3)
							 * );
							 * dmapobj.setBrt_gtr_3months(reportRst.getString(4)
							 * );
							 * dmapobj.setBrt_gtr_6months(reportRst.getString(5)
							 * );
							 * dmapobj.setBrt_gtr_9months(reportRst.getString(6)
							 * );
							 * dmapobj.setBrt_gtr_1year(reportRst.getString(7));
							 */
							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_gtr_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_6months(reportRst.getString(4));
							dmapobj.setBrt_gtr_9months(reportRst.getString(5));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
	}

	// HT Additional Laod EstimateToBeSanctioned
	public CscpayVO getStatusOfPenHTAddLoadEstToBeSanctionedReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
				} else if ("SEC".equals(cscvo.getFlag())) {
				} else {

					/*
					 * String query =
					 * "select NVL(NAME2,'TOTAL'),sum(TOT),sum(LT_3MON),sum(GT_3MON),sum(GT_6MON),sum(GT_9MON),sum(GT_1YR),sum(total) from M_AL_NOT_SANC "
					 * + " group by rollup(NAME2) order by NAME2";
					 */
					
					
					/*String query = "select NVL(NAME2,'TOTAL'),sum(TOT),sum(GT_3MON),sum(GT_4MON),sum(GT_5MON) from M_AL_NOT_SANC "
							+ " group by rollup(NAME2) order by NAME2";*/
					
					String query="SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(P.ZREGID),COUNT(A.ZREGID) GRA2,COUNT(B.ZREGID) GRA3,COUNT(C.ZREGID) GR4 FROM"
							+ " (SELECT ZREGID,SUBSTR(ZREGID,1,5) FROM IT_ALL WHERE STATUS='Estimate not approved' AND ZREQUEST_TYPE='AL')P,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Estimate not approved' AND ZREQUEST_TYPE='AL' AND ZMONTH = 2 AND ZMONTH > =2)A,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Estimate not approved' AND ZREQUEST_TYPE='AL' AND ZMONTH =3 AND ZMONTH >=3)B,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Estimate not approved' AND ZREQUEST_TYPE='AL' AND ZMONTH = 4 AND ZMONTH >=4)C,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S"
							+ " WHERE P.ZREGID=A.ZREGID(+)"
							+ " AND  P.ZREGID=B.ZREGID(+)"
							+ " AND P.ZREGID=C.ZREGID(+)"
							+ " AND SUBSTR(P.ZREGID,1,5)=SECCD"
							+ " GROUP BY ROLLUP(S.CIRNAME) ORDER BY S.CIRNAME";

					reportPStmt = con.prepareStatement(query);
					System.out.println("EstimateToBeSanctioned:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_gtr_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_6months(reportRst.getString(4));
							dmapobj.setBrt_gtr_9months(reportRst.getString(5));
							/*
							 * dmapobj.setTot_brt(reportRst.getString(7));
							 * 
							 * dmapobj.setTurnkey_les_3months(reportRst.
							 * getString(8));
							 * dmapobj.setTurnkey_gtr_3months(reportRst.
							 * getString(9));
							 * dmapobj.setTurnkey_gtr_1year(reportRst.getString(
							 * 10));
							 * dmapobj.setTot_turnkey(reportRst.getString(11));
							 */

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_gtr_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_6months(reportRst.getString(4));
							dmapobj.setBrt_gtr_9months(reportRst.getString(5));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// HT Addd Load EstSanctionedAmtpaid

	public CscpayVO getStatusOfPenHTAddLoadEstSanctionedAmtpaidReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
				} else if ("SEC".equals(cscvo.getFlag())) {
				} else {
					/*
					 * String query =
					 * "select NVL(NAME2,'TOTAL'),sum(TOT),sum(LT_3MON),sum(GT_3MON),sum(GT_6MON),sum(GT_9MON),sum(GT_1YR),sum(total) from M_AL_NOT_PAID"
					 * + " group by rollup(NAME2) order  by NAME2";
					 */

					/*String query = "select NVL(NAME2,'TOTAL'),sum(TOT),sum(GT_3MON),sum(GT_4MON),sum(GT_5MON) from M_AL_NOT_PAID"
							+ " group by rollup(NAME2) order  by NAME2";*/
					
					String query="SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(P.ZREGID),COUNT(A.ZREGID) GRA2,COUNT(B.ZREGID) GRA3,COUNT(C.ZREGID) GR4 FROM"
							+ " (SELECT ZREGID,SUBSTR(ZREGID,1,5) FROM IT_ALL WHERE STATUS='Payment not paid' AND ZREQUEST_TYPE='AL')P,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Payment not paid' AND ZREQUEST_TYPE='AL' AND ZMONTH = 2 AND ZMONTH > =2)A,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Payment not paid' AND ZREQUEST_TYPE='AL' AND ZMONTH =3 AND ZMONTH >=3)B,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Payment not paid' AND ZREQUEST_TYPE='AL' AND ZMONTH = 4 AND ZMONTH >=4)C,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S"
							+ " WHERE P.ZREGID=A.ZREGID(+)"
							+ " AND  P.ZREGID=B.ZREGID(+)"
							+ " AND P.ZREGID=C.ZREGID(+)"
							+ " AND SUBSTR(P.ZREGID,1,5)=SECCD"
							+ " GROUP BY ROLLUP(S.CIRNAME) ORDER BY S.CIRNAME";

					reportPStmt = con.prepareStatement(query);
					System.out.println("AMOUNT NOT PAID:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_gtr_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_6months(reportRst.getString(4));
							dmapobj.setBrt_gtr_9months(reportRst.getString(5));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_gtr_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_6months(reportRst.getString(4));
							dmapobj.setBrt_gtr_9months(reportRst.getString(5));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// HT Add.Load Rel After Paid Release
	//
	public CscpayVO getStatusOfPenHTAddLoadScsRelAfterPaidReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {} else if ("SUB_DIV".equals(cscvo.getFlag())) {} else if ("SEC".equals(cscvo.getFlag())) {} else {

					/*
					 * String query =
					 * "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9,COUNT(G.REG_NO) GRATHER_1 FROM"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,ESTSTATUS FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(ESTSTATUS,'01')='02'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8'))A,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,PAYDT,SAPDEM,COLL FROM NEWCOMP_TAB WHERE REMARKS IN ('BRT','WRT') AND INTIMATE_DATE IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 )B,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS IN ('WRT') AND INTIMATE_DATE IS NOT NULL AND  NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL AND  NVL(COLL,0) > NVL(SAPDEM,0)  AND NVL(SAPDEM,0) >0)C,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) >=30 and (SYSDATE-PAYDT) <=89)D,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 90 and (SYSDATE-PAYDT) <=179)E,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) >= 180 and (SYSDATE-PAYDT) <=374 )F,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 375)G,"
					 * + " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.CSPARTCD=S.SECCD" +
					 * " AND A.CSPARTCD=B.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=C.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=D.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=E.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=F.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=G.CSPARTCD(+)" +
					 * " GROUP BY rollup(S.CIRNAME)";
					 */

					/*String query = "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9,COUNT(G.REG_NO) GRATHER_1 FROM"
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(ESTSTATUS,'01')='02'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8'))A,"
							+ " (SELECT REG_NO,CSPARTCD,PAYDT,SAPDEM,COLL FROM NEWCOMP_TAB WHERE REMARKS IN ('BRT','WRT') AND INTIMATE_DATE IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >1 )B,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS IN ('WRT') AND INTIMATE_DATE IS NOT NULL AND  NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL AND  NVL(COLL,0) > NVL(SAPDEM,0)  AND NVL(SAPDEM,0) >0)C,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) >90 and (SYSDATE-PAYDT) <=120)D,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) >120 and (SYSDATE-PAYDT) <=150)E,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) >= 151 )F,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 375)G,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)" + " AND A.CSPARTCD=S.SECCD"
							+ " AND A.CSPARTCD=B.CSPARTCD(+)" + " AND A.CSPARTCD=C.CSPARTCD(+)"
							+ " AND A.CSPARTCD=D.CSPARTCD(+)" + " AND A.CSPARTCD=E.CSPARTCD(+)"
							+ " AND A.CSPARTCD=F.CSPARTCD(+)" + " AND A.CSPARTCD=G.CSPARTCD(+)"
							+ " GROUP BY rollup(S.CIRNAME)";*/
					
					String query="SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(P.ZREGID),COUNT(D.REG_NO)WRT,COUNT(A.ZREGID) GRA2,COUNT(B.ZREGID) GRA3,COUNT(C.ZREGID) GR4 FROM"
							+ " (SELECT TRIM(ZREGID)ZREGID,SUBSTR(ZREGID,1,5) FROM IT_ALL WHERE STATUS='Payment paid' AND ZREQUEST_TYPE='AL')P,"
							+ " (SELECT TRIM(ZREGID)ZREGID FROM IT_ALL WHERE STATUS='Payment paid' AND ZREQUEST_TYPE='AL' AND ZMONTH = 2 AND ZMONTH > =2)A,"
							+ " (SELECT TRIM(ZREGID)ZREGID FROM IT_ALL WHERE STATUS='Payment paid' AND ZREQUEST_TYPE='AL' AND ZMONTH =3 AND ZMONTH >=3)B,"
							+ " (SELECT TRIM(ZREGID)ZREGID FROM IT_ALL WHERE STATUS='Payment paid' AND ZREQUEST_TYPE='AL' AND ZMONTH = 4 AND ZMONTH >=4)C,"
							+ " (SELECT TRIM(REG_NO) REG_NO FROM NEWCOMP_TAB  WHERE REMARKS='WRT' AND REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND ZREQUEST_TYPE='AL'))D, "
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S"
							+ " WHERE P.ZREGID=A.ZREGID(+)"
							+ " AND  P.ZREGID=B.ZREGID(+)"
							+ " AND P.ZREGID=C.ZREGID(+)"
							+ " AND P.ZREGID=D.REG_NO(+)"
							+ " AND SUBSTR(P.ZREGID,1,5)=SECCD"
							+ " GROUP BY ROLLUP(S.CIRNAME) ORDER BY S.CIRNAME";
					/*
					String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(P.ZREGID),COUNT(A.ZREGID) GRA2,COUNT(B.ZREGID) GRA3,COUNT(C.ZREGID) GR4 FROM"
							+ " (SELECT ZREGID,SUBSTR(ZREGID,1,5) FROM IT_ALL WHERE STATUS='Payment paid' AND ZREQUEST_TYPE='AL')P,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Payment paid' AND ZREQUEST_TYPE='AL' AND ZMONTH = 2 AND ZMONTH > =2)A,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Payment paid' AND ZREQUEST_TYPE='AL' AND ZMONTH =3 AND ZMONTH >=3)B,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Payment paid' AND ZREQUEST_TYPE='AL' AND ZMONTH = 4 AND ZMONTH >=4)C,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S"
							+ " WHERE P.ZREGID=A.ZREGID(+)"
							+ " AND  P.ZREGID=B.ZREGID(+)"
							+ " AND P.ZREGID=C.ZREGID(+)"
							+ " AND SUBSTR(P.ZREGID,1,5)=SECCD"
							+ " GROUP BY ROLLUP(S.CIRNAME) ORDER BY S.CIRNAME";*/
					reportPStmt = con.prepareStatement(query);
					System.out.println("helo robo:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							// dmapobj.setBrt_les_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_1months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setBrt_gtr_6months(reportRst.getString(6));
							// dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							//dmapobj.setBrt_gtr_1year(reportRst.getString(7));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							// dmapobj.setBrt_les_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_1months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setBrt_gtr_6months(reportRst.getString(6));
							// dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							//dmapobj.setBrt_gtr_1year(reportRst.getString(7));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// HT Pending New Servies Report Details

	@SuppressWarnings("unused")
	public void exportPenHTNewServicesDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("RelesedAfterPaidByConsumer".equalsIgnoreCase(cscvo.getStatus())) {
					if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )   and upper(REG_NO) like '%H%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and PENDING_STAT IN ('WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL   and upper(REG_NO) like '%H%' ";
					} else if ("BTR_LESSTHAN_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) <=90  and upper(REG_NO) like '%H%' ";
					} else if ("BTR_GREATERTHAN_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (MAXPRDT-INTIMATE_DATE) <=374  and upper(REG_NO) like '%H%'  ";
					} else if ("BTR_GREATERTHAN_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 375 and upper(REG_NO) like '%H%' ";
					} else if ("TURNKEY_LESSTHAN_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) <= 90  and upper(REG_NO) like '%H%' ";
					} else if ("TURNKEY_GREATERTHAN_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (MAXPRDT-INTIMATE_DATE) <=374  and upper(REG_NO) like '%H%' ";
					} else if ("TURNKEY_GREATERTHAN_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 375  and upper(REG_NO) like '%H%' ";
					} else if ("TOT_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL   and upper(REG_NO) like '%H%'   ";
					} else if ("TOT_BRT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND  SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL   and upper(REG_NO) like '%H%'   ";
					} else if ("TOT_BRT_TURNKEY_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else if ("TOT_PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				}
				/*
				 * else if
				 * ("RelesedAfterPaidByConsumer1".equalsIgnoreCase(cscvo.
				 * getStatus())) { if
				 * ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) { status =
				 * "  and (PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )   and upper(REG_NO) like '%H%'  "
				 * ; } else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  and PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL    and upper(REG_NO) like '%H%' "
				 * ; } else if
				 * ("BTR_LESSTHAN_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  AND PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90  and upper(REG_NO) like '%H%' "
				 * ; } else if
				 * ("BTR_GREATERTHAN_3MONTHS".equalsIgnoreCase(cscvo.getCtype())
				 * ) { status =
				 * "  and PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374  and upper(REG_NO) like '%H%'  "
				 * ; } else if
				 * ("BTR_GREATERTHAN_1YEAR".equalsIgnoreCase(cscvo.getCtype()))
				 * { status =
				 * "  and PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375 and upper(REG_NO) like '%H%' "
				 * ; } else if
				 * ("TURNKEY_LESSTHAN_3MONTHS".equalsIgnoreCase(cscvo.getCtype()
				 * )) { status =
				 * "  and   PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90  and upper(REG_NO) like '%H%' "
				 * ; } else if
				 * ("TURNKEY_GREATERTHAN_3MONTHS".equalsIgnoreCase(cscvo.
				 * getCtype())) { status =
				 * "  AND   PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374  and upper(REG_NO) like '%H%' "
				 * ; } else if
				 * ("TURNKEY_GREATERTHAN_1YEAR".equalsIgnoreCase(cscvo.getCtype(
				 * ))) { status =
				 * "  AND  PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375  and upper(REG_NO) like '%H%' "
				 * ; } else if ("TOT_BRT".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  AND PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL   and upper(REG_NO) like '%H%'   "
				 * ; } else if
				 * ("TOT_BRT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "   and PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL    and upper(REG_NO) like '%H%'  "
				 * ; } else if
				 * ("TOT_BRT_TURNKEY_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
				 * status =
				 * "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' "
				 * ; } else { status = ""; } }
				 */

				// Replaced intimate date to sysdate
				// 16/08/2021

				else if ("RelesedAfterPaidByConsumer1".equalsIgnoreCase(cscvo.getStatus())) {
					if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and  (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND SUPPLY_RELEASE_DATE IS  NULL    and upper(REG_NO) like '%H%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and  (upper(REPSTAT) like '%WRT%' AND  SLADESC='Pending for service release') AND  NVL(TRIM(EXECUTION_TYPE),'NA') <> 'Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND  SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL     and upper(REG_NO) like '%H%' ";
					} else if ("BTR_LESSTHAN_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND (upper(REPSTAT) like '%BRT%') AND
						// SUPPLY_RELEASE_DATE IS NULL AND INTIMATE_DATE IS NOT
						// NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL
						// AND (MAXPRDT-INTIMATE_DATE) <=90 and upper(REG_NO)
						// like '%H%' ";
						status = "  AND (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <=90  and upper(REG_NO) like '%H%' ";
					} else if ("BTR_GREATERTHAN_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and (upper(REPSTAT) like '%BRT%') AND
						// SUPPLY_RELEASE_DATE IS NULL AND INTIMATE_DATE IS NOT
						// NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL
						// AND (MAXPRDT-INTIMATE_DATE) > 90 AND
						// (MAXPRDT-INTIMATE_DATE) <=374 and upper(REG_NO) like
						// '%H%' ";
						status = "  and (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374  and upper(REG_NO) like '%H%'  ";
					} else if ("BTR_GREATERTHAN_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and (upper(REPSTAT) like '%BRT%') AND
						// SUPPLY_RELEASE_DATE IS NULL AND INTIMATE_DATE IS NOT
						// NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL
						// AND (MAXPRDT-INTIMATE_DATE) > 375 and upper(REG_NO)
						// like '%H%' ";
						status = "  and (upper(REPSTAT) like '%BRT%' AND  SLADESC='Pending for service release')  AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 375 and upper(REG_NO) like '%H%' ";
					} else if ("TURNKEY_LESSTHAN_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and (upper(REPSTAT) like '%WRT%' or
						// upper(REPSTAT) like '%TKEY%' ) AND
						// SUPPLY_RELEASE_DATE IS NULL AND
						// NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND
						// INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND
						// (MAXPRDT-INTIMATE_DATE) <= 90 and upper(REG_NO) like
						// '%H%' ";
						status = "  and  ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) <= 90  and upper(REG_NO) like '%H%' ";
					} else if ("TURNKEY_GREATERTHAN_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND (upper(REPSTAT) like '%WRT%' or
						// upper(REPSTAT) like '%TKEY%' ) AND
						// SUPPLY_RELEASE_DATE IS NULL AND
						// NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND
						// INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND
						// (MAXPRDT-INTIMATE_DATE) > 90 AND
						// (MAXPRDT-INTIMATE_DATE) <=374 and upper(REG_NO) like
						// '%H%' ";
						status = "  AND    (upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <=374  and upper(REG_NO) like '%H%' ";
					} else if ("TURNKEY_GREATERTHAN_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND (upper(REPSTAT) like '%WRT%' or
						// upper(REPSTAT) like '%TKEY%' ) AND
						// SUPPLY_RELEASE_DATE IS NULL AND
						// NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND
						// INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND
						// (MAXPRDT-INTIMATE_DATE) > 375 and upper(REG_NO) like
						// '%H%' ";
						status = "  AND  ( upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT) > 375  and upper(REG_NO) like '%H%' ";
					} else if ("TOT_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%BRT%')  AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SDPRDT IS NOT NULL  and upper(REG_NO) like '%H%'   ";
					} else if ("TOT_BRT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "     and  (upper(REPSTAT) like '%WRT%'  or upper(REPSTAT) like '%TKEY%' ) AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL  and upper(REG_NO) like '%H%'   ";
					} else if ("TOT_BRT_TURNKEY_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				}

				else if ("EstimateSanctionedAndAmtPaid".equalsIgnoreCase(cscvo.getStatus())) {
					if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   and (  INTIMATE_DATE IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL  AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL )   and upper(REG_NO) like '%H%'  and  (NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')  ";
					} else if ("LESS_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (  INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) <= 90 )   and upper(REG_NO) like '%H%'  and  (NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')  ";
					} else if ("GREATER_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "    and (  SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE)  <=179 )  and upper(REG_NO) like '%H%'  and  (NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')  ";
					} else if ("GREATER_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (  SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 180 AND (SYSDATE-INTIMATE_DATE) <=269 )  and upper(REG_NO) like '%H%'  and  (NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')  ";
					} else if ("GREATER_9MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   and (  SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 270 AND (SYSDATE-INTIMATE_DATE) <=374 )  and upper(REG_NO) like '%H%'  and  (NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')  ";
					} else if ("GREATER_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   and (  SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL AND (SYSDATE-INTIMATE_DATE) > 375 )   and upper(REG_NO) like '%H%'  and  (NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   and (  INTIMATE_DATE IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL  AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL )   and upper(REG_NO) like '%H%'  and  (NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')  ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "    and (  INTIMATE_DATE IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL  AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL )   and upper(REG_NO) like '%H%'  and  (NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')    ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   and (  INTIMATE_DATE IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL  AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL )   and upper(REG_NO) like '%H%'  and  (NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')    ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "    and (  INTIMATE_DATE IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL  AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL )   and upper(REG_NO) like '%H%'  and  (NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')    ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (  INTIMATE_DATE IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL  AND  SLCPRDT IS  NULL AND SDPRDT IS  NULL )   and upper(REG_NO) like '%H%'  and  (NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  )  ";
					} else {
						status = "";
					}
				}

				if ("DIV".equals(cscvo.getFlag())) {
					if (cscvo.getDivision().equalsIgnoreCase("TOTAL")) {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
							circle = " ";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "'";
						}

					}

					else {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
							circle = "  and divname='" + cscvo.getDivision() + "'";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "'";
						}
						// circle = " and cirname='" + cscvo.getCircle() + "'
						// and divname='" + cscvo.getDivision() + "'";
					}

				} else if ("SUB_DIV".equals(cscvo.getFlag()))

				{
					if (cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
						// circle = " and cirname='" + cscvo.getCircle() + "'
						// and divname='" + cscvo.getDivision() + "'";
						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")
								&& cscvo.getDivision().equalsIgnoreCase("TOTAL")) {
							circle = " ";
						} else {
							// circle = " and cirname='" + cscvo.getCircle() +
							// "'";
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "'";
						}

					}

					else {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")
								&& cscvo.getDivision().equalsIgnoreCase("TOTAL")) {
							circle = " and subname='" + cscvo.getSubDiv() + "'";
						} else {
							// circle = " and cirname='" + cscvo.getCircle() +
							// "'";
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "'";
						}
						/*
						 * circle = " and cirname='" + cscvo.getCircle() +
						 * "' and divname='" + cscvo.getDivision() +
						 * "' and subname='" + cscvo.getSubDiv() + "'";
						 */
					}

				}

				else if ("SEC".equals(cscvo.getFlag())) {
					if (cscvo.getSec().equalsIgnoreCase("TOTAL")) {
						// circle=" and cirname='" + cscvo.getCircle() + "' and
						// divname='" + cscvo.getDivision()+"'";

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL") && cscvo.getDivision().equalsIgnoreCase("TOTAL")
								&& cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
							/*
							 * circle = " and cirname='" + cscvo.getCircle() +
							 * "' and divname='" + cscvo.getDivision() +
							 * "' and subname='" + cscvo.getSubDiv() + "'";
							 */
							circle = " ";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "'";
						}

					}

					else {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL") && cscvo.getDivision().equalsIgnoreCase("TOTAL")
								&& cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
							/*
							 * circle = " and cirname='" + cscvo.getCircle() +
							 * "' and divname='" + cscvo.getDivision() +
							 * "' and subname='" + cscvo.getSubDiv() + "'";
							 */
							circle = " and secname='" + cscvo.getSec() + "'";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec() + "'";
						}
						/*
						 * circle = " and cirname='" + cscvo.getCircle() +
						 * "' and divname='" + cscvo.getDivision() +
						 * "' and subname='" + cscvo.getSubDiv() +
						 * "' and secname='" + cscvo.getSec() + "'";
						 */
					}

				} else if ("CIR".equals(cscvo.getFlag())) {

					if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
						circle = "";
					}

					else {
						circle = " and cirname='" + cscvo.getCircle() + "'";
					}

				} else {

				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,reg_no,reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,nvl(maxprdt,reg_date) paid_date"
									// + " ,trunc(trunc(months_between
									// (trunc(MAXPRDT) ,
									// trunc(INTIMATE_DATE)))/12)||'YRS'
									// ||mod(trunc(months_between(trunc(MAXPRDT)
									// , INTIMATE_DATE)), 12)|| 'MNTS'||round(
									// trunc(MAXPRDT) - add_months((
									// INTIMATE_DATE),
									// trunc(months_between(trunc(MAXPRDT) ,
									// INTIMATE_DATE))),0) || 'DYS' AS
									// AGEPENDENCY"
									+ " ,trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
									+ " ,EXECUTION_TYPE  " + " from rep_final a, spdclmaster  b "
									+ " where a.ncpartcd=b.seccd " + status + " " + circle + ""
									// + " and cirname='" + cscvo.getCircle() +
									// "' and divname='" + cscvo.getDivision()'
									+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
									+ " ,reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,reg_no,reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,nvl(maxprdt,reg_date) paid_date"
									// + " ,trunc(trunc(months_between
									// (trunc(MAXPRDT) ,
									// trunc(INTIMATE_DATE)))/12)||'YRS'
									// ||mod(trunc(months_between(trunc(MAXPRDT)
									// , INTIMATE_DATE)), 12)|| 'MNTS'||round(
									// trunc(MAXPRDT) - add_months((
									// INTIMATE_DATE),
									// trunc(months_between(trunc(MAXPRDT) ,
									// INTIMATE_DATE))),0) || 'DYS' AS
									// AGEPENDENCY"
									+ " ,trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
									+ " ,EXECUTION_TYPE  " + " from rep_final a, spdclmaster  b "
									+ " where a.ncpartcd=b.seccd " + status + "" + circle + ""
									// + " and cirname='" + cscvo.getCircle() +
									// "' and divname='" + cscvo.getDivision()
									// + "' and subname='" +
									// cscvo.getSubDiv()+"'"
									+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
									+ " ,reg_date");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					resultSet = statement.executeQuery(
							// " select row_number() over (partition by null
							// order by null) sno,cirname Circle,divname
							// Division,subname SubDivision,secname
							// Section,(case when reg_no like '%H%' then 'HT'
							// else 'LT' end) HTLT,reg_no,reg_date,consumer_name
							// ,ADDRESS,PHONE_NO,
							// decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others')
							// Social_group,category_supply CAT,"
							// + " contracted_load
							// Load,purpose,nvl(sapdem,extdem) Demand,totamt
							// Paid
							// ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
							// paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')
							// RELEASE_DATE ,a.uscno,meseva_ref reference_no
							// ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when
							// eststatus='01' then 'Simplified' when
							// eststatus='02' then 'Extension' else 'Simplified'
							// end) eststatus "
							"select row_number() over (partition by null order by null) sno,divname Division,secname Section,reg_no,reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,nvl(maxprdt,reg_date) paid_date"
									// + " ,trunc(trunc(months_between
									// (trunc(MAXPRDT) ,
									// trunc(INTIMATE_DATE)))/12)||'YRS'
									// ||mod(trunc(months_between(trunc(MAXPRDT)
									// , INTIMATE_DATE)), 12)|| 'MNTS'||round(
									// trunc(MAXPRDT) - add_months((
									// INTIMATE_DATE),
									// trunc(months_between(trunc(MAXPRDT) ,
									// INTIMATE_DATE))),0) || 'DYS' AS
									// AGEPENDENCY"
									+ " ,trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
									+ " ,EXECUTION_TYPE  " + " from rep_final a, spdclmaster  b "
									+ " where a.ncpartcd=b.seccd " + status + "" + circle + ""
									// + " and cirname='" + cscvo.getCircle() +
									// "' and divname='" + cscvo.getDivision()
									// + "' and subname='" + cscvo.getSubDiv() +
									// "' and secname='" + cscvo.getSec()+"'"
									+ "  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
									+ " ,reg_date");
				} else {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
					 * +
					 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
					 * +
					 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
					 * +
					 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * + " from rep_final a,master.spdclmaster@colldblink b" +
					 * " where a.ncpartcd=b.seccd " + status + "" +
					 * cscvo.getCircle() + "" +
					 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status + " "
							+ circle + " "
							// + " and cirname='" + cscvo.getCircle()
							+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
							+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
					System.out.println(query);
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,consumer_name ,reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,category_supply CAT,"
									+ " contracted_load Load,to_char(nvl(maxprdt,reg_date),'DD-MM-YYYY') paid_date"
									// + " ,(Round((SYSDATE-INTIMATE_DATE)/30)||
									// 'MONTHS') as AgePendency "
									// + " ,trunc(trunc(months_between
									// (trunc(MAXPRDT) ,
									// trunc(INTIMATE_DATE)))/12)||'YRS'
									// ||mod(trunc(months_between(trunc(MAXPRDT)
									// , INTIMATE_DATE)), 12)|| 'MNTS'||round(
									// trunc(MAXPRDT) - add_months((
									// INTIMATE_DATE),
									// trunc(months_between(trunc(MAXPRDT) ,
									// INTIMATE_DATE))),0) || 'DYS' AS
									// AGEPENDENCY"
									+ " ,trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
									+ " ,EXECUTION_TYPE  " + " from rep_final a, spdclmaster  b "
									+ " where a.ncpartcd=b.seccd " + status + " " + circle + ""
									// + " and cirname='" + cscvo.getCircle()
									+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by ((MAXPRDT-SYSDATE)/30) DESC");

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}
	// new Ht Additional Load detaisl

	@SuppressWarnings("unused")
	public void exportNewAditionalLoadScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("RelesedAfterPaidByConsumer".equalsIgnoreCase(cscvo.getStatus())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%TKEY%'  and (complaint||sub_complaint) like '911'    ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						//status = " and  c.REMARKS IN ('BRT','WRT') AND  c.INTIMATE_DATE IS NOT NULL  AND NVL(TRIM( c.STATUS),'NA')='balance' AND  c.PAYDT IS NOT NULL  AND NVL( c.COLL,0) > NVL( c.SAPDEM,0) AND NVL( c.SAPDEM,0) >1  "
							//	+ " and NVL(TRIM( c.STATUS),'NA') <> 'deleted' AND NVL( c.ESTSTATUS,'01')='02'  AND  c.COMPLAINT=9 AND  c.SUB_COMPLAINT=11 AND SUBSTR( c.REG_NO,1,1) IN ('2','3','5','7','8')   ";
						status=" and i.STATUS='Payment paid' AND ZREQUEST_TYPE='AL' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						//status = " and   c.REMARKS IN ('WRT') AND  c.INTIMATE_DATE IS NOT NULL AND  NVL(TRIM( c.STATUS),'NA')='balance' AND  c.PAYDT IS NOT NULL AND  NVL( c.COLL,0) > NVL( c.SAPDEM,0)  AND NVL( c.SAPDEM,0) >0 "
							//	+ " and NVL(TRIM( c.STATUS),'NA') <> 'deleted' AND NVL( c.ESTSTATUS,'01')='02'  AND  c.COMPLAINT=9 AND  c.SUB_COMPLAINT=11 AND SUBSTR( c.REG_NO,1,1) IN ('2','3','5','7','8')   ";
						status=" and c.REMARKS='WRT' AND  i.STATUS='Payment paid' AND ZREQUEST_TYPE='AL' ";
					} else if ("GTR_1MONTH".equalsIgnoreCase(cscvo.getCtype())) {
						//status = " and  c.REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(c.STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) >90 and (SYSDATE-PAYDT) <=120 "
							//	+ " and NVL(TRIM(c.STATUS),'NA') <> 'deleted' AND NVL(c.ESTSTATUS,'01')='02'  AND c.COMPLAINT=9 AND c.SUB_COMPLAINT=11 AND SUBSTR(c.REG_NO,1,1) IN ('2','3','5','7','8')   ";
						status=" and  i.STATUS='Payment paid' AND ZREQUEST_TYPE='AL' AND ZMONTH = 2 AND ZMONTH > =2";
					} else if ("GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						//status = "and  c.REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 120 and (SYSDATE-PAYDT) <=150 "
						//		+ " and NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(c.ESTSTATUS,'01')='02'  AND c.COMPLAINT=9 AND c.SUB_COMPLAINT=11 AND SUBSTR(c.REG_NO,1,1) IN ('2','3','5','7','8')   ";
						status=" and  i.STATUS='Payment paid' AND ZREQUEST_TYPE='AL' AND ZMONTH =3 AND ZMONTH >=3 ";
					} else if ("GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						//status = "and  c.REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) >150   "
						//		+ " and NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(c.ESTSTATUS,'01')='02'  AND c.COMPLAINT=9 AND C.SUB_COMPLAINT=11 AND SUBSTR(c.REG_NO,1,1) IN ('2','3','5','7','8')   ";
						status=" and  i.STATUS='Payment paid' AND ZREQUEST_TYPE='AL' AND ZMONTH = 4 AND ZMONTH >=4";
					} else if ("GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "and  c.REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 375  "
						 * +
						 * " and NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(c.ESTSTATUS,'01')='02'  AND c.COMPLAINT=9 AND c.SUB_COMPLAINT=11 AND SUBSTR(c.REG_NO,1,1) IN ('2','3','5','7','8')   "
						 * ;
						 */
						//status = "and  c.REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (((SYSDATE-PAYDT) >90 and (SYSDATE-PAYDT) <=120)"
						//		+ " or ((SYSDATE-PAYDT) > 120 and (SYSDATE-PAYDT) <=150 ) or ((SYSDATE-PAYDT) >150 )) "
						//		+ " and NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(c.ESTSTATUS,'01')='02'  AND c.COMPLAINT=9 AND c.SUB_COMPLAINT=11 AND SUBSTR(c.REG_NO,1,1) IN ('2','3','5','7','8')   ";
						status=" and  i.STATUS='Payment paid' AND ZREQUEST_TYPE='AL' and ( (ZMONTH = 2 AND ZMONTH > =2) or ( ZMONTH =3 AND ZMONTH >=3) or (ZMONTH = 4 AND ZMONTH >=4) )";
					} else {
						status = "";
					}
				} else if ("EstimateSanctionedAndAmtPaid".equalsIgnoreCase(cscvo.getStatus())) {
				} else {
				}

				if ("DIV".equals(cscvo.getFlag())) {
					if (cscvo.getDivision().equalsIgnoreCase("TOTAL")) {
						circle = " and cirname='" + cscvo.getCircle() + "'";

					}

					else {
						circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'";
					}

				} else if ("SUB_DIV".equals(cscvo.getFlag()))

				{
					if (cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
						circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'";

					}

					else {
						circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
								+ "' and subname='" + cscvo.getSubDiv() + "'";
					}

				}

				else if ("SEC".equals(cscvo.getFlag())) {
					if (cscvo.getSec().equalsIgnoreCase("TOTAL")) {
						// circle=" and cirname='" + cscvo.getCircle() + "' and
						// divname='" + cscvo.getDivision()+"'";
						circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
								+ "' and subname='" + cscvo.getSubDiv() + "'";

					}

					else {
						circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
								+ "' and subname='" + cscvo.getSubDiv() + "'";
					}

				} else if ("CIR".equals(cscvo.getFlag())) {

					if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
						circle = "";
					}

					else {
						circle = " and cirname='" + cscvo.getCircle() + "'";
					}

				} else {

				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(

							" SELECT "
									// + " s.cirname as cirname,s.secname as
									// secname,c.reg_date as
									// reg_date,c.customer_name
									// customer_name,n.present_category as cat"
									// + " ,c.reg_no as reg_no,"
									// + ", c.CONTRACTLOAD as load,c.EXTDEM as
									// demand,c.COLL as paid,c.PAYDT as
									// paid_date"
									+ " s.cirname as cirname,s.secname as secname,c.reg_no reg_no,to_char(c.reg_date,'DD-MM-YYYY') as reg_date,c.customer_name customer_name,n.present_category as cat"
									// + " ,c.reg_no as reg_no,"
									+ " ,c.CONTRACTLOAD as load,c.EXTDEM as demand,c.COLL as paid,to_char(c.PAYDT,'DD-MM-YYYY') as paid_date"
									// + " ,trunc(trunc(months_between
									// (trunc(c.PAYDT) ,
									// trunc(INTIMATE_DATE)))/12)||'YRS'
									// ||mod(trunc(months_between(trunc(c.PAYDT)
									// , INTIMATE_DATE)), 12)|| 'MNTS'||round(
									// trunc(c.PAYDT) - add_months((
									// INTIMATE_DATE),
									// trunc(months_between(trunc(c.PAYDT) ,
									// INTIMATE_DATE))),0) || 'DYS' AS
									// AGEPENDENCY"
									+ " ,trunc(trunc(months_between (trunc(SYSDATE) , trunc(c.PAYDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , c.PAYDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( c.PAYDT), trunc(months_between(trunc(SYSDATE) , c.PAYDT))),0) || 'DYS' AS AGEPENDENCY "
									+ ",n.EXECUTION_TYPE " + " FROM newcomp_tab c ,spdclmaster s,new_complaints n "
									+ " where  substr(c.reg_no,0,5)=seccd and trim(c.reg_no)=trim(n.reg_no) " + status
									+ " " + circle + " order by ((c.PAYDT-INTIMATE_DATE)/30) DESC ");
					// + " and cirname='" + cscvo.getCircle() + "' and
					// divname='"
					// + cscvo.getDivision() + "'");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());adsda
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(" SELECT "
							// + " s.cirname as cirname,s.secname as
							// secname,c.reg_date as reg_date,c.customer_name
							// customer_name,n.present_category as cat"
							// + " ,c.reg_no as reg_no,"
							// + ", c.CONTRACTLOAD as load,c.EXTDEM as
							// demand,c.COLL as paid,c.PAYDT as paid_date"
							+ " s.cirname as cirname,s.secname as secname,c.reg_no reg_no,to_char(c.reg_date,'DD-MM-YYYY') as reg_date,c.customer_name customer_name,n.present_category as cat"
							// + " ,c.reg_no as reg_no,"
							+ " ,c.CONTRACTLOAD as load,c.EXTDEM as demand,c.COLL as paid,to_char(c.PAYDT,'DD-MM-YYYY') as paid_date"
							// + " ,trunc(trunc(months_between (trunc(c.PAYDT) ,
							// trunc(INTIMATE_DATE)))/12)||'YRS'
							// ||mod(trunc(months_between(trunc(c.PAYDT) ,
							// INTIMATE_DATE)), 12)|| 'MNTS'||round(
							// trunc(c.PAYDT) - add_months(( INTIMATE_DATE),
							// trunc(months_between(trunc(c.PAYDT) ,
							// INTIMATE_DATE))),0) || 'DYS' AS AGEPENDENCY"
							+ " ,trunc(trunc(months_between (trunc(SYSDATE) , trunc(c.PAYDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , c.PAYDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( c.PAYDT), trunc(months_between(trunc(SYSDATE) , c.PAYDT))),0) || 'DYS' AS AGEPENDENCY "
							+ ",n.EXECUTION_TYPE " + " FROM newcomp_tab c ,spdclmaster s,new_complaints n "
							+ " where  substr(c.reg_no,0,5)=seccd and trim(c.reg_no)=trim(n.reg_no) " + status + " "
							+ circle + " order by ((c.PAYDT-INTIMATE_DATE)/30) DESC ");
					// + " and cirname='" + cscvo.getCircle() + "' and
					// divname='"
					// + cscvo.getDivision() + "' and subname='" +
					// cscvo.getSubDiv() + "'");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(
							// "select (ROW_NUMBER() OVER (partition by null
							// order by null))
							// SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,
							// (STREET_NAME||DOOR_NO||TOWN_CITY)
							// ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref
							// from newcomp_tab a,"
							// + " (select unique
							// cirname,divname,subname,secname,divcd,seccd from
							// spdclmaster where circd not in(1,4,6,9)) b where
							// a.cspartcd=b.seccd "
							" SELECT "
									// + " s.cirname as cirname,s.secname as
									// secname,c.reg_date as
									// reg_date,c.customer_name
									// customer_name,n.present_category as cat,"
									// + " ,c.reg_no as reg_no,"
									// + " c.CONTRACTLOAD as load,c.EXTDEM as
									// demand,c.COLL as paid,c.PAYDT as
									// paid_date"
									+ " s.cirname as cirname,s.secname as secname,c.reg_no reg_no,to_char(c.reg_date,'DD-MM-YYYY') as reg_date,c.customer_name customer_name,n.present_category as cat"
									// + " ,c.reg_no as reg_no,"
									+ " ,c.CONTRACTLOAD as load,c.EXTDEM as demand,c.COLL as paid,to_char(c.PAYDT,'DD-MM-YYYY') as paid_date"
									// + " ,trunc(trunc(months_between
									// (trunc(c.PAYDT) ,
									// trunc(INTIMATE_DATE)))/12)||'YRS'
									// ||mod(trunc(months_between(trunc(c.PAYDT)
									// , INTIMATE_DATE)), 12)|| 'MNTS'||round(
									// trunc(c.PAYDT) - add_months((
									// INTIMATE_DATE),
									// trunc(months_between(trunc(c.PAYDT) ,
									// INTIMATE_DATE))),0) || 'DYS' AS
									// AGEPENDENCY"
									+ " ,trunc(trunc(months_between (trunc(SYSDATE) , trunc(c.PAYDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , c.PAYDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( c.PAYDT), trunc(months_between(trunc(SYSDATE) , c.PAYDT))),0) || 'DYS' AS AGEPENDENCY "
									+ ",n.EXECUTION_TYPE " + " FROM newcomp_tab c ,spdclmaster s,new_complaints n "
									+ " where  substr(c.reg_no,0,5)=seccd and trim(c.reg_no)=trim(n.reg_no) " + status
									+ " " + circle + " order by ((c.PAYDT-INTIMATE_DATE)/30) DESC ");
					// + " and cirname='" + cscvo.getCircle() + "' and
					// divname='"
					// + cscvo.getDivision() + "' and subname='" +
					// cscvo.getSubDiv() + "' and secname='"
					// + cscvo.getSec() + "'");
				} else {

					String query = " SELECT " + " s.divname Division,s.secname as secname,"
							+ " c.customer_name customer_name,c.reg_no reg_no,to_char(c.reg_date,'DD-MM-YYYY') as reg_date,c.SERVICE_CONNECTION_NO as Service_Number,n.present_category as cat"
							// + " ,c.reg_no as reg_no,"
							+ " ,c.CONTRACTLOAD,C.Additional_load,to_char(c.PAYDT,'DD-MM-YYYY') as paid_date"
							+ " ,trunc(trunc(months_between (trunc(SYSDATE) , trunc(c.PAYDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , c.PAYDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( c.PAYDT), trunc(months_between(trunc(SYSDATE) , c.PAYDT))),0) || 'DYS' AS AGEPENDENCY "
							+ " ,n.EXECUTION_TYPE " + " FROM newcomp_tab c ,spdclmaster s,new_complaints n "
							+ " where  substr(c.reg_no,0,5)=seccd and trim(c.reg_no)=trim(n.reg_no) and "
							+ " NVL(TRIM(c.STATUS),'NA') <> 'deleted' AND NVL(c.ESTSTATUS,'01')='02'  AND "
							+ " c.COMPLAINT=9 AND c.SUB_COMPLAINT=11 AND SUBSTR(c.REG_NO,1,1) IN ('2','3','5','7','8')"
							+ status + " " + circle + " order by ((c.PAYDT-INTIMATE_DATE)/30) DESC ";
					System.out.println(query);

					/*resultSet = statement.executeQuery(" SELECT " + " s.divname Division,s.secname as secname,"
							+ " c.customer_name customer_name,c.reg_no reg_no,to_char(c.reg_date,'DD-MM-YYYY') as reg_date,c.SERVICE_CONNECTION_NO as Service_Number,n.present_category as cat"
							// + " ,c.reg_no as reg_no,"
							+ " ,c.CONTRACTLOAD,C.Additional_load,to_char(c.PAYDT,'DD-MM-YYYY') as paid_date"
							+ " ,trunc(trunc(months_between (trunc(SYSDATE) , trunc(c.PAYDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , c.PAYDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( c.PAYDT), trunc(months_between(trunc(SYSDATE) , c.PAYDT))),0) || 'DYS' AS AGEPENDENCY "
							+ " ,n.EXECUTION_TYPE " + " FROM newcomp_tab c ,spdclmaster s,new_complaints n "
							+ " where  substr(c.reg_no,0,5)=seccd and trim(c.reg_no)=trim(n.reg_no) and "
							+ " NVL(TRIM(c.STATUS),'NA') <> 'deleted' AND NVL(c.ESTSTATUS,'01')='02'  AND "
							+ " c.COMPLAINT=9 AND c.SUB_COMPLAINT=11 AND SUBSTR(c.REG_NO,1,1) IN ('2','3','5','7','8')"
							+ status + " " + circle + " order by ((c.PAYDT-INTIMATE_DATE)/30) DESC ");*/
					resultSet = statement.executeQuery(" select S.DIVNAME as Name_of_The_Division"
							+ " ,S.SECNAME as Name_of_The_Section"
							+ " ,R.CUSTOMER_NAME as Consumer_Name"
							+ " ,R.REG_NO reg_no,to_char(I.ZREGDT,'DD-MM-YYYY') Registred_Date "
							+ " ,R.SERVICE_CONNECTION_NO as ServiceNumber"
							+ " ,R.PRESENT_CATEGORY as cat"
							+ " ,R.CONTRACTLOAD as Contracted_load"
							+ " ,R.ADDITIONAL_LOAD as Additional_load"
							+ " ,to_char(c.PAYDT,'DD-MM-YYYY') as paid_date ,			 (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,"
							+ " R.EXECUTION_TYPE from  new_complaints R,SPDCLMASTER S,IT_ALL I,newcomp_tab c  where  "
							+ " substr(R.REG_NO,0,5)=S.SECCD "+status+"  " + circle + ""
							+ " AND TRIM(R.REG_NO)=TRIM(I.ZREGID)  AND TRIM(R.REG_NO)=TRIM(c.REG_NO)   order by AGE_Wise_Pendency DESC ");

				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=Status HT Additional Load as " + cscvo.getCtype() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=Status HT Additional Load as " + cscvo.getCtype() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}
	
	public CscpayVO getLTHTNewServicesAbstractDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {



		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
       String substr=null;
		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		
		Connection con=DBConnectionManager.getInstance().getConnection("cscdb");
		
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		if ("HT".equalsIgnoreCase(cscvo.getType())) {
			substr="AND SUBSTR(R.REG_NO,6,1)='H'";
			
		}
		else
			
			if("LT".equalsIgnoreCase(cscvo.getType())){
				substr="AND SUBSTR(R.REG_NO,6,1) IN ('S','N')";
			}
			else if("COMP".equalsIgnoreCase(cscvo.getType()))
				
			{
				substr="AND SUBSTR(R.REG_NO,6,1)='C'";
			}
		
		
		
    		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT S.DIVNAME,\r\n" + 
							"COUNT(N.REG_NO)+COUNT(C.REG_NO) PAID,\r\n" + 
							"(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) PAID_WRT_BRT,\r\n" + 
							"COUNT(G.REG_NO)+COUNT(H.REG_NO) NOT_PAID,\r\n" + 
							"COUNT(P.REG_NO)+COUNT(D.REG_NO)NOT_APPRD,\r\n" + 
							"(CASE WHEN (P.DAYS_SOP > P.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) NAPRD_WRT_BRT,\r\n" + 
							"COUNT(E.REG_NO)+COUNT(F.REG_NO)NOT_CRTD ,\r\n" + 
							"(CASE WHEN (E.DAYS_SOP > E.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) NOT_CREATED,\r\n"
							+ "COUNT(N.REG_NO)+COUNT(C.REG_NO)+COUNT(G.REG_NO)+COUNT(H.REG_NO)+COUNT(P.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO) as totalpending\r\n" + 
							"" + 
							"FROM\r\n" + 
							"(SELECT DISTINCT REG_NO,NCPARTCD SECCODE  FROM REP_FINAL WHERE CIRCLE_CODE IN ('2','3','5','7','8') UNION\r\n" + 
							"(SELECT REG_NO,CSPARTCD SECCODE FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11') AND STATUS='balance'))R,\r\n" + 
							"(select reg_no,NCPARTCD,(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
							"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
							"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
							"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11') AND STATUS='balance' AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='AL')))C,\r\n" + 
							"(select reg_no,NCPARTCD,(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
							"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
							"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))P,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11')  AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL')))D,\r\n" + 
							"(select reg_no,NCPARTCD,(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
							"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
							"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))E,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11')  AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='AL')))F,\r\n" + 
							"(SELECT  REG_NO,NCPARTCD FROM REP_FINAL WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type='NEW')union \r\n" + 
							"(SELECT  REG_NO,NCPARTCD FROM REP_FINAL WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type='NEW')))G,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11')  AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='AL')))H,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.SECCODE=S.SECCD(+)\r\n" + 
							"AND R.REG_NO=N.REG_NO(+)\r\n" + 
							"AND R.REG_NO=C.REG_NO(+)\r\n" + 
							"AND R.REG_NO=P.REG_NO(+)\r\n" + 
							"AND R.REG_NO=D.REG_NO(+)\r\n" + 
							"AND R.REG_NO=E.REG_NO(+)\r\n" + 
							"AND R.REG_NO=F.REG_NO(+)\r\n" + 
							"AND R.REG_NO=G.REG_NO(+)\r\n" + 
							"AND R.REG_NO=H.REG_NO(+)\r\n" + 
							substr+" AND S.CIRNAME=?\r\n" + 
							"GROUP BY (S.CIRNAME,S.DIVNAME),(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)\r\n" + 
							",(CASE WHEN (P.DAYS_SOP > P.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)\r\n" + 
							",(CASE WHEN (E.DAYS_SOP > E.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) \r\n" + 
							"order by 1 ";
					//System.out.println("LT_HT_NEW_DIV:"+query);
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = "SELECT S.SUBNAME,\r\n" + 
							"COUNT(N.REG_NO)+COUNT(C.REG_NO) PAID,\r\n" + 
							"(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) PAID_WRT_BRT,\r\n" + 
							"COUNT(G.REG_NO)+COUNT(H.REG_NO) NOT_PAID,\r\n" + 
							"COUNT(P.REG_NO)+COUNT(D.REG_NO)NOT_APPRD,\r\n" + 
							"(CASE WHEN (P.DAYS_SOP > P.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) NAPRD_WRT_BRT,\r\n" + 
							"COUNT(E.REG_NO)+COUNT(F.REG_NO)NOT_CRTD ,\r\n" + 
							"(CASE WHEN (E.DAYS_SOP > E.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) NOT_CREATED\r\n" + 
							"FROM\r\n" + 
							"(SELECT DISTINCT REG_NO,NCPARTCD SECCODE  FROM REP_FINAL WHERE CIRCLE_CODE IN ('2','3','5','7','8') UNION\r\n" + 
							"(SELECT REG_NO,CSPARTCD SECCODE FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11') AND STATUS='balance'))R,\r\n" + 
							"(select reg_no,NCPARTCD,(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
							"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
							"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
							"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11') AND STATUS='balance' AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='AL')))C,\r\n" + 
							"(select reg_no,NCPARTCD,(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
							"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
							"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))P,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11')  AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL')))D,\r\n" + 
							"(select reg_no,NCPARTCD,(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
							"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
							"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))E,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11')  AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='AL')))F,\r\n" + 
							"(SELECT  REG_NO,NCPARTCD FROM REP_FINAL WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type='NEW')union \r\n" + 
							"(SELECT  REG_NO,NCPARTCD FROM REP_FINAL WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type='NEW')))G,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11')  AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='AL')))H,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.SECCODE=S.SECCD(+)\r\n" + 
							"AND R.REG_NO=N.REG_NO(+)\r\n" + 
							"AND R.REG_NO=C.REG_NO(+)\r\n" + 
							"AND R.REG_NO=P.REG_NO(+)\r\n" + 
							"AND R.REG_NO=D.REG_NO(+)\r\n" + 
							"AND R.REG_NO=E.REG_NO(+)\r\n" + 
							"AND R.REG_NO=F.REG_NO(+)\r\n" + 
							"AND R.REG_NO=G.REG_NO(+)\r\n" + 
							"AND R.REG_NO=H.REG_NO(+)\r\n" + 
							substr+" AND S.CIRNAME=? AND S.DIVNAME=? \r\n" + 
							"GROUP BY (S.CIRNAME,S.DIVNAME,S.SUBNAME),(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)\r\n" + 
							",(CASE WHEN (P.DAYS_SOP > P.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)\r\n" + 
							",(CASE WHEN (E.DAYS_SOP > E.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) \r\n" + 
							"order by 1 ";

					
					
					reportPStmt = con.prepareStatement(query);

					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					//System.out.println("LT_HT_NEW_SUB:"+query);
					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT S.SECNAME,\r\n" + 
							"COUNT(N.REG_NO)+COUNT(C.REG_NO) PAID,\r\n" + 
							"(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) PAID_WRT_BRT,\r\n" + 
							"COUNT(G.REG_NO)+COUNT(H.REG_NO) NOT_PAID,\r\n" + 
							"COUNT(P.REG_NO)+COUNT(D.REG_NO)NOT_APPRD,\r\n" + 
							"(CASE WHEN (P.DAYS_SOP > P.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) NAPRD_WRT_BRT,\r\n" + 
							"COUNT(E.REG_NO)+COUNT(F.REG_NO)NOT_CRTD ,\r\n" + 
							"(CASE WHEN (E.DAYS_SOP > E.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) NOT_CREATED\r\n" + 
							"FROM\r\n" + 
							"(SELECT DISTINCT REG_NO,NCPARTCD SECCODE  FROM REP_FINAL WHERE CIRCLE_CODE IN ('2','3','5','7','8') UNION\r\n" + 
							"(SELECT REG_NO,CSPARTCD SECCODE FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11') AND STATUS='balance'))R,\r\n" + 
							"(select reg_no,NCPARTCD,(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
							"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
							"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
							"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11') AND STATUS='balance' AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='AL')))C,\r\n" + 
							"(select reg_no,NCPARTCD,(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
							"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
							"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))P,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11')  AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL')))D,\r\n" + 
							"(select reg_no,NCPARTCD,(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
							"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
							"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))E,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11')  AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='AL')))F,\r\n" + 
							"(SELECT  REG_NO,NCPARTCD FROM REP_FINAL WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type='NEW')union \r\n" + 
							"(SELECT  REG_NO,NCPARTCD FROM REP_FINAL WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type='NEW')))G,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11')  AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='AL')))H,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.SECCODE=S.SECCD(+)\r\n" + 
							"AND R.REG_NO=N.REG_NO(+)\r\n" + 
							"AND R.REG_NO=C.REG_NO(+)\r\n" + 
							"AND R.REG_NO=P.REG_NO(+)\r\n" + 
							"AND R.REG_NO=D.REG_NO(+)\r\n" + 
							"AND R.REG_NO=E.REG_NO(+)\r\n" + 
							"AND R.REG_NO=F.REG_NO(+)\r\n" + 
							"AND R.REG_NO=G.REG_NO(+)\r\n" + 
							"AND R.REG_NO=H.REG_NO(+)\r\n" + 
							substr+" AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?\r\n" + 
							"GROUP BY (S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME),(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)\r\n" + 
							",(CASE WHEN (P.DAYS_SOP > P.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)\r\n" + 
							",(CASE WHEN (E.DAYS_SOP > E.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) \r\n" + 
							"order by 1 ";

					
					
					reportPStmt = con.prepareStatement(query);


					reportPStmt.setString(1, cscvo.getCircle());
					//System.out.println(cscvo.getCircle());
					//System.out.println(cscvo.getDivision());
					//System.out.println(cscvo.getSubDiv());
					
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());
					//System.out.println("LT_HT_NEW_SEC:"+query);
					reportRst = reportPStmt.executeQuery();

				} else {
					String query = "SELECT S.CIRNAME,COUNT(N.REG_NO)+COUNT(C.REG_NO) PAID,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) PAID_WRT_BRT,COUNT(G.REG_NO)+COUNT(H.REG_NO) NOT_PAID,\r\n" + 
							"COUNT(P.REG_NO)+COUNT(D.REG_NO)NOT_APPRD,(CASE WHEN (P.DAYS_SOP > P.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) NAPRD_WRT_BRT\r\n" + 
							",COUNT(E.REG_NO)+COUNT(F.REG_NO)NOT_CRTD ,(CASE WHEN (E.DAYS_SOP > E.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) NOT_CREATED,COUNT(N.REG_NO)+COUNT(C.REG_NO)+COUNT(G.REG_NO)+COUNT(H.REG_NO)+COUNT(P.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO) as totalpending\r\n" + 
							" FROM\r\n" + 
							"(SELECT DISTINCT REG_NO,NCPARTCD SECCODE  FROM REP_FINAL WHERE CIRCLE_CODE IN ('2','3','5','7','8') UNION\r\n" + 
							"(SELECT REG_NO,CSPARTCD SECCODE FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11') AND STATUS='balance'))R,\r\n" + 
							"(select reg_no,NCPARTCD,(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
							"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
							"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
							"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11') AND STATUS='balance' AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='AL')))C,\r\n" + 
							"(select reg_no,NCPARTCD,(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
							"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
							"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))P,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11')  AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL')))D,\r\n" + 
							"(select reg_no,NCPARTCD,(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
							"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
							"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
							"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))E,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11')  AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='AL')))F,\r\n" + 
							"(SELECT  REG_NO,NCPARTCD FROM REP_FINAL WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type='NEW')union \r\n" + 
							"(SELECT  REG_NO,NCPARTCD FROM REP_FINAL WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type='NEW')))G,\r\n" + 
							"(SELECT REG_NO FROM NEWCOMP_TAB WHERE COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11')  AND  REG_NO IN \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='AL' UNION \r\n" + 
							"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='AL')))H,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.SECCODE=S.SECCD(+)\r\n" + 
							"AND R.REG_NO=N.REG_NO(+)\r\n" + 
							"AND R.REG_NO=C.REG_NO(+)\r\n" + 
							"AND R.REG_NO=P.REG_NO(+)\r\n" + 
							"AND R.REG_NO=D.REG_NO(+)\r\n" + 
							"AND R.REG_NO=E.REG_NO(+)\r\n" + 
							"AND R.REG_NO=F.REG_NO(+)\r\n" + 
							"AND R.REG_NO=G.REG_NO(+)\r\n" + 
							"AND R.REG_NO=H.REG_NO(+)\r\n" + 
							substr + 
							"GROUP BY S.CIRNAME,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)\r\n" + 
							",(CASE WHEN (P.DAYS_SOP > P.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)\r\n" + 
							",(CASE WHEN (E.DAYS_SOP > E.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) ORDER BY 1";
					reportPStmt = con.prepareStatement(query);
					//System.out.println("LT_HT_NEW:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							
							Double value=Double.parseDouble(reportRst.getString(2));
							
							if(reportRst.getString("PAID_WRT_BRT").equals("WRT")){
								Double value2=Double.parseDouble(dmapobj.getAmt_paid_wrt()!=null?dmapobj.getAmt_paid_wrt():"0");
								dmapobj.setAmt_paid_wrt(String.valueOf(value+value2));
							}else{
								Double value2=Double.parseDouble(dmapobj.getAmt_paid_brt()!=null?dmapobj.getAmt_paid_brt():"0");
								dmapobj.setAmt_paid_brt(String.valueOf(value+value2));
							}
							
								
							
							Double nptpaidamt=Double.parseDouble(reportRst.getString(4));
							Double prenotpaidamt=Double.parseDouble(dmapobj.getAmt_not_paid_tot()!=null?dmapobj.getAmt_not_paid_tot():"0");
							dmapobj.setAmt_not_paid_tot(String.valueOf(nptpaidamt+prenotpaidamt));
							
							
                             Double Est_not_sanctioned=Double.parseDouble(reportRst.getString(5));
							
							if(reportRst.getString("NAPRD_WRT_BRT").equals("WRT")){
								Double value2=Double.parseDouble(dmapobj.getEst_not_sanctioned_wrt()!=null?dmapobj.getEst_not_sanctioned_wrt():"0");
								dmapobj.setEst_not_sanctioned_wrt(String.valueOf(Est_not_sanctioned+value2));
							}else{
								Double value2=Double.parseDouble(dmapobj.getEst_not_sanctioned_brt()!=null?dmapobj.getEst_not_sanctioned_brt():"0");
								dmapobj.setEst_not_sanctioned_brt(String.valueOf(Est_not_sanctioned+value2));
							}
							
							/*dmapobj.setEst_not_sanctioned_wrt(reportRst.getString(5));
							dmapobj.setEst_not_sanctioned_brt(reportRst.getString(6));*/
							
                                  Double Est_not_created=Double.parseDouble(reportRst.getString(7));
							
							if(reportRst.getString("NOT_CREATED").equals("WRT")){
								Double value2=Double.parseDouble(dmapobj.getEst_not_created_wrt()!=null?dmapobj.getEst_not_created_wrt():"0");
								dmapobj.setEst_not_created_wrt(String.valueOf(Est_not_created+value2));
							}else{
								Double value2=Double.parseDouble(dmapobj.getEst_not_created_brt()!=null?dmapobj.getEst_not_created_brt():"0");
								dmapobj.setEst_not_created_brt(String.valueOf(Est_not_created+value2));
							}
							
							Double Tot_pending=Double.parseDouble(reportRst.getString(9));
							Double pre_Tot_pending=Double.parseDouble(dmapobj.getTot_pending()!=null?dmapobj.getTot_pending():"0");
							dmapobj.setTot_pending(String.valueOf(Tot_pending+pre_Tot_pending));
							
							
							/*dmapobj.setEst_not_created_wrt(reportRst.getString(7));
							dmapobj.setEst_not_created_brt(reportRst.getString(8));*/
							/*dmapobj.setTot_pending(reportRst.getString(9));*/
							
							
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							
							Double value=Double.parseDouble(reportRst.getString(2));
							
							if(reportRst.getString("PAID_WRT_BRT").equals("WRT")){
								Double value2=Double.parseDouble(dmapobj.getAmt_paid_wrt()!=null?dmapobj.getAmt_paid_wrt():"0");
								dmapobj.setAmt_paid_wrt(String.valueOf(value+value2));
							}else{
								Double value2=Double.parseDouble(dmapobj.getAmt_paid_brt()!=null?dmapobj.getAmt_paid_brt():"0");
								dmapobj.setAmt_paid_brt(String.valueOf(value+value2));
							}
							
							Double nptpaidamt=Double.parseDouble(reportRst.getString(4));
							Double prenotpaidamt=Double.parseDouble(dmapobj.getAmt_not_paid_tot()!=null?dmapobj.getAmt_not_paid_tot():"0");
							dmapobj.setAmt_not_paid_tot(String.valueOf(nptpaidamt+prenotpaidamt));
							
							 Double Est_not_sanctioned=Double.parseDouble(reportRst.getString(5));
								
								if(reportRst.getString("NAPRD_WRT_BRT").equals("WRT")){
									Double value2=Double.parseDouble(dmapobj.getEst_not_sanctioned_wrt()!=null?dmapobj.getEst_not_sanctioned_wrt():"0");
									dmapobj.setEst_not_sanctioned_wrt(String.valueOf(Est_not_sanctioned+value2));
								}else{
									Double value2=Double.parseDouble(dmapobj.getEst_not_sanctioned_brt()!=null?dmapobj.getEst_not_sanctioned_brt():"0");
									dmapobj.setEst_not_sanctioned_brt(String.valueOf(Est_not_sanctioned+value2));
								}
								
								/*dmapobj.setEst_not_sanctioned_wrt(reportRst.getString(5));
								dmapobj.setEst_not_sanctioned_brt(reportRst.getString(6));*/
								
	                                  Double Est_not_created=Double.parseDouble(reportRst.getString(7));
								
								if(reportRst.getString("NOT_CREATED").equals("WRT")){
									Double value2=Double.parseDouble(dmapobj.getEst_not_created_wrt()!=null?dmapobj.getEst_not_created_wrt():"0");
									dmapobj.setEst_not_created_wrt(String.valueOf(Est_not_created+value2));
								}else{
									Double value2=Double.parseDouble(dmapobj.getEst_not_created_brt()!=null?dmapobj.getEst_not_created_brt():"0");
									dmapobj.setEst_not_created_brt(String.valueOf(Est_not_created+value2));
								}
							
								Double Tot_pending=Double.parseDouble(reportRst.getString(9));
								Double pre_Tot_pending=Double.parseDouble(dmapobj.getTot_pending()!=null?dmapobj.getTot_pending():"0");
								dmapobj.setTot_pending(String.valueOf(Tot_pending+pre_Tot_pending));
							
							
							/*dmapobj.setEst_not_sanctioned_wrt(reportRst.getString(5));
							dmapobj.setEst_not_sanctioned_brt(reportRst.getString(6));
							dmapobj.setEst_not_created_wrt(reportRst.getString(7));
							dmapobj.setEst_not_created_brt(reportRst.getString(8));*/
							//dmapobj.setTot_pending(reportRst.getString(9));
								
								
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
		
	}

	
	//LT New Services(Incl M&P)
	
	public CscpayVO getTotalLTNewScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		
		Connection con=DBConnectionManager.getInstance().getConnection("cscdb");
		
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		
    		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = " ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = " ";
					reportPStmt = con.prepareStatement(query);

					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = " ";
					reportPStmt = con.prepareStatement(query);


					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					String query = " SELECT NVL(name2,'TOTAL'),\r\n" + 
							"  SUM(zamount_paid),\r\n" + 
							"  SUM(zamt_not_paid),\r\n" + 
							"  SUM(zest_not_san),\r\n" + 
							"  SUM(zest_not_cre),\r\n" + 
							"  SUM(tot)\r\n" + 
							"FROM it_new_LT\r\n" + 
							"group by rollup(name2)\r\n" + 
							"ORDER BY name2";
					reportPStmt = con.prepareStatement(query);
					System.out.println("lt_abstract:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAmt_paid(reportRst.getString(2));
							dmapobj.setAmt_not_paid(reportRst.getString(3));
							dmapobj.setEst_not_sanctioned(reportRst.getString(4));
							dmapobj.setEst_not_created(reportRst.getString(5));
							dmapobj.setTotal(reportRst.getString(6));
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAmt_paid(reportRst.getString(2));
							dmapobj.setAmt_not_paid(reportRst.getString(3));
							dmapobj.setEst_not_sanctioned(reportRst.getString(4));
							dmapobj.setEst_not_created(reportRst.getString(5));
							dmapobj.setTotal(reportRst.getString(6));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	}
	
	public CscpayVO getStatusOfPenLTNewScsEstNotCreatedReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = "";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					
					String query = "SELECT NVL(s.cirname,'TOTAL'),\r\n" + 
							"  COUNT(b.reg_no) paid_pending,\r\n" + 
							"  COUNT(c.reg_no) wrt,\r\n" + 
							"  COUNT(d.reg_no) brt_dept_lessthan_3,\r\n" + 
							"  COUNT(e.reg_no) brt_dept_grather_3,\r\n" + 
							"  COUNT(f.reg_no) brt_dept_grather_1,\r\n" + 
							"  COUNT(d.reg_no)+COUNT(e.reg_no)+COUNT(f.reg_no) brt_dept,\r\n" + 
							"  COUNT(g.reg_no) wrt_turnkey_lessthan_3,\r\n" + 
							"  COUNT(h.reg_no) wrt_turnkey_grather_3,\r\n" + 
							"  COUNT(i.reg_no) wrt_turnkey_grather_1,\r\n" + 
							"  COUNT(g.reg_no)+COUNT(h.reg_no)+COUNT(i.reg_no) wrt_turnkey\r\n" + 
							"FROM\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd,\r\n" + 
							"    category_supply,\r\n" + 
							"    eststatus\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE NVL(trim(pending_stat),'NA') <> 'DEL'\r\n" + 
							"  AND NVL(eststatus,'01')             ='02'\r\n" + 
							"  AND SUBSTR(reg_no,6,1)              IN ('N','S')\r\n" + 
							"  )a,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%WRT%'\r\n" + 
							"  OR upper(pending_stat) LIKE '%BRT%'\r\n" + 
							"  OR upper(repstat) LIKE '%TKEY%' )\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND sladesc                         ='Pending for estimate sanction'\r\n" + 
							"  )b,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%WRT%'\r\n" + 
							"  AND sladesc                         ='Pending for estimate sanction')\r\n" + 
							"  AND NVL(trim(execution_type),'NA') <> 'Turnkey'\r\n" + 
							"  AND intimate_date                  IS NOT NULL\r\n" + 
							"  AND maxprdt                        IS NOT NULL\r\n" + 
							"  AND slcprdt                        IS NOT NULL\r\n" + 
							"  AND sdprdt                         IS NOT NULL\r\n" + 
							"  AND supply_release_date            IS NULL\r\n" + 
							"  )c,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%BRT%'\r\n" + 
							"  AND sladesc              ='Pending for estimate sanction')\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND sdprdt              IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)   <=90\r\n" + 
							"  )d,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%BRT%'\r\n" + 
							"  AND sladesc              ='Pending for estimate sanction')\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND sdprdt              IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)    > 90\r\n" + 
							"  AND (sysdate-maxprdt)   <=374\r\n" + 
							"  )e,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%BRT%'\r\n" + 
							"  AND sladesc              ='Pending for estimate sanction')\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND sdprdt              IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)    > 375\r\n" + 
							"  )f,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE ( upper(repstat) LIKE '%TKEY%' )\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)   <= 90\r\n" + 
							"  )g,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE ( upper(repstat) LIKE '%TKEY%' )\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)    > 90\r\n" + 
							"  AND (sysdate-maxprdt)   <=374\r\n" + 
							"  )h,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE ( upper(repstat) LIKE '%TKEY%' )\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)    > 375\r\n" + 
							"  )i,\r\n" + 
							"  (SELECT cirname,seccd FROM spdclmaster\r\n" + 
							"  )s\r\n" + 
							"WHERE a.reg_no=b.reg_no(+)\r\n" + 
							"AND a.reg_no  =c.reg_no(+)\r\n" + 
							"AND a.reg_no  =d.reg_no(+)\r\n" + 
							"AND a.reg_no  =e.reg_no(+)\r\n" + 
							"AND a.reg_no  =f.reg_no(+)\r\n" + 
							"AND a.reg_no  =g.reg_no(+)\r\n" + 
							"AND a.reg_no  =h.reg_no(+)\r\n" + 
							"AND a.reg_no  =i.reg_no(+)\r\n" + 
							"AND a.ncpartcd=s.seccd\r\n" + 
							"AND a.ncpartcd=b.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=c.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=d.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=e.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=f.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=g.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=h.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=i.ncpartcd(+)\r\n" + 
							"GROUP BY rollup(s.cirname) ";
				
					
					
					reportPStmt = con.prepareStatement(query);
					/*System.out.println(query);*/
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_les_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							dmapobj.setBrt_gtr_1year(reportRst.getString(7));
						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_les_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							dmapobj.setBrt_gtr_1year(reportRst.getString(7));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
		
	}
	
	public CscpayVO getStatusOfPenLTNewScsEstToBeSanctionedReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = " ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = " ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = " ";
					
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
								

					 String query="SELECT NVL(s.cirname,'TOTAL'),\r\n" + 
					 		"  COUNT(b.reg_no) paid_pending,\r\n" + 
					 		"  COUNT(c.reg_no) wrt,\r\n" + 
					 		"  COUNT(d.reg_no) brt_dept_lessthan_3,\r\n" + 
					 		"  COUNT(e.reg_no) brt_dept_grather_3,\r\n" + 
					 		"  COUNT(f.reg_no) brt_dept_grather_1,\r\n" + 
					 		"  COUNT(d.reg_no)+COUNT(e.reg_no)+COUNT(f.reg_no) brt_dept,\r\n" + 
					 		"  COUNT(g.reg_no) wrt_turnkey_lessthan_3,\r\n" + 
					 		"  COUNT(h.reg_no) wrt_turnkey_grather_3,\r\n" + 
					 		"  COUNT(i.reg_no) wrt_turnkey_grather_1,\r\n" + 
					 		"  COUNT(g.reg_no)+COUNT(h.reg_no)+COUNT(i.reg_no) wrt_turnkey\r\n" + 
					 		"FROM\r\n" + 
					 		"  (SELECT reg_no,\r\n" + 
					 		"    ncpartcd,\r\n" + 
					 		"    category_supply,\r\n" + 
					 		"    eststatus\r\n" + 
					 		"  FROM rep_final\r\n" + 
					 		"  WHERE NVL(trim(pending_stat),'NA') <> 'DEL'\r\n" + 
					 		"  AND NVL(eststatus,'01')             ='02'\r\n" + 
					 		"  AND SUBSTR(reg_no,6,1)              IN ('N','S')\r\n" + 
					 		"  )a,\r\n" + 
					 		"  (SELECT reg_no,\r\n" + 
					 		"    ncpartcd\r\n" + 
					 		"  FROM rep_final\r\n" + 
					 		"  WHERE (upper(pending_stat) LIKE '%WRT%'\r\n" + 
					 		"  OR upper(pending_stat) LIKE '%BRT%'\r\n" + 
					 		"  OR upper(repstat) LIKE '%TKEY%' )\r\n" + 
					 		"  AND intimate_date       IS NOT NULL\r\n" + 
					 		"  AND maxprdt             IS NOT NULL\r\n" + 
					 		"  AND supply_release_date IS NULL\r\n" + 
					 		"  AND sladesc                         ='Service released'\r\n" + 
					 		"  )b,\r\n" + 
					 		"  (SELECT reg_no,\r\n" + 
					 		"    ncpartcd\r\n" + 
					 		"  FROM rep_final\r\n" + 
					 		"  WHERE (upper(pending_stat) LIKE '%WRT%'\r\n" + 
					 		"  AND sladesc                         ='Service released')\r\n" + 
					 		"  AND NVL(trim(execution_type),'NA') <> 'Turnkey'\r\n" + 
					 		"  AND intimate_date                  IS NOT NULL\r\n" + 
					 		"  AND maxprdt                        IS NOT NULL\r\n" + 
					 		"  AND slcprdt                        IS NOT NULL\r\n" + 
					 		"  AND sdprdt                         IS NOT NULL\r\n" + 
					 		"  AND supply_release_date            IS NULL\r\n" + 
					 		"  )c,\r\n" + 
					 		"  (SELECT reg_no,\r\n" + 
					 		"    ncpartcd\r\n" + 
					 		"  FROM rep_final\r\n" + 
					 		"  WHERE (upper(pending_stat) LIKE '%BRT%'\r\n" + 
					 		"  AND sladesc              ='Service released')\r\n" + 
					 		"  AND supply_release_date IS NULL\r\n" + 
					 		"  AND intimate_date       IS NOT NULL\r\n" + 
					 		"  AND maxprdt             IS NOT NULL\r\n" + 
					 		"  AND sdprdt              IS NOT NULL\r\n" + 
					 		"  AND (sysdate-maxprdt)   <=90\r\n" + 
					 		"  )d,\r\n" + 
					 		"  (SELECT reg_no,\r\n" + 
					 		"    ncpartcd\r\n" + 
					 		"  FROM rep_final\r\n" + 
					 		"  WHERE (upper(pending_stat) LIKE '%BRT%'\r\n" + 
					 		"  AND sladesc              ='Service released')\r\n" + 
					 		"  AND supply_release_date IS NULL\r\n" + 
					 		"  AND intimate_date       IS NOT NULL\r\n" + 
					 		"  AND maxprdt             IS NOT NULL\r\n" + 
					 		"  AND sdprdt              IS NOT NULL\r\n" + 
					 		"  AND (sysdate-maxprdt)    > 90\r\n" + 
					 		"  AND (sysdate-maxprdt)   <=374\r\n" + 
					 		"  )e,\r\n" + 
					 		"  (SELECT reg_no,\r\n" + 
					 		"    ncpartcd\r\n" + 
					 		"  FROM rep_final\r\n" + 
					 		"  WHERE (upper(pending_stat) LIKE '%BRT%'\r\n" + 
					 		"  AND sladesc              ='Service released')\r\n" + 
					 		"  AND supply_release_date IS NULL\r\n" + 
					 		"  AND intimate_date       IS NOT NULL\r\n" + 
					 		"  AND maxprdt             IS NOT NULL\r\n" + 
					 		"  AND sdprdt              IS NOT NULL\r\n" + 
					 		"  AND (sysdate-maxprdt)    > 375\r\n" + 
					 		"  )f,\r\n" + 
					 		"  (SELECT reg_no,\r\n" + 
					 		"    ncpartcd\r\n" + 
					 		"  FROM rep_final\r\n" + 
					 		"  WHERE ( upper(repstat) LIKE '%TKEY%' )\r\n" + 
					 		"  AND supply_release_date IS NULL\r\n" + 
					 		"  AND intimate_date       IS NOT NULL\r\n" + 
					 		"  AND maxprdt             IS NOT NULL\r\n" + 
					 		"  AND (sysdate-maxprdt)   <= 90\r\n" + 
					 		"  )g,\r\n" + 
					 		"  (SELECT reg_no,\r\n" + 
					 		"    ncpartcd\r\n" + 
					 		"  FROM rep_final\r\n" + 
					 		"  WHERE ( upper(repstat) LIKE '%TKEY%' )\r\n" + 
					 		"  AND supply_release_date IS NULL\r\n" + 
					 		"  AND intimate_date       IS NOT NULL\r\n" + 
					 		"  AND maxprdt             IS NOT NULL\r\n" + 
					 		"  AND (sysdate-maxprdt)    > 90\r\n" + 
					 		"  AND (sysdate-maxprdt)   <=374\r\n" + 
					 		"  )h,\r\n" + 
					 		"  (SELECT reg_no,\r\n" + 
					 		"    ncpartcd\r\n" + 
					 		"  FROM rep_final\r\n" + 
					 		"  WHERE ( upper(repstat) LIKE '%TKEY%' )\r\n" + 
					 		"  AND supply_release_date IS NULL\r\n" + 
					 		"  AND intimate_date       IS NOT NULL\r\n" + 
					 		"  AND maxprdt             IS NOT NULL\r\n" + 
					 		"  AND (sysdate-maxprdt)    > 375\r\n" + 
					 		"  )i,\r\n" + 
					 		"  (SELECT cirname,seccd FROM spdclmaster\r\n" + 
					 		"  )s\r\n" + 
					 		"WHERE a.reg_no=b.reg_no(+)\r\n" + 
					 		"AND a.reg_no  =c.reg_no(+)\r\n" + 
					 		"AND a.reg_no  =d.reg_no(+)\r\n" + 
					 		"AND a.reg_no  =e.reg_no(+)\r\n" + 
					 		"AND a.reg_no  =f.reg_no(+)\r\n" + 
					 		"AND a.reg_no  =g.reg_no(+)\r\n" + 
					 		"AND a.reg_no  =h.reg_no(+)\r\n" + 
					 		"AND a.reg_no  =i.reg_no(+)\r\n" + 
					 		"AND a.ncpartcd=s.seccd\r\n" + 
					 		"AND a.ncpartcd=b.ncpartcd(+)\r\n" + 
					 		"AND a.ncpartcd=c.ncpartcd(+)\r\n" + 
					 		"AND a.ncpartcd=d.ncpartcd(+)\r\n" + 
					 		"AND a.ncpartcd=e.ncpartcd(+)\r\n" + 
					 		"AND a.ncpartcd=f.ncpartcd(+)\r\n" + 
					 		"AND a.ncpartcd=g.ncpartcd(+)\r\n" + 
					 		"AND a.ncpartcd=h.ncpartcd(+)\r\n" + 
					 		"AND a.ncpartcd=i.ncpartcd(+)\r\n" + 
					 		"GROUP BY rollup(s.cirname)";	
					reportPStmt = con.prepareStatement(query);
					/*System.out.println(query);*/
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_les_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							dmapobj.setBrt_gtr_1year(reportRst.getString(7));
							dmapobj.setTotal(reportRst.getString(8));
							/*
							 * dmapobj.setTot_brt(reportRst.getString(7));
							 * 
							 * dmapobj.setTurnkey_les_3months(reportRst.
							 * getString(8));
							 * dmapobj.setTurnkey_gtr_3months(reportRst.
							 * getString(9));
							 * dmapobj.setTurnkey_gtr_1year(reportRst.getString(
							 * 10));
							 * dmapobj.setTot_turnkey(reportRst.getString(11));
							 */

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_les_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							dmapobj.setBrt_gtr_1year(reportRst.getString(7));
							dmapobj.setTotal(reportRst.getString(8));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
		
	}
	
	public CscpayVO getStatusOfPenLTNewScsEstSanctionedAmtpaidReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = "";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					String query = "";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					String query = "SELECT NVL(s.cirname,'TOTAL'),\r\n" + 
							"  COUNT(b.reg_no) paid_pending,\r\n" + 
							"  COUNT(c.reg_no) wrt,\r\n" + 
							"  COUNT(d.reg_no) brt_dept_lessthan_3,\r\n" + 
							"  COUNT(e.reg_no) brt_dept_grather_3,\r\n" + 
							"  COUNT(f.reg_no) brt_dept_grather_1,\r\n" + 
							"  COUNT(d.reg_no)+COUNT(e.reg_no)+COUNT(f.reg_no) brt_dept,\r\n" + 
							"  COUNT(g.reg_no) wrt_turnkey_lessthan_3,\r\n" + 
							"  COUNT(h.reg_no) wrt_turnkey_grather_3,\r\n" + 
							"  COUNT(i.reg_no) wrt_turnkey_grather_1,\r\n" + 
							"  COUNT(g.reg_no)+COUNT(h.reg_no)+COUNT(i.reg_no) wrt_turnkey\r\n" + 
							"FROM\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd,\r\n" + 
							"    category_supply,\r\n" + 
							"    eststatus\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE NVL(trim(pending_stat),'NA') <> 'DEL'\r\n" + 
							"  AND NVL(eststatus,'01')             ='02'\r\n" + 
							"  AND SUBSTR(reg_no,6,1)              IN ('N','S')\r\n" + 
							"  )a,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%WRT%'\r\n" + 
							"  OR upper(pending_stat) LIKE '%BRT%'\r\n" + 
							"  OR upper(repstat) LIKE '%TKEY%' )\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND sladesc                         ='Pending for payment by consumer'\r\n" + 
							"  )b,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%WRT%'\r\n" + 
							"  AND sladesc                         ='Pending for payment by consumer')\r\n" + 
							"  AND NVL(trim(execution_type),'NA') <> 'Turnkey'\r\n" + 
							"  AND intimate_date                  IS NOT NULL\r\n" + 
							"  AND maxprdt                        IS NOT NULL\r\n" + 
							"  AND slcprdt                        IS NOT NULL\r\n" + 
							"  AND sdprdt                         IS NOT NULL\r\n" + 
							"  AND supply_release_date            IS NULL\r\n" + 
							"  )c,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%BRT%'\r\n" + 
							"  AND sladesc              ='Pending for payment by consumer')\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND sdprdt              IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)   <=90\r\n" + 
							"  )d,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%BRT%'\r\n" + 
							"  AND sladesc              ='Pending for payment by consumer')\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND sdprdt              IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)    > 90\r\n" + 
							"  AND (sysdate-maxprdt)   <=374\r\n" + 
							"  )e,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%BRT%'\r\n" + 
							"  AND sladesc              ='Pending for payment by consumer')\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND sdprdt              IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)    > 375\r\n" + 
							"  )f,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE ( upper(repstat) LIKE '%TKEY%' )\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)   <= 90\r\n" + 
							"  )g,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE ( upper(repstat) LIKE '%TKEY%' )\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)    > 90\r\n" + 
							"  AND (sysdate-maxprdt)   <=374\r\n" + 
							"  )h,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE ( upper(repstat) LIKE '%TKEY%' )\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)    > 375\r\n" + 
							"  )i,\r\n" + 
							"  (SELECT cirname,seccd FROM spdclmaster\r\n" + 
							"  )s\r\n" + 
							"WHERE a.reg_no=b.reg_no(+)\r\n" + 
							"AND a.reg_no  =c.reg_no(+)\r\n" + 
							"AND a.reg_no  =d.reg_no(+)\r\n" + 
							"AND a.reg_no  =e.reg_no(+)\r\n" + 
							"AND a.reg_no  =f.reg_no(+)\r\n" + 
							"AND a.reg_no  =g.reg_no(+)\r\n" + 
							"AND a.reg_no  =h.reg_no(+)\r\n" + 
							"AND a.reg_no  =i.reg_no(+)\r\n" + 
							"AND a.ncpartcd=s.seccd\r\n" + 
							"AND a.ncpartcd=b.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=c.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=d.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=e.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=f.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=g.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=h.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=i.ncpartcd(+)\r\n" + 
							"GROUP BY rollup(s.cirname)";
										

					reportPStmt = con.prepareStatement(query);
					/*System.out.println(query);*/
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_les_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							dmapobj.setBrt_gtr_1year(reportRst.getString(7));
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_les_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							dmapobj.setBrt_gtr_1year(reportRst.getString(7));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
			
	}
	
	public CscpayVO getStatusOfPenLTNewScsRelAfterPaidReportDetails1(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
						String query = "";
						reportPStmt = con.prepareStatement(query);

						reportPStmt.setString(1, cscvo.getCircle());
						// reportPStmt.setString(2, chkVO.getCirname());
					} else {
						String query = "";
						reportPStmt = con.prepareStatement(query);

					}

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						String query = "";
						reportPStmt = con.prepareStatement(query);

						// reportPStmt.setString(1, month + "-" +
						// String.valueOf(curr_year));
						// reportPStmt.setString(2, chkVO.getCirname());
						// reportPStmt.setString(3, chkVO.getDivname());
						reportPStmt.setString(1, cscvo.getCircle());
						reportPStmt.setString(2, cscvo.getDivision());

					} else {

						if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
							String query = "";

								reportPStmt = con.prepareStatement(query);
							reportPStmt.setString(1, cscvo.getCircle());
						}
						// }
						else {
							String query = "";
							reportPStmt = con.prepareStatement(query);
						}

					}
					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						String query = "";
						reportPStmt = con.prepareStatement(query);

						// reportPStmt.setString(1, month + "-" +
						// String.valueOf(curr_year));
						// reportPStmt.setString(2, chkVO.getCirname());
						// reportPStmt.setString(3, chkVO.getDivname());
						// reportPStmt.setString(4, chkVO.getSubdivname());

						reportPStmt.setString(1, cscvo.getCircle());
						reportPStmt.setString(2, cscvo.getDivision());
						reportPStmt.setString(3, cscvo.getSubDiv());
					} else {

						if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
							String query = "";
							reportPStmt = con.prepareStatement(query);
							reportPStmt.setString(1, cscvo.getCircle());
							reportPStmt.setString(2, cscvo.getDivision());
						} else {
							String query = "";
							reportPStmt = con.prepareStatement(query);
						}

					}

					reportRst = reportPStmt.executeQuery();

				} else {
					String query = "SELECT NVL(s.cirname,'TOTAL'),\r\n" + 
							"  COUNT(b.reg_no) paid_pending,\r\n" + 
							"  COUNT(c.reg_no) wrt,\r\n" + 
							"  COUNT(d.reg_no) brt_dept_lessthan_3,\r\n" + 
							"  COUNT(e.reg_no) brt_dept_grather_3,\r\n" + 
							"  COUNT(f.reg_no) brt_dept_grather_1,\r\n" + 
							"  COUNT(d.reg_no)+COUNT(e.reg_no)+COUNT(f.reg_no) brt_dept,\r\n" + 
							"  COUNT(g.reg_no) wrt_turnkey_lessthan_3,\r\n" + 
							"  COUNT(h.reg_no) wrt_turnkey_grather_3,\r\n" + 
							"  COUNT(i.reg_no) wrt_turnkey_grather_1,\r\n" + 
							"  COUNT(g.reg_no)+COUNT(h.reg_no)+COUNT(i.reg_no) wrt_turnkey\r\n" + 
							"FROM\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd,\r\n" + 
							"    category_supply,\r\n" + 
							"    eststatus\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE NVL(trim(pending_stat),'NA') <> 'DEL'\r\n" + 
							"  AND NVL(eststatus,'01')             ='02'\r\n" + 
							"  AND SUBSTR(reg_no,6,1)              IN ('N','S')\r\n" + 
							"  )a,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%WRT%'\r\n" + 
							"  OR upper(pending_stat) LIKE '%BRT%'\r\n" + 
							"  OR upper(repstat) LIKE '%TKEY%' )\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND sladesc                         ='Pending for service release'\r\n" + 
							"  )b,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%WRT%'\r\n" + 
							"  AND sladesc                         ='Pending for service release')\r\n" + 
							"  AND NVL(trim(execution_type),'NA') <> 'Turnkey'\r\n" + 
							"  AND intimate_date                  IS NOT NULL\r\n" + 
							"  AND maxprdt                        IS NOT NULL\r\n" + 
							"  AND slcprdt                        IS NOT NULL\r\n" + 
							"  AND sdprdt                         IS NOT NULL\r\n" + 
							"  AND supply_release_date            IS NULL\r\n" + 
							"  )c,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%BRT%'\r\n" + 
							"  AND sladesc              ='Pending for service release')\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND sdprdt              IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)   <=90\r\n" + 
							"  )d,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%BRT%'\r\n" + 
							"  AND sladesc              ='Pending for service release')\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND sdprdt              IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)    > 90\r\n" + 
							"  AND (sysdate-maxprdt)   <=374\r\n" + 
							"  )e,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE (upper(pending_stat) LIKE '%BRT%'\r\n" + 
							"  AND sladesc              ='Pending for service release')\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND sdprdt              IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)    > 375\r\n" + 
							"  )f,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE ( upper(repstat) LIKE '%TKEY%' )\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)   <= 90\r\n" + 
							"  )g,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE ( upper(repstat) LIKE '%TKEY%' )\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)    > 90\r\n" + 
							"  AND (sysdate-maxprdt)   <=374\r\n" + 
							"  )h,\r\n" + 
							"  (SELECT reg_no,\r\n" + 
							"    ncpartcd\r\n" + 
							"  FROM rep_final\r\n" + 
							"  WHERE ( upper(repstat) LIKE '%TKEY%' )\r\n" + 
							"  AND supply_release_date IS NULL\r\n" + 
							"  AND intimate_date       IS NOT NULL\r\n" + 
							"  AND maxprdt             IS NOT NULL\r\n" + 
							"  AND (sysdate-maxprdt)    > 375\r\n" + 
							"  )i,\r\n" + 
							"  (SELECT cirname,seccd FROM spdclmaster\r\n" + 
							"  )s\r\n" + 
							"WHERE a.reg_no=b.reg_no(+)\r\n" + 
							"AND a.reg_no  =c.reg_no(+)\r\n" + 
							"AND a.reg_no  =d.reg_no(+)\r\n" + 
							"AND a.reg_no  =e.reg_no(+)\r\n" + 
							"AND a.reg_no  =f.reg_no(+)\r\n" + 
							"AND a.reg_no  =g.reg_no(+)\r\n" + 
							"AND a.reg_no  =h.reg_no(+)\r\n" + 
							"AND a.reg_no  =i.reg_no(+)\r\n" + 
							"AND a.ncpartcd=s.seccd\r\n" + 
							"AND a.ncpartcd=b.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=c.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=d.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=e.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=f.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=g.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=h.ncpartcd(+)\r\n" + 
							"AND a.ncpartcd=i.ncpartcd(+)\r\n" + 
							"GROUP BY rollup(s.cirname)";
							
					
					reportPStmt = con.prepareStatement(query);
					/*System.out.println(query);*/
					reportRst = reportPStmt.executeQuery();
					//System.out.println("LT New Services(Incl M&P)_AMT_PAID:"+query);
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							dmapobj.setBrt_les_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt(reportRst.getString(7));

							dmapobj.setTurnkey_les_3months(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_3months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(10));
							dmapobj.setTot_turnkey(reportRst.getString(11));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							dmapobj.setBrt_les_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt(reportRst.getString(7));

							dmapobj.setTurnkey_les_3months(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_3months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(10));
							dmapobj.setTot_turnkey(reportRst.getString(11));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
		
	}
	public CscpayVO getStatusOfPenLTNewScsRelAfterPaidReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					
					String query = " ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = "";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					String query = " ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					
					String query = "";

					reportPStmt = con.prepareStatement(query);
					/*System.out.println(query);*/
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							dmapobj.setBrt_les_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt(reportRst.getString(7));

							dmapobj.setTurnkey_les_3months(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_3months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(10));
							dmapobj.setTot_turnkey(reportRst.getString(11));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							dmapobj.setBrt_les_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt(reportRst.getString(7));

							dmapobj.setTurnkey_les_3months(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_3months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(10));
							dmapobj.setTot_turnkey(reportRst.getString(11));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
			
	}
	
	//end of lt new services
	
	
	// 22-05-2021
	public CscpayVO getTotalHtNewScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(divname,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from Newcomp_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9') and cirname=? "
							+ ")) group by  rollup(divname) ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(subname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from Newcomp_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')   and cirname=? and divname=?  )) group by  rollup(subname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select NVL(secname,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
							+ " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
							+ " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
							+ " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
							+ " from (select * from Newcomp_abs "
							+ "  where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9')    and cirname=?  and divname=?  and subname=?  )) group by  rollup(secname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					/*
					 * String query = "select NVL(CIRNAME,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * " where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9'))  ) group by  rollup(CIRNAME) "
					 * ;
					 */
					// String query="select
					// NAME2,ZAMOUNT_PAID,ZAMT_NOT_PAID,ZEST_NOT_SAN,ZEST_NOT_CRE,TOT
					// from it_new order by name2";
					String query = "select NVL(NAME2,'TOTAL'),sum(ZAMOUNT_PAID),sum(ZAMT_NOT_PAID),sum(ZEST_NOT_SAN),sum(ZEST_NOT_CRE),sum(TOT)  from it_new group by rollup(name2) order by name2";

					reportPStmt = con.prepareStatement(query);
					System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAmt_paid(reportRst.getString(2));
							dmapobj.setAmt_not_paid(reportRst.getString(3));
							dmapobj.setEst_not_sanctioned(reportRst.getString(4));
							dmapobj.setEst_not_created(reportRst.getString(5));
							dmapobj.setTotal(reportRst.getString(6));
							// dmapobj.setAppDeleted(reportRst.getString(6));
							// dmapobj.setAppReleased(reportRst.getString(7));
							// dmapobj.setTot_crt(reportRst.getString(8));

							// dmapobj.setWrt(reportRst.getString(9));
							// dmapobj.setBeyondReleased(reportRst.getString(10));
							// dmapobj.setTurnKey(reportRst.getString(11));
							// dmapobj.setTot_pen(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAmt_paid(reportRst.getString(2));
							dmapobj.setAmt_not_paid(reportRst.getString(3));
							dmapobj.setEst_not_sanctioned(reportRst.getString(4));
							dmapobj.setEst_not_created(reportRst.getString(5));
							dmapobj.setTotal(reportRst.getString(6));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	public CscpayVO getTotalLTAddLoadScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {} else if ("SUB_DIV".equals(cscvo.getFlag())) {} else if ("SEC".equals(cscvo.getFlag())) {} else {
					
					
					
					String query = "SELECT NVL(s.cirname,'TOTAL'),\r\n" + 
							"  COUNT(a.zregid) paid,\r\n" + 
							"  COUNT(b.zregid) not_paid,\r\n" + 
							"  COUNT(c.zregid) estimate_to_be_sanctioned,\r\n" + 
							"  COUNT(d.zregid) estimate_not_created ,\r\n" + 
							"  COUNT(a.zregid)+COUNT(b.zregid)+COUNT(c.zregid)+COUNT(d.zregid) total\r\n" + 
							"FROM\r\n" + 
							"  (SELECT zregid,SUBSTR(zregid,1,5) FROM it_all_LT  WHERE TRIM(ZREGID) IN  (SELECT REG_NO FROM NEW_COMPLAINTS N WHERE  COMPLAINT=9 AND SUB_COMPLAINT=9 )\r\n" + 
							"  )p,\r\n" + 
							"  (SELECT zregid,\r\n" + 
							"    SUBSTR(zregid,1,5)\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Payment paid'\r\n" + 
							"  AND zrequest_type='AL'\r\n" + 
							"  )a,\r\n" + 
							"  (SELECT zregid,\r\n" + 
							"    SUBSTR(zregid,1,5)\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Payment not paid'\r\n" + 
							"  AND zrequest_type='AL'\r\n" + 
							"  )b,\r\n" + 
							"  (SELECT zregid,\r\n" + 
							"    SUBSTR(zregid,1,5)\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Estimate not approved'\r\n" + 
							"  AND zrequest_type='AL'\r\n" + 
							"  )c,\r\n" + 
							"  (SELECT zregid,\r\n" + 
							"    SUBSTR(zregid,1,5)\r\n" + 
							"  FROM it_all_LT\r\n" + 
							"  WHERE status     ='Estimate not created'\r\n" + 
							"  AND zrequest_type='AL'\r\n" + 
							"  )d,\r\n" + 
							"  (SELECT cirname,seccd FROM spdclmaster\r\n" + 
							"  )s\r\n" + 
							"WHERE p.zregid          =a.zregid(+)\r\n" + 
							"AND p.zregid            =b.zregid(+)\r\n" + 
							"AND p.zregid            =c.zregid(+)\r\n" + 
							"AND p.zregid            =d.zregid(+)\r\n" + 
							"AND SUBSTR(p.zregid,1,5)=seccd\r\n" + 
							"GROUP BY rollup(s.cirname)\r\n" + 
							"ORDER BY s.cirname";

					reportPStmt = con.prepareStatement(query);
					
					reportRst = reportPStmt.executeQuery();
					System.out.println("totallt:"+query);
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAmt_paid(reportRst.getString(2));
							dmapobj.setAmt_not_paid(reportRst.getString(3));
							dmapobj.setEst_not_sanctioned(reportRst.getString(4));
							dmapobj.setEst_not_created(reportRst.getString(5));
							dmapobj.setTotal(reportRst.getString(6));
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAmt_paid(reportRst.getString(2));
							dmapobj.setAmt_not_paid(reportRst.getString(3));
							dmapobj.setEst_not_sanctioned(reportRst.getString(4));
							dmapobj.setEst_not_created(reportRst.getString(5));
							dmapobj.setTotal(reportRst.getString(6));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
		
	}
	
	public CscpayVO getTotalHtAddLoadScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {} else if ("SUB_DIV".equals(cscvo.getFlag())) {} else if ("SEC".equals(cscvo.getFlag())) {} else {
					
					
					
					
					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(A.ZREGID) PAID,COUNT(B.ZREGID) NOT_PAID,COUNT(C.ZREGID) ESTIMATE_TO_BE_SANCTIONED,COUNT(D.ZREGID) ESTIMATE_NOT_CREATED ,COUNT(A.ZREGID)+COUNT(B.ZREGID)+COUNT(C.ZREGID)+COUNT(D.ZREGID) total FROM"
							+ " (SELECT ZREGID,SUBSTR(ZREGID,1,5) FROM IT_ALL)P,"
							+ " (SELECT ZREGID,SUBSTR(ZREGID,1,5) FROM IT_ALL WHERE STATUS='Payment paid' AND ZREQUEST_TYPE='AL')A,"
							+ " (SELECT ZREGID,SUBSTR(ZREGID,1,5) FROM IT_ALL WHERE STATUS='Payment not paid' AND ZREQUEST_TYPE='AL')B,"
							+ " (SELECT ZREGID,SUBSTR(ZREGID,1,5) FROM IT_ALL WHERE STATUS='Estimate not approved' AND ZREQUEST_TYPE='AL')C,"
							+ " (SELECT ZREGID,SUBSTR(ZREGID,1,5) FROM IT_ALL WHERE STATUS='Estimate not created' AND ZREQUEST_TYPE='AL')D,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S"
							+ " WHERE P.ZREGID=A.ZREGID(+)"
							+ " AND  P.ZREGID=B.ZREGID(+)"
							+ " AND  P.ZREGID=C.ZREGID(+)"
							+ " AND  P.ZREGID=D.ZREGID(+)"
							+ " AND SUBSTR(P.ZREGID,1,5)=SECCD"
							+ " GROUP  BY ROLLUP(S.CIRNAME) ORDER BY S.CIRNAME";

					reportPStmt = con.prepareStatement(query);
					
					reportRst = reportPStmt.executeQuery();
					System.out.println("totalht:"+query);
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAmt_paid(reportRst.getString(2));
							dmapobj.setAmt_not_paid(reportRst.getString(3));
							dmapobj.setEst_not_sanctioned(reportRst.getString(4));
							dmapobj.setEst_not_created(reportRst.getString(5));
							dmapobj.setTotal(reportRst.getString(6));
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAmt_paid(reportRst.getString(2));
							dmapobj.setAmt_not_paid(reportRst.getString(3));
							dmapobj.setEst_not_sanctioned(reportRst.getString(4));
							dmapobj.setEst_not_created(reportRst.getString(5));
							dmapobj.setTotal(reportRst.getString(6));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	public void ExportLTAdditionalLoadStatusWiseScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo) throws Exception{



		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("Ananthapur".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='7'";
					circle = " AND SUBSTR(S.SECCD,0,1)='7' ";
				} else if ("Kadapa".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='2'";
					circle = " AND SUBSTR(S.SECCD,0,1)='2' ";
				} else if ("Tirupathi".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='5'";
					circle = " AND SUBSTR(S.SECCD,0,1)='5' ";
				} else if ("Kurnool".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='8'";
					circle = " AND SUBSTR(S.SECCD,0,1)='8' ";
				} else if ("Nellore".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='3'";
					circle = " AND SUBSTR(S.SECCD,0,1)='3' ";
				} else {
					circle = " ";
				}
				//System.out.println(cscvo.getCircle());

				

					
				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if("RelesedAfterPaidByConsumer".equalsIgnoreCase(cscvo.getStatus())){
				if ("LT".equalsIgnoreCase(cscvo.getType())) {
					

					if ("tot_amount_paid".equalsIgnoreCase(cscvo.getCtype())) {
						
						resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
								"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
								"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type='AL') AND COMPLAINT=9 AND SUB_COMPLAINT=9)N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=SECCD  AND S.CIRNAME='"+cscvo.getCircle()+"'");
						
					}
					else if ("getwrt".equalsIgnoreCase(cscvo.getCtype())) {
						
						
						resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
								"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
								"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type='AL') AND COMPLAINT=9 AND SUB_COMPLAINT=9 AND  remarks='WRT')N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=SECCD  \r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"'");
					} 
					else if ("getGtr2months".equalsIgnoreCase(cscvo.getCtype())) {
						
						
						resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
								"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
								"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type='AL'  AND zmonth = 2 AND ZMONTH >=2) AND COMPLAINT=9 AND SUB_COMPLAINT=9 )N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=SECCD  \r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"'");
					} 
					else if ("getGtr3months".equalsIgnoreCase(cscvo.getCtype()))
					{
						resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
								"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
								"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type='AL'  AND zmonth = 3 AND ZMONTH >=3) AND COMPLAINT=9 AND SUB_COMPLAINT=9 )N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=SECCD  \r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"'");
					}
				   
					else if ("getGtr4months".equalsIgnoreCase(cscvo.getCtype()))
				  {
						resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
								"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
								"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type='AL'  AND zmonth = 4 AND ZMONTH >=4) AND COMPLAINT=9 AND SUB_COMPLAINT=9 )N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=SECCD  \r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"'");
				  }else if("getSubTotal".equalsIgnoreCase(cscvo.getCtype()))
				  {
					  resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
								"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
								"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type='AL'  AND ((ZMONTH = 2 AND ZMONTH > =2) or ( ZMONTH =3 AND ZMONTH >=3) or (ZMONTH = 4 AND ZMONTH >=4))) AND COMPLAINT=9 AND SUB_COMPLAINT=9 )N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=SECCD  \r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"'");
				  }
					
				
				}
				}
				if("EstimateSanctionedAndAmtPaid".equalsIgnoreCase(cscvo.getStatus())){
					if ("LT".equalsIgnoreCase(cscvo.getType())) {
						
						
						if ("tot_amount_paid".equalsIgnoreCase(cscvo.getCtype())) {
							
							resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
									"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
									"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type='AL') AND COMPLAINT=9 AND SUB_COMPLAINT=9)N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.CSPARTCD=SECCD  AND S.CIRNAME='"+cscvo.getCircle()+"'");
							
						}
						else if ("getwrt".equalsIgnoreCase(cscvo.getCtype())) {
							
							
							resultSet = statement.executeQuery("");
						} 
						else if ("getGtr2months".equalsIgnoreCase(cscvo.getCtype())) {
							
							
							resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
									"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
									"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type='AL'  AND zmonth = 2 AND ZMONTH >=2) AND COMPLAINT=9 AND SUB_COMPLAINT=9 )N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.CSPARTCD=SECCD  \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"'");
						} 
						else if ("getGtr3months".equalsIgnoreCase(cscvo.getCtype()))
						{
							resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
									"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
									"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type='AL'  AND zmonth = 3 AND ZMONTH >=3) AND COMPLAINT=9 AND SUB_COMPLAINT=9 )N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.CSPARTCD=SECCD  \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"'");
						}
						
						else if ("getGtr4months".equalsIgnoreCase(cscvo.getCtype()))
						{
							resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
									"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
									"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type='AL'  AND zmonth = 4 AND ZMONTH >=4) AND COMPLAINT=9 AND SUB_COMPLAINT=9 )N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.CSPARTCD=SECCD  \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"'");
						}else if("getSubTotal".equalsIgnoreCase(cscvo.getCtype()))
						{
							resultSet = statement.executeQuery("");
						}
						
						
					}
				}
				if("EstimateToBeSanctioned".equalsIgnoreCase(cscvo.getStatus())){
					if ("LT".equalsIgnoreCase(cscvo.getType())) {
						
						
						if ("tot_amount_paid".equalsIgnoreCase(cscvo.getCtype())) {
							
							resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
									"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
									"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type='AL') AND COMPLAINT=9 AND SUB_COMPLAINT=9)N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.CSPARTCD=SECCD  AND S.CIRNAME='"+cscvo.getCircle()+"'");
							
						}
						else if ("getwrt".equalsIgnoreCase(cscvo.getCtype())) {
							
							
							resultSet = statement.executeQuery("");
						} 
						else if ("getGtr2months".equalsIgnoreCase(cscvo.getCtype())) {
							
							
							resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
									"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
									"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type='AL'  AND zmonth = 2 AND ZMONTH >=2) AND COMPLAINT=9 AND SUB_COMPLAINT=9 )N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.CSPARTCD=SECCD  \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"'");
						} 
						else if ("getGtr3months".equalsIgnoreCase(cscvo.getCtype()))
						{
							resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
									"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
									"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type='AL'  AND zmonth = 3 AND ZMONTH >=3) AND COMPLAINT=9 AND SUB_COMPLAINT=9 )N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.CSPARTCD=SECCD  \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"'");
						}
						
						else if ("getGtr4months".equalsIgnoreCase(cscvo.getCtype()))
						{
							resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
									"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
									"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type='AL'  AND zmonth = 4 AND ZMONTH >=4) AND COMPLAINT=9 AND SUB_COMPLAINT=9 )N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.CSPARTCD=SECCD  \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"'");
						}else if("getSubTotal".equalsIgnoreCase(cscvo.getCtype()))
						{
							resultSet = statement.executeQuery("");
						}
						
						
					}
				}
				if("EstimateNotCreated".equalsIgnoreCase(cscvo.getStatus())){
					if ("LT".equalsIgnoreCase(cscvo.getType())) {
						
						
						if ("tot_amount_paid".equalsIgnoreCase(cscvo.getCtype())) {
							
							resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
									"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
									"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type='AL') AND COMPLAINT=9 AND SUB_COMPLAINT=9)N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.CSPARTCD=SECCD  AND S.CIRNAME='"+cscvo.getCircle()+"'");
							
						}
						else if ("getwrt".equalsIgnoreCase(cscvo.getCtype())) {
							
							
							resultSet = statement.executeQuery("");
						} 
						else if ("getGtr2months".equalsIgnoreCase(cscvo.getCtype())) {
							
							
							resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
									"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
									"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type='AL'  AND zmonth = 2 AND ZMONTH >=2) AND COMPLAINT=9 AND SUB_COMPLAINT=9 )N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.CSPARTCD=SECCD  \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"'");
						} 
						else if ("getGtr3months".equalsIgnoreCase(cscvo.getCtype()))
						{
							resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
									"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
									"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type='AL'  AND zmonth = 3 AND ZMONTH >=3) AND COMPLAINT=9 AND SUB_COMPLAINT=9 )N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.CSPARTCD=SECCD  \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"'");
						}
						
						else if ("getGtr4months".equalsIgnoreCase(cscvo.getCtype()))
						{
							resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
									"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
									"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type='AL'  AND zmonth = 4 AND ZMONTH >=4) AND COMPLAINT=9 AND SUB_COMPLAINT=9 )N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.CSPARTCD=SECCD  \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"'");
						}else if("getSubTotal".equalsIgnoreCase(cscvo.getCtype()))
						{
							resultSet = statement.executeQuery("");
						}
						
						
					}
				}
					
				
				
				response.setContentType("application/download");
				
				response.setHeader("Content-Disposition", "attachment; filename=Status New Scs as " + cscvo.getCtype()
						+ "  Type:" + cscvo.getType() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					
				}

				
				response.setContentType("application/ms-excel");
				
				response.setHeader("Content-Disposition",
						"attachment; filename=LT ADDITIONAL LOAD SCS WISE " + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + ".xlsx");

				
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				
			} else {
				
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
	}
	
public void ExportCOMPNEWSERVICESAbsScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
	
			throws Exception{
	






	List<String> headerValues = new ArrayList<String>();

	// XSSFWorkbook workbook = new XSSFWorkbook();
	SXSSFWorkbook workbook = new SXSSFWorkbook();
	ResultSet resultSet = null;
	String table = "";
	String govttype = "";
	String counter = "";
	String complaint_type = "";
	String status = "";
	String circle = "";
	String substr = "";

	Calendar c = Calendar.getInstance();
	int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
										// you must add 1900 to the value
										// recevie.i.e., 1990+112 = 2012
	int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
											// receive 3 instead of 4.
	int cday = c.get(Calendar.DAY_OF_MONTH);

	String currentyear = String.valueOf(cyear);// calender year starts from
												// 1900 so you must add 1900
												// to the value
												// recevie.i.e., 1990+112 =
												// 2012
	String currentmonth = String.valueOf(cmonth);

	if (currentmonth.length() == 1) {
		currentmonth = "0" + currentmonth;
	}

	String currentmonthYear = currentmonth + "-" + currentyear;

	Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
	Statement statement = con.createStatement();

	try {
		if (con != null) {

			if ("Ananthapur".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='7'";
				circle = " AND SUBSTR(S.SECCD,0,1)='7' ";
			} else if ("Kadapa".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='2'";
				circle = " AND SUBSTR(S.SECCD,0,1)='2' ";
			} else if ("Tirupathi".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='5'";
				circle = " AND SUBSTR(S.SECCD,0,1)='5' ";
			} else if ("Kurnool".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='8'";
				circle = " AND SUBSTR(S.SECCD,0,1)='8' ";
			} else if ("Nellore".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='3'";
				circle = " AND SUBSTR(S.SECCD,0,1)='3' ";
			} else {
				circle = " ";
			}
			//System.out.println(cscvo.getCircle());

			Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
			/*if ("HT".equalsIgnoreCase(cscvo.getType())) {
				substr="AND SUBSTR(N.REG_NO,6,1)='C'";
				
			}
			else
				
				if("LT".equalsIgnoreCase(cscvo.getType())){
					substr="AND SUBSTR(N.REG_NO,6,1) IN ('S','N')";
				}
				else if("COMP".equalsIgnoreCase(cscvo.getType()))
					
				{
					substr="AND SUBSTR(N.REG_NO,6,1)='C'";
				}*/
			

				
			SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

			
			
				

				if ("AMT_PAID_BRT".equalsIgnoreCase(cscvo.getCtype())) {
					
					if ("DIV".equals(cscvo.getFlag())) {

						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
								"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
								"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB WHERE STATUS='balance' AND COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11') AND \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='AL'   UNION\r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='AL' UNION\r\n" + 
								"(SELECT REG_NO FROM NEWCOMP_TAB WHERE  REMARKS='balance' ))))N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=S.SECCD\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='C'\r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"'");
						

						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {

						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
								"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
								"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB WHERE STATUS='balance' AND COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11') AND \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='AL'   UNION\r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='AL' UNION\r\n" + 
								"(SELECT REG_NO FROM NEWCOMP_TAB WHERE  REMARKS='balance' ))))N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=S.SECCD\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='C'\r\n" + 
								"\r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'");
					
					
					} else if ("SEC".equals(cscvo.getFlag())) {

						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
								"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
								"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB WHERE STATUS='balance' AND COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11') AND \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='AL'   UNION\r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='AL' UNION\r\n" + 
								"(SELECT REG_NO FROM NEWCOMP_TAB WHERE  REMARKS='balance' ))))N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=S.SECCD\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='C'\r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'");
					
					} else {
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
								"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
								"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB WHERE STATUS='balance' AND COMPLAINT=9 AND SUB_COMPLAINT IN ('9','11') AND \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='AL'   UNION\r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='AL' UNION\r\n" + 
								"(SELECT REG_NO FROM NEWCOMP_TAB WHERE  REMARKS='balance' ))))N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=S.SECCD\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='C'\r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "'");
						
						
					}

					
				}
				
				else if ("AMT_N_PAID".equalsIgnoreCase(cscvo.getCtype())) {
					
					
                   if ("DIV".equals(cscvo.getFlag())) {

						
                	   resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
						 		"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
						 		"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
						 		"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
						 		"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB  \r\n" + 
						 		"WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='AL'   UNION\r\n" + 
						 		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='AL')))N,\r\n" + 
						 		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
						 		"WHERE N.CSPARTCD=S.SECCD\r\n" + 
						 		"AND SUBSTR(N.REG_NO,6,1) ='C'\r\n" + 
						 		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'");
						

						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {

						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
						 		"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
						 		"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
						 		"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
						 		"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB  \r\n" + 
						 		"WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='AL'   UNION\r\n" + 
						 		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='AL')))N,\r\n" + 
						 		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
						 		"WHERE N.CSPARTCD=S.SECCD\r\n" + 
						 		"AND SUBSTR(N.REG_NO,6,1) ='C'\r\n" + 
						 		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'");
						
					} else if ("SEC".equals(cscvo.getFlag())) {

						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
						 		"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
						 		"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
						 		"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
						 		"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB  \r\n" + 
						 		"WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='AL'   UNION\r\n" + 
						 		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='AL')))N,\r\n" + 
						 		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
						 		"WHERE N.CSPARTCD=S.SECCD\r\n" + 
						 		"AND SUBSTR(N.REG_NO,6,1) ='C'\r\n" + 
						 		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'");
						
						 
					
					
					} else {
						
						 resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
						 		"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
						 		"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
						 		"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
						 		"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB  \r\n" + 
						 		"WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='AL'   UNION\r\n" + 
						 		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='AL')))N,\r\n" + 
						 		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
						 		"WHERE N.CSPARTCD=S.SECCD\r\n" + 
						 		"AND SUBSTR(N.REG_NO,6,1) ='C'\r\n" + 
						 		"AND S.CIRNAME='"+cscvo.getCircle()+"'");
						
					};
				} 
				/*else if ("EST_N_SANCTIONED_wrt".equalsIgnoreCase(cscvo.getCtype()))
				{
                   if ("DIV".equals(cscvo.getFlag())) {

						
                	   resultSet = statement.executeQuery("");
						
						

						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {

						
						resultSet = statement.executeQuery("");
						
					} else if ("SEC".equals(cscvo.getFlag())) {

						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
	                	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
	                	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
	                	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
	                	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
	                	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
	                	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
	                	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
	                	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
	                	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
	                	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
	                	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
	                	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
	                	   		"AND SUBSTR(N.REG_NO,6,1) ='C'\r\n" + 
	                	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'\r\n" + 
	                	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
					} else {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
	                	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
	                	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
	                	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
	                	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
	                	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
	                	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
	                	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
	                	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
	                	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
	                	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
	                	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
	                	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
	                	   		"AND SUBSTR(N.REG_NO,6,1) ='C'\r\n" + 
	                	   		"AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
	                	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
						
						
					}
				}*/
				
				
				else if ("EST_N_SANCTIONED_brt".equalsIgnoreCase(cscvo.getCtype()))
				{
					if ("DIV".equals(cscvo.getFlag())) {
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
								"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
								"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB WHERE  \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='C'\r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'\r\n" + 
								"");
						
						
						
						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
								"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
								"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB WHERE  \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='C'\r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'\r\n" + 
								"");
					
					
					} else if ("SEC".equals(cscvo.getFlag())) {
						
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
								"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
								"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB WHERE  \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='C'\r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'\r\n" + 
								"");
					
					} else {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
								"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
								"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB WHERE  \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='AL' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='C'\r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
								"");
						
					}
				}
				
				
				
			   
				/*else if ("EST_N_CREATED_wrt".equalsIgnoreCase(cscvo.getCtype()))
			  {
                       if ("DIV".equals(cscvo.getFlag())) {

						
                    	   resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
                    	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
                    	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
                    	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
                    	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
                    	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
                    	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
                    	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
                    	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
                    	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
                    	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
                    	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
                    	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
                    	   		"AND SUBSTR(N.REG_NO,6,1) ='C' \r\n" + 
                    	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'\r\n" + 
                    	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");

						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {

						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
                    	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
                    	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
                    	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
                    	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
                    	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
                    	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
                    	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
                    	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
                    	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
                    	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
                    	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
                    	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
                    	   		"AND SUBSTR(N.REG_NO,6,1) ='C' \r\n" + 
                    	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'\r\n" + 
                    	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
						
					} else if ("SEC".equals(cscvo.getFlag())) {

						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
                    	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
                    	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
                    	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
                    	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
                    	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
                    	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
                    	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
                    	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
                    	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
                    	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
                    	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
                    	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
                    	   		"AND SUBSTR(N.REG_NO,6,1) ='C' \r\n" + 
                    	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'\r\n" + 
                    	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
					
					} else {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
                    	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
                    	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
                    	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
                    	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
                    	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
                    	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
                    	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
                    	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
                    	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
                    	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
                    	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
                    	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
                    	   		"AND SUBSTR(N.REG_NO,6,1) ='C' \r\n" + 
                    	   		"AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
                    	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
						
					}
					
			  }*/
				else if ("EST_N_CREATED_brt".equalsIgnoreCase(cscvo.getCtype()))
				{
					if ("DIV".equals(cscvo.getFlag())) {
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
								"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
								"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB WHERE \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='AL' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='AL' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='C' \r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"'");
						
						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
								"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
								"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB WHERE \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='AL' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='AL' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='C' \r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'");
						
						
					} else if ("SEC".equals(cscvo.getFlag())) {
						
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
								"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
								"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB WHERE \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='AL' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='AL' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='C' \r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'");
						
						
					} else {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
								"(select cSpartcd,CUSTOMER_name,reg_no,SUBSTR(PRESENT_CATEGORY,1,3)CATEGORY,CONTRACTLOAD LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(FIRSTDEM_DATE,intimate_date)DEMAND_ISSUED,nvl(FIRSTDEM_DATE,intimate_date)+1 SMS_DATE,trunc(nvl(FIRSTDEM_DATE,intimate_date))-trunc(reg_date) demand_days_taken,nvl(coll,0) paid_amount,PAYDT PAID_DATE,\r\n" + 
								"trunc(sysdate)-nvl(PAYDT,'01-JAN-00')NOOF_DAYS_ON_SYSDATE from NEWCOMP_TAB WHERE \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='AL' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='AL' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='C' \r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "'");
						
					}
					
				}
				
				/*else if ("EST_N_CREATED_brt".equalsIgnoreCase(cscvo.getCtype()))*/
								
				
				
				
				else if("TOT".equalsIgnoreCase(cscvo.getCtype()))
			  {
				  if ("DIV".equals(cscvo.getFlag())) {

						
						resultSet = statement.executeQuery("");
						

						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {

						
						resultSet = statement.executeQuery("");
						
					} else if ("SEC".equals(cscvo.getFlag())) {

						
						
						resultSet = statement.executeQuery("");
					} else {
						
						resultSet = statement.executeQuery("");
						
						
					}
			  }
				
			
			
				
			
			response.setContentType("application/download");
			
			response.setHeader("Content-Disposition", "attachment; filename=Status New Scs as " + cscvo.getCtype()
					+ "  Type:" + cscvo.getType() + ".xlsx");

			SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
			SXSSFCell cell;
			int cc = resultSet.getMetaData().getColumnCount();
			for (int i = 1; i <= cc; i++) {
				String headerVal = resultSet.getMetaData().getColumnName(i);
				headerValues.add(headerVal);
				cell = (SXSSFCell) row.createCell(i - 1);
				cell.setCellValue(resultSet.getMetaData().getColumnName(i));
			}
			// //System.out.println.println(headerValues);

			int i = 1, count = 0;
			while (resultSet.next()) {

				SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
				for (int p = 0; p < headerValues.size(); p++) {
					if (resultSet.getString(headerValues.get(p)) != null) {
						row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
					}

				}
				i++;
				count++;
				if (count == 100) {
					spreadsheet.flushRows();
					count = 0;
				}
				
			}

			
			response.setContentType("application/ms-excel");
			
			response.setHeader("Content-Disposition",
					"attachment; filename=ADDITIONAL_LOAD_SERVICES_ABSTRACT " + cscvo.getCtype()
							+ "  Type:" + cscvo.getType() + ".xlsx");

			
			OutputStream outputStream = response.getOutputStream();
			workbook.write(outputStream);
			outputStream.flush();
			workbook.dispose();
			
		} else {
			
		}
	} catch (Exception e) {
		e.printStackTrace();
		// logger.error("Exception: DcbReportsDAO " + e.getMessage());
		// System.out.println.println(e);
	} finally {

		if (con != null) {

			DBConnectionManager.getInstance().freeConnection(con);
			con.close();
		}
		if (statement != null) {
			statement.close();
		}
		if (statement != null) {
			statement.close();
		}

	}

}

public void ExportHTTrackingAbsScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)

		throws Exception{
	






	List<String> headerValues = new ArrayList<String>();

	// XSSFWorkbook workbook = new XSSFWorkbook();
	SXSSFWorkbook workbook = new SXSSFWorkbook();
	ResultSet resultSet = null;
	String table = "";
	String govttype = "";
	String counter = "";
	String complaint_type = "";
	String status = "";
	String circle = "";
	String substr = "";

	Calendar c = Calendar.getInstance();
	int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
										// you must add 1900 to the value
										// recevie.i.e., 1990+112 = 2012
	int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
											// receive 3 instead of 4.
	int cday = c.get(Calendar.DAY_OF_MONTH);

	String currentyear = String.valueOf(cyear);// calender year starts from
												// 1900 so you must add 1900
												// to the value
												// recevie.i.e., 1990+112 =
												// 2012
	String currentmonth = String.valueOf(cmonth);

	if (currentmonth.length() == 1) {
		currentmonth = "0" + currentmonth;
	}
	System.out.println(cscvo.getFrom_date()); 
	System.out.println(cscvo.getTo_date());

	String currentmonthYear = currentmonth + "-" + currentyear;

	Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
	Statement statement = con.createStatement();

	try {
		if (con != null) {

			if ("Ananthapur".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='7'";
				circle = " AND SUBSTR(S.SECCD,0,1)='7' ";
			} else if ("Kadapa".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='2'";
				circle = " AND SUBSTR(S.SECCD,0,1)='2' ";
			} else if ("Tirupathi".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='5'";
				circle = " AND SUBSTR(S.SECCD,0,1)='5' ";
			} else if ("Kurnool".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='8'";
				circle = " AND SUBSTR(S.SECCD,0,1)='8' ";
			} else if ("Nellore".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='3'";
				circle = " AND SUBSTR(S.SECCD,0,1)='3' ";
			} else {
				circle = " ";
			}
			//System.out.println(cscvo.getCircle());

			Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
			/*if ("HT".equalsIgnoreCase(cscvo.getType())) {
				substr="AND SUBSTR(N.REG_NO,6,1)='H'";
				
			}
			else
				
				if("LT".equalsIgnoreCase(cscvo.getType())){
					substr="AND SUBSTR(N.REG_NO,6,1) IN ('S','N')";
				}
				else if("COMP".equalsIgnoreCase(cscvo.getType()))
					
				{
					substr="AND SUBSTR(N.REG_NO,6,1)='C'";
				}*/
			

				
			SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

			
			
				

				if ("tot_app".equalsIgnoreCase(cscvo.getCtype())) {
					
					if ("DIV".equals(cscvo.getFlag())) {

						if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {

						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,TOTAMT COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND ((substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL') OR STATUS='Estimate not created'\r\n" + 
								"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='"+cscvo.getDivision()+"' \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						}

						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,TOTAMT COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND ((substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL') OR STATUS='Estimate not created'\r\n" + 
								"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND CIRNAME='" + cscvo.getCircle() + "'  \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");

						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {

						if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,TOTAMT COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND ((substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL') OR STATUS='Estimate not created'\r\n" + 
								"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='"+cscvo.getDivision()+"'  AND SUBNAME='"+cscvo.getSubDiv()+"'\r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						}else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,TOTAMT COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND ((substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL') OR STATUS='Estimate not created'\r\n" + 
									"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='"+cscvo.getDivision()+"'  \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");	
						}
						
					} else if ("SEC".equals(cscvo.getFlag())) {

						if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,TOTAMT COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND ((substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL') OR STATUS='Estimate not created'\r\n" + 
								"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='"+cscvo.getDivision()+"'  AND SUBNAME='"+cscvo.getSubDiv()+"' AND SECNAME='"+cscvo.getSec()+"'\r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						}else
						{

							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,TOTAMT COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND ((substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL') OR STATUS='Estimate not created'\r\n" + 
									"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND CIRNAME='" + cscvo.getCircle() + "' AND DIVNAME='"+cscvo.getDivision()+"'  AND SUBNAME='"+cscvo.getSubDiv()+"' \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
						}
					
					
					} else {
						 
						System.out.println(cscvo.getFrom_date()); 
						System.out.println(cscvo.getTo_date());
						
						
						
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())){
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,TOTAMT COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND ((substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL') OR STATUS='Estimate not created'\r\n" + 
								"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND CIRNAME='" + cscvo.getCircle() + "'\r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
							"");
						}else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,TOTAMT COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND ((substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL') OR STATUS='Estimate not created'\r\n" + 
									"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						}
						
						
					}

					
				}
				if ("tot_estimates".equalsIgnoreCase(cscvo.getCtype())) {
					
					if ("DIV".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS NOT IN ('Estimate not created', 'Estimate not approved','Payment not paid') OR \r\n" + 
								"substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'  \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						
						}else
						
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS NOT IN ('Estimate not created', 'Estimate not approved','Payment not paid') OR \r\n" + 
									"substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'   \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
							
						}
						
						
						
					 else if ("SUB_DIV".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS NOT IN ('Estimate not created', 'Estimate not approved','Payment not paid') OR \r\n" + 
								"substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS NOT IN ('Estimate not created', 'Estimate not approved','Payment not paid') OR \r\n" + 
									"substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'  \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
							
						}
						
						
					} else if ("SEC".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						

						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS NOT IN ('Estimate not created', 'Estimate not approved','Payment not paid') OR \r\n" + 
								"substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  AND  S.SECNAME='"+cscvo.getSec()+"'\r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						}
						
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS NOT IN ('Estimate not created', 'Estimate not approved','Payment not paid') OR \r\n" + 
									"substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
							}
						}
					
					
					 else {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())){
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS NOT IN ('Estimate not created', 'Estimate not approved','Payment not paid') OR \r\n" + 
								"substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						}
						else
						{
							
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS NOT IN ('Estimate not created', 'Estimate not approved','Payment not paid') OR \r\n" + 
									"substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
							
					 }	
					
					 }
					}
				
				
				 
	
				
				/*else if ("EST_N_SANCTIONED_brt".equalsIgnoreCase(cscvo.getCtype()))*/
				
				
			   
				
				
				
				/*else if ("EST_N_CREATED_brt".equalsIgnoreCase(cscvo.getCtype()))*/
								
				
				
				else if("PNE_EST_CREATED".equalsIgnoreCase(cscvo.getCtype()))
			  {
				  if ("DIV".equals(cscvo.getFlag())) {

					  if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
					 
						  resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not created' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
					  }
					  else{

						  resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not created' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' " + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						  
					  }
					  

						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {

						if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not created' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' " + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						}
						
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not created' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'  " + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
							
						}
						
					} else if ("SEC".equals(cscvo.getFlag())) {

						if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not created' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'  " + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not created' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'   " + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
							
							
						}
						
						
						
					} else {
						if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())){
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not created' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
					
						}
						else
						{
							
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not created' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						}
						
					}
			  }
				
				
				
				else if("EST_NOT_APPROVED".equalsIgnoreCase(cscvo.getCtype()))
				{
					if ("DIV".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not approved' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'  AND S.DIVNAME='"+cscvo.getDivision()+"'  \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						}
						else
						{
							

							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not approved' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'    \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
							
							
						}
						
						
						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {

						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not approved' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'  AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						}
						
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not approved' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'  AND S.DIVNAME='"+cscvo.getDivision()+"'   \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
							
						}
						
						
					} else if ("SEC".equals(cscvo.getFlag())) {
						
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not approved' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'  AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  AND S.SECNAME='"+cscvo.getSec()+"' \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not approved' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'  AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'   \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
							
							
						}
						
						
					} else {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())){
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not approved' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'   \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						}
						
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Estimate not approved' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD     \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
							
						}
						
						
					}
				}
				
				else if("TOTAL_PEN_EST_APR".equalsIgnoreCase(cscvo.getCtype()))
				{
					if ("DIV".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created' OR STATUS='Estimate not approved' )\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'  AND S.DIVNAME='"+cscvo.getDivision()+"'  \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created' OR STATUS='Estimate not approved' )\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'    \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
							
						
						}
						
						
						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created' OR STATUS='Estimate not approved' )\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'  AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created' OR STATUS='Estimate not approved' )\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'  AND S.DIVNAME='"+cscvo.getDivision()+"'   \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
							
						}
						
					} else if ("SEC".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created' OR STATUS='Estimate not approved' )\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'  AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"' \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created' OR STATUS='Estimate not approved' )\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'  AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
							
							
						}
						
					
					} else {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())){
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created' OR STATUS='Estimate not approved' )\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'  \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
						
						
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created' OR STATUS='Estimate not approved' )\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD   \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')");
							
							
						}
						
					
				
					}
			
				}
				
				
				
				else if("PAYMENT_NOT_PAID".equalsIgnoreCase(cscvo.getCtype()))
				{
					if ("DIV".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Payment not paid'\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'   AND S.DIVNAME='"+cscvo.getDivision()+"' \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Payment not paid'\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'    \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
							
						}
						
						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {
						
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Payment not paid'\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'   AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Payment not paid'\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'   AND S.DIVNAME='"+cscvo.getDivision()+"'  \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
							
						}
						
					} else if ("SEC".equals(cscvo.getFlag())) {
						
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Payment not paid'\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'   AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"' \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						}
						else{
							

							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Payment not paid'\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'   AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
							
						}
						
						
						} else {
							
							if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())){
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Payment not paid'\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
							}
							
							else
								
							{
								resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
										"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
										"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND STATUS='Payment not paid'\r\n" + 
										" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
										"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
										"WHERE R.NCPARTCD=S.SECCD \r\n" + 
										"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
										"");
						}
						
					}
				}
				else if("PEN_FOR_REL_ORDER".equalsIgnoreCase(cscvo.getCtype()))
				{
					if ("DIV".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND REL_ON IS NULL AND STATUS='Payment paid'\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'\r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND REL_ON IS NULL AND STATUS='Payment paid'\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");	
							
						}
						
						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND REL_ON IS NULL AND STATUS='Payment paid'\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						
						}
						
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND REL_ON IS NULL AND STATUS='Payment paid'\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
						}
						
					} else if ("SEC".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
								resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
										"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
										"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND REL_ON IS NULL AND STATUS='Payment paid'\r\n" + 
										" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
										"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
										"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  AND S.SECNAME='"+cscvo.getSec()+"'\r\n" + 
										"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
										"");
						}
						else
						{

							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND REL_ON IS NULL AND STATUS='Payment paid'\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
						}
								
					} else {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())){
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND REL_ON IS NULL AND STATUS='Payment paid'\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND REL_ON IS NULL AND STATUS='Payment paid'\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
						}
					}
				}
				
				else if("TOTAL_PENDING".equalsIgnoreCase(cscvo.getCtype()))
				{
					if ("DIV".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created'\r\n" + 
								"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD    AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created'\r\n" + 
									"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD    AND S.CIRNAME='"+cscvo.getCircle()+"'  \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
						}
						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created'\r\n" + 
								"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD    AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created'\r\n" + 
									"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD    AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
							
						}
						
					} else if ("SEC".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created'\r\n" + 
								"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD    AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"' \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created'\r\n" + 
									"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD    AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
						}
					} else {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())){
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created'\r\n" + 
								"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD    AND S.CIRNAME='"+cscvo.getCircle()+"' \r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						
						}
						else
						{

							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE  FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND (STATUS='Estimate not created'\r\n" + 
									"OR STATUS='Estimate not approved' OR STATUS='Payment not paid' OR REL_ON IS NULL AND STATUS='Payment paid')\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD     \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
						}
						
					}
				}
		
				else if("RELEASED".equalsIgnoreCase(cscvo.getCtype()))
				{
					if ("DIV".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
							
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'\r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
						}
						
						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {
						
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'\r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
						}
						
					} else if ("SEC".equals(cscvo.getFlag())) {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  AND S.SECNAME='"+cscvo.getSec()+"'\r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
						}
						
					} else {
						
						if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())){
						
						resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
								"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
								"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')\r\n" + 
								" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
								"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
								"");
						}
						else
						{
							resultSet = statement.executeQuery("SELECT REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,SUPPLY_RELEASE_DATE,USCNO,DEMAND,COLL,EXECUTION_TYPE FROM \r\n" + 
									"(SELECT NCPARTCD,REG_NO,REG_DATE,CONSUMER_NAME,ADDRESS,PHONE_NO,CATEGORY_SUPPLY,CONTRACTED_LOAD,AADHAAR,SUPPLY_RELEASE_DATE,USCNO,NVL(SAPDEM,EXTDEM) DEMAND,nvl(TOTAMT,GRP_COLL)COLL,\r\n" + 
									"EXECUTION_TYPE FROM REP_FINAL,IT_ALL  WHERE SUBSTR(REG_NO,6,1)='H'  AND REG_NO=TRIM(ZREGID(+)) AND substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')\r\n" + 
									" AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')R,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE R.NCPARTCD=S.SECCD \r\n" + 
									"AND TRUNC(REG_DATE) BETWEEN to_date('"+ cscvo.getFrom_date() + "','DD-MM-YY') and to_date('" + cscvo.getTo_date()+ "','DD-MM-YY')\r\n" + 
									"");
						}
						
					}
				}
				else if("EX".equalsIgnoreCase(cscvo.getCtype()))
				{
					if ("DIV".equals(cscvo.getFlag())) {
						
						
						resultSet = statement.executeQuery("");
						
						
						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {
						
						
						resultSet = statement.executeQuery("");
						
					} else if ("SEC".equals(cscvo.getFlag())) {
						
						
						
						resultSet = statement.executeQuery("");
					} else {
						
						resultSet = statement.executeQuery("");
						
						
					}
				}
				
				
			
			response.setContentType("application/download");
			
			response.setHeader("Content-Disposition", "attachment; filename=Status New Scs as " + cscvo.getCtype()
					+ "  Type:" + cscvo.getType() + ".xlsx");

			SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
			SXSSFCell cell;
			int cc = resultSet.getMetaData().getColumnCount();
			for (int i = 1; i <= cc; i++) {
				String headerVal = resultSet.getMetaData().getColumnName(i);
				headerValues.add(headerVal);
				cell = (SXSSFCell) row.createCell(i - 1);
				cell.setCellValue(resultSet.getMetaData().getColumnName(i));
			}
			// //System.out.println.println(headerValues);

			int i = 1, count = 0;
			while (resultSet.next()) {

				SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
				for (int p = 0; p < headerValues.size(); p++) {
					if (resultSet.getString(headerValues.get(p)) != null) {
						row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
					}

				}
				i++;
				count++;
				if (count == 100) {
					spreadsheet.flushRows();
					count = 0;
				}
				
			}

			
			response.setContentType("application/ms-excel");
			
			response.setHeader("Content-Disposition",
					"attachment; filename=HT_Tracking_ABSTRACT_Report " + cscvo.getCtype()
							+ "  Type:" + cscvo.getType() + ".xlsx");

			
			OutputStream outputStream = response.getOutputStream();
			workbook.write(outputStream);
			outputStream.flush();
			workbook.dispose();
			
		} else {
			
		}
	} catch (Exception e) {
		e.printStackTrace();
		// logger.error("Exception: DcbReportsDAO " + e.getMessage());
		// System.out.println.println(e);
	} finally {

		if (con != null) {

			DBConnectionManager.getInstance().freeConnection(con);
			con.close();
		}
		if (statement != null) {
			statement.close();
		}
		if (statement != null) {
			statement.close();
		}

	}


	
}
	
public void ExportHTNEWSERVICESAbsScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
	
			throws Exception{





	List<String> headerValues = new ArrayList<String>();

	// XSSFWorkbook workbook = new XSSFWorkbook();
	SXSSFWorkbook workbook = new SXSSFWorkbook();
	ResultSet resultSet = null;
	String table = "";
	String govttype = "";
	String counter = "";
	String complaint_type = "";
	String status = "";
	String circle = "";
	String substr = "";

	Calendar c = Calendar.getInstance();
	int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
										// you must add 1900 to the value
										// recevie.i.e., 1990+112 = 2012
	int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
											// receive 3 instead of 4.
	int cday = c.get(Calendar.DAY_OF_MONTH);

	String currentyear = String.valueOf(cyear);// calender year starts from
												// 1900 so you must add 1900
												// to the value
												// recevie.i.e., 1990+112 =
												// 2012
	String currentmonth = String.valueOf(cmonth);

	if (currentmonth.length() == 1) {
		currentmonth = "0" + currentmonth;
	}

	String currentmonthYear = currentmonth + "-" + currentyear;

	Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
	Statement statement = con.createStatement();

	try {
		if (con != null) {

			if ("Ananthapur".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='7'";
				circle = " AND SUBSTR(S.SECCD,0,1)='7' ";
			} else if ("Kadapa".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='2'";
				circle = " AND SUBSTR(S.SECCD,0,1)='2' ";
			} else if ("Tirupathi".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='5'";
				circle = " AND SUBSTR(S.SECCD,0,1)='5' ";
			} else if ("Kurnool".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='8'";
				circle = " AND SUBSTR(S.SECCD,0,1)='8' ";
			} else if ("Nellore".equalsIgnoreCase(cscvo.getCircle().trim())) {
				// circle=" and substr(ZREGID,0,1)='3'";
				circle = " AND SUBSTR(S.SECCD,0,1)='3' ";
			} else {
				circle = " ";
			}
			//System.out.println(cscvo.getCircle());

			Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
			/*if ("HT".equalsIgnoreCase(cscvo.getType())) {
				substr="AND SUBSTR(N.REG_NO,6,1)='H'";
				
			}
			else
				
				if("LT".equalsIgnoreCase(cscvo.getType())){
					substr="AND SUBSTR(N.REG_NO,6,1) IN ('S','N')";
				}
				else if("COMP".equalsIgnoreCase(cscvo.getType()))
					
				{
					substr="AND SUBSTR(N.REG_NO,6,1)='C'";
				}*/
			

				
			SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

			
			
				

				if ("AMT_PAID_WRT".equalsIgnoreCase(cscvo.getCtype())) {
					
					if ("DIV".equals(cscvo.getFlag())) {

						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
								"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1)='H' \r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' "+
								" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
						

						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {

						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
								"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1)='H' \r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' "+
								" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
						
					} else if ("SEC".equals(cscvo.getFlag())) {

						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
								"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1)='H' \r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"' "+
								" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
					} else {
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
								"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='H'" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "' "+
								" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
						
						
						
						
					}

					
				}
				if ("AMT_PAID_BRT".equalsIgnoreCase(cscvo.getCtype())) {
					
					if ("DIV".equals(cscvo.getFlag())) {
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
								"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1)='H' \r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' "+
								" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
						
						
						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
								"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1)='H' \r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME=''"+cscvo.getSubDiv()+" "+
								" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
						
					} else if ("SEC".equals(cscvo.getFlag())) {
						
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
								"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1)='H' \r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME=''"+cscvo.getSubDiv()+" AND S.SECNAME='"+cscvo.getSec()+"' "+
								" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
					} else {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
								"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1)='H' \r\n" + 
								"AND S.CIRNAME='" + cscvo.getCircle() + "' "+
								" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
						
						
						
						
					}
					
					
				}
				else if ("AMT_N_PAID".equalsIgnoreCase(cscvo.getCtype())) {
					
					
                   if ("DIV".equals(cscvo.getFlag())) {

						
                	   resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,trunc(sysdate)-trunc(nvl(MIN_TRANDT,intimate_date))NOOF_DAYS_ON_SYSDATE from rep_final  \r\n" + 
								"WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW')))N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1)='H' \r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' ");
						

						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {

						
						 resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
									"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,trunc(sysdate)-trunc(nvl(MIN_TRANDT,intimate_date))NOOF_DAYS_ON_SYSDATE from rep_final  \r\n" + 
									"WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW')))N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1)='H' \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' ");
						
					} else if ("SEC".equals(cscvo.getFlag())) {

						
						
						 resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
									"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,trunc(sysdate)-trunc(nvl(MIN_TRANDT,intimate_date))NOOF_DAYS_ON_SYSDATE from rep_final  \r\n" + 
									"WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW')))N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1)='H' \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"' ");
					} else {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
								"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,trunc(sysdate)-trunc(nvl(MIN_TRANDT,intimate_date))NOOF_DAYS_ON_SYSDATE from rep_final  \r\n" + 
								"WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW')))N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1)='H' " + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"'");
						
						
					};
				} 
				else if ("EST_N_SANCTIONED_wrt".equalsIgnoreCase(cscvo.getCtype()))
				{
                   if ("DIV".equals(cscvo.getFlag())) {

						
                	   resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
                	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
                	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
                	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
                	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
                	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
                	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
                	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
                	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
                	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
                	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
                	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
                	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
                	   		"AND SUBSTR(N.REG_NO,6,1) ='H'\r\n" + 
                	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'\r\n" + 
                	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
						
						

						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {

						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
	                	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
	                	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
	                	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
	                	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
	                	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
	                	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
	                	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
	                	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
	                	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
	                	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
	                	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
	                	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
	                	   		"AND SUBSTR(N.REG_NO,6,1) ='H'\r\n" + 
	                	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'\r\n" + 
	                	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
						
					} else if ("SEC".equals(cscvo.getFlag())) {

						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
	                	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
	                	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
	                	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
	                	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
	                	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
	                	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
	                	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
	                	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
	                	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
	                	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
	                	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
	                	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
	                	   		"AND SUBSTR(N.REG_NO,6,1) ='H'\r\n" + 
	                	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'\r\n" + 
	                	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
					} else {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
	                	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
	                	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
	                	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
	                	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
	                	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
	                	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
	                	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
	                	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
	                	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
	                	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
	                	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
	                	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
	                	   		"AND SUBSTR(N.REG_NO,6,1) ='H'\r\n" + 
	                	   		"AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
	                	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
						
						
					}
				}
				else if ("EST_N_SANCTIONED_brt".equalsIgnoreCase(cscvo.getCtype()))
				{
					if ("DIV".equals(cscvo.getFlag())) {
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='H'\r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'\r\n" + 
								"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
						
						
						
						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='H'\r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'\r\n" + 
								"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
						
					} else if ("SEC".equals(cscvo.getFlag())) {
						
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='H'\r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'\r\n" + 
								"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
					} else {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='H'\r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
								"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
						
						
					}
				}
				/*else if ("EST_N_SANCTIONED_brt".equalsIgnoreCase(cscvo.getCtype()))*/
				
				
			   
				else if ("EST_N_CREATED_wrt".equalsIgnoreCase(cscvo.getCtype()))
			  {
                       if ("DIV".equals(cscvo.getFlag())) {

						
                    	   resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
                    	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
                    	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
                    	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
                    	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
                    	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
                    	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
                    	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
                    	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
                    	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
                    	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
                    	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
                    	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
                    	   		"AND SUBSTR(N.REG_NO,6,1) ='H' \r\n" + 
                    	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'\r\n" + 
                    	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");

						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {

						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
                    	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
                    	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
                    	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
                    	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
                    	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
                    	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
                    	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
                    	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
                    	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
                    	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
                    	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
                    	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
                    	   		"AND SUBSTR(N.REG_NO,6,1) ='H' \r\n" + 
                    	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'\r\n" + 
                    	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
						
					} else if ("SEC".equals(cscvo.getFlag())) {

						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
                    	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
                    	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
                    	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
                    	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
                    	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
                    	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
                    	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
                    	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
                    	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
                    	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
                    	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
                    	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
                    	   		"AND SUBSTR(N.REG_NO,6,1) ='H' \r\n" + 
                    	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'\r\n" + 
                    	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
					
					} else {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
                    	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
                    	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
                    	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
                    	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
                    	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
                    	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
                    	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
                    	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
                    	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
                    	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
                    	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
                    	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
                    	   		"AND SUBSTR(N.REG_NO,6,1) ='H' \r\n" + 
                    	   		"AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
                    	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
						
					}
					
			  }
				else if ("EST_N_CREATED_brt".equalsIgnoreCase(cscvo.getCtype()))
				{
					if ("DIV".equals(cscvo.getFlag())) {
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='H' \r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'\r\n" + 
								"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
						
						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='H' \r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'\r\n" + 
								"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
						
					} else if ("SEC".equals(cscvo.getFlag())) {
						
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='H' \r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'\r\n" + 
								"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
						
					} else {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
								"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
								"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
								"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
								"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
								"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
								"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
								"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
								"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.NCPARTCD=S.SECCD\r\n" + 
								"AND N.REG_NO=A.REG_NO(+)\r\n" + 
								"AND SUBSTR(N.REG_NO,6,1) ='H' \r\n" + 
								"AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
								"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
						
					}
					
				}
				
				/*else if ("EST_N_CREATED_brt".equalsIgnoreCase(cscvo.getCtype()))*/
								
				
				
				else if("TOT".equalsIgnoreCase(cscvo.getCtype()))
			  {
				  if ("DIV".equals(cscvo.getFlag())) {

						
						resultSet = statement.executeQuery("");
						

						
					} else if ("SUB_DIV".equals(cscvo.getFlag())) {

						
						resultSet = statement.executeQuery("");
						
					} else if ("SEC".equals(cscvo.getFlag())) {

						
						
						resultSet = statement.executeQuery("");
					} else {
						
						resultSet = statement.executeQuery("");
						
						
					}
			  }
				
			
			
				
			
			response.setContentType("application/download");
			
			response.setHeader("Content-Disposition", "attachment; filename=Status New Scs as " + cscvo.getCtype()
					+ "  Type:" + cscvo.getType() + ".xlsx");

			SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
			SXSSFCell cell;
			int cc = resultSet.getMetaData().getColumnCount();
			for (int i = 1; i <= cc; i++) {
				String headerVal = resultSet.getMetaData().getColumnName(i);
				headerValues.add(headerVal);
				cell = (SXSSFCell) row.createCell(i - 1);
				cell.setCellValue(resultSet.getMetaData().getColumnName(i));
			}
			// //System.out.println.println(headerValues);

			int i = 1, count = 0;
			while (resultSet.next()) {

				SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
				for (int p = 0; p < headerValues.size(); p++) {
					if (resultSet.getString(headerValues.get(p)) != null) {
						row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
					}

				}
				i++;
				count++;
				if (count == 100) {
					spreadsheet.flushRows();
					count = 0;
				}
				
			}

			
			response.setContentType("application/ms-excel");
			
			response.setHeader("Content-Disposition",
					"attachment; filename=HT_ADDITIONAL_LOAD_SERVICES_ABSTRACT " + cscvo.getCtype()
							+ "  Type:" + cscvo.getType() + ".xlsx");

			
			OutputStream outputStream = response.getOutputStream();
			workbook.write(outputStream);
			outputStream.flush();
			workbook.dispose();
			
		} else {
			
		}
	} catch (Exception e) {
		e.printStackTrace();
		// logger.error("Exception: DcbReportsDAO " + e.getMessage());
		// System.out.println.println(e);
	} finally {

		if (con != null) {

			DBConnectionManager.getInstance().freeConnection(con);
			con.close();
		}
		if (statement != null) {
			statement.close();
		}
		if (statement != null) {
			statement.close();
		}

	}

}

	public void ExportLTNEWSERVICESAbsScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
	
			throws Exception{



		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";
		String substr = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("Ananthapur".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='7'";
					circle = " AND SUBSTR(S.SECCD,0,1)='7' ";
				} else if ("Kadapa".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='2'";
					circle = " AND SUBSTR(S.SECCD,0,1)='2' ";
				} else if ("Tirupathi".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='5'";
					circle = " AND SUBSTR(S.SECCD,0,1)='5' ";
				} else if ("Kurnool".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='8'";
					circle = " AND SUBSTR(S.SECCD,0,1)='8' ";
				} else if ("Nellore".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='3'";
					circle = " AND SUBSTR(S.SECCD,0,1)='3' ";
				} else {
					circle = " ";
				}
				//System.out.println(cscvo.getCircle());

				Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					substr="AND SUBSTR(R.REG_NO,6,1)='H'";
					
				}
				else
					
					if("LT".equalsIgnoreCase(cscvo.getType())){
						substr="AND SUBSTR(R.REG_NO,6,1) IN ('S','N')";
					}
					else if("COMP".equalsIgnoreCase(cscvo.getType()))
						
					{
						substr="AND SUBSTR(R.REG_NO,6,1)='C'";
					}
				
				
				/*if ("HT".equalsIgnoreCase(cscvo.getType())) {
					substr="AND SUBSTR(R.REG_NO,6,1)='H'";
					
				}
				else
					
					if("LT".equalsIgnoreCase(cscvo.getType())){
						substr=";
					}
					else if("COMP".equalsIgnoreCase(cscvo.getType()))
						
					{
						substr="AND SUBSTR(R.REG_NO,6,1)='C'";
					}*/
				
				
				

					
				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				
				
					

					if ("AMT_PAID_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						
						if ("DIV".equals(cscvo.getFlag())) {

							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
									"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
									"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' "+
									" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
							

							
						} else if ("SUB_DIV".equals(cscvo.getFlag())) {

							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
									"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
									"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' "+
									" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
							
						} else if ("SEC".equals(cscvo.getFlag())) {

							
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
									"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
									"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"' "+
									" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
						} else {
							
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
									"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND  SUBSTR(N.REG_NO,6,1) IN ('S','N')" + 
									"AND S.CIRNAME='" + cscvo.getCircle() + "' "+
									" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
							
							
							
							
						}

						
					}
					if ("AMT_PAID_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						
						if ("DIV".equals(cscvo.getFlag())) {
							
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
									"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
									"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' "+
									" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
							
							
							
						} else if ("SUB_DIV".equals(cscvo.getFlag())) {
							
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
									"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
									"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' "+
									" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
							
						} else if ("SEC".equals(cscvo.getFlag())) {
							
							
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
									"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
									"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"' "+
									" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
						} else {
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('01','02')) then '30' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '60'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '90'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '180' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE SLADESC='Pending for service release' AND \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment paid' AND  zrequest_type ='NEW' UNION\r\n" + 
									"(SELECT REG_NO FROM REP_FINAL WHERE SLADESC='Pending for service release' AND NVL(ESTSTATUS,'03')='01'))))N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
									"AND S.CIRNAME='" + cscvo.getCircle() + "' "+
									" AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
							
							
							
							
						}
						
						
					}
					else if ("AMT_N_PAID".equalsIgnoreCase(cscvo.getCtype())) {
						
						
                       if ("DIV".equals(cscvo.getFlag())) {

							
                    	   resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
									"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,trunc(sysdate)-trunc(nvl(MIN_TRANDT,intimate_date))NOOF_DAYS_ON_SYSDATE from rep_final  \r\n" + 
									"WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW')))N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' ");
							

							
						} else if ("SUB_DIV".equals(cscvo.getFlag())) {

							
							 resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
										"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
										"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
										"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,trunc(sysdate)-trunc(nvl(MIN_TRANDT,intimate_date))NOOF_DAYS_ON_SYSDATE from rep_final  \r\n" + 
										"WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
										"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW')))N,\r\n" + 
										"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
										"WHERE N.NCPARTCD=S.SECCD\r\n" + 
										"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
										"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' ");
							
						} else if ("SEC".equals(cscvo.getFlag())) {

							
							
							 resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
										"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
										"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
										"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,trunc(sysdate)-trunc(nvl(MIN_TRANDT,intimate_date))NOOF_DAYS_ON_SYSDATE from rep_final  \r\n" + 
										"WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
										"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW')))N,\r\n" + 
										"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
										"WHERE N.NCPARTCD=S.SECCD\r\n" + 
										"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
										"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"' ");
						} else {
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.DEMAND_ISSUED,N.SMS_DATE,N.demand_days_taken,\r\n" + 
									"N.NOOF_DAYS_ON_SYSDATE  FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,trunc(sysdate)-trunc(nvl(MIN_TRANDT,intimate_date))NOOF_DAYS_ON_SYSDATE from rep_final  \r\n" + 
									"WHERE REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW'   UNION\r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Payment not paid' AND  zrequest_type ='NEW')))N,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') " + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"'");
							
							
						};
					} 
					else if ("EST_N_SANCTIONED_wrt".equalsIgnoreCase(cscvo.getCtype()))
					{
	                   if ("DIV".equals(cscvo.getFlag())) {

							
	                	   resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
	                	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
	                	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
	                	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
	                	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
	                	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
	                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
	                	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
	                	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
	                	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
	                	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
	                	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
	                	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
	                	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
	                	   		"AND SUBSTR(N.REG_NO,6,1) IN ('S','N')\r\n" + 
	                	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'\r\n" + 
	                	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
							
							

							
						} else if ("SUB_DIV".equals(cscvo.getFlag())) {

							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
		                	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
		                	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
		                	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
		                	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
		                	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
		                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
		                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
		                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
		                	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
		                	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
		                	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
		                	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
		                	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
		                	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
		                	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
		                	   		"AND SUBSTR(N.REG_NO,6,1) IN ('S','N')\r\n" + 
		                	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'\r\n" + 
		                	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
							
						} else if ("SEC".equals(cscvo.getFlag())) {

							
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
		                	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
		                	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
		                	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
		                	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
		                	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
		                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
		                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
		                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
		                	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
		                	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
		                	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
		                	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
		                	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
		                	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
		                	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
		                	   		"AND SUBSTR(N.REG_NO,6,1) IN ('S','N')\r\n" + 
		                	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'\r\n" + 
		                	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
						} else {
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
		                	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
		                	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
		                	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
		                	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
		                	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
		                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
		                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
		                	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
		                	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
		                	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
		                	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
		                	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
		                	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
		                	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
		                	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
		                	   		"AND SUBSTR(N.REG_NO,6,1) IN ('S','N')\r\n" + 
		                	   		"AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
		                	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
							
							
						}
					}
					else if ("EST_N_SANCTIONED_brt".equalsIgnoreCase(cscvo.getCtype()))
					{
						if ("DIV".equals(cscvo.getFlag())) {
							
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
									"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND N.REG_NO=A.REG_NO(+)\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N')\r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'\r\n" + 
									"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
							
							
							
							
						} else if ("SUB_DIV".equals(cscvo.getFlag())) {
							
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
									"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND N.REG_NO=A.REG_NO(+)\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N')\r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'\r\n" + 
									"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
							
						} else if ("SEC".equals(cscvo.getFlag())) {
							
							
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
									"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND N.REG_NO=A.REG_NO(+)\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N')\r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'\r\n" + 
									"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
						} else {
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '7' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '15'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '30'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '45' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' UNION \r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not approved' AND  zrequest_type ='NEW' )))N,\r\n" + 
									"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND N.REG_NO=A.REG_NO(+)\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N')\r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
									"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
							
							
						}
					}
					/*else if ("EST_N_SANCTIONED_brt".equalsIgnoreCase(cscvo.getCtype()))*/
					
					
				   
					else if ("EST_N_CREATED_wrt".equalsIgnoreCase(cscvo.getCtype()))
				  {
	                       if ("DIV".equals(cscvo.getFlag())) {

							
	                    	   resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
	                    	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
	                    	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
	                    	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
	                    	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
	                    	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
	                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
	                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
	                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
	                    	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
	                    	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
	                    	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
	                    	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
	                    	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
	                    	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
	                    	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
	                    	   		"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
	                    	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'\r\n" + 
	                    	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");

							
						} else if ("SUB_DIV".equals(cscvo.getFlag())) {

							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
	                    	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
	                    	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
	                    	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
	                    	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
	                    	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
	                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
	                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
	                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
	                    	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
	                    	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
	                    	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
	                    	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
	                    	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
	                    	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
	                    	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
	                    	   		"AND SUBSTR(N.REG_NO,6,1) ='H' \r\n" + 
	                    	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'\r\n" + 
	                    	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
							
						} else if ("SEC".equals(cscvo.getFlag())) {

							
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
	                    	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
	                    	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
	                    	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
	                    	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
	                    	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
	                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
	                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
	                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
	                    	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
	                    	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
	                    	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
	                    	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
	                    	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
	                    	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
	                    	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
	                    	   		"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
	                    	   		"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'\r\n" + 
	                    	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
						
						} else {
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
	                    	   		"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
	                    	   		"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
	                    	   		"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
	                    	   		"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
	                    	   		"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
	                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
	                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
	                    	   		"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
	                    	   		"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
	                    	   		"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
	                    	   		"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
	                    	   		"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
	                    	   		"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
	                    	   		"WHERE N.NCPARTCD=S.SECCD\r\n" + 
	                    	   		"AND N.REG_NO=A.REG_NO(+)\r\n" + 
	                    	   		"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
	                    	   		"AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
	                    	   		"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='WRT'");
							
						}
						
				  }
					else if ("EST_N_CREATED_brt".equalsIgnoreCase(cscvo.getCtype()))
					{
						if ("DIV".equals(cscvo.getFlag())) {
							
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
									"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND N.REG_NO=A.REG_NO(+)\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'\r\n" + 
									"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
							
							
						} else if ("SUB_DIV".equals(cscvo.getFlag())) {
							
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
									"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND N.REG_NO=A.REG_NO(+)\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) ='H' \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'\r\n" + 
									"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
							
						} else if ("SEC".equals(cscvo.getFlag())) {
							
							
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
									"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND N.REG_NO=A.REG_NO(+)\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"'\r\n" + 
									"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
							
						} else {
							
							resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.CONSUMER_NAME,N.REG_NO,N.GROUP_NO,N.VOLTAGE,N.CATEGORY,N.LOAD,N.REG_DATE,N.ESTSTATUS,N.demand_days_taken,\r\n" + 
									"N.DAYS_SOP,N.NOOF_DAYS_ON_SYSDATE ,A.REMARKS,(CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM\r\n" + 
									"(select ncpartcd,consumer_name,reg_no,grpappnum GROUP_NO,nvl(voltage,'11') VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,contracted_load LOAD,reg_date,phone_no,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')eststatus,\r\n" + 
									"nvl(MIN_TRANDT,intimate_date)DEMAND_ISSUED,nvl(MIN_TRANDT,intimate_date)+1 SMS_DATE,trunc(nvl(MIN_TRANDT,intimate_date))-trunc(reg_date) demand_days_taken,nvl(grp_coll,totamt) paid_amount,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
									"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
									"(case when (substr(reg_no,6,1) <> 'H' AND nvl(eststatus,'03') in ('02')) then '3' \r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='11') then '6'	\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,2)='33') then '15'\r\n" + 
									"      when (substr(reg_no,6,1) = 'H' AND substr(nvl(voltage,'11'),1,3)='132') then '20' else '0' end) DAYS_SOP ,\r\n" + 
									"     trunc(sysdate)-nvl(grp_prdt,maxprdt)NOOF_DAYS_ON_SYSDATE from rep_final WHERE  \r\n" + 
									"REG_NO IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' UNION \r\n" + 
									"(SELECT TRIM(ZREGID) FROM IT_ALL WHERE STATUS='Estimate not created' AND  zrequest_type ='NEW' )))N,\r\n" + 
									"(SELECT REG_NO,REMARKS FROM SAP_EVENTS WHERE (REG_NO,EVENT_DATE,EVENT_TIME) IN (SELECT REG_NO,MAX(EVENT_DATE),MAX(EVENT_TIME) FROM SAP_EVENTS GROUP BY REG_NO))A,\r\n" + 
									"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
									"WHERE N.NCPARTCD=S.SECCD\r\n" + 
									"AND N.REG_NO=A.REG_NO(+)\r\n" + 
									"AND SUBSTR(N.REG_NO,6,1) IN ('S','N') \r\n" + 
									"AND S.CIRNAME='"+cscvo.getCircle()+"'\r\n" + 
									"AND (CASE WHEN (N.DAYS_SOP > N.NOOF_DAYS_ON_SYSDATE )THEN 'WRT' ELSE 'BRT' END)='BRT'");
							
						}
						
					}
					
					/*else if ("EST_N_CREATED_brt".equalsIgnoreCase(cscvo.getCtype()))*/
									
					

					
										
					
					
					else if("TOT".equalsIgnoreCase(cscvo.getCtype()))
				  {
					  if ("DIV".equals(cscvo.getFlag())) {

							
							resultSet = statement.executeQuery("");
							

							
						} else if ("SUB_DIV".equals(cscvo.getFlag())) {

							
							resultSet = statement.executeQuery("");
							
						} else if ("SEC".equals(cscvo.getFlag())) {

							
							
							resultSet = statement.executeQuery("");
						} else {
							
							resultSet = statement.executeQuery("");
							
							
						}
				  }
					
				
				
					
				
				response.setContentType("application/download");
				
				response.setHeader("Content-Disposition", "attachment; filename=Status New Scs as " + cscvo.getCtype()
						+ "  Type:" + cscvo.getType() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					
				}

				
				response.setContentType("application/ms-excel");
				
				response.setHeader("Content-Disposition",
						"attachment; filename=LT_NEW_SERVICES_ADDITIONAL_LOAD__SCSWISE" + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + ".xlsx");

				
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				
			} else {
				
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		
	}
	
	public void ExportLTAdditionalLoadAbsScsDetails1(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
	
	throws Exception{


		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("Ananthapur".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='7'";
					circle = " AND SUBSTR(S.SECCD,0,1)='7' ";
				} else if ("Kadapa".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='2'";
					circle = " AND SUBSTR(S.SECCD,0,1)='2' ";
				} else if ("Tirupathi".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='5'";
					circle = " AND SUBSTR(S.SECCD,0,1)='5' ";
				} else if ("Kurnool".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='8'";
					circle = " AND SUBSTR(S.SECCD,0,1)='8' ";
				} else if ("Nellore".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='3'";
					circle = " AND SUBSTR(S.SECCD,0,1)='3' ";
				} else {
					circle = " ";
				}
				//System.out.println(cscvo.getCircle());

				

					
				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				
				if ("LT".equalsIgnoreCase(cscvo.getType())) {
					

					if ("AMT_PAID".equalsIgnoreCase(cscvo.getCtype())) {
						
						resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
								"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
								"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type='AL') AND COMPLAINT=9 AND SUB_COMPLAINT=9)N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=SECCD  AND S.CIRNAME='" + cscvo.getCircle() + "'");
						
					}
					else if ("AMT_N_PAID".equalsIgnoreCase(cscvo.getCtype())) {
						
						
						resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
								"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
								"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type='AL') AND COMPLAINT=9 AND SUB_COMPLAINT=9)N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=SECCD  AND S.CIRNAME='" + cscvo.getCircle() + "'");
					} 
					else if ("EST_N_SANCTIONED".equalsIgnoreCase(cscvo.getCtype()))
					{
						resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
								"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
								"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type='AL') AND COMPLAINT=9 AND SUB_COMPLAINT=9)N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=SECCD  AND S.CIRNAME='" + cscvo.getCircle() + "'");
					}
				   
					else if ("EST_N_CREATED".equalsIgnoreCase(cscvo.getCtype()))
				  {
						resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
								"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
								"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type='AL') AND COMPLAINT=9 AND SUB_COMPLAINT=9)N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=SECCD  AND S.CIRNAME='" + cscvo.getCircle() + "'");
				  }else if("TOT".equalsIgnoreCase(cscvo.getCtype()))
				  {
					  resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
								"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
								"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS IN ('Payment paid','Payment not paid','Estimate not created','Estimate not approved') AND  zrequest_type='AL') AND COMPLAINT=9 AND SUB_COMPLAINT=9)N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=SECCD  AND S.CIRNAME='" + cscvo.getCircle() + "'");
				  }
					
				
				}
					
				
				response.setContentType("application/download");
				
				response.setHeader("Content-Disposition", "attachment; filename=Status New Scs as " + cscvo.getCtype()
						+ "  Type:" + cscvo.getType() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					
				}

				
				response.setContentType("application/ms-excel");
				
				response.setHeader("Content-Disposition",
						"attachment; filename=LT_ADDITIONAL_LOAD_SERVICES_ABSTRACT " + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + ".xlsx");

				
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				
			} else {
				
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	
	}
	
	@SuppressWarnings("unused")
	public void ExportLTAdditionalLoadAbsScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("Ananthapur".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='7'";
					circle = " AND SUBSTR(S.SECCD,0,1)='7' ";
				} else if ("Kadapa".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='2'";
					circle = " AND SUBSTR(S.SECCD,0,1)='2' ";
				} else if ("Tirupathi".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='5'";
					circle = " AND SUBSTR(S.SECCD,0,1)='5' ";
				} else if ("Kurnool".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='8'";
					circle = " AND SUBSTR(S.SECCD,0,1)='8' ";
				} else if ("Nellore".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='3'";
					circle = " AND SUBSTR(S.SECCD,0,1)='3' ";
				} else {
					circle = " ";
				}
				System.out.println(cscvo.getCircle());

				if ("LT".equalsIgnoreCase(cscvo.getType())) {

					if ("AL".equalsIgnoreCase(cscvo.getCountrows())) {
						
						
						if ("AMT_PAID".equalsIgnoreCase(cscvo.getCtype())) {
							
							status = " (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type='AL') ";
						} else if ("AMT_N_PAID".equalsIgnoreCase(cscvo.getCtype())) {
							
							status = " (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment not paid' AND  zrequest_type='AL') ";
						} else if ("EST_N_SANCTIONED".equalsIgnoreCase(cscvo.getCtype())) {
							
							status = " (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not approved' AND  zrequest_type='AL') ";
						} else if ("EST_N_CREATED".equalsIgnoreCase(cscvo.getCtype())) {
							
							status = " (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Estimate not created' AND  zrequest_type='AL') ";

						} else {
							status = "  TRIM(ZREGID) in('Estimate not created','Estimate not approved','Payment not paid','Payment paid') AND TRIM(I.ZREQUEST_TYPE)='NEW'  ";
						}
						System.out.println(cscvo.getCtype());
					} else {
						if ("AMT_PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   ";
						} else if ("AMT_N_PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   ";
						} else if ("EST_N_SANCTIONED".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   ";
						} else if ("EST_N_CREATED".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   ";
						}
					}
				} else if ("HT".equalsIgnoreCase(cscvo.getType())) {
					
				} else {
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				/*if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "'");
					

					
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "' and subname='" + cscvo.getSubDiv() + "'");
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "' and subname='" + cscvo.getSubDiv() + "' and secname='"
									+ cscvo.getSec() + "'");
				} else {
					
					String query = " select " + " S.DIVNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,"
							+ " R.CATEGORY_SUPPLY,R.CONTRACTED_LOAD,'0' AS ADDITIONALLOAD,I.APRD_ON,"
							+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE,R.SLADESC from  REP_final R,SPDCLMASTER S,IT_ALL I "
							+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)  and " + status
							+ circle + "";
					
					System.out.println("gouse"+query);
					
*/					
					
					

					if ("AMT_PAID".equalsIgnoreCase(cscvo.getCtype())) {
						
						resultSet = statement.executeQuery("SELECT S.DIVNAME,S.SECNAME,N.CUSTOMER_NAME,N.REG_NO,N.REG_DATE,N.SERVICE_CONNECTION_NO,N.PRESENT_CATEGORY,N.CONTRACTLOAD,N.ADDITIONAL_LOAD,N.PAYDT, N.EXECUTION_TYPE FROM\r\n" + 
								"(SELECT CUSTOMER_NAME,CSPARTCD,REG_NO,REG_DATE,SERVICE_CONNECTION_NO,PRESENT_CATEGORY,CONTRACTLOAD,ADDITIONAL_LOAD,PAYDT,NVL(EXECUTION_TYPE,'0') EXECUTION_TYPE FROM NEWCOMP_TAB WHERE REG_NO \r\n" + 
								"IN (SELECT TRIM(ZREGID) FROM IT_ALL_LT WHERE STATUS='Payment paid' AND  zrequest_type='AL') AND COMPLAINT=9 AND SUB_COMPLAINT=9)N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,ERONAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE N.CSPARTCD=SECCD  AND S.CIRNAME='" + cscvo.getCircle() + "'");
						
					}
					else if ("AMT_N_PAID".equalsIgnoreCase(cscvo.getCtype())) {
						
						resultSet = statement.executeQuery("");
					} else
					{
						resultSet = statement.executeQuery("");
					}
					
				

					
				
				response.setContentType("application/download");
				
				response.setHeader("Content-Disposition", "attachment; filename=Status New Scs as " + cscvo.getCtype()
						+ "  Type:" + cscvo.getType() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered in Single Desk Portal " + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + "Industrial.xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	
	}
	
	// New Scs and AdditionalLoad Report

	@SuppressWarnings("unused")
	public void exportNewScsAditionalLoadScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("Ananthapur".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='7'";
					circle = " AND SUBSTR(S.SECCD,0,1)='7' ";
				} else if ("Kadapa".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='2'";
					circle = " AND SUBSTR(S.SECCD,0,1)='2' ";
				} else if ("Tirupathi".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='5'";
					circle = " AND SUBSTR(S.SECCD,0,1)='5' ";
				} else if ("Kurnool".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='8'";
					circle = " AND SUBSTR(S.SECCD,0,1)='8' ";
				} else if ("Nellore".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='3'";
					circle = " AND SUBSTR(S.SECCD,0,1)='3' ";
				} else {
					circle = " ";
				}

				if ("HT".equalsIgnoreCase(cscvo.getType())) {

					if ("NEW".equalsIgnoreCase(cscvo.getCountrows())) {
						if ("AMT_PAID".equalsIgnoreCase(cscvo.getCtype())) {
							
							status = " AND TRIM(I.STATUS)='Payment paid' AND TRIM(I.ZREQUEST_TYPE)='NEW' ";
						} else if ("AMT_N_PAID".equalsIgnoreCase(cscvo.getCtype())) {
							
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='NEW' ";
						} else if ("EST_N_SANCTIONED".equalsIgnoreCase(cscvo.getCtype())) {
							
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='NEW' ";
						} else if ("EST_N_CREATED".equalsIgnoreCase(cscvo.getCtype())) {
							
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='NEW' ";

						} else {
							status = " AND TRIM(I.STATUS) in('Estimate not created','Estimate not approved','Payment not paid','Payment paid') AND TRIM(I.ZREQUEST_TYPE)='NEW'  ";
						}
						System.out.println(status);
					} else {
						if ("AMT_PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  status in('Payment paid')   and ZREQUEST_TYPE='AL' ";
						} else if ("AMT_N_PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  status in('Payment not paid')   and ZREQUEST_TYPE='AL'  ";
						} else if ("EST_N_SANCTIONED".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  status in('Estimate not approved')  and ZREQUEST_TYPE='AL'  ";
						} else if ("EST_N_CREATED".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  status in('Estimate not created')  and ZREQUEST_TYPE='AL'  ";
						}
					}
					System.out.println(status);
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					
				} else {
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "'");
					

					
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "' and subname='" + cscvo.getSubDiv() + "'");
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "' and subname='" + cscvo.getSubDiv() + "' and secname='"
									+ cscvo.getSec() + "'");
				} else {
					
					String query = " select " + " S.DIVNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,"
							+ " R.CATEGORY_SUPPLY,R.CONTRACTED_LOAD,'0' AS ADDITIONALLOAD,I.APRD_ON,"
							+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE,R.SLADESC from  REP_final R,SPDCLMASTER S,IT_ALL I "
							+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)  and " + status
							+ circle + "";
					
					System.out.println("gouse"+query);
					
					
					
					

					if ("AMT_PAID".equalsIgnoreCase(cscvo.getCtype())) {
						resultSet = statement.executeQuery(" select "
								+ " S.DIVNAME as Name_of_The_Division ,S.SECNAME as Name_of_The_Section,R.CONSUMER_NAME as Consumer_Name,R.REG_NO REG_NO,to_char(I.ZREGDT,'DD-MM-YYYY') as Registered_date,"
								+ " R.CATEGORY_SUPPLY as cat,R.CONTRACTED_LOAD as Contracted_Load,to_char(R.MAXPRDT,'DD-MM-YYYY') as Amount_Paid_date,"
								+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.EXECUTION_TYPE  "
								+ " from  REP_final R,SPDCLMASTER S,IT_ALL I "
								+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)   " + status
								+ circle + " order by AGE_Wise_Pendency DESC ");
					} else if ("AMT_N_PAID".equalsIgnoreCase(cscvo.getCtype())) {
						resultSet = statement.executeQuery(" select "
								+ " S.DIVNAME as Name_of_The_Division ,S.SECNAME as Name_of_The_Section,R.CONSUMER_NAME as Consumer_Name,R.REG_NO REG_NO,to_char(I.ZREGDT,'DD-MM-YYYY') as Registered_date,"
								+ " R.CATEGORY_SUPPLY as cat,R.CONTRACTED_LOAD as Contracted_Load,to_char(I.APRD_ON,'DD-MM-YYYY') as Sanctioned_date,"
								+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency ,R.EXECUTION_TYPE  "
								+ " from  REP_final R,SPDCLMASTER S,IT_ALL I "
								+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)   " + status
								+ circle + " order by AGE_Wise_Pendency DESC");
					} else {
						resultSet = statement.executeQuery(" select "
								+ " S.DIVNAME as Name_of_The_Division ,S.SECNAME as Name_of_The_Section,R.CONSUMER_NAME as Consumer_Name,R.REG_NO REG_NO,"
								+ " R.CATEGORY_SUPPLY as cat,R.CONTRACTED_LOAD as Contracted_Load,to_char(I.ZREGDT,'DD-MM-YYYY') as Alpplication_Registered_date,"
								+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.EXECUTION_TYPE  "
								+ " from  REP_final R,SPDCLMASTER S,IT_ALL I "
								+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)   " + status
								+ circle + " order by AGE_Wise_Pendency DESC");
					}
					System.out.println(query);
					

						}
				
				response.setContentType("application/download");
				
				response.setHeader("Content-Disposition", "attachment; filename=Status New Scs as " + cscvo.getCtype()
						+ "  Type:" + cscvo.getType() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered in Single Desk Portal " + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + "Industrial.xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// Export Complaits

	@SuppressWarnings("unused")
	public void exportNewScsAditionalLoadScsDetails1(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("Ananthapur".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='7'";
					circle = " AND SUBSTR(S.SECCD,0,1)='7' ";
				} else if ("Kadapa".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='2'";
					circle = " AND SUBSTR(S.SECCD,0,1)='2' ";
				} else if ("Tirupathi".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='5'";
					circle = " AND SUBSTR(S.SECCD,0,1)='5' ";
				} else if ("Kurnool".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='8'";
					circle = " AND SUBSTR(S.SECCD,0,1)='8' ";
				} else if ("Nellore".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='3'";
					circle = " AND SUBSTR(S.SECCD,0,1)='3' ";
				} else {
					circle = " ";
				}

				if ("HT".equalsIgnoreCase(cscvo.getType())) {

					if ("NEW".equalsIgnoreCase(cscvo.getCountrows())) {
						if ("AMT_PAID".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status in('Payment paid') and
							// ZREQUEST_TYPE='NEW' ";
							status = " AND TRIM(I.STATUS)='Payment paid' AND TRIM(I.ZREQUEST_TYPE)='NEW' ";
						} else if ("AMT_N_PAID".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status in('Payment not paid') and
							// ZREQUEST_TYPE='NEW' ";
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='NEW' ";
						} else if ("EST_N_SANCTIONED".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status in('Estimate not approved') and
							// ZREQUEST_TYPE='NEW' ";
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='NEW' ";
						} else if ("EST_N_CREATED".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status in('Estimate not created') and
							// ZREQUEST_TYPE='NEW' ";
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='NEW' ";

						} else {
							// status = "";
							status = " AND TRIM(I.STATUS) in('Estimate not created','Estimate not approved','Payment not paid','Payment paid') AND TRIM(I.ZREQUEST_TYPE)='NEW'  ";
						}
						System.out.println(cscvo.getCtype());
					} else {
						if ("AMT_PAID".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status in('Payment paid') and
							// ZREQUEST_TYPE='NEW' ";
							status = " AND TRIM(I.STATUS)='Payment paid' AND TRIM(I.ZREQUEST_TYPE)='AL' ";
						} else if ("AMT_N_PAID".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status in('Payment not paid') and
							// ZREQUEST_TYPE='NEW' ";
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='AL' ";
						} else if ("EST_N_SANCTIONED".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status in('Estimate not approved') and
							// ZREQUEST_TYPE='NEW' ";
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='AL' ";
						} else if ("EST_N_CREATED".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status in('Estimate not created') and
							// ZREQUEST_TYPE='NEW' ";
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='AL' ";

						} else {
							// status = "";
							status = " AND TRIM(I.STATUS) in('Estimate not created','Estimate not approved','Payment not paid','Payment paid') AND TRIM(I.ZREQUEST_TYPE)='AL'  ";
						}
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
				} else {
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "'");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());adsda
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "' and subname='" + cscvo.getSubDiv() + "'");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {


					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "' and subname='" + cscvo.getSubDiv() + "' and secname='"
									+ cscvo.getSec() + "'");
				} else {
					
					String query = " select "
							+ " S.DIVNAME as Name_of_The_Division,S.SECNAME as Name_of_The_Section,R.CUSTOMER_NAME as Consumer_Name,reg_no,to_char(I.ZREGDT,'DD-MM-YYYY') as Registered_date,R.SERVICE_CONNECTION_NO as ServiceNumber,"
							+ " R.PRESENT_CATEGORY as cat,R.CONTRACTLOAD as Contracted_load,R.ADDITIONAL_LOAD as Additional_load,(select TO_CHAR(max(CSPRDT),'DD-MM-YYYY') from cscpay where cscpay.CSREGNO=R.REG_NO and cscpay.CSCANCELID='N') as Amount_Paid_date,"
							+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.REMARKS as remarks"
							+ " from  new_complaints R,SPDCLMASTER S,IT_ALL I "
							+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)    " + status
							+ circle + "";
					System.out.println(query);
					

					if ("AMT_PAID".equalsIgnoreCase(cscvo.getCtype())) {
						resultSet = statement.executeQuery("select "
								+ " S.DIVNAME as Name_of_The_Division,S.SECNAME as Name_of_The_Section,R.CUSTOMER_NAME as Consumer_Name,reg_no,to_char(I.ZREGDT,'DD-MM-YYYY') as Registered_date,R.SERVICE_CONNECTION_NO as ServiceNumber,"
								+ " R.PRESENT_CATEGORY as cat,R.CONTRACTLOAD as Contracted_load,R.ADDITIONAL_LOAD as Additional_load,(select TO_CHAR(max(CSPRDT),'DD-MM-YYYY') from cscpay where cscpay.CSREGNO=R.REG_NO and cscpay.CSCANCELID='N') as Payment_date,"
								+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.EXECUTION_TYPE "
								+ " from  new_complaints R,SPDCLMASTER S,IT_ALL I "
								+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)    " + status
								+ circle + "  order by AGE_Wise_Pendency DESC ");
					} else if ("AMT_N_PAID".equalsIgnoreCase(cscvo.getCtype())) {
						resultSet = statement.executeQuery("select "
								+ " S.DIVNAME as Name_of_The_Division,S.SECNAME as Name_of_The_Section,R.CUSTOMER_NAME as Consumer_Name,reg_no,to_char(I.ZREGDT,'DD-MM-YYYY') as Registered_date,R.SERVICE_CONNECTION_NO as ServiceNumber,"
								+ " R.PRESENT_CATEGORY as cat,R.CONTRACTLOAD as Contracted_load,R.ADDITIONAL_LOAD as Additional_load,to_char(I.APRD_ON,'DD-MM-YYYY') as Sanctioned_date,"
								// + "(select TO_CHAR(max(CSPRDT),'DD-MM-YYYY')
								// from cscpay where cscpay.CSREGNO=R.REG_NO and
								// cscpay.CSCANCELID='N') as Payment_date,"
								+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.EXECUTION_TYPE "
								+ " from  new_complaints R,SPDCLMASTER S,IT_ALL I "
								+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)    " + status
								+ circle + "  order by AGE_Wise_Pendency DESC");
					} else {
						resultSet = statement.executeQuery("select "
								+ " S.DIVNAME as Name_of_The_Division,S.SECNAME as Name_of_The_Section,R.CUSTOMER_NAME as Consumer_Name,reg_no,to_char(I.ZREGDT,'DD-MM-YYYY') as Registered_date,R.SERVICE_CONNECTION_NO as ServiceNumber,"
								+ " R.PRESENT_CATEGORY as cat,R.CONTRACTLOAD as Contracted_load,R.ADDITIONAL_LOAD as Additional_load ,"
								// + "(select TO_CHAR(max(CSPRDT),'DD-MM-YYYY')
								// from cscpay where cscpay.CSREGNO=R.REG_NO and
								// cscpay.CSCANCELID='N') as Payment_date,"
								+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.EXECUTION_TYPE "
								+ " from  new_complaints R,SPDCLMASTER S,IT_ALL I "
								+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)    " + status
								+ circle + " order by AGE_Wise_Pendency DESC ");
						/*
						 * resultSet = statement.executeQuery( " select " +
						 * " S.DIVNAME as Name_of_The_eDivision ,S.SECNAME as Name_of_The_Section,R.CONSUMER_NAME as Consumer_Name,"
						 * +
						 * " R.CATEGORY_SUPPLY as cat,R.CONTRACTED_LOAD as Contracted_Load,to_char(I.ZREGDT,'DD-MM-YYYY') as Registered_date,"
						 * +
						 * " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.SLADESC as Remarks"
						 * + " from  REP_final R,SPDCLMASTER S,IT_ALL I " +
						 * " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)   "
						 * + status + circle+"");
						 */
					}
					/*
					 * .executeQuery(
					 * " select row_number() over (partition by null order by null) sno,"
					 * +
					 * " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
					 * +
					 * " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
					 * +
					 * " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
					 * + " greatest(nvl(grp_prdt,reg_date)," +
					 * " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
					 * + " meseva_ref reference_no ," +
					 * " PENDING_STAT,SLADESC,EXECUTION_TYPE," +
					 * " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() +
					 * "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)  ) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=Status Additional Load as "
						+ cscvo.getCtype() + "  Type:" + cscvo.getType() + "Industrial.xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered in Single Desk Portal " + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + "Industrial.xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// export SAP Not Sactioned

	@SuppressWarnings("unused")
	public void exportNewSapScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				/*
				 * if("Ananthapur".equalsIgnoreCase(cscvo.getCircle().trim())){
				 * circle=" and substr(ZREGID,0,1)='7'"; } else
				 * if("Kadapa".equalsIgnoreCase(cscvo.getCircle().trim())) {
				 * circle=" and substr(ZREGID,0,1)='2'"; } else
				 * if("Tirupathi".equalsIgnoreCase(cscvo.getCircle().trim())) {
				 * circle=" and substr(ZREGID,0,1)='5'"; } else
				 * if("Kurnool".equalsIgnoreCase(cscvo.getCircle().trim())) {
				 * circle=" and substr(ZREGID,0,1)='8'"; } else
				 * if("Nellore".equalsIgnoreCase(cscvo.getCircle().trim())) {
				 * circle=" and substr(ZREGID,0,1)='3'"; } else{ circle=" "; }
				 */
				if ("Ananthapur".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='7'";
					circle = " AND SUBSTR(S.SECCD,0,1)='7' ";
				} else if ("Kadapa".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='2'";
					circle = " AND SUBSTR(S.SECCD,0,1)='2' ";
				} else if ("Tirupathi".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='5'";
					circle = " AND SUBSTR(S.SECCD,0,1)='5' ";
				} else if ("Kurnool".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='8'";
					circle = " AND SUBSTR(S.SECCD,0,1)='8' ";
				} else if ("Nellore".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='3'";
					circle = " AND SUBSTR(S.SECCD,0,1)='3' ";
				} else {
					circle = " ";
				}

				if ("HT".equalsIgnoreCase(cscvo.getType())) {

					// if("NEW".equalsIgnoreCase(cscvo.getCountrows())){
					if ("EstimateNotCreated".equalsIgnoreCase(cscvo.getStatus())) {
						if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' ";
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='NEW'  ";
						} else if ("LESS_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' and zmonth<3 and zyear=0 ";
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='NEW'    and  I.zmonth<3 and I.zyear=0";
						} else if ("GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' and zmonth>=3 and zmonth<6
							// and zyear=0 ";
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='NEW'  and I.zmonth>=3 and I.zmonth<6 and I.zyear=0 ";
						} else if ("GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' and zmonth>=6 and zmonth<9
							// and zyear=0 ";
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='NEW'  and I.zmonth>=6 and I.zmonth<9 and I.zyear=0 ";
						} else if ("GTR_9MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' and zyear<1 and zmonth>=9 ";
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='NEW'   and I.zyear<1 and I.zmonth>=9 ";
						} else if ("GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' and ZYEAR>=1 ";
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='NEW'  and  I.ZYEAR>=1 ";
						} else {
							// status = "";
							status = " AND TRIM(I.STATUS) in('Estimate not created','Estimate not approved','Payment not paid','Payment paid') AND TRIM(I.ZREQUEST_TYPE)='NEW'  ";
						}
					}

					else if ("EstimateToBeSanctioned".equalsIgnoreCase(cscvo.getStatus())) {
						/*
						 * if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
						 * status =
						 * "   status='Estimate not approved' and ZREQUEST_TYPE='NEW' "
						 * ; } else if
						 * ("LESS_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						 * status =
						 * "  status='Estimate not approved' and ZREQUEST_TYPE='NEW'  and  zmonth<3 and zyear=0 "
						 * ; } else if
						 * ("GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						 * status =
						 * "  status='Estimate not approved' and ZREQUEST_TYPE='NEW' and zmonth>=3 and zmonth<6 and zyear=0 "
						 * ; } else if
						 * ("GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						 * status =
						 * "  status='Estimate not approved' and ZREQUEST_TYPE='NEW' and zmonth>=6 and zmonth<9 and zyear=0 "
						 * ; } else if
						 * ("GTR_9MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						 * status =
						 * "   status='Estimate not approved' and ZREQUEST_TYPE='NEW'  and zyear<1 and zmonth>=9  "
						 * ; } else if
						 * ("GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						 * status =
						 * "  status='Estimate not approved' and ZREQUEST_TYPE='NEW'  and  ZYEAR>=1  "
						 * ; } else { status = ""; }
						 */
						if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' ";
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='NEW'  ";
						} else if ("LESS_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not approved' and
							// ZREQUEST_TYPE='NEW' and zmonth<3 and zyear=0 ";
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='NEW'    and  I.zmonth<3 and I.zyear=0";
						} else if ("GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' and zmonth>=3 and zmonth<6
							// and zyear=0 ";
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='NEW'  and I.zmonth>=3 and I.zmonth<6 and I.zyear=0 ";
						} else if ("GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' and zmonth>=6 and zmonth<9
							// and zyear=0 ";
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='NEW'  and I.zmonth>=6 and I.zmonth<9 and I.zyear=0 ";
						} else if ("GTR_9MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' and zyear<1 and zmonth>=9 ";
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='NEW'   and I.zyear<1 and I.zmonth>=9 ";
						} else if ("GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' and ZYEAR>=1 ";
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='NEW'  and  I.ZYEAR>=1 ";
						} else {
							// status = "";
							status = " AND TRIM(I.STATUS) in('Estimate not created','Estimate not approved','Payment not paid','Payment paid') AND TRIM(I.ZREQUEST_TYPE)='NEW'  ";
						}
					}

					else if ("EstimateSanctionedAndAmtPaid".equalsIgnoreCase(cscvo.getStatus())) {
						if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='NEW' ";
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='NEW'  ";
						} else if ("LESS_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='NEW' and zmonth<3 and zyear=0 ";
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='NEW'    and  I.zmonth<3 and I.zyear=0";
						} else if ("GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='NEW' and zmonth>=3 and zmonth<6
							// and zyear=0 ";
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='NEW'   and zmonth>=3 and zmonth<6 and zyear=0 ";
						} else if ("GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='NEW' and zmonth>=6 and zmonth<9
							// and zyear=0 ";
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='NEW'    and zmonth>=6 and zmonth<9 and zyear=0 ";
						} else if ("GTR_9MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='NEW' and zyear<1 and zmonth>=9 ";
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='NEW'  and zyear<1 and zmonth>=9 ";
						} else if ("GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='NEW' and ZYEAR>=1 ";
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='NEW'   and  ZYEAR>=1  ";
						} else {
							// status = "";
							status = " AND TRIM(I.STATUS) in('Estimate not created','Estimate not approved','Payment not paid','Payment paid') AND TRIM(I.ZREQUEST_TYPE)='AL'  ";
						}
					}

					/*
					 * if ("AMT_PAID".equalsIgnoreCase(cscvo.getCtype())) {
					 * status =
					 * "  status in('Payment paid')   and ZREQUEST_TYPE='NEW' ";
					 * } else if
					 * ("AMT_N_PAID".equalsIgnoreCase(cscvo.getCtype())) {
					 * status =
					 * "  status in('Payment not paid')   and ZREQUEST_TYPE='NEW'  "
					 * ; } else if
					 * ("EST_N_SANCTIONED".equalsIgnoreCase(cscvo.getCtype())) {
					 * status =
					 * "  status in('Estimate not approved')  and ZREQUEST_TYPE='NEW'  "
					 * ; } else if
					 * ("EST_N_CREATED".equalsIgnoreCase(cscvo.getCtype())) {
					 * status =
					 * "  status in('Estimate not created')  and ZREQUEST_TYPE='NEW'  "
					 * ; } else if ("TOT".equalsIgnoreCase(cscvo.getCtype())) {
					 * status = "     ZREQUEST_TYPE='NEW' "; } else if
					 * ("REL".equalsIgnoreCase(cscvo.getCtype())) { status =
					 * "  and upper(REPSTAT) like '%REL%'  and (complaint||sub_complaint) like '911'    "
					 * ; } else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
					 * status =
					 * "  AND upper(REPSTAT) like   '%WRT%'  and (complaint||sub_complaint) like '911'    "
					 * ; } else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
					 * status =
					 * "  AND upper(REPSTAT) like  '%BRT%'  and (complaint||sub_complaint) like '911'    "
					 * ; } else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype()))
					 * { status =
					 * "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and (complaint||sub_complaint) like '911'    "
					 * ; } else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype()))
					 * { status =
					 * "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and (complaint||sub_complaint) like '911'    "
					 * ; } else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype()))
					 * { status =
					 * "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and (complaint||sub_complaint) like '911'    "
					 * ; } else { status = ""; }
					 */
					// }
					else {

					}
				} else {

				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					/*
					 * resultSet = statement.executeQuery(
					 * "select row_number() over (partition by null order by null) sno,"
					 * +
					 * " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
					 * +
					 * " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
					 * +
					 * " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
					 * + " greatest(nvl(grp_prdt,reg_date)," +
					 * " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
					 * + " meseva_ref reference_no ," +
					 * " PENDING_STAT,SLADESC,EXECUTION_TYPE," +
					 * " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() + "' and divname='" +
					 * cscvo.getDivision() +
					 * "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)  ) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "'");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());adsda
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					/*
					 * resultSet = statement .executeQuery(
					 * " select row_number() over (partition by null order by null) sno,"
					 * +
					 * " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
					 * +
					 * " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
					 * +
					 * " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
					 * + " greatest(nvl(grp_prdt,reg_date)," +
					 * " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
					 * + " meseva_ref reference_no ," +
					 * " PENDING_STAT,SLADESC,EXECUTION_TYPE," +
					 * " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() + "' and divname='" +
					 * cscvo.getDivision() + "' and subname='" +
					 * cscvo.getSubDiv() +
					 * "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)  ) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "' and subname='" + cscvo.getSubDiv() + "'");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(" select " +
					 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
					 * +
					 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
					 * + " from newcomp_tab a," +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) b"
					 * + " where a.cspartcd=b.seccd " + complaint_type + " " +
					 * counter + "" + " " + status + " and subname='" +
					 * cscvo.getCircle() + "' AND secname='" +
					 * cscvo.getDivision() + "'");
					 */
					/*
					 * resultSet = statement .executeQuery(
					 * " select row_number() over (partition by null order by null) sno,"
					 * +
					 * " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
					 * +
					 * " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
					 * +
					 * " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
					 * + " greatest(nvl(grp_prdt,reg_date)," +
					 * " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
					 * + " meseva_ref reference_no ," +
					 * " PENDING_STAT,SLADESC,EXECUTION_TYPE," +
					 * " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() + "' and divname='" +
					 * cscvo.getDivision() + "' and subname='" +
					 * cscvo.getSubDiv() + "' and secname='" + cscvo.getSec() +
					 * "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9) ) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "' and subname='" + cscvo.getSubDiv() + "' and secname='"
									+ cscvo.getSec() + "'");
				} else {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
					 * +
					 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
					 * +
					 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
					 * +
					 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * +
					 * " from csc.rep_final@colldblink a,master.spdclmaster@colldblink b"
					 * + " where a.ncpartcd=b.seccd " + status + "" +
					 * cscvo.getCircle() + "" +
					 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */

					String query = " select " + " S.DIVNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,"
							+ " R.CATEGORY_SUPPLY,R.CONTRACTED_LOAD,'0' AS ADDITIONALLOAD,I.APRD_ON,"
							+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE,R.SLADESC from  REP_final R,SPDCLMASTER S,IT_ALL I "
							+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)  and " + status
							+ circle + "";
					System.out.println(query);
					/*
					 * resultSet = statement.executeQuery(
					 * "select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
					 * +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
					 * + status + " and cirname='" + cscvo.getCircle() + "'");
					 */

					// changed 25/05

					if ("EstimateNotCreated".equalsIgnoreCase(cscvo.getStatus())) {

						resultSet = statement.executeQuery(" select "
								+ " S.DIVNAME as Name_of_The_eDivision ,S.SECNAME as Name_of_The_Section,R.CONSUMER_NAME as Consumer_Name,"
								+ " R.CATEGORY_SUPPLY as cat,R.CONTRACTED_LOAD as Contracted_Load,R.reg_no reg_no,to_char(I.ZREGDT,'DD-MM-YYYY') as Registered_date,"
								+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.EXECUTION_TYPE "
								+ " from  REP_final R,SPDCLMASTER S,IT_ALL I "
								+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)   " + status
								+ circle + "  order by AGE_Wise_Pendency DESC ");
						/*
						 * resultSet = statement.executeQuery( " select " +
						 * " S.DIVNAME as Name_of_The_eDivision ,S.SECNAME as Name_of_The_Section,R.CONSUMER_NAME as Consumer_Name,"
						 * +
						 * " R.CATEGORY_SUPPLY as cat,R.CONTRACTED_LOAD as Contracted_Load,to_char(R.MAXPRDT,'DD-MM-YYYY') as Amount_Paid_date,"
						 * +
						 * " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.SLADESC as Remarks"
						 * + " from  REP_final R,SPDCLMASTER S,IT_ALL I " +
						 * " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)   "
						 * + status + circle+"");
						 */
					}

					else if ("EstimateToBeSanctioned".equalsIgnoreCase(cscvo.getStatus())) {

						resultSet = statement.executeQuery(" select "
								+ " S.DIVNAME as Name_of_The_Division ,S.SECNAME as Name_of_The_Section,R.CONSUMER_NAME as Consumer_Name,R.reg_no reg_no,to_char(I.ZREGDT,'DD-MM-YYYY') as Registered_date,"
								+ " R.CATEGORY_SUPPLY as cat,R.CONTRACTED_LOAD as Contracted_Load,"
								+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.EXECUTION_TYPE "
								+ " from  REP_final R,SPDCLMASTER S,IT_ALL I "
								+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)   " + status
								+ circle + "  order by AGE_Wise_Pendency DESC ");
						/*
						 * resultSet = statement.executeQuery( " select " +
						 * " S.DIVNAME as Name_of_The_Division ,S.SECNAME as Name_of_The_Section,R.CONSUMER_NAME as Consumer_Name,"
						 * +
						 * " R.CATEGORY_SUPPLY as cat,R.CONTRACTED_LOAD as Contracted_Load,to_char(R.MAXPRDT,'DD-MM-YYYY') as Amount_Paid_date,"
						 * +
						 * " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.SLADESC as Remarks"
						 * + " from  REP_final R,SPDCLMASTER S,IT_ALL I " +
						 * " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)   "
						 * + status + circle+"");
						 */
					} else if ("EstimateSanctionedAndAmtPaid".equalsIgnoreCase(cscvo.getStatus())) {
						// if
						// ("EstimateSanctionedAndAmtPaid".equalsIgnoreCase(cscvo.getCtype())){
						resultSet = statement.executeQuery(" select "
								+ " S.DIVNAME as Name_of_The_eDivision ,S.SECNAME as Name_of_The_Section,R.CONSUMER_NAME as Consumer_Name,R.reg_no reg_no,to_char(I.ZREGDT,'DD-MM-YYYY') as Registered_date,"
								+ " R.CATEGORY_SUPPLY as cat,R.CONTRACTED_LOAD as Contracted_Load,to_char(I.APRD_ON,'DD-MM-YYYY') as Sanctioned_date,"
								+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.EXECUTION_TYPE"
								+ " from  REP_final R,SPDCLMASTER S,IT_ALL I "
								+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)   " + status
								+ circle + "  order by AGE_Wise_Pendency DESC ");
					} else {
						resultSet = statement.executeQuery(" select "
								+ " S.DIVNAME as Name_of_The_eDivision ,S.SECNAME as Name_of_The_Section,R.CONSUMER_NAME as Consumer_Name,R.reg_no reg_no,to_char(I.ZREGDT,'DD-MM-YYYY') as Registered_date,"
								+ " R.CATEGORY_SUPPLY as cat,R.CONTRACTED_LOAD as Contracted_Load,to_char(R.MAXPRDT,'DD-MM-YYYY') as Amount_Paid_date,"
								+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.EXECUTION_TYPE "
								+ " from  REP_final R,SPDCLMASTER S,IT_ALL I "
								+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)   " + status
								+ circle + "   order by AGE_Wise_Pendency DESC ");
					}
					/*
					 * resultSet = statement.executeQuery( " select " +
					 * " S.DIVNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO," +
					 * " R.CATEGORY_SUPPLY,R.CONTRACTED_LOAD,'0' AS ADDITIONALLOAD,I.APRD_ON,"
					 * +
					 * " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE,R.SLADESC"
					 * + " from  REP_final R,SPDCLMASTER S,IT_ALL I " +
					 * " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)   "
					 * + status + circle+"");
					 */

					/*
					 * String query = " select  * from IT_ALL where "+ status +
					 * circle+""; System.out.println(query); resultSet =
					 * statement.executeQuery(
					 * "select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
					 * +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
					 * + status + " and cirname='" + cscvo.getCircle() + "'");
					 * resultSet = statement.executeQuery(
					 * "select  * from IT_ALL where  " + status + circle+"");
					 */

					/*
					 * .executeQuery(
					 * " select row_number() over (partition by null order by null) sno,"
					 * +
					 * " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
					 * +
					 * " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
					 * +
					 * " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
					 * + " greatest(nvl(grp_prdt,reg_date)," +
					 * " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
					 * + " meseva_ref reference_no ," +
					 * " PENDING_STAT,SLADESC,EXECUTION_TYPE," +
					 * " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() +
					 * "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)  ) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=Status Additional Load as "
						+ cscvo.getCtype() + "  Type:" + cscvo.getType() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered in Single Desk Portal " + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}
	// Export SAp New Additional Load

	// export SAP Not Sactioned

	@SuppressWarnings("unused")
	public void exportAddLoadSapScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				/*
				 * if("Ananthapur".equalsIgnoreCase(cscvo.getCircle().trim())){
				 * circle=" and substr(ZREGID,0,1)='7'"; } else
				 * if("Kadapa".equalsIgnoreCase(cscvo.getCircle().trim())) {
				 * circle=" and substr(ZREGID,0,1)='2'"; } else
				 * if("Tirupathi".equalsIgnoreCase(cscvo.getCircle().trim())) {
				 * circle=" and substr(ZREGID,0,1)='5'"; } else
				 * if("Kurnool".equalsIgnoreCase(cscvo.getCircle().trim())) {
				 * circle=" and substr(ZREGID,0,1)='8'"; } else
				 * if("Nellore".equalsIgnoreCase(cscvo.getCircle().trim())) {
				 * circle=" and substr(ZREGID,0,1)='3'"; } else{ circle=" "; }
				 */
				if ("ANANTHAPUR".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='7'";
					circle = " AND SUBSTR(S.SECCD,0,1)='7' ";
				} else if ("KADAPA".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='2'";
					circle = " AND SUBSTR(S.SECCD,0,1)='2' ";
				} else if ("TIRUPATI".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='5'";
					circle = " AND SUBSTR(S.SECCD,0,1)='5' ";
				} else if ("KURNOOL".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='8'";
					circle = " AND SUBSTR(S.SECCD,0,1)='8' ";
				} else if ("NELLORE".equalsIgnoreCase(cscvo.getCircle().trim())) {
					// circle=" and substr(ZREGID,0,1)='3'";
					circle = " AND SUBSTR(S.SECCD,0,1)='3' ";
				} else {
					circle = " ";
				}

				if ("HT".equalsIgnoreCase(cscvo.getType())) {

					// if("NEW".equalsIgnoreCase(cscvo.getCountrows())){
					if ("EstimateNotCreated".equalsIgnoreCase(cscvo.getStatus())) {
						if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' ";
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='AL'  ";
						} else if ("LESS_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='AL' and zmonth<3 and zyear=0 ";
							//status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='AL'    and  I.zmonth<3 and I.zyear=0";
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='AL'   AND ZMONTH = 2 AND ZMONTH > =2";
						} else if ("GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' and zmonth>=3 and zmonth<6
							// and zyear=0 ";

							// status = " AND TRIM(I.STATUS)='Estimate not
							// created' AND TRIM(I.ZREQUEST_TYPE)='AL' and
							// I.zmonth>=3 and I.zmonth<6 and I.zyear=0 ";
							//status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='AL'  and I.zmonth>=3 and I.zmonth<4 and I.zyear=0 ";
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='AL'   AND ZMONTH = 2 AND ZMONTH > =2";
							
						} else if ("GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' and zmonth>=6 and zmonth<9
							// and zyear=0 ";

							// status = " AND TRIM(I.STATUS)='Estimate not
							// created' AND TRIM(I.ZREQUEST_TYPE)='AL' and
							// I.zmonth>=6 and I.zmonth<9 and I.zyear=0 ";
							//status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='AL'  and I.zmonth>=4 and I.zmonth<5 and I.zyear=0 ";
							//status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='AL'    AND ZMONTH = 4 AND ZMONTH >=4";
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='AL'   AND ZMONTH =3 AND ZMONTH >=3";
						} else if ("GTR_9MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' and zyear<1 and zmonth>=9 ";

							// status = " AND TRIM(I.STATUS)='Estimate not
							// created' AND TRIM(I.ZREQUEST_TYPE)='AL' and
							// I.zyear<1 and I.zmonth>=9 ";
							//status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='AL'   and I.zmonth>=5 and I.zyear=0 ";
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='AL'    AND ZMONTH = 4 AND ZMONTH >=4";
						} else if ("GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' and ZYEAR>=1 ";
							status = " AND TRIM(I.STATUS)='Estimate not created' AND TRIM(I.ZREQUEST_TYPE)='AL'  and  I.ZYEAR>=1 ";
						} else {
							// status = "";
							status = " AND TRIM(I.STATUS) in('Estimate not created','Estimate not approved','Payment not paid','Payment paid') AND TRIM(I.ZREQUEST_TYPE)='AL'  ";
						}
					}

					else if ("EstimateToBeSanctioned".equalsIgnoreCase(cscvo.getStatus())) {
						
						if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='NEW' ";
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='AL'  ";
						} else if ("LESS_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not approved' and
							// ZREQUEST_TYPE='AL' and zmonth<3 and zyear=0 ";
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='AL'     AND ZMONTH = 2 AND ZMONTH > =2";
						} else if ("GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='AL' and zmonth>=3 and zmonth<6 and
							// zyear=0 ";

							// status = " AND TRIM(I.STATUS)='Estimate not
							// approved' AND TRIM(I.ZREQUEST_TYPE)='AL' and
							// I.zmonth>=3 and I.zmonth<6 and I.zyear=0 ";
							//status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='AL'  AND ZMONTH =3 AND ZMONTH >=3 ";
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='AL'     AND ZMONTH = 2 AND ZMONTH > =2";
						} else if ("GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='AL' and zmonth>=6 and zmonth<9 and
							// zyear=0 ";

							// status = " AND TRIM(I.STATUS)='Estimate not
							// approved' AND TRIM(I.ZREQUEST_TYPE)='AL' and
							// I.zmonth>=6 and I.zmonth<9 and I.zyear=0 ";
							//status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='AL'  a AND ZMONTH = 4 AND ZMONTH >=4 ";
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='AL'  AND ZMONTH =3 AND ZMONTH >=3 ";
						} else if ("GTR_9MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='AL' and zyear<1 and zmonth>=9 ";

							// status = " AND TRIM(I.STATUS)='Estimate not
							// approved' AND TRIM(I.ZREQUEST_TYPE)='AL' and
							// I.zyear<1 and I.zmonth>=9 ";
							//status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='AL'   and I.zyear<0 and and I.zmonth>=5 ";
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='AL'  a AND ZMONTH = 4 AND ZMONTH >=4 ";
						} else if ("GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Estimate not created' and
							// ZREQUEST_TYPE='AL' and ZYEAR>=1 ";
							status = " AND TRIM(I.STATUS)='Estimate not approved' AND TRIM(I.ZREQUEST_TYPE)='AL'  and  I.ZYEAR>=1 ";
						} else {
							// status = "";
							status = " AND TRIM(I.STATUS) in('Estimate not created','Estimate not approved','Payment not paid','Payment paid') AND TRIM(I.ZREQUEST_TYPE)='AL'  ";
						}
					}

					else if ("EstimateSanctionedAndAmtPaid".equalsIgnoreCase(cscvo.getStatus())) {
						if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='AL' ";
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='AL'   ";
						} else if ("LESS_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='AL' and zmonth<3 and zyear=0 ";
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='AL'   AND ZMONTH = 2 AND ZMONTH > =2";
						} else if ("GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='AL' and zmonth>=3 and zmonth<6 and
							// zyear=0 ";

							// status = " AND TRIM(I.STATUS)='Payment not paid'
							// AND TRIM(I.ZREQUEST_TYPE)='AL' and zmonth>=3 and
							// zmonth<6 and zyear=0 ";
							//status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='AL'   AND ZMONTH =3 AND ZMONTH >=3 ";
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='AL'   AND ZMONTH = 2 AND ZMONTH > =2";
						} else if ("GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='AL' and zmonth>=6 and zmonth<9 and
							// zyear=0 ";
							// status = " AND TRIM(I.STATUS)='Payment not paid'
							// AND TRIM(I.ZREQUEST_TYPE)='AL' and zmonth>=6 and
							// zmonth<9 and zyear=0 ";
							//status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='AL'     AND ZMONTH = 4 AND ZMONTH >=4 ";
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='AL'   AND ZMONTH =3 AND ZMONTH >=3 ";
						} else if ("GTR_9MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='AL' and zyear<1 and zmonth>=9 ";

							// status = " AND TRIM(I.STATUS)='Payment not paid'
							// AND TRIM(I.ZREQUEST_TYPE)='AL' and zyear<1 and
							// zmonth>=9 ";
							//status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='AL'  and zyear<0 and zmonth>=5 ";
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='AL'     AND ZMONTH = 4 AND ZMONTH >=4 ";
						} else if ("GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='AL' and ZYEAR>=1 ";
							status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='AL'   and  ZYEAR>=1  ";
						} else {
							// status = "";
							status = " AND TRIM(I.STATUS) in('Estimate not created','Estimate not approved','Payment not paid','Payment paid') AND TRIM(I.ZREQUEST_TYPE)='AL'  ";
						}
					} else {

						if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='AL' ";
							status = " AND TRIM(I.STATUS)='Payment paid' AND TRIM(I.ZREQUEST_TYPE)='AL'   ";
						} else if ("LESS_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='AL' and zmonth<3 and zyear=0 ";
							status = " AND TRIM(I.STATUS)='Payment paid' AND TRIM(I.ZREQUEST_TYPE)='AL'   AND ZMONTH = 2 AND ZMONTH > =2";
						} else if ("GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='AL' and zmonth>=3 and zmonth<6 and
							// zyear=0 ";

							// status = " AND TRIM(I.STATUS)='Payment not paid'
							// AND TRIM(I.ZREQUEST_TYPE)='AL' and zmonth>=3 and
							// zmonth<6 and zyear=0 ";
							//status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='AL'   AND ZMONTH =3 AND ZMONTH >=3 ";
							status = " AND TRIM(I.STATUS)='Payment paid' AND TRIM(I.ZREQUEST_TYPE)='AL'   AND ZMONTH = 2 AND ZMONTH > =2";
						} else if ("GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='AL' and zmonth>=6 and zmonth<9 and
							// zyear=0 ";
							// status = " AND TRIM(I.STATUS)='Payment not paid'
							// AND TRIM(I.ZREQUEST_TYPE)='AL' and zmonth>=6 and
							// zmonth<9 and zyear=0 ";
							//status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='AL'     AND ZMONTH = 4 AND ZMONTH >=4 ";
							status = " AND TRIM(I.STATUS)='Payment paid' AND TRIM(I.ZREQUEST_TYPE)='AL'   AND ZMONTH =3 AND ZMONTH >=3 ";
						} else if ("GTR_9MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='AL' and zyear<1 and zmonth>=9 ";

							// status = " AND TRIM(I.STATUS)='Payment not paid'
							// AND TRIM(I.ZREQUEST_TYPE)='AL' and zyear<1 and
							// zmonth>=9 ";
							//status = " AND TRIM(I.STATUS)='Payment not paid' AND TRIM(I.ZREQUEST_TYPE)='AL'  and zyear<0 and zmonth>=5 ";
							status = " AND TRIM(I.STATUS)='Payment paid' AND TRIM(I.ZREQUEST_TYPE)='AL'     AND ZMONTH = 4 AND ZMONTH >=4 ";
						} else if ("GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " status='Payment not paid' and
							// ZREQUEST_TYPE='AL' and ZYEAR>=1 ";
							status = " AND TRIM(I.STATUS)='Payment paid' AND TRIM(I.ZREQUEST_TYPE)='AL'   and  ZYEAR>=1  ";
						} else {
							// status = "";
							status = " AND TRIM(I.STATUS) in('Estimate not created','Estimate not approved','Payment not paid','Payment paid') AND TRIM(I.ZREQUEST_TYPE)='AL'  ";
						}
					

					}
				} else {

				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "'");

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "' and subname='" + cscvo.getSubDiv() + "'");

				} else if ("SEC".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(
							"select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
									+ " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
									+ status + " and cirname='" + cscvo.getCircle() + "' and divname='"
									+ cscvo.getDivision() + "' and subname='" + cscvo.getSubDiv() + "' and secname='"
									+ cscvo.getSec() + "'");
				} else {

					if ("EstimateSanctionedAndAmtPaid".equalsIgnoreCase(cscvo.getStatus())) {
						resultSet = statement.executeQuery("select "
								+ " S.DIVNAME as Name_of_The_Division,S.SECNAME as Name_of_The_Section,R.CUSTOMER_NAME as Consumer_Name,R.REG_NO reg_no,to_char(I.ZREGDT,'DD-MM-YYYY') Registred_Date ,R.SERVICE_CONNECTION_NO as ServiceNumber,"
								+ " R.PRESENT_CATEGORY as cat,R.CONTRACTLOAD as Contracted_load,R.ADDITIONAL_LOAD as Additional_load,to_char(I.APRD_ON,'DD-MM-YYYY') as Sanctioned_date,"
								// + "(select TO_CHAR(max(CSPRDT),'DD-MM-YYYY')
								// from cscpay where cscpay.CSREGNO=R.REG_NO and
								// cscpay.CSCANCELID='N') as Payment_date,"
								+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.EXECUTION_TYPE "
								+ " from  new_complaints R,SPDCLMASTER S,IT_ALL I "
								+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)    " + status
								+ circle + "  order by AGE_Wise_Pendency DESC");
					} else {
						resultSet = statement.executeQuery("select "
								+ " S.DIVNAME as Name_of_The_Division,S.SECNAME as Name_of_The_Section,R.CUSTOMER_NAME as Consumer_Name,R.REG_NO reg_no,to_char(I.ZREGDT,'DD-MM-YYYY') Registred_Date ,R.SERVICE_CONNECTION_NO as ServiceNumber,"
								+ " R.PRESENT_CATEGORY as cat,R.CONTRACTLOAD as Contracted_load,R.ADDITIONAL_LOAD as Additional_load,"
								// + "(select TO_CHAR(max(CSPRDT),'DD-MM-YYYY')
								// from cscpay where cscpay.CSREGNO=R.REG_NO and
								// cscpay.CSCANCELID='N') as Payment_date,"
								+ " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE_Wise_Pendency,R.EXECUTION_TYPE "
								+ " from  new_complaints R,SPDCLMASTER S,IT_ALL I "
								+ " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)    " + status
								+ circle + "  order by AGE_Wise_Pendency DESC");

					}

					/*
					 * String query = " select " +
					 * " S.DIVNAME,S.SECNAME,R.CUSTOMER_NAME,R.REG_NO," +
					 * " R.PRESENT_CATEGORY,R.CONTRACTLOAD,R.ADDITIONAL_LOAD,I.APRD_ON,"
					 * +
					 * " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE,R.REMARKS"
					 * + " from  new_complaints R,SPDCLMASTER S,IT_ALL I " +
					 * " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)   and "
					 * + status + circle+""; System.out.println(query);
					 * resultSet = statement.executeQuery(
					 * "select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
					 * +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
					 * + status + " and cirname='" + cscvo.getCircle() + "'");
					 * resultSet = statement.executeQuery( " select " +
					 * " S.DIVNAME,S.SECNAME,R.CUSTOMER_NAME,R.REG_NO," +
					 * " R.PRESENT_CATEGORY,R.CONTRACTLOAD,R.ADDITIONAL_LOAD,I.APRD_ON,"
					 * +
					 * " (I.ZYEAR || ' YEAR ' || I.ZMONTH ||' MONTHS') AS AGE,R.REMARKS"
					 * + " from  new_complaints R,SPDCLMASTER S,IT_ALL I " +
					 * " where  substr(R.REG_NO,0,5)=S.SECCD AND TRIM(R.REG_NO)=TRIM(I.ZREGID)   "
					 * + status + circle+"");
					 */

					/*
					 * .executeQuery(
					 * " select row_number() over (partition by null order by null) sno,"
					 * +
					 * " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
					 * +
					 * " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
					 * +
					 * " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
					 * + " greatest(nvl(grp_prdt,reg_date)," +
					 * " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
					 * + " meseva_ref reference_no ," +
					 * " PENDING_STAT,SLADESC,EXECUTION_TYPE," +
					 * " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() +
					 * "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)  ) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=Status Additional Load as "
						+ cscvo.getCtype() + "  Type:" + cscvo.getType() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered in Single Desk Portal " + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// Simplified 1

	// Simplified Allcounters

	public CscpayVO getCatwiseSimplifiedDetails(CscpayVO cscvo) throws Exception {

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = c.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));
		String endDate1 = String.valueOf(curr_date);
		if (endDate1.length() == 1)
			endDate1 = "0".concat(endDate1);
		endDate = endDate1.concat("-")
				.concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		System.out.println("Date:" + startDate);

		if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			cattype = " AND upper(A.reg_no)   like '%H%' ";
		} else {
			cattype = " AND upper(A.reg_no)  not like '%H%' ";
		}

		if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			category = " ";
		} else {
			category = " AND A.CATEGORY_SUPPLY LIKE '" + cscvo.getCat() + "%' ";
		}

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		// Connection con =
		// DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT NVL(S.divname,'TOTAL') ,COUNT(I.REG_NO) OB ,COUNT(J.REG_NO) REGISTERED ,COUNT(B.REG_NO) DELETED ,COUNT(C.REG_NO) RELEASED ,"
							+ " (COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL ,COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP ,COUNT(M.REG_NO) TOBE_PAID_BEYOND_SOP ,"
							+ " COUNT(E.REG_NO) PENDING_WRT ,COUNT(F.REG_NO) PENDING_BRT ,COUNT(N.REG_NO) TURNKEY,COUNT(G.REG_NO) REL_WRT,COUNT(H.REG_NO) REL_BRT FROM  "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL ) A ,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE ) J ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN         '"
							+ startDate
							+ "'       AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%') ) B ,"
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21' ) C ,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X' AND SUPPLY_RELEASE_DATE IS NULL  AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '3')D ,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) > 3)M ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE upper (REPSTAT)  like '%WRT%' AND  SLADESC='Pending for service release' )E ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL  WHERE upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release' )F ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE upper (REPSTAT)  like '%TKEY%' )N, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '7' AND TRUNC(REG_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE)G ,"
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 7 AND  TRUNC(REG_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE )H ,"
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I ,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S " + " WHERE A.REG_NO=B.REG_NO(+)  "
							+ " AND A.REG_NO=C.REG_NO(+)  " + " AND A.REG_NO=D.REG_NO(+) "
							+ " AND A.REG_NO=E.REG_NO(+) " + " AND A.REG_NO=F.REG_NO(+) "
							+ " AND A.REG_NO=G.REG_NO(+)  " + " AND A.REG_NO=H.REG_NO(+)  "
							+ " AND A.REG_NO=I.REG_NO(+)  " + " AND A.REG_NO=J.REG_NO(+)  "
							+ " AND A.REG_NO=M.REG_NO(+) " + " AND A.REG_NO=N.REG_NO(+)  "
							+ " AND A.NCPARTCD=S.SECCD   " + " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.NCPARTCD=J.NCPARTCD(+)  " + " AND NVL(A.ESTSTATUS,'01')='01'    "
							// + " AND A.CATEGORY_SUPPLY LIKE '1%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " " + " and cirname=? GROUP BY rollup(S.divname)  ORDER BY S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.subname,'TOTAL') ,COUNT(I.REG_NO) OB ,COUNT(J.REG_NO) REGISTERED ,COUNT(B.REG_NO) DELETED ,COUNT(C.REG_NO) RELEASED ,"
							+ " (COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL ,COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP ,COUNT(M.REG_NO) TOBE_PAID_BEYOND_SOP ,"
							+ " COUNT(E.REG_NO) PENDING_WRT ,COUNT(F.REG_NO) PENDING_BRT ,COUNT(N.REG_NO) TURNKEY,COUNT(G.REG_NO) REL_WRT,COUNT(H.REG_NO) REL_BRT FROM  "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL ) A ,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE ) J ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN         '"
							+ startDate
							+ "'       AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%') ) B ,"
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21' ) C ,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X' AND SUPPLY_RELEASE_DATE IS NULL  AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '3')D ,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) > 3)M ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE upper (REPSTAT)  like '%WRT%' AND  SLADESC='Pending for service release' )E ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL  WHERE upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release' )F ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE upper (REPSTAT)  like '%TKEY%' )N, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '7' AND TRUNC(REG_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE)G ,"
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 7 AND  TRUNC(REG_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE )H ,"
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I ,"
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+)  " + " AND A.REG_NO=C.REG_NO(+)  "
							+ " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+) " + " AND A.REG_NO=F.REG_NO(+) "
							+ " AND A.REG_NO=G.REG_NO(+)  " + " AND A.REG_NO=H.REG_NO(+)  "
							+ " AND A.REG_NO=I.REG_NO(+)  " + " AND A.REG_NO=J.REG_NO(+)  "
							+ " AND A.REG_NO=M.REG_NO(+)" + " AND A.REG_NO=N.REG_NO(+)  " + " AND A.NCPARTCD=S.SECCD   "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) " + " AND A.NCPARTCD=J.NCPARTCD(+)  "
							+ " AND NVL(A.ESTSTATUS,'01')='01'    "
							// + " AND A.CATEGORY_SUPPLY LIKE '1%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " and cirname=? and divname=? GROUP BY rollup(S.subname)  ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.secname,'TOTAL') ,COUNT(I.REG_NO) OB ,COUNT(J.REG_NO) REGISTERED ,COUNT(B.REG_NO) DELETED ,COUNT(C.REG_NO) RELEASED ,"
							+ " (COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL ,COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP ,COUNT(M.REG_NO) TOBE_PAID_BEYOND_SOP ,"
							+ " COUNT(E.REG_NO) PENDING_WRT ,COUNT(F.REG_NO) PENDING_BRT ,COUNT(N.REG_NO) TURNKEY,COUNT(G.REG_NO) REL_WRT,COUNT(H.REG_NO) REL_BRT FROM  "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL ) A ,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE ) J ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN         '"
							+ startDate
							+ "'       AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%') ) B ,"
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21' ) C ,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X' AND SUPPLY_RELEASE_DATE IS NULL  AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '3')D ,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) > 3)M ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE upper (REPSTAT)  like '%WRT%' AND  SLADESC='Pending for service release' )E ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL  WHERE upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release' )F ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE upper (REPSTAT)  like '%TKEY%' )N, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '7' AND TRUNC(REG_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE)G ,"
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 7 AND  TRUNC(REG_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE )H ,"
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I ,"
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+)  " + " AND A.REG_NO=C.REG_NO(+)  "
							+ " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+) " + " AND A.REG_NO=F.REG_NO(+) "
							+ " AND A.REG_NO=G.REG_NO(+)  " + " AND A.REG_NO=H.REG_NO(+)  "
							+ " AND A.REG_NO=I.REG_NO(+)  " + " AND A.REG_NO=J.REG_NO(+)  "
							+ " AND A.REG_NO=M.REG_NO(+)" + " AND A.REG_NO=N.REG_NO(+)  " + " AND A.NCPARTCD=S.SECCD   "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) " + " AND A.NCPARTCD=J.NCPARTCD(+)  "
							+ " AND NVL(A.ESTSTATUS,'01')='01'    "
							// + " AND A.CATEGORY_SUPPLY LIKE '1%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " and cirname=? and divname=? and subname=? GROUP BY rollup(S.secname)   ORDER BY S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT NVL(S.CIRNAME,'TOTAL') ,COUNT(I.REG_NO) OB ,COUNT(J.REG_NO) REGISTERED ,COUNT(B.REG_NO) DELETED ,COUNT(C.REG_NO) RELEASED ,"
							+ " (COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL ,COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP ,COUNT(M.REG_NO) TOBE_PAID_BEYOND_SOP ,"
							+ " COUNT(E.REG_NO) PENDING_WRT ,COUNT(F.REG_NO) PENDING_BRT ,COUNT(N.REG_NO) TURNKEY,COUNT(G.REG_NO) REL_WRT,COUNT(H.REG_NO) REL_BRT FROM  "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL ) A ,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE ) J ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN         '"
							+ startDate
							+ "'       AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%') ) B ,"
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21' ) C ,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X' AND SUPPLY_RELEASE_DATE IS NULL  AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '3')D ,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(EXTDEM,0)  AND NVL(EXTDEM,0) > 0 AND (INTIMATE_DATE-REG_DATE) > 3)M ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE upper (REPSTAT)  like '%WRT%' AND  SLADESC='Pending for service release' )E ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL  WHERE upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release' )F ,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE upper (REPSTAT)  like '%TKEY%' )N, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '7' AND TRUNC(REG_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE)G ,"
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 7 AND  TRUNC(REG_DATE) BETWEEN         '"
							+ startDate + "'       AND SYSDATE )H ,"
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I ,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S " + " WHERE A.REG_NO=B.REG_NO(+)  "
							+ " AND A.REG_NO=C.REG_NO(+)  " + " AND A.REG_NO=D.REG_NO(+) "
							+ " AND A.REG_NO=E.REG_NO(+) " + " AND A.REG_NO=F.REG_NO(+) "
							+ " AND A.REG_NO=G.REG_NO(+)  " + " AND A.REG_NO=H.REG_NO(+)  "
							+ " AND A.REG_NO=I.REG_NO(+)  " + " AND A.REG_NO=J.REG_NO(+)  "
							+ " AND A.REG_NO=M.REG_NO(+)" + " AND A.REG_NO=N.REG_NO(+)  " + " AND A.NCPARTCD=S.SECCD   "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) " + " AND A.NCPARTCD=J.NCPARTCD(+)  "
							+ " AND NVL(A.ESTSTATUS,'01')='01'    "
							// + " AND A.CATEGORY_SUPPLY LIKE '1%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " " + " GROUP BY rollup(S.CIRNAME)  ORDER BY S.cirname ";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setOb(reportRst.getString(2));
							dmapobj.setRegistered(reportRst.getString(3));
							dmapobj.setDeleted(reportRst.getString(4));
							dmapobj.setAppReleased(reportRst.getString(5));
							dmapobj.setOb_after_rel(reportRst.getString(6));

							// dmapobj.setDem_within_sop(reportRst.getString(7));
							// dmapobj.setDem_beyond_sop(reportRst.getString(8));

							dmapobj.setAmt_paid_within_sop(reportRst.getString(7));
							dmapobj.setAmt_paid_dem_beyond_sop(reportRst.getString(8));

							dmapobj.setPen_est_brt(reportRst.getString(9));
							dmapobj.setPen_esti_wrt(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));

							dmapobj.setRel_est_brt(reportRst.getString(12));
							dmapobj.setRel_esti_wrt(reportRst.getString(13));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setOb(reportRst.getString(2));
							dmapobj.setRegistered(reportRst.getString(3));
							dmapobj.setDeleted(reportRst.getString(4));
							dmapobj.setAppReleased(reportRst.getString(5));
							dmapobj.setOb_after_rel(reportRst.getString(6));

							// dmapobj.setDem_within_sop(reportRst.getString(7));
							// dmapobj.setDem_beyond_sop(reportRst.getString(8));

							dmapobj.setAmt_paid_within_sop(reportRst.getString(7));
							dmapobj.setAmt_paid_dem_beyond_sop(reportRst.getString(8));

							dmapobj.setPen_est_brt(reportRst.getString(9));
							dmapobj.setPen_esti_wrt(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));

							dmapobj.setRel_est_brt(reportRst.getString(12));
							dmapobj.setRel_esti_wrt(reportRst.getString(13));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

			/*
			 * try { if (con != null) {
			 * 
			 * DBConnectionManager.getInstance().freeConnection(con);
			 * con.close(); } if (reportPStmt != null) reportPStmt.close(); if
			 * (reportRst != null) reportRst.close(); } catch (Exception ex) {
			 * ex.printStackTrace(); }
			 */}
		return cscvo;
	}

	// extention new details

	public CscpayVO getCatwiseExtention5ADetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = c.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));
		String endDate1 = String.valueOf(curr_date);
		if (endDate1.length() == 1)
			endDate1 = "0".concat(endDate1);
		endDate = endDate1.concat("-")
				.concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		//System.out.println("Date:" + startDate);

		if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			cattype = " AND upper(A.reg_no)   like '%H%'  ";
		} else {
			cattype = " AND upper(A.reg_no)  not like '%H%'  ";
		}
		
		if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			category = " ";
		} else {
			category = " AND A.CATEGORY_SUPPLY LIKE '" + cscvo.getCat() + "%' ";
		}

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT NVL(S.divname,'TOTAL'),COUNT(I.REG_NO)OB,COUNT(J.REG_NO) REGISTERED,COUNT(B.REG_NO) DELETED,COUNT(C.REG_NO)RELEASED,"
							+ " (COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL, COUNT(K.REG_NO)WITHIN_SOP,COUNT(L.REG_NO)BEYOND_SOP,"
							+ " COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP,COUNT(M.REG_NO)TOBE_PAID_BEYOND_SOP,COUNT(E.REG_NO) PENDING_WRT, COUNT(F.REG_NO) PENDING_BRT,COUNT(N.REG_NO) TURNKEY,COUNT(G.REG_NO) REL_WRT,"
							+ " COUNT(H.REG_NO) REL_BRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE   nvl(consumer_status_val,'NA')='YSR JALAKALA')A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE )J, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)B,  "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE)K, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE)L, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS null  AND  SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE )C,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7')D, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null )M, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release')E, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%BRT' AND  SLADESC='Pending for service release')F, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%TKEY%' AND  SLADESC='Pending for service release' )N, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY   FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '15' AND SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE)G,  "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 15 AND  SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE )H, "
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT,CATEGORY_SUPPLY  FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I, "
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S " + " WHERE A.REG_NO=B.REG_NO(+) "
							+ " AND A.REG_NO=C.REG_NO(+) " + " AND A.REG_NO=D.REG_NO(+) "
							+ " AND A.REG_NO=E.REG_NO(+)  " + " AND A.REG_NO=F.REG_NO(+)  "
							+ " AND A.REG_NO=G.REG_NO(+) " + " AND A.REG_NO=H.REG_NO(+) " + " AND A.REG_NO=I.REG_NO(+) "
							+ " AND A.REG_NO=J.REG_NO(+)  " + " AND A.REG_NO=K.REG_NO(+)  "
							+ " AND A.REG_NO=L.REG_NO(+) " + " AND A.REG_NO=M.REG_NO(+) "
							+ " AND A.REG_NO=N.REG_NO(+)  " + " AND A.NCPARTCD=S.SECCD  "
							// + " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=B.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=C.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=D.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=E.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=F.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=G.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=H.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=I.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=K.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=L.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=M.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=N.CATEGORY_SUPPLY(+) " + "  AND A.NCPARTCD=J.NCPARTCD(+) "
							+ " AND NVL(A.ESTSTATUS,'01')='02'   " + " " + category + " "
							// + " AND A.CATEGORY_SUPPLY LIKE '1%' "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " " + " and cirname=? GROUP BY rollup(S.divname) ORDER BY S.divname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = "SELECT NVL(S.subname,'TOTAL'),COUNT(I.REG_NO)OB,COUNT(J.REG_NO) REGISTERED,COUNT(B.REG_NO) DELETED,COUNT(C.REG_NO)RELEASED,"
							+ " (COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL, COUNT(K.REG_NO)WITHIN_SOP,COUNT(L.REG_NO)BEYOND_SOP,"
							+ " COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP,COUNT(M.REG_NO)TOBE_PAID_BEYOND_SOP,COUNT(E.REG_NO) PENDING_WRT, COUNT(F.REG_NO) PENDING_BRT,COUNT(N.REG_NO) TURNKEY,COUNT(G.REG_NO) REL_WRT,"
							+ " COUNT(H.REG_NO) REL_BRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE   nvl(consumer_status_val,'NA')='YSR JALAKALA')A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE )J, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)B,  "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE)K, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE)L, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS null  AND  SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE )C,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7')D, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null )M, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release')E, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%BRT' AND  SLADESC='Pending for service release')F, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%TKEY%' AND  SLADESC='Pending for service release')N, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY   FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '15' AND SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE)G,  "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 15 AND  SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE )H, "
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT,CATEGORY_SUPPLY  FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I, "
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+) " + " AND A.REG_NO=C.REG_NO(+) "
							+ " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+)  "
							+ " AND A.REG_NO=F.REG_NO(+)  " + " AND A.REG_NO=G.REG_NO(+) "
							+ " AND A.REG_NO=H.REG_NO(+) " + " AND A.REG_NO=I.REG_NO(+) "
							+ " AND A.REG_NO=J.REG_NO(+)  " + " AND A.REG_NO=K.REG_NO(+)  "
							+ " AND A.REG_NO=L.REG_NO(+) " + " AND A.REG_NO=M.REG_NO(+) "
							+ " AND A.REG_NO=N.REG_NO(+)  " + " AND A.NCPARTCD=S.SECCD  "
							// + " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+)"
							+ " AND A.CATEGORY_SUPPLY=B.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=C.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=D.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=E.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=F.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=G.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=H.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=I.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=K.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=L.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=M.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=N.CATEGORY_SUPPLY(+) " + "  AND A.NCPARTCD=J.NCPARTCD(+) "
							+ " AND NVL(A.ESTSTATUS,'01')='02'   " + " " + category + " "
							// + " AND A.CATEGORY_SUPPLY LIKE '1%' "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " and cirname=? and divname=? GROUP BY rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.secname,'TOTAL'),COUNT(I.REG_NO)OB,COUNT(J.REG_NO) REGISTERED,COUNT(B.REG_NO) DELETED,COUNT(C.REG_NO)RELEASED,"
							+ " (COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL, COUNT(K.REG_NO)WITHIN_SOP,COUNT(L.REG_NO)BEYOND_SOP,"
							+ " COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP,COUNT(M.REG_NO)TOBE_PAID_BEYOND_SOP,COUNT(E.REG_NO) PENDING_WRT, COUNT(F.REG_NO) PENDING_BRT,COUNT(N.REG_NO) TURNKEY,COUNT(G.REG_NO) REL_WRT,"
							+ " COUNT(H.REG_NO) REL_BRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE  nvl(consumer_status_val,'NA')='YSR JALAKALA' )A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN   '"
							+ startDate + "'    AND SYSDATE )J, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
							+ startDate + "'    AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)B,  "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
							+ startDate + "'    AND SYSDATE)K, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
							+ startDate + "'    AND SYSDATE)L, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS null  AND  SUPPLY_RELEASE_DATE BETWEEN   '"
							+ startDate + "'    AND SYSDATE )C,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7')D, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null )M, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release')E, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%BRT' AND  SLADESC='Pending for service release')F,  "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%TKEY%' AND  SLADESC='Pending for service release')N, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY   FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '15' AND SUPPLY_RELEASE_DATE BETWEEN   '"
							+ startDate + "'    AND SYSDATE)G,  "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 15 AND  SUPPLY_RELEASE_DATE BETWEEN   '"
							+ startDate + "'    AND SYSDATE )H, "
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT,CATEGORY_SUPPLY  FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I, "
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+) " + " AND A.REG_NO=C.REG_NO(+) "
							+ " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+) " + " AND A.REG_NO=F.REG_NO(+) "
							+ " AND A.REG_NO=G.REG_NO(+) " + " AND A.REG_NO=H.REG_NO(+) " + " AND A.REG_NO=I.REG_NO(+) "
							+ " AND A.REG_NO=J.REG_NO(+) " + " AND A.REG_NO=K.REG_NO(+) " + " AND A.REG_NO=L.REG_NO(+) "
							+ " AND A.REG_NO=M.REG_NO(+) " + " AND A.REG_NO=N.REG_NO(+) " + " AND A.NCPARTCD=S.SECCD  "
							// + " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=B.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=C.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=D.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=E.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=F.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=G.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=H.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=I.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=K.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=L.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=M.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=N.CATEGORY_SUPPLY(+) " + " AND A.NCPARTCD=J.NCPARTCD(+) "
							+ " AND NVL(A.ESTSTATUS,'01')='02'   "
							// + " AND A.CATEGORY_SUPPLY LIKE '1%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ "  and cirname=? and divname=?  and subname=? GROUP BY rollup(S.secname) ORDER BY S.secname ";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(I.REG_NO)OB,COUNT(J.REG_NO) REGISTERED,COUNT(B.REG_NO) DELETED,COUNT(C.REG_NO)RELEASED,"
							+ " (COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL, COUNT(K.REG_NO)WITHIN_SOP,COUNT(L.REG_NO)BEYOND_SOP,"
							+ " COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP,COUNT(M.REG_NO)TOBE_PAID_BEYOND_SOP,COUNT(E.REG_NO) PENDING_WRT, COUNT(F.REG_NO) PENDING_BRT,COUNT(N.REG_NO) TURNKEY,COUNT(G.REG_NO) REL_WRT,"
							+ " COUNT(H.REG_NO) REL_BRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE  nvl(consumer_status_val,'NA')='YSR JALAKALA')A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE )J, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)B,  "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE)K, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE)L, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CATEGORY_SUPPLY FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS null  AND  SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE )C,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7')D, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null )M, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release')E, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE upper (REPSTAT)  like '%BRT' AND  SLADESC='Pending for service release')F, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE upper (REPSTAT)  like '%TKEY%' AND  SLADESC='Pending for service release')N, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '15' AND SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE)G,  "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 15 AND  SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE )H, "
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT,CATEGORY_SUPPLY FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I, "
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S " + " WHERE A.REG_NO=B.REG_NO(+) "
							+ " AND A.REG_NO=C.REG_NO(+) " + " AND A.REG_NO=D.REG_NO(+) "
							+ " AND A.REG_NO=E.REG_NO(+)  " + " AND A.REG_NO=F.REG_NO(+)  "
							+ " AND A.REG_NO=G.REG_NO(+) " + " AND A.REG_NO=H.REG_NO(+) " + " AND A.REG_NO=I.REG_NO(+) "
							+ " AND A.REG_NO=J.REG_NO(+)  " + " AND A.REG_NO=K.REG_NO(+)  "
							+ " AND A.REG_NO=L.REG_NO(+) " + " AND A.REG_NO=M.REG_NO(+)" + " AND A.REG_NO=N.REG_NO(+)  "
							+ " AND A.NCPARTCD=S.SECCD  " + " AND A.CATEGORY_SUPPLY=B.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=C.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=D.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=E.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=F.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=G.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=H.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=I.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=K.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=L.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=M.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=N.CATEGORY_SUPPLY(+) " + " AND A.NCPARTCD=J.NCPARTCD(+) "
							+ " AND NVL(A.ESTSTATUS,'01')='02'   " + " " + category + " " + " " + cattype + " "
							// + " AND A.CATEGORY_SUPPLY LIKE '1%' "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " GROUP BY rollup(S.CIRNAME) ORDER BY S.CIRNAME ";
					
					//System.out.println("test11:"+query);
					reportPStmt = con.prepareStatement(query);
					//System.out.println("extenstion1 5A:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setOb(reportRst.getString(2));
							dmapobj.setRegistered(reportRst.getString(3));
							dmapobj.setDeleted(reportRst.getString(4));
							dmapobj.setAppReleased(reportRst.getString(5));
							dmapobj.setOb_after_rel(reportRst.getString(6));

							dmapobj.setDem_within_sop(reportRst.getString(7));
							dmapobj.setDem_beyond_sop(reportRst.getString(8));

							dmapobj.setAmt_paid_within_sop(reportRst.getString(9));
							dmapobj.setAmt_paid_dem_beyond_sop(reportRst.getString(10));

							dmapobj.setPen_est_brt(reportRst.getString(11));
							dmapobj.setPen_esti_wrt(reportRst.getString(12));
							dmapobj.setTurnKey(reportRst.getString(13));

							dmapobj.setRel_est_brt(reportRst.getString(14));
							dmapobj.setRel_esti_wrt(reportRst.getString(15));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setOb(reportRst.getString(2));
							dmapobj.setRegistered(reportRst.getString(3));
							dmapobj.setDeleted(reportRst.getString(4));
							dmapobj.setAppReleased(reportRst.getString(5));
							dmapobj.setOb_after_rel(reportRst.getString(6));

							dmapobj.setDem_within_sop(reportRst.getString(7));
							dmapobj.setDem_beyond_sop(reportRst.getString(8));

							dmapobj.setAmt_paid_within_sop(reportRst.getString(9));
							dmapobj.setAmt_paid_dem_beyond_sop(reportRst.getString(10));

							dmapobj.setPen_est_brt(reportRst.getString(11));
							dmapobj.setPen_esti_wrt(reportRst.getString(12));
							dmapobj.setTurnKey(reportRst.getString(13));

							dmapobj.setRel_est_brt(reportRst.getString(14));
							dmapobj.setRel_esti_wrt(reportRst.getString(15));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
		
		
	}
		public CscpayVO getCatwiseExtentionDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = c.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));
		String endDate1 = String.valueOf(curr_date);
		if (endDate1.length() == 1)
			endDate1 = "0".concat(endDate1);
		endDate = endDate1.concat("-")
				.concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		//System.out.println("Date:" + startDate);

		if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			cattype = " AND upper(A.reg_no)   like '%H%'  ";
		} else {
			cattype = " AND upper(A.reg_no)  not like '%H%'  ";
		}
		
		if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			category = " ";
		} else {
			category = " AND A.CATEGORY_SUPPLY LIKE '" + cscvo.getCat() + "%' ";
		}

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT NVL(S.divname,'TOTAL'),COUNT(I.REG_NO)OB,COUNT(J.REG_NO) REGISTERED,COUNT(B.REG_NO) DELETED,COUNT(C.REG_NO)RELEASED,"
							+ " (COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL, COUNT(K.REG_NO)WITHIN_SOP,COUNT(L.REG_NO)BEYOND_SOP,"
							+ " COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP,COUNT(M.REG_NO)TOBE_PAID_BEYOND_SOP,COUNT(E.REG_NO) PENDING_WRT, COUNT(F.REG_NO) PENDING_BRT,COUNT(N.REG_NO) TURNKEY,COUNT(G.REG_NO) REL_WRT,"
							+ " COUNT(H.REG_NO) REL_BRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE  NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE )J, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)B,  "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE)K, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE)L, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS null  AND  SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE )C,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7')D, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null )M, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release')E, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%BRT' AND  SLADESC='Pending for service release')F, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%TKEY%' AND  SLADESC='Pending for service release' )N, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY   FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '15' AND SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE)G,  "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 15 AND  SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE )H, "
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT,CATEGORY_SUPPLY  FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I, "
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S " + " WHERE A.REG_NO=B.REG_NO(+) "
							+ " AND A.REG_NO=C.REG_NO(+) " + " AND A.REG_NO=D.REG_NO(+) "
							+ " AND A.REG_NO=E.REG_NO(+)  " + " AND A.REG_NO=F.REG_NO(+)  "
							+ " AND A.REG_NO=G.REG_NO(+) " + " AND A.REG_NO=H.REG_NO(+) " + " AND A.REG_NO=I.REG_NO(+) "
							+ " AND A.REG_NO=J.REG_NO(+)  " + " AND A.REG_NO=K.REG_NO(+)  "
							+ " AND A.REG_NO=L.REG_NO(+) " + " AND A.REG_NO=M.REG_NO(+) "
							+ " AND A.REG_NO=N.REG_NO(+)  " + " AND A.NCPARTCD=S.SECCD  "
							// + " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=B.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=C.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=D.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=E.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=F.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=G.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=H.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=I.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=K.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=L.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=M.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=N.CATEGORY_SUPPLY(+) " + "  AND A.NCPARTCD=J.NCPARTCD(+) "
							+ " AND NVL(A.ESTSTATUS,'01')='02'   " + " " + category + " "
							// + " AND A.CATEGORY_SUPPLY LIKE '1%' "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " " + " and cirname=? GROUP BY rollup(S.divname) ORDER BY S.divname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = "SELECT NVL(S.subname,'TOTAL'),COUNT(I.REG_NO)OB,COUNT(J.REG_NO) REGISTERED,COUNT(B.REG_NO) DELETED,COUNT(C.REG_NO)RELEASED,"
							+ " (COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL, COUNT(K.REG_NO)WITHIN_SOP,COUNT(L.REG_NO)BEYOND_SOP,"
							+ " COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP,COUNT(M.REG_NO)TOBE_PAID_BEYOND_SOP,COUNT(E.REG_NO) PENDING_WRT, COUNT(F.REG_NO) PENDING_BRT,COUNT(N.REG_NO) TURNKEY,COUNT(G.REG_NO) REL_WRT,"
							+ " COUNT(H.REG_NO) REL_BRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE  NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE )J, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)B,  "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE)K, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE)L, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS null  AND  SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE )C,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7')D, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null )M, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release')E, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%BRT' AND  SLADESC='Pending for service release')F, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%TKEY%' AND  SLADESC='Pending for service release')N, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY   FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '15' AND SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE)G,  "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 15 AND  SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE )H, "
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT,CATEGORY_SUPPLY  FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I, "
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+) " + " AND A.REG_NO=C.REG_NO(+) "
							+ " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+)  "
							+ " AND A.REG_NO=F.REG_NO(+)  " + " AND A.REG_NO=G.REG_NO(+) "
							+ " AND A.REG_NO=H.REG_NO(+) " + " AND A.REG_NO=I.REG_NO(+) "
							+ " AND A.REG_NO=J.REG_NO(+)  " + " AND A.REG_NO=K.REG_NO(+)  "
							+ " AND A.REG_NO=L.REG_NO(+) " + " AND A.REG_NO=M.REG_NO(+) "
							+ " AND A.REG_NO=N.REG_NO(+)  " + " AND A.NCPARTCD=S.SECCD  "
							// + " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+)"
							+ " AND A.CATEGORY_SUPPLY=B.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=C.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=D.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=E.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=F.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=G.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=H.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=I.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=K.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=L.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=M.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=N.CATEGORY_SUPPLY(+) " + "  AND A.NCPARTCD=J.NCPARTCD(+) "
							+ " AND NVL(A.ESTSTATUS,'01')='02'   " + " " + category + " "
							// + " AND A.CATEGORY_SUPPLY LIKE '1%' "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " and cirname=? and divname=? GROUP BY rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.secname,'TOTAL'),COUNT(I.REG_NO)OB,COUNT(J.REG_NO) REGISTERED,COUNT(B.REG_NO) DELETED,COUNT(C.REG_NO)RELEASED,"
							+ " (COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL, COUNT(K.REG_NO)WITHIN_SOP,COUNT(L.REG_NO)BEYOND_SOP,"
							+ " COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP,COUNT(M.REG_NO)TOBE_PAID_BEYOND_SOP,COUNT(E.REG_NO) PENDING_WRT, COUNT(F.REG_NO) PENDING_BRT,COUNT(N.REG_NO) TURNKEY,COUNT(G.REG_NO) REL_WRT,"
							+ " COUNT(H.REG_NO) REL_BRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE  NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') )A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN   '"
							+ startDate + "'    AND SYSDATE )J, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
							+ startDate + "'    AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)B,  "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
							+ startDate + "'    AND SYSDATE)K, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
							+ startDate + "'    AND SYSDATE)L, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS null  AND  SUPPLY_RELEASE_DATE BETWEEN   '"
							+ startDate + "'    AND SYSDATE )C,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7')D, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY  FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null )M, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release')E, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%BRT' AND  SLADESC='Pending for service release')F,  "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY  FROM REP_FINAL WHERE upper (REPSTAT)  like '%TKEY%' AND  SLADESC='Pending for service release')N, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY   FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '15' AND SUPPLY_RELEASE_DATE BETWEEN   '"
							+ startDate + "'    AND SYSDATE)G,  "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 15 AND  SUPPLY_RELEASE_DATE BETWEEN   '"
							+ startDate + "'    AND SYSDATE )H, "
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT,CATEGORY_SUPPLY  FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I, "
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+) " + " AND A.REG_NO=C.REG_NO(+) "
							+ " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+) " + " AND A.REG_NO=F.REG_NO(+) "
							+ " AND A.REG_NO=G.REG_NO(+) " + " AND A.REG_NO=H.REG_NO(+) " + " AND A.REG_NO=I.REG_NO(+) "
							+ " AND A.REG_NO=J.REG_NO(+) " + " AND A.REG_NO=K.REG_NO(+) " + " AND A.REG_NO=L.REG_NO(+) "
							+ " AND A.REG_NO=M.REG_NO(+) " + " AND A.REG_NO=N.REG_NO(+) " + " AND A.NCPARTCD=S.SECCD  "
							// + " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=B.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=C.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=D.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=E.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=F.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=G.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=H.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=I.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=K.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=L.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=M.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=N.CATEGORY_SUPPLY(+) " + " AND A.NCPARTCD=J.NCPARTCD(+) "
							+ " AND NVL(A.ESTSTATUS,'01')='02'   "
							// + " AND A.CATEGORY_SUPPLY LIKE '1%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ "  and cirname=? and divname=?  and subname=? GROUP BY rollup(S.secname) ORDER BY S.secname ";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(I.REG_NO)OB,COUNT(J.REG_NO) REGISTERED,COUNT(B.REG_NO) DELETED,COUNT(C.REG_NO)RELEASED,"
							+ " (COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL, COUNT(K.REG_NO)WITHIN_SOP,COUNT(L.REG_NO)BEYOND_SOP,"
							+ " COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP,COUNT(M.REG_NO)TOBE_PAID_BEYOND_SOP,COUNT(E.REG_NO) PENDING_WRT, COUNT(F.REG_NO) PENDING_BRT,COUNT(N.REG_NO) TURNKEY,COUNT(G.REG_NO) REL_WRT,"
							+ " COUNT(H.REG_NO) REL_BRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE  NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE )J, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)B,  "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE)K, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE,CATEGORY_SUPPLY FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE)L, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CATEGORY_SUPPLY FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS null  AND  SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE )C,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7')D, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE,CATEGORY_SUPPLY FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null )M, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release')E, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE upper (REPSTAT)  like '%BRT' AND  SLADESC='Pending for service release')F, "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE upper (REPSTAT)  like '%TKEY%' AND  SLADESC='Pending for service release')N, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '15' AND SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE)G,  "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,CATEGORY_SUPPLY FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 15 AND  SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE )H, "
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT,CATEGORY_SUPPLY FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I, "
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S " + " WHERE A.REG_NO=B.REG_NO(+) "
							+ " AND A.REG_NO=C.REG_NO(+) " + " AND A.REG_NO=D.REG_NO(+) "
							+ " AND A.REG_NO=E.REG_NO(+)  " + " AND A.REG_NO=F.REG_NO(+)  "
							+ " AND A.REG_NO=G.REG_NO(+) " + " AND A.REG_NO=H.REG_NO(+) " + " AND A.REG_NO=I.REG_NO(+) "
							+ " AND A.REG_NO=J.REG_NO(+)  " + " AND A.REG_NO=K.REG_NO(+)  "
							+ " AND A.REG_NO=L.REG_NO(+) " + " AND A.REG_NO=M.REG_NO(+)" + " AND A.REG_NO=N.REG_NO(+)  "
							+ " AND A.NCPARTCD=S.SECCD  " + " AND A.CATEGORY_SUPPLY=B.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=C.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=D.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=E.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=F.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=G.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=H.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=I.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=K.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=L.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=M.CATEGORY_SUPPLY(+) "
							+ " AND A.CATEGORY_SUPPLY=N.CATEGORY_SUPPLY(+) " + " AND A.NCPARTCD=J.NCPARTCD(+) "
							+ " AND NVL(A.ESTSTATUS,'01')='02'   " + " " + category + " " + " " + cattype + " "
							// + " AND A.CATEGORY_SUPPLY LIKE '1%' "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " GROUP BY rollup(S.CIRNAME) ORDER BY S.CIRNAME ";
					
					//System.out.println("test11:"+query);
					reportPStmt = con.prepareStatement(query);
					//System.out.println("extenstion1:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setOb(reportRst.getString(2));
							dmapobj.setRegistered(reportRst.getString(3));
							dmapobj.setDeleted(reportRst.getString(4));
							dmapobj.setAppReleased(reportRst.getString(5));
							dmapobj.setOb_after_rel(reportRst.getString(6));

							dmapobj.setDem_within_sop(reportRst.getString(7));
							dmapobj.setDem_beyond_sop(reportRst.getString(8));

							dmapobj.setAmt_paid_within_sop(reportRst.getString(9));
							dmapobj.setAmt_paid_dem_beyond_sop(reportRst.getString(10));

							dmapobj.setPen_est_brt(reportRst.getString(11));
							dmapobj.setPen_esti_wrt(reportRst.getString(12));
							dmapobj.setTurnKey(reportRst.getString(13));

							dmapobj.setRel_est_brt(reportRst.getString(14));
							dmapobj.setRel_esti_wrt(reportRst.getString(15));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setOb(reportRst.getString(2));
							dmapobj.setRegistered(reportRst.getString(3));
							dmapobj.setDeleted(reportRst.getString(4));
							dmapobj.setAppReleased(reportRst.getString(5));
							dmapobj.setOb_after_rel(reportRst.getString(6));

							dmapobj.setDem_within_sop(reportRst.getString(7));
							dmapobj.setDem_beyond_sop(reportRst.getString(8));

							dmapobj.setAmt_paid_within_sop(reportRst.getString(9));
							dmapobj.setAmt_paid_dem_beyond_sop(reportRst.getString(10));

							dmapobj.setPen_est_brt(reportRst.getString(11));
							dmapobj.setPen_esti_wrt(reportRst.getString(12));
							dmapobj.setTurnKey(reportRst.getString(13));

							dmapobj.setRel_est_brt(reportRst.getString(14));
							dmapobj.setRel_esti_wrt(reportRst.getString(15));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// export Simplified Reports
	// sdsd
	public void exportSimplified5ADetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Calendar cal = Calendar.getInstance();
		int curr_year = cal.get(Calendar.YEAR);
		int curr_month = cal.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = cal.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";
		String circle = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		if ("DIV".equals(cscvo.getFlag())) {
			if (cscvo.getDivision().equalsIgnoreCase("TOTAL")) {
				circle = " and cirname='" + cscvo.getCircle() + "'";

			}

			else {
				circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'";
			}

		} else if ("SUB_DIV".equals(cscvo.getFlag()))

		{
			if (cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
				circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'";

			}

			else {
				circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
						+ "' and subname='" + cscvo.getSubDiv() + "'";
			}

		}

		else if ("SEC".equals(cscvo.getFlag())) {
			if (cscvo.getSec().equalsIgnoreCase("TOTAL")) {
				// circle=" and cirname='" + cscvo.getCircle() + "' and
				// divname='" + cscvo.getDivision()+"'";
				circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
						+ "' and subname='" + cscvo.getSubDiv() + "'";

			}

			else {
				circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
						+ "' and subname='" + cscvo.getSubDiv() + "'";
			}

		} else if ("CIR".equals(cscvo.getFlag())) {

			if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
				circle = "";
			}

			else {
				circle = " and cirname='" + cscvo.getCircle() + "'";
			}

		} else {

		}

		try {
			if (con != null) {

				if ("Simplified1".equalsIgnoreCase(cscvo.getStatus())) {

					if ("HT".equalsIgnoreCase(cscvo.getCat())) {
						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='01'   AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory()
									+ "%'   and  upper (REPSTAT)  like '%TKEY%'   and upper(REG_NO)  like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = " AND NVL(ESTSTATUS,'01')='01'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)   like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							// TRUNC(REG_DATE) BETWEEN '01-JUN-2021' AND SYSDATE
							status = "   AND NVL(ESTSTATUS,'01')='01' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)   like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='01' and   NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN       '"
									+ startDate
									+ "'      AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%')  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)   like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='01'  and NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  TRUNC(RESPONSE_DATE) BETWEEN       '"
									+ startDate
									+ "'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)   like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='01' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									+ " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NULL      AND upper(reg_no)   like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							// upper (REPSTAT) like '%WRT%' AND SLADESC='Pending
							// for service release'
							status = "  AND NVL(ESTSTATUS,'01')='01'  AND upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release'   AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)   like '%H%' ";

							// status = " AND NVL(ESTSTATUS,'01')='01' AND
							// PENDING_STAT='WRT' AND CATEGORY_SUPPLY LIKE '"
							// + cscvo.getCategory() + "%' AND upper(reg_no) not
							// like '%H%' ";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							// upper (REPSTAT) like '%BRT%' AND SLADESC='Pending
							// for service release'
							status = "   AND NVL(ESTSTATUS,'01')='01'  AND   upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release' AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)   like '%H%' ";
							// status = " AND NVL(ESTSTATUS,'01')='01' AND
							// PENDING_STAT='BRT' AND CATEGORY_SUPPLY LIKE '"
							// + cscvo.getCategory() + "%' AND upper(reg_no) not
							// like '%H%' ";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " AND NVL(ESTSTATUS,'01')='01' AND
							// PENDING_STAT IN('BRT','WRT') AND CATEGORY_SUPPLY
							// LIKE '"
							// + cscvo.getCategory() + "%' AND upper(reg_no) not
							// like '%H%' ";
							status = "    AND NVL(ESTSTATUS,'01')='01' AND  ((upper (REPSTAT)  like '%WRT%' AND  SLADESC='Pending for service release' ) or "
									+ "  (upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release') or (upper (REPSTAT)  like '%TKEY%'  ))  "
									+ "   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)   like '%H%'  ";

						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
						} else {
							status = "";
						}
					}

					else {

						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='01'   AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory()
									+ "%'   and  upper (REPSTAT)  like '%TKEY%'   and upper(REG_NO) not like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = " AND NVL(ESTSTATUS,'01')='01'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							// TRUNC(REG_DATE) BETWEEN '01-JUN-2021' AND SYSDATE
							status = "   AND NVL(ESTSTATUS,'01')='01' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='01' and   NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN       '"
									+ startDate
									+ "'      AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%')  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='01'  and NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN       '"
									+ startDate
									+ "'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='01' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									+ " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NULL      AND upper(reg_no)  not like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							// upper (REPSTAT) like '%WRT%' AND SLADESC='Pending
							// for service release'
							status = "  AND NVL(ESTSTATUS,'01')='01'  AND upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release'   AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";

							// status = " AND NVL(ESTSTATUS,'01')='01' AND
							// PENDING_STAT='WRT' AND CATEGORY_SUPPLY LIKE '"
							// + cscvo.getCategory() + "%' AND upper(reg_no) not
							// like '%H%' ";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							// upper (REPSTAT) like '%BRT%' AND SLADESC='Pending
							// for service release'
							status = "   AND NVL(ESTSTATUS,'01')='01'  AND   upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release' AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
							// status = " AND NVL(ESTSTATUS,'01')='01' AND
							// PENDING_STAT='BRT' AND CATEGORY_SUPPLY LIKE '"
							// + cscvo.getCategory() + "%' AND upper(reg_no) not
							// like '%H%' ";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " AND NVL(ESTSTATUS,'01')='01' AND
							// PENDING_STAT IN('BRT','WRT') AND CATEGORY_SUPPLY
							// LIKE '"
							// + cscvo.getCategory() + "%' AND upper(reg_no) not
							// like '%H%' ";
							status = "    AND NVL(ESTSTATUS,'01')='01' AND  ((upper (REPSTAT)  like '%WRT%' AND  SLADESC='Pending for service release' ) or "
									+ "  (upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release') or (upper (REPSTAT)  like '%TKEY%'  ))  "
									+ "   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%'  ";

						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
						} else {
							status = "";
						}

					}
				} // else if ("LT".equalsIgnoreCase(cscvo.getType()) &&
					// cscvo.getCategory() != null) {}
					// else if ("LT".equalsIgnoreCase(cscvo.getType())) {} else
					// {}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,"
									
									+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
									+ ",PENDING_STAT,EXECUTION_TYPE " + " from rep_final a, spdclmaster  b "
									+ " where a.ncpartcd=b.seccd " + status + " "
									// + " and cirname='" + cscvo.getCircle()+
									// "' and divname='" + cscvo.getDivision()
									+ " " + circle + ""
									+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND NVL(consumer_status_val,'NA')='YSR JALAKALA' order by ((SYSDATE-MAXPRDT)/30) desc");
					
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,"
									
									+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
									+ " ,PENDING_STAT,EXECUTION_TYPE " + " from rep_final a, spdclmaster  b "
									+ " where a.ncpartcd=b.seccd " + status + " "
									// + " and cirname='" + cscvo.getCircle()+
									// "' and divname='" + cscvo.getDivision() +
									// "' and subname='" + cscvo.getSubDiv()
									+ " " + circle + ""
									+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  AND NVL(consumer_status_val,'NA')='YSR JALAKALA' order by ((SYSDATE-MAXPRDT)/30) desc ");
					

					
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY')  reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,"
									
									+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
									+ " ,PENDING_STAT,EXECUTION_TYPE " + " from rep_final a, spdclmaster  b "
									+ " where a.ncpartcd=b.seccd " + status + " "
									
									+ " " + circle + ""
									+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  AND NVL(consumer_status_val,'NA')='YSR JALAKALA'  order by ((SYSDATE-MAXPRDT)/30) desc");
					
				} else {
					
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,a.REG_NO reg_no,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,to_char(reg_date,'DD-MM-YYYY')  reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							// + " and cirname='" + cscvo.getCircle()
							+ " " + circle + ""
							+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND NVL(consumer_status_val,'NA')='YSR JALAKALA'  order by ((SYSDATE-INTIMATE_DATE)/30) desc ";
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date";
					//System.out.println(query);

					if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
						
						resultSet = statement.executeQuery(
								"  (select b.divname,b.secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')"
										+ " paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,"
										+ " PENDING_STAT,EXECUTION_TYPE  from rep_final a,spdclmaster  b   where  a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
										+ cscvo.getCategory() + "%' "
										+ " and upper(reg_no)  not like '%H%' and cirname='" + cscvo.getCircle()
										+ "'  AND NVL(ESTSTATUS,'01')='01' and  "
										+ " ((REPSTAT LIKE '%OB%') or  ((TRUNC(REG_DATE) BETWEEN   '" + startDate
										+ "'    AND SYSDATE)))  "
										+ "  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )"
										+ " minus "
										+ " (select b.divname,b.secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,"
										+ " category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,"
										+ " to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,"
										+ " PENDING_STAT,EXECUTION_TYPE  from rep_final a,spdclmaster  b   where    a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
										+ cscvo.getCategory() + "%' and upper(reg_no)  not like '%H%' "
										+ " and cirname='" + cscvo.getCircle()
										+ "'   AND NVL(ESTSTATUS,'01')='01' and  ((NVL(REJECTED,'Y') ='X' "
										+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN        '" + startDate
										+ "'      "
										+ " AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%')) or  "
										+ "  (NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  "
										+ " TRUNC(RESPONSE_DATE) BETWEEN       '01-MAY-2021'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'))  "
										+ "  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )");
					} else {
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,"
										+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
										+ " ,PENDING_STAT,EXECUTION_TYPE " + " from rep_final a, spdclmaster  b "
										+ " where a.ncpartcd=b.seccd " + status + ""
										// + " and cirname='" +
										// cscvo.getCircle()
										+ " " + circle + ""
										+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  AND NVL(consumer_status_val,'NA')='YSR JALAKALA' order by ((SYSDATE-MAXPRDT)/30) desc");
						// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
						// end),reg_date");

					}

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters_Simplified " + cscvo.getCtype()
								+ " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters _Simplified" + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	
		
		
		
	}
	public void exportSimplifiedDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Calendar cal = Calendar.getInstance();
		int curr_year = cal.get(Calendar.YEAR);
		int curr_month = cal.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = cal.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";
		String circle = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		if ("DIV".equals(cscvo.getFlag())) {
			if (cscvo.getDivision().equalsIgnoreCase("TOTAL")) {
				circle = " and cirname='" + cscvo.getCircle() + "'";

			}

			else {
				circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'";
			}

		} else if ("SUB_DIV".equals(cscvo.getFlag()))

		{
			if (cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
				circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'";

			}

			else {
				circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
						+ "' and subname='" + cscvo.getSubDiv() + "'";
			}

		}

		else if ("SEC".equals(cscvo.getFlag())) {
			if (cscvo.getSec().equalsIgnoreCase("TOTAL")) {
				// circle=" and cirname='" + cscvo.getCircle() + "' and
				// divname='" + cscvo.getDivision()+"'";
				circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
						+ "' and subname='" + cscvo.getSubDiv() + "'";

			}

			else {
				circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
						+ "' and subname='" + cscvo.getSubDiv() + "'";
			}

		} else if ("CIR".equals(cscvo.getFlag())) {

			if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
				circle = "";
			}

			else {
				circle = " and cirname='" + cscvo.getCircle() + "'";
			}

		} else {

		}

		try {
			if (con != null) {

				if ("Simplified1".equalsIgnoreCase(cscvo.getStatus())) {

					if ("HT".equalsIgnoreCase(cscvo.getCat())) {
						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='01'   AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory()
									+ "%'   and  upper (REPSTAT)  like '%TKEY%'   and upper(REG_NO)  like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = " AND NVL(ESTSTATUS,'01')='01'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)   like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							// TRUNC(REG_DATE) BETWEEN '01-JUN-2021' AND SYSDATE
							status = "   AND NVL(ESTSTATUS,'01')='01' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)   like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='01' and   NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN       '"
									+ startDate
									+ "'      AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%')  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)   like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='01'  and NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  TRUNC(RESPONSE_DATE) BETWEEN       '"
									+ startDate
									+ "'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)   like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='01' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									+ " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NULL      AND upper(reg_no)   like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							// upper (REPSTAT) like '%WRT%' AND SLADESC='Pending
							// for service release'
							status = "  AND NVL(ESTSTATUS,'01')='01'  AND upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release'   AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)   like '%H%' ";

							// status = " AND NVL(ESTSTATUS,'01')='01' AND
							// PENDING_STAT='WRT' AND CATEGORY_SUPPLY LIKE '"
							// + cscvo.getCategory() + "%' AND upper(reg_no) not
							// like '%H%' ";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							// upper (REPSTAT) like '%BRT%' AND SLADESC='Pending
							// for service release'
							status = "   AND NVL(ESTSTATUS,'01')='01'  AND   upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release' AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)   like '%H%' ";
							// status = " AND NVL(ESTSTATUS,'01')='01' AND
							// PENDING_STAT='BRT' AND CATEGORY_SUPPLY LIKE '"
							// + cscvo.getCategory() + "%' AND upper(reg_no) not
							// like '%H%' ";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " AND NVL(ESTSTATUS,'01')='01' AND
							// PENDING_STAT IN('BRT','WRT') AND CATEGORY_SUPPLY
							// LIKE '"
							// + cscvo.getCategory() + "%' AND upper(reg_no) not
							// like '%H%' ";
							status = "    AND NVL(ESTSTATUS,'01')='01' AND  ((upper (REPSTAT)  like '%WRT%' AND  SLADESC='Pending for service release' ) or "
									+ "  (upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release') or (upper (REPSTAT)  like '%TKEY%'  ))  "
									+ "   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)   like '%H%'  ";

						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
						} else {
							status = "";
						}
					}

					else {

						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='01'   AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory()
									+ "%'   and  upper (REPSTAT)  like '%TKEY%'   and upper(REG_NO) not like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = " AND NVL(ESTSTATUS,'01')='01'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							// TRUNC(REG_DATE) BETWEEN '01-JUN-2021' AND SYSDATE
							status = "   AND NVL(ESTSTATUS,'01')='01' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='01' and   NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN       '"
									+ startDate
									+ "'      AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%')  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='01'  and NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN       '"
									+ startDate
									+ "'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='01' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									+ " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NULL      AND upper(reg_no)  not like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							// upper (REPSTAT) like '%WRT%' AND SLADESC='Pending
							// for service release'
							status = "  AND NVL(ESTSTATUS,'01')='01'  AND upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release'   AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";

							// status = " AND NVL(ESTSTATUS,'01')='01' AND
							// PENDING_STAT='WRT' AND CATEGORY_SUPPLY LIKE '"
							// + cscvo.getCategory() + "%' AND upper(reg_no) not
							// like '%H%' ";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							// upper (REPSTAT) like '%BRT%' AND SLADESC='Pending
							// for service release'
							status = "   AND NVL(ESTSTATUS,'01')='01'  AND   upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release' AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
							// status = " AND NVL(ESTSTATUS,'01')='01' AND
							// PENDING_STAT='BRT' AND CATEGORY_SUPPLY LIKE '"
							// + cscvo.getCategory() + "%' AND upper(reg_no) not
							// like '%H%' ";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " AND NVL(ESTSTATUS,'01')='01' AND
							// PENDING_STAT IN('BRT','WRT') AND CATEGORY_SUPPLY
							// LIKE '"
							// + cscvo.getCategory() + "%' AND upper(reg_no) not
							// like '%H%' ";
							status = "    AND NVL(ESTSTATUS,'01')='01' AND  ((upper (REPSTAT)  like '%WRT%' AND  SLADESC='Pending for service release' ) or "
									+ "  (upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release') or (upper (REPSTAT)  like '%TKEY%'  ))  "
									+ "   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%'  ";

						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
						} else {
							status = "";
						}

					}
				} // else if ("LT".equalsIgnoreCase(cscvo.getType()) &&
					// cscvo.getCategory() != null) {}
					// else if ("LT".equalsIgnoreCase(cscvo.getType())) {} else
					// {}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,"
									
									+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
									+ ",PENDING_STAT,EXECUTION_TYPE " + " from rep_final a, spdclmaster  b "
									+ " where a.ncpartcd=b.seccd " + status + " "
									// + " and cirname='" + cscvo.getCircle()+
									// "' and divname='" + cscvo.getDivision()
									+ " " + circle + ""
									+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') order by ((SYSDATE-MAXPRDT)/30) desc");
					
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,"
									
									+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
									+ " ,PENDING_STAT,EXECUTION_TYPE " + " from rep_final a, spdclmaster  b "
									+ " where a.ncpartcd=b.seccd " + status + " "
									// + " and cirname='" + cscvo.getCircle()+
									// "' and divname='" + cscvo.getDivision() +
									// "' and subname='" + cscvo.getSubDiv()
									+ " " + circle + ""
									+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') order by ((SYSDATE-MAXPRDT)/30) desc ");
					

					
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							
							" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY')  reg_date,consumer_name ,category_supply CAT,"
									+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,"
									
									+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
									+ " ,PENDING_STAT,EXECUTION_TYPE " + " from rep_final a, spdclmaster  b "
									+ " where a.ncpartcd=b.seccd " + status + " "
									
									+ " " + circle + ""
									+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')  order by ((SYSDATE-MAXPRDT)/30) desc");
					
				} else {
					
					String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,a.REG_NO reg_no,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,to_char(reg_date,'DD-MM-YYYY')  reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
							+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
							+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
							// + " and cirname='" + cscvo.getCircle()
							+ " " + circle + ""
							+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')  order by ((SYSDATE-INTIMATE_DATE)/30) desc ";
					// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
					// end),reg_date";
					//System.out.println(query);

					if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
						
						resultSet = statement.executeQuery(
								"  (select b.divname,b.secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY')"
										+ " paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,"
										+ " PENDING_STAT,EXECUTION_TYPE  from rep_final a,spdclmaster  b   where  a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
										+ cscvo.getCategory() + "%' "
										+ " and upper(reg_no)  not like '%H%' and cirname='" + cscvo.getCircle()
										+ "'  AND NVL(ESTSTATUS,'01')='01' and  "
										+ " ((REPSTAT LIKE '%OB%') or  ((TRUNC(REG_DATE) BETWEEN   '" + startDate
										+ "'    AND SYSDATE)))  "
										+ "  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )"
										+ " minus "
										+ " (select b.divname,b.secname,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,"
										+ " category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,"
										+ " to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,(Round((SYSDATE-INTIMATE_DATE)/30)|| 'MONTHS') as AgePendency,"
										+ " PENDING_STAT,EXECUTION_TYPE  from rep_final a,spdclmaster  b   where    a.ncpartcd=b.seccd and CATEGORY_SUPPLY LIKE '"
										+ cscvo.getCategory() + "%' and upper(reg_no)  not like '%H%' "
										+ " and cirname='" + cscvo.getCircle()
										+ "'   AND NVL(ESTSTATUS,'01')='01' and  ((NVL(REJECTED,'Y') ='X' "
										+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN        '" + startDate
										+ "'      "
										+ " AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%')) or  "
										+ "  (NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  "
										+ " TRUNC(RESPONSE_DATE) BETWEEN       '01-MAY-2021'      AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'))  "
										+ "  and  seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) )");
					} else {
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date,"
										+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
										+ " ,PENDING_STAT,EXECUTION_TYPE " + " from rep_final a, spdclmaster  b "
										+ " where a.ncpartcd=b.seccd " + status + ""
										// + " and cirname='" +
										// cscvo.getCircle()
										+ " " + circle + ""
										+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') order by ((SYSDATE-MAXPRDT)/30) desc");
						// + " ,(case when reg_no like '%H%' then 'HT' else 'LT'
						// end),reg_date");

					}

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters_Simplified " + cscvo.getCtype()
								+ " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters _Simplified" + cscvo.getCtype()
								+ "  Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}
	// Estimated Details new

	@SuppressWarnings("unused")
	public void exportEstimatedDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Calendar cal = Calendar.getInstance();
		int curr_year = cal.get(Calendar.YEAR);
		int curr_month = cal.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = cal.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		String circle = "";

		if ("TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
			circle = "";
		} else {
			circle = "and cirname='" + cscvo.getCircle() + "'";
		}

		if ("TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
			circle = "and cirname='" + cscvo.getCircle() + "'";
		} else {
			circle = "and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'";
		}

		try {
			if (con != null) {

				if ("Extension1".equalsIgnoreCase(cscvo.getStatus())) {

					if ("HT".equalsIgnoreCase(cscvo.getCategory())) {
						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'   AND "
									// + " CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()+ "%' and "
									// + ""
									+ " upper(REPSTAT) like '%TKEY%'  and upper(REG_NO)  like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = " AND NVL(ESTSTATUS,'01')='02'   "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "    AND upper(reg_no)   like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  "
									// + "AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "   AND upper(reg_no)   like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and    PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
									+ startDate + "'     AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL "
									// + "AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "  AND upper(reg_no)   like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
									+ startDate + "'   AND SYSDATE  "
									// + "AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "   AND upper(reg_no)   like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NOT NULL      AND upper(reg_no)   like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and   PENDING_STAT='WRT' AND  SLADESC='Pending for service release'  "
									// + " AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "  AND upper(reg_no)   like '%H%' ";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and PENDING_STAT='BRT' AND  SLADESC='Pending for service release' "
									// + "AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "    AND upper(reg_no)   like '%H%' ";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    AND NVL(ESTSTATUS,'01')='02' and ( PENDING_STAT IN('BRT','WRT','TKEY') and SLADESC='Pending for service release'  or upper (REPSTAT)  like '%TKEY%')"
									// + " AND PENDING_STAT
									// IN('BRT','WRT','TKEY') and
									// SLADESC='Pending for service release'"
									// + " AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "   AND upper(reg_no)   like '%H%'  ";
						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND ((upper(REPSTAT) like '%WRT%'  and SLADESC='Pending for service release' ) or (upper(REPSTAT) like '%BRT%' and  SLADESC='Pending for service release') or (upper(REPSTAT) like '%TKEY%' ) ) and upper(REG_NO) like '%H%' ";
						} else if ("DEM_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02'  "
									// + " AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory()
									// + "%' "
									+ "  AND upper(reg_no)  not like '%H%'   AND  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("DEM_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "    AND upper(reg_no)   like '%H%'   AND   NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("PAID_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'  "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "  AND upper(reg_no)   like '%H%'  AND   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7' ";
						} else if ("PAID_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'  "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%'"
									+ "     AND upper(reg_no)   like '%H%'   "
									+ " AND  NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null ";
						} else {
							status = "";
						}
					} else {

						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%' and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) not like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = " AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and    PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
									+ startDate
									+ "'     AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
									+ startDate + "'   AND SYSDATE  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									+ " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NOT NULL      AND upper(reg_no)  not like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02' and   PENDING_STAT='WRT' AND  SLADESC='Pending for service release'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02' and PENDING_STAT='BRT' AND  SLADESC='Pending for service release' AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    AND NVL(ESTSTATUS,'01')='02' AND PENDING_STAT IN('BRT','WRT') and SLADESC='Pending for service release'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%'  ";
						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) not  like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
						} else if ("DEM_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   AND  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("DEM_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   AND   NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("PAID_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'  AND   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7' ";
						} else if ("PAID_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   "
									+ " AND  NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null ";
						} else {
							status = "";
						}

					}
					// }
				} // else {}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {

						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,"
										+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
										+ ",PENDING_STAT,EXECUTION_TYPE  " + " from rep_final a, spdclmaster  b "
										+ " where a.ncpartcd=b.seccd " + status + " and cirname='" + cscvo.getCircle()
										+ "' and divname='" + cscvo.getDivision()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO')   order by ((SYSDATE-maxprdt)/30) desc");
					} else {
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,"
										+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
										+ ",PENDING_STAT,EXECUTION_TYPE  " + " from rep_final a, spdclmaster  b "
										+ " where a.ncpartcd=b.seccd " + status + " " + " and cirname='"
										+ cscvo.getCircle() + "'"
										// + " and divname='" +
										// cscvo.getDivision()+ "' "
										+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO')   order by ((SYSDATE-maxprdt)/30) desc");
					}

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,"
										+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
										+ ",PENDING_STAT,EXECUTION_TYPE  " + " from rep_final a, spdclmaster  b "
										+ " where a.ncpartcd=b.seccd " + status + " and cirname='" + cscvo.getCircle()
										+ "' and divname='" + cscvo.getDivision() + "' and subname='"
										+ cscvo.getSubDiv()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO')  order by ((SYSDATE-maxprdt)/30) desc");
					} else {
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,"
										+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
										+ ",PENDING_STAT,EXECUTION_TYPE  " + " from rep_final a, spdclmaster  b "
										+ " where a.ncpartcd=b.seccd " + status + " and cirname='" + cscvo.getCircle()
										+ "' and divname='" + cscvo.getDivision() + "'"
										// + " and subname='" +
										// cscvo.getSubDiv()+ "' "
										+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO')  order by ((SYSDATE-maxprdt)/30) desc");
					}

				} else if ("SEC".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,"
										+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
										+ " ,PENDING_STAT,EXECUTION_TYPE  " + " from rep_final a, spdclmaster  b "
										+ " where a.ncpartcd=b.seccd " + status + " and cirname='" + cscvo.getCircle()
										+ "' and divname='" + cscvo.getDivision() + "' and subname='"
										+ cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
										+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  order by ((SYSDATE-maxprdt)/30) desc");
					} else {
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,"
										+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
										+ " ,PENDING_STAT,EXECUTION_TYPE  " + " from rep_final a, spdclmaster  b "
										+ " where a.ncpartcd=b.seccd " + status + " and cirname='" + cscvo.getCircle()
										+ "' and divname='" + cscvo.getDivision() + "' and subname='"
										+ cscvo.getSubDiv()
										// + "' and secname='" + cscvo.getSec()+
										// "'"
										+ "'  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO')  order by ((SYSDATE-maxprdt)/30) desc");
					}
				} else {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {

						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,"
										+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
										+ " ,PENDING_STAT,EXECUTION_TYPE  " + " from rep_final a, spdclmaster  b "
										+ " where a.ncpartcd=b.seccd " + status + " and cirname='" + cscvo.getCircle()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by ((SYSDATE-INTIMATE_DATE)/30) desc");
					} else {
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,divname Division,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT,"
										+ " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date,"
										+ " trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
										+ " ,PENDING_STAT,EXECUTION_TYPE  " + " from rep_final a, spdclmaster  b "
										+ " where a.ncpartcd=b.seccd " + status + ""
										// + " and cirname='" +
										// cscvo.getCircle() + "' "
										+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO') order by ((SYSDATE-INTIMATE_DATE)/30) desc");
					}

				}

				response.setContentType("application/download");
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// 24062021
	public CscpayVO getCatwiseSimplifiedDetails_test(CscpayVO cscvo) throws Exception {

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = c.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));
		String endDate1 = String.valueOf(curr_date);
		if (endDate1.length() == 1)
			endDate1 = "0".concat(endDate1);
		endDate = endDate1.concat("-")
				.concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		//System.out.println("Date:" + startDate);

	/*if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			// cattype = " AND upper(A.reg_no) like '%H%' ";
			cattype = " AND upper(reg_no)   like '%H%'  AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')";
		} else  {
			// cattype = " AND upper(A.reg_no) not like '%H%' ";
			cattype = " AND upper(reg_no)  not like '%H%' AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') ";
		}*/
		
		if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			cattype = " AND upper(reg_no)   like '%H%' AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') ";
		} else if ("5A".equalsIgnoreCase(cscvo.getCat())) {
			cattype = " AND upper(reg_no)  not like '%H%' and nvl(consumer_status_val,'NA')='YSR JALAKALA' ";
		}else{
			cattype = " AND upper(reg_no)  not like '%H%' AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') ";
		}

		
		

		if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			category = " ";
		} else {
			// category = " AND A.CATEGORY_SUPPLY LIKE '" + cscvo.getCat() + "%'
			// ";
			category = " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCat() + "%' ";
		}

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		// Connection con =
		// DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = " SELECT NVL(S.divname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S WHERE   REPSTAT LIKE '%OB%' AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd   and s.cirname=? group by   rollup(S.divname) order by  S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = " SELECT NVL(S.subname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S WHERE   REPSTAT LIKE '%OB%' AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd   and s.cirname=?  and s.divname=?  group by   rollup(S.subname) order by  S.subname ";
					// + " and cirname=? and divname=? GROUP BY
					// rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = " SELECT NVL(S.secname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S WHERE   REPSTAT LIKE '%OB%' AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd   and s.cirname=?  and s.divname=? and s.subname=?  group by   rollup(S.secname) order by  S.secname ";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = " SELECT NVL(S.CIRNAME,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S WHERE   REPSTAT LIKE '%OB%' AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd   group by   rollup(S.CIRNAME) order by  S.cirname ";
					reportPStmt = con.prepareStatement(query);
					//System.out.println("Simpified1:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							// dmapobj.setOb(reportRst.getString(2));
							dmapobj.setObreg(reportRst.getInt(2));
							/*
							 * dmapobj.setRegistered(reportRst.getString(3));
							 * dmapobj.setDeleted(reportRst.getString(4));
							 * dmapobj.setAppReleased(reportRst.getString(5));
							 * dmapobj.setOb_after_rel(reportRst.getString(6));
							 * 
							 * //
							 * dmapobj.setDem_within_sop(reportRst.getString(7))
							 * ; //
							 * dmapobj.setDem_beyond_sop(reportRst.getString(8))
							 * ;
							 * 
							 * dmapobj.setAmt_paid_within_sop(reportRst.
							 * getString(7));
							 * dmapobj.setAmt_paid_dem_beyond_sop(reportRst.
							 * getString(8));
							 * 
							 * dmapobj.setPen_est_brt(reportRst.getString(9));
							 * dmapobj.setPen_esti_wrt(reportRst.getString(10));
							 * dmapobj.setTurnKey(reportRst.getString(11));
							 * 
							 * dmapobj.setRel_est_brt(reportRst.getString(12));
							 * dmapobj.setRel_esti_wrt(reportRst.getString(13));
							 */

						} else {
							CscpayVO dmapobj = new CscpayVO();

							// dmapobj.setOb(reportRst.getString(2));
							dmapobj.setObreg(reportRst.getInt(2));
							/*
							 * dmapobj.setRegistered(reportRst.getString(3));
							 * dmapobj.setDeleted(reportRst.getString(4));
							 * dmapobj.setAppReleased(reportRst.getString(5));
							 * dmapobj.setOb_after_rel(reportRst.getString(6));
							 * 
							 * //
							 * dmapobj.setDem_within_sop(reportRst.getString(7))
							 * ; //
							 * dmapobj.setDem_beyond_sop(reportRst.getString(8))
							 * ;
							 * 
							 * dmapobj.setAmt_paid_within_sop(reportRst.
							 * getString(7));
							 * dmapobj.setAmt_paid_dem_beyond_sop(reportRst.
							 * getString(8));
							 * 
							 * dmapobj.setPen_est_brt(reportRst.getString(9));
							 * dmapobj.setPen_esti_wrt(reportRst.getString(10));
							 * dmapobj.setTurnKey(reportRst.getString(11));
							 * 
							 * dmapobj.setRel_est_brt(reportRst.getString(12));
							 * dmapobj.setRel_esti_wrt(reportRst.getString(13));
							 */

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 2 Registerd

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT NVL(S.divname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S  WHERE  TRUNC(REG_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd  and S.CIRNAME=?   GROUP BY rollup(S.divname) order by S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.subname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S  WHERE  TRUNC(REG_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd  and S.CIRNAME=? and  s.divname=?   GROUP BY rollup(S.subname) order by S.subname ";
					// + " and cirname=? and divname=? GROUP BY
					// rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.secname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S  WHERE  TRUNC(REG_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd  and S.CIRNAME=? and  s.divname=? and s.subname=?  GROUP BY rollup(S.secname) order by S.secname ";
					// + " and cirname=? and divname=? and subname=? GROUP BY
					// rollup(S.secname) ORDER BY S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S  WHERE  TRUNC(REG_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd    GROUP BY rollup(S.CIRNAME) order by S.cirname ";
					reportPStmt = con.prepareStatement(query);
					//System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							// dmapobj.setOb(reportRst.getString(2));
							// dmapobj.setRegistered(reportRst.getString(2));
							dmapobj.setReg(reportRst.getInt(2));
							/*
							 * dmapobj.setDeleted(reportRst.getString(4));
							 * dmapobj.setAppReleased(reportRst.getString(5));
							 * dmapobj.setOb_after_rel(reportRst.getString(6));
							 * 
							 * //
							 * dmapobj.setDem_within_sop(reportRst.getString(7))
							 * ; //
							 * dmapobj.setDem_beyond_sop(reportRst.getString(8))
							 * ;
							 * 
							 * dmapobj.setAmt_paid_within_sop(reportRst.
							 * getString(7));
							 * dmapobj.setAmt_paid_dem_beyond_sop(reportRst.
							 * getString(8));
							 * 
							 * dmapobj.setPen_est_brt(reportRst.getString(9));
							 * dmapobj.setPen_esti_wrt(reportRst.getString(10));
							 * dmapobj.setTurnKey(reportRst.getString(11));
							 * 
							 * dmapobj.setRel_est_brt(reportRst.getString(12));
							 * dmapobj.setRel_esti_wrt(reportRst.getString(13));
							 */

						} else {
							CscpayVO dmapobj = new CscpayVO();

							// dmapobj.setOb(reportRst.getString(2));
							// dmapobj.setRegistered(reportRst.getString(2));
							dmapobj.setReg(reportRst.getInt(2));
							/*
							 * dmapobj.setDeleted(reportRst.getString(4));
							 * dmapobj.setAppReleased(reportRst.getString(5));
							 * dmapobj.setOb_after_rel(reportRst.getString(6));
							 * 
							 * //
							 * dmapobj.setDem_within_sop(reportRst.getString(7))
							 * ; //
							 * dmapobj.setDem_beyond_sop(reportRst.getString(8))
							 * ;
							 * 
							 * dmapobj.setAmt_paid_within_sop(reportRst.
							 * getString(7));
							 * dmapobj.setAmt_paid_dem_beyond_sop(reportRst.
							 * getString(8));
							 * 
							 * dmapobj.setPen_est_brt(reportRst.getString(9));
							 * dmapobj.setPen_esti_wrt(reportRst.getString(10));
							 * dmapobj.setTurnKey(reportRst.getString(11));
							 * 
							 * dmapobj.setRel_est_brt(reportRst.getString(12));
							 * dmapobj.setRel_esti_wrt(reportRst.getString(13));
							 */
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 3

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT NVL(S.divname,'TOTAL'),nvl(count(REG_NO),0) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE     NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN  '"
							+ startDate + "' AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%') "
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd   and s.cirname=?   group by   rollup(S.divname) order by S.divname ";
					// + " " + cattype + " " + " and cirname=? GROUP BY
					// rollup(S.divname) ORDER BY S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.subname,'TOTAL'),nvl(count(REG_NO),0) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE     NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN  '"
							+ startDate + "' AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%') "
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd   and s.cirname=?  and S.divname=? group by   rollup(S.subname) order by S.subname ";
					// + " and cirname=? and divname=? GROUP BY
					// rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.secname,'TOTAL'),nvl(count(REG_NO),0) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE     NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN  '"
							+ startDate + "' AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%') "
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd   and s.cirname=?  and S.divname=? and s.subname=? group by   rollup(S.secname) order by S.secname ";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),nvl(count(REG_NO),0) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE     NVL(REJECTED,'Y') ='X' AND TRUNC(NVL(RESPONSE_DATE,SYSDATE - 50 )) BETWEEN  '"
							+ startDate + "' AND SYSDATE and ( repstat like '%OB%'  or repstat like '%REG%') "
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd   group by   rollup(S.CIRNAME) order by  S.CIRNAME ";
					reportPStmt = con.prepareStatement(query);
					//System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							/*
							 * dmapobj.setOb(reportRst.getString(2));
							 * dmapobj.setRegistered(reportRst.getString(3));
							 */
							// dmapobj.setDeleted(reportRst.getString(2));
							dmapobj.setDelreg(reportRst.getInt(2));
							/*
							 * dmapobj.setAppReleased(reportRst.getString(5));
							 * dmapobj.setOb_after_rel(reportRst.getString(6));
							 * 
							 * //
							 * dmapobj.setDem_within_sop(reportRst.getString(7))
							 * ; //
							 * dmapobj.setDem_beyond_sop(reportRst.getString(8))
							 * ;
							 * 
							 * dmapobj.setAmt_paid_within_sop(reportRst.
							 * getString(7));
							 * dmapobj.setAmt_paid_dem_beyond_sop(reportRst.
							 * getString(8));
							 * 
							 * dmapobj.setPen_est_brt(reportRst.getString(9));
							 * dmapobj.setPen_esti_wrt(reportRst.getString(10));
							 * dmapobj.setTurnKey(reportRst.getString(11));
							 * 
							 * dmapobj.setRel_est_brt(reportRst.getString(12));
							 * dmapobj.setRel_esti_wrt(reportRst.getString(13));
							 */

						} else {
							CscpayVO dmapobj = new CscpayVO();

							// dmapobj.setOb(reportRst.getString(2));
							// dmapobj.setRegistered(reportRst.getString(3));
							// dmapobj.setDeleted(reportRst.getString(2));
							dmapobj.setDelreg(reportRst.getInt(2));
							/*
							 * dmapobj.setAppReleased(reportRst.getString(5));
							 * dmapobj.setOb_after_rel(reportRst.getString(6));
							 * 
							 * //
							 * dmapobj.setDem_within_sop(reportRst.getString(7))
							 * ; //
							 * dmapobj.setDem_beyond_sop(reportRst.getString(8))
							 * ;
							 * 
							 * dmapobj.setAmt_paid_within_sop(reportRst.
							 * getString(7));
							 * dmapobj.setAmt_paid_dem_beyond_sop(reportRst.
							 * getString(8));
							 * 
							 * dmapobj.setPen_est_brt(reportRst.getString(9));
							 * dmapobj.setPen_esti_wrt(reportRst.getString(10));
							 * dmapobj.setTurnKey(reportRst.getString(11));
							 * 
							 * dmapobj.setRel_est_brt(reportRst.getString(12));
							 * dmapobj.setRel_esti_wrt(reportRst.getString(13));
							 */
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 4

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT NVL(S.divname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN '"
							+ startDate + "'  AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'"
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd  and s.cirname=?  group by   rollup(S.divname) order by S.divname";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.subname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN '"
							+ startDate + "'  AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'"
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd  and s.cirname=?  and s.divname=? group by   rollup(S.subname) order by S.subname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.secname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN '"
							+ startDate + "'  AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'"
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd  and s.cirname=?  and s.divname=? and  s.subname=?  group by   rollup(S.secname) order by S.secname";
					// + " and cirname=? and divname=? and subname=? GROUP BY
					// rollup(S.secname) ORDER BY S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  TRUNC(RESPONSE_DATE) BETWEEN '"
							+ startDate + "'  AND SYSDATE AND SUPPLY_RELEASE_DATE >= '01-APR-21'"
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd   group by   rollup(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					//System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							// dmapobj.setOb(reportRst.getString(2));
							// dmapobj.setRegistered(reportRst.getString(3));
							// dmapobj.setDeleted(reportRst.getString(4));
							// dmapobj.setAppReleased(reportRst.getString(2));
							dmapobj.setRelreg(reportRst.getInt(2));
							// dmapobj.setOb_after_rel(reportRst.getString(6));

							// dmapobj.setDem_within_sop(reportRst.getString(7));
							// dmapobj.setDem_beyond_sop(reportRst.getString(8));

							/*
							 * dmapobj.setAmt_paid_within_sop(reportRst.
							 * getString(7));
							 * dmapobj.setAmt_paid_dem_beyond_sop(reportRst.
							 * getString(8));
							 * 
							 * dmapobj.setPen_est_brt(reportRst.getString(9));
							 * dmapobj.setPen_esti_wrt(reportRst.getString(10));
							 * dmapobj.setTurnKey(reportRst.getString(11));
							 * 
							 * dmapobj.setRel_est_brt(reportRst.getString(12));
							 * dmapobj.setRel_esti_wrt(reportRst.getString(13));
							 * 
							 */ } else {
							CscpayVO dmapobj = new CscpayVO();

							// dmapobj.setOb(reportRst.getString(2));
							// dmapobj.setRegistered(reportRst.getString(3));
							// dmapobj.setDeleted(reportRst.getString(4));
							// dmapobj.setAppReleased(reportRst.getString(2));
							dmapobj.setRelreg(reportRst.getInt(2));
							// dmapobj.setOb_after_rel(reportRst.getString(6));

							// dmapobj.setDem_within_sop(reportRst.getString(7));
							// dmapobj.setDem_beyond_sop(reportRst.getString(8));

							/*
							 * dmapobj.setAmt_paid_within_sop(reportRst.
							 * getString(7));
							 * dmapobj.setAmt_paid_dem_beyond_sop(reportRst.
							 * getString(8));
							 * 
							 * dmapobj.setPen_est_brt(reportRst.getString(9));
							 * dmapobj.setPen_esti_wrt(reportRst.getString(10));
							 * dmapobj.setTurnKey(reportRst.getString(11));
							 * 
							 * dmapobj.setRel_est_brt(reportRst.getString(12));
							 * dmapobj.setRel_esti_wrt(reportRst.getString(13));
							 */
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 5 wrt

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT NVL(S.divname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE  upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release'"
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd  and s.cirname=?  group by   rollup(S.divname) order by S.divname ";
					// + " " + cattype + " " + " and cirname=? GROUP BY
					// rollup(S.divname) ORDER BY S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.subname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE  upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release'"
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd  and s.cirname=?  and s.divname=?  group by   rollup(S.subname) order by S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.secname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE  upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release'"
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd  and s.cirname=?  and s.divname=? and   s.subname=? group by   rollup(S.secname) order by S.secname ";
					// + " and cirname=? and divname=? and subname=? GROUP BY
					// rollup(S.secname) ORDER BY S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE  upper (REPSTAT)  like '%WRT' AND  SLADESC='Pending for service release'"
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%' "
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd   group by   rollup(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					//System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							/*
							 * dmapobj.setOb(reportRst.getString(2));
							 * dmapobj.setRegistered(reportRst.getString(3));
							 * dmapobj.setDeleted(reportRst.getString(4));
							 * dmapobj.setAppReleased(reportRst.getString(5));
							 * dmapobj.setOb_after_rel(reportRst.getString(6));
							 * 
							 * //
							 * dmapobj.setDem_within_sop(reportRst.getString(7))
							 * ; //
							 * dmapobj.setDem_beyond_sop(reportRst.getString(8))
							 * ;
							 * 
							 * dmapobj.setAmt_paid_within_sop(reportRst.
							 * getString(7));
							 * dmapobj.setAmt_paid_dem_beyond_sop(reportRst.
							 * getString(8));
							 */

							// dmapobj.setPen_est_brt(reportRst.getString(9));
							// dmapobj.setPen_esti_wrt(reportRst.getString(2));
							dmapobj.setWrtreg(reportRst.getInt(2));
							/*
							 * dmapobj.setTurnKey(reportRst.getString(11));
							 * 
							 * dmapobj.setRel_est_brt(reportRst.getString(12));
							 * dmapobj.setRel_esti_wrt(reportRst.getString(13));
							 */

						} else {
							CscpayVO dmapobj = new CscpayVO();

							/*
							 * dmapobj.setOb(reportRst.getString(2));
							 * dmapobj.setRegistered(reportRst.getString(3));
							 * dmapobj.setDeleted(reportRst.getString(4));
							 * dmapobj.setAppReleased(reportRst.getString(5));
							 * dmapobj.setOb_after_rel(reportRst.getString(6));
							 * 
							 * //
							 * dmapobj.setDem_within_sop(reportRst.getString(7))
							 * ; //
							 * dmapobj.setDem_beyond_sop(reportRst.getString(8))
							 * ;
							 * 
							 * dmapobj.setAmt_paid_within_sop(reportRst.
							 * getString(7));
							 * dmapobj.setAmt_paid_dem_beyond_sop(reportRst.
							 * getString(8));
							 */

							// dmapobj.setPen_est_brt(reportRst.getString(9));
							// dmapobj.setPen_esti_wrt(reportRst.getString(2));
							dmapobj.setWrtreg(reportRst.getInt(2));
							/*
							 * dmapobj.setTurnKey(reportRst.getString(11));
							 * 
							 * dmapobj.setRel_est_brt(reportRst.getString(12));
							 * dmapobj.setRel_esti_wrt(reportRst.getString(13));
							 */
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 6

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT NVL(S.divname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S WHERE   upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release'"
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%'"
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ "  AND NCPARTCD=s.seccd   and s.cirname=?  group by   rollup(S.divname) order by S.divname";
					// + " " + cattype + " " + " and cirname=? GROUP BY
					// rollup(S.divname) ORDER BY S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.subname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S WHERE   upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release'"
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%'"
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ "  AND NCPARTCD=s.seccd   and s.cirname=? and   s.divname=? group by   rollup(S.subname) order by S.subname";
					// + " and cirname=? and divname=? GROUP BY
					// rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.secname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S WHERE   upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release'"
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%'"
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ "  AND NCPARTCD=s.seccd   and s.cirname=? and   s.divname=?  and s.subname=?  group by   rollup(S.secname) order by S.secname";
					// + " and cirname=? and divname=? and subname=? GROUP BY
					// rollup(S.secname) ORDER BY S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S WHERE   upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release'"
							+ " AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%'"
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ "  AND NCPARTCD=s.seccd   group by   rollup(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					//System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							/*
							 * dmapobj.setOb(reportRst.getString(2));
							 * dmapobj.setRegistered(reportRst.getString(3));
							 * dmapobj.setDeleted(reportRst.getString(4));
							 * dmapobj.setAppReleased(reportRst.getString(5));
							 * dmapobj.setOb_after_rel(reportRst.getString(6));
							 * 
							 * //
							 * dmapobj.setDem_within_sop(reportRst.getString(7))
							 * ; //
							 * dmapobj.setDem_beyond_sop(reportRst.getString(8))
							 * ;
							 * 
							 * dmapobj.setAmt_paid_within_sop(reportRst.
							 * getString(7));
							 * dmapobj.setAmt_paid_dem_beyond_sop(reportRst.
							 * getString(8));
							 */

							// dmapobj.setPen_est_brt(reportRst.getString(2));
							dmapobj.setBrtreg(reportRst.getInt(2));
							/*
							 * dmapobj.setPen_esti_wrt(reportRst.getString(10));
							 * dmapobj.setTurnKey(reportRst.getString(11));
							 * 
							 * dmapobj.setRel_est_brt(reportRst.getString(12));
							 * dmapobj.setRel_esti_wrt(reportRst.getString(13));
							 */

						} else {
							CscpayVO dmapobj = new CscpayVO();

							/*
							 * dmapobj.setOb(reportRst.getString(2));
							 * dmapobj.setRegistered(reportRst.getString(3));
							 * dmapobj.setDeleted(reportRst.getString(4));
							 * dmapobj.setAppReleased(reportRst.getString(5));
							 * dmapobj.setOb_after_rel(reportRst.getString(6));
							 * 
							 * //
							 * dmapobj.setDem_within_sop(reportRst.getString(7))
							 * ; //
							 * dmapobj.setDem_beyond_sop(reportRst.getString(8))
							 * ;
							 * 
							 * dmapobj.setAmt_paid_within_sop(reportRst.
							 * getString(7));
							 * dmapobj.setAmt_paid_dem_beyond_sop(reportRst.
							 * getString(8));
							 */

							// dmapobj.setPen_est_brt(reportRst.getString(2));
							dmapobj.setBrtreg(reportRst.getInt(2));
							// dmapobj.setPen_esti_wrt(reportRst.getString(10));
							// dmapobj.setTurnKey(reportRst.getString(11));

							/*
							 * dmapobj.setRel_est_brt(reportRst.getString(12));
							 * dmapobj.setRel_esti_wrt(reportRst.getString(13));
							 */
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 7 tkey

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT NVL(S.divname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE    upper (REPSTAT)  like '%TKEY%' AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%'"
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd  and   s.cirname=? group by  rollup(S.divname) order by S.divname";
					// + " " + cattype + " " + " and cirname=? GROUP BY
					// rollup(S.divname) ORDER BY S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.subname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE    upper (REPSTAT)  like '%TKEY%' AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%'"
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd  and   s.cirname=? and s.divname=? group by  rollup(S.subname) order by S.subname";
					// + " and cirname=? and divname=? GROUP BY
					// rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.secname,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE    upper (REPSTAT)  like '%TKEY%' AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%'"
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd  and   s.cirname=? and s.divname=? and s.subname=? group by  rollup(S.secname) order by S.secname";
					// + " and cirname=? and divname=? and subname=? GROUP BY
					// rollup(S.secname) ORDER BY S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),count(REG_NO) CC FROM REP_FINAL,SPDCLMASTER S "
							+ " WHERE    upper (REPSTAT)  like '%TKEY%' AND NVL(ESTSTATUS,'01')='01' "
							// + " AND CATEGORY_SUPPLY LIKE '1%' AND
							// upper(reg_no) not like '%H%'"
							+ " " + category + " "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " AND NCPARTCD=s.seccd   group by  rollup(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					//System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							/*
							 * dmapobj.setOb(reportRst.getString(2));
							 * dmapobj.setRegistered(reportRst.getString(3));
							 * dmapobj.setDeleted(reportRst.getString(4));
							 * dmapobj.setAppReleased(reportRst.getString(5));
							 * dmapobj.setOb_after_rel(reportRst.getString(6));
							 * 
							 * //
							 * dmapobj.setDem_within_sop(reportRst.getString(7))
							 * ; //
							 * dmapobj.setDem_beyond_sop(reportRst.getString(8))
							 * ;
							 * 
							 * dmapobj.setAmt_paid_within_sop(reportRst.
							 * getString(7));
							 * dmapobj.setAmt_paid_dem_beyond_sop(reportRst.
							 * getString(8));
							 * 
							 * dmapobj.setPen_est_brt(reportRst.getString(9));
							 * dmapobj.setPen_esti_wrt(reportRst.getString(10));
							 */
							// dmapobj.setTurnKey(reportRst.getString(2));
							dmapobj.setTkeyreg(reportRst.getInt(2));

							// dmapobj.setRel_est_brt(reportRst.getString(12));
							// dmapobj.setRel_esti_wrt(reportRst.getString(13));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							/*
							 * dmapobj.setOb(reportRst.getString(2));
							 * dmapobj.setRegistered(reportRst.getString(3));
							 * dmapobj.setDeleted(reportRst.getString(4));
							 * dmapobj.setAppReleased(reportRst.getString(5));
							 * dmapobj.setOb_after_rel(reportRst.getString(6));
							 * 
							 * //
							 * dmapobj.setDem_within_sop(reportRst.getString(7))
							 * ; //
							 * dmapobj.setDem_beyond_sop(reportRst.getString(8))
							 * ;
							 * 
							 * dmapobj.setAmt_paid_within_sop(reportRst.
							 * getString(7));
							 * dmapobj.setAmt_paid_dem_beyond_sop(reportRst.
							 * getString(8));
							 * 
							 * dmapobj.setPen_est_brt(reportRst.getString(9));
							 * dmapobj.setPen_esti_wrt(reportRst.getString(10));
							 */
							// dmapobj.setTurnKey(reportRst.getString(2));
							dmapobj.setTkeyreg(reportRst.getInt(2));

							/*
							 * dmapobj.setRel_est_brt(reportRst.getString(12));
							 * dmapobj.setRel_esti_wrt(reportRst.getString(13));
							 */

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				/*
				 * if (reportPStmt != null) { reportPStmt.close(); } if
				 * (reportRst != null) { reportRst.close(); }
				 */

				//

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

			/*
			 * try { if (con != null) {
			 * 
			 * DBConnectionManager.getInstance().freeConnection(con);
			 * con.close(); } if (reportPStmt != null) reportPStmt.close(); if
			 * (reportRst != null) reportRst.close(); } catch (Exception ex) {
			 * ex.printStackTrace(); }
			 */}
		return cscvo;
	}

	// DCB Works
	public CscpayVO getDcbWorkHtAddLoadDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "SELECT NVL(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9,COUNT(G.REG_NO) GRATHER_1 FROM"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,ESTSTATUS FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(ESTSTATUS,'01')='02'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8'))A,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,PAYDT,SAPDEM,COLL FROM NEWCOMP_TAB WHERE REMARKS IN ('BRT','WRT') AND INTIMATE_DATE IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 )B,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS IN ('WRT') AND INTIMATE_DATE IS NOT NULL AND  NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL AND  NVL(COLL,0) > NVL(SAPDEM,0)  AND NVL(SAPDEM,0) >0)C,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) >=30 and (PAYDT-INTIMATE_DATE) <=89)D,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) > 90 and (PAYDT-INTIMATE_DATE) <=179)E,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) >= 180 and (PAYDT-INTIMATE_DATE) <=374 )F,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) > 375)G,"
					 * + " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.CSPARTCD=S.SECCD" +
					 * " AND A.CSPARTCD=B.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=C.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=D.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=E.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=F.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=G.CSPARTCD(+)" +
					 * " and cirname=? GROUP BY rollup(S.divname)";
					 */

					String query = "SELECT NVL(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) LESSTHAN_3,COUNT(E.REG_NO) GRATHER_3,COUNT(F.REG_NO) GRATHER_6,COUNT(G.REG_NO) GRATHER_1 FROM"
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(ESTSTATUS,'01')='02'  AND COMPLAINT=9 AND SUB_COMPLAINT=5 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') and PRESENT_CATEGORY not in ('LT5'))A,"
							+ " (SELECT REG_NO,CSPARTCD,PAYDT,SAPDEM,COLL FROM NEWCOMP_TAB WHERE REMARKS IN ('BRT','WRT') AND INTIMATE_DATE IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 )B,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS IN ('WRT') AND INTIMATE_DATE IS NOT NULL AND  NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL AND  NVL(COLL,0) > NVL(SAPDEM,0)  AND NVL(SAPDEM,0) >0)C,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT)  <=89)D,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 90 and (SYSDATE-PAYDT) <=179)E,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) >= 180 and (SYSDATE-PAYDT) <=374 )F,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 375)G,"
							+ " (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)" + " AND A.CSPARTCD=S.SECCD"
							+ " AND A.CSPARTCD=B.CSPARTCD(+)" + " AND A.CSPARTCD=C.CSPARTCD(+)"
							+ " AND A.CSPARTCD=D.CSPARTCD(+)" + " AND A.CSPARTCD=E.CSPARTCD(+)"
							+ " AND A.CSPARTCD=F.CSPARTCD(+)" + " AND A.CSPARTCD=G.CSPARTCD(+)"
							// + " and A.PRESENT_CATEGORY not in ('LT5')"
							+ " and  cirname=?  GROUP BY rollup(S.divname) ORDER BY S.divname ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "SELECT NVL(S.subname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9,COUNT(G.REG_NO) GRATHER_1 FROM"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,ESTSTATUS FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(ESTSTATUS,'01')='02'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8'))A,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,PAYDT,SAPDEM,COLL FROM NEWCOMP_TAB WHERE REMARKS IN ('BRT','WRT') AND INTIMATE_DATE IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 )B,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS IN ('WRT') AND INTIMATE_DATE IS NOT NULL AND  NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL AND  NVL(COLL,0) > NVL(SAPDEM,0)  AND NVL(SAPDEM,0) >0)C,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) >=30 and (PAYDT-INTIMATE_DATE) <=89)D,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) > 90 and (PAYDT-INTIMATE_DATE) <=179)E,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) >= 180 and (PAYDT-INTIMATE_DATE) <=374 )F,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) > 375)G,"
					 * +
					 * " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S"
					 * + " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.CSPARTCD=S.SECCD" +
					 * " AND A.CSPARTCD=B.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=C.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=D.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=E.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=F.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=G.CSPARTCD(+)" +
					 * " and cirname=? and divname=? GROUP BY rollup(S.subname)"
					 * ;
					 */

					String query = "SELECT NVL(S.subname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) LESSTHAN_3,COUNT(E.REG_NO) GRATHER_3,COUNT(F.REG_NO) GRATHER_6,COUNT(G.REG_NO) GRATHER_1 FROM"
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(ESTSTATUS,'01')='02'  AND COMPLAINT=9 AND SUB_COMPLAINT=5 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') and PRESENT_CATEGORY not in ('LT5'))A,"
							+ " (SELECT REG_NO,CSPARTCD,PAYDT,SAPDEM,COLL FROM NEWCOMP_TAB WHERE REMARKS IN ('BRT','WRT') AND INTIMATE_DATE IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 )B,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS IN ('WRT') AND INTIMATE_DATE IS NOT NULL AND  NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL AND  NVL(COLL,0) > NVL(SAPDEM,0)  AND NVL(SAPDEM,0) >0)C,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT)  <=89)D,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 90 and (SYSDATE-PAYDT) <=179)E,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) >= 180 and (SYSDATE-PAYDT) <=374 )F,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 375)G,"
							+ " (SELECT CIRNAME,DIVNAME,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)" + " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
							+ " AND A.REG_NO=E.REG_NO(+)" + " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
							+ " AND A.CSPARTCD=S.SECCD" + " AND A.CSPARTCD=B.CSPARTCD(+)"
							+ " AND A.CSPARTCD=C.CSPARTCD(+)" + " AND A.CSPARTCD=D.CSPARTCD(+)"
							+ " AND A.CSPARTCD=E.CSPARTCD(+)" + " AND A.CSPARTCD=F.CSPARTCD(+)"
							+ " AND A.CSPARTCD=G.CSPARTCD(+)"
							// + " and A.PRESENT_CATEGORY not in ('LT5')"
							+ " and  cirname=?  and divname=?  GROUP BY rollup(S.subname) ORDER BY S.subname ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "SELECT NVL(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9,COUNT(G.REG_NO) GRATHER_1 FROM"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,ESTSTATUS FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(ESTSTATUS,'01')='02'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8'))A,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,PAYDT,SAPDEM,COLL FROM NEWCOMP_TAB WHERE REMARKS IN ('BRT','WRT') AND INTIMATE_DATE IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 )B,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS IN ('WRT') AND INTIMATE_DATE IS NOT NULL AND  NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL AND  NVL(COLL,0) > NVL(SAPDEM,0)  AND NVL(SAPDEM,0) >0)C,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) >=30 and (PAYDT-INTIMATE_DATE) <=89)D,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) > 90 and (PAYDT-INTIMATE_DATE) <=179)E,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) >= 180 and (PAYDT-INTIMATE_DATE) <=374 )F,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) > 375)G,"
					 * +
					 * " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
					 * + " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.CSPARTCD=S.SECCD" +
					 * " AND A.CSPARTCD=B.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=C.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=D.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=E.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=F.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=G.CSPARTCD(+)" +
					 * " and cirname=? and divname=? and subname=? GROUP BY rollup(S.secname)"
					 * ;
					 */
					String query = "SELECT NVL(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) LESSTHAN_3,COUNT(E.REG_NO) GRATHER_3,COUNT(F.REG_NO) GRATHER_6,COUNT(G.REG_NO) GRATHER_1 FROM"
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(ESTSTATUS,'01')='02'  AND COMPLAINT=9 AND SUB_COMPLAINT=5 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') and PRESENT_CATEGORY not in ('LT5'))A,"
							+ " (SELECT REG_NO,CSPARTCD,PAYDT,SAPDEM,COLL FROM NEWCOMP_TAB WHERE REMARKS IN ('BRT','WRT') AND INTIMATE_DATE IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 )B,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS IN ('WRT') AND INTIMATE_DATE IS NOT NULL AND  NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL AND  NVL(COLL,0) > NVL(SAPDEM,0)  AND NVL(SAPDEM,0) >0)C,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT)  <=89)D,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 90 and (SYSDATE-PAYDT) <=179)E,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) >= 180 and (SYSDATE-PAYDT) <=374 )F,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 375)G,"
							+ " (SELECT CIRNAME,DIVNAME,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)" + " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
							+ " AND A.REG_NO=E.REG_NO(+)" + " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
							+ " AND A.CSPARTCD=S.SECCD" + " AND A.CSPARTCD=B.CSPARTCD(+)"
							+ " AND A.CSPARTCD=C.CSPARTCD(+)" + " AND A.CSPARTCD=D.CSPARTCD(+)"
							+ " AND A.CSPARTCD=E.CSPARTCD(+)" + " AND A.CSPARTCD=F.CSPARTCD(+)"
							+ " AND A.CSPARTCD=G.CSPARTCD(+)"
							// + " and A.PRESENT_CATEGORY not in ('LT5')"
							+ " and  cirname=?  and divname=?  and subname=?  GROUP BY rollup(S.secname) ORDER BY S.secname ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					/*
					 * String query = "select NVL(CIRNAME,'TOTAL')" +
					 * " ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered"
					 * +
					 * " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey"
					 * +
					 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then scs else 0 end) balance"
					 * + " from (select * from Newcomp_abs " +
					 * " where seccd in (select seccd from  spdclmaster   where circd not in('1','4','6','9'))  ) group by  rollup(CIRNAME) "
					 * ;
					 */
					/*
					 * String query=
					 * "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_LESSTHAN_3,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) BRT_TURNKEY_LESSTHAN_3,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_1,count(G.REG_NO)+count(H.REG_NO)+count(I.REG_NO) BRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND SUBSTR(REG_NO,6,1)='H')A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('BRT','WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <=90)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) <= 90)G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=374)H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'NA')='TurnKey'    AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-INTIMATE_DATE) > 375)I,"
					 * + " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.REG_NO=H.REG_NO(+)" +
					 * " AND A.REG_NO=I.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD" +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * " GROUP BY rollup(S.CIRNAME) ";
					 */
					/*
					 * String query =
					 * "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9,COUNT(G.REG_NO) GRATHER_1 FROM"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,ESTSTATUS FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(ESTSTATUS,'01')='02'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8'))A,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,PAYDT,SAPDEM,COLL FROM NEWCOMP_TAB WHERE REMARKS IN ('BRT','WRT') AND INTIMATE_DATE IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 )B,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS IN ('WRT') AND INTIMATE_DATE IS NOT NULL AND  NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL AND  NVL(COLL,0) > NVL(SAPDEM,0)  AND NVL(SAPDEM,0) >0)C,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) >=30 and (PAYDT-INTIMATE_DATE) <=89)D,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) > 90 and (PAYDT-INTIMATE_DATE) <=179)E,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) >= 180 and (PAYDT-INTIMATE_DATE) <=374 )F,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) > 375)G,"
					 * + " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.CSPARTCD=S.SECCD" +
					 * " AND A.CSPARTCD=B.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=C.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=D.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=E.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=F.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=G.CSPARTCD(+)" +
					 * " GROUP BY rollup(S.CIRNAME)";
					 */
					/*
					 * String query=
					 * "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) LESSTHAN_3,COUNT(E.REG_NO) GRATHER_3,COUNT(F.REG_NO) GRATHER_6,COUNT(G.REG_NO) GRATHER_1 FROM"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,ESTSTATUS FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(ESTSTATUS,'01')='02'  AND COMPLAINT=9 AND SUB_COMPLAINT=5 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') and PRESENT_CATEGORY not in ('LT5'))A,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,PAYDT,SAPDEM,COLL FROM NEWCOMP_TAB WHERE REMARKS IN ('BRT','WRT') AND INTIMATE_DATE IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 )B,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS IN ('WRT') AND INTIMATE_DATE IS NOT NULL AND  NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL AND  NVL(COLL,0) > NVL(SAPDEM,0)  AND NVL(SAPDEM,0) >0)C,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE)  <=89)D,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) > 90 and (PAYDT-INTIMATE_DATE) <=179)E,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) >= 180 and (PAYDT-INTIMATE_DATE) <=374 )F,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) > 375)G,"
					 * + " (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.CSPARTCD=S.SECCD" +
					 * " AND A.CSPARTCD=B.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=C.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=D.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=E.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=F.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=G.CSPARTCD(+)" //+
					 * " and A.PRESENT_CATEGORY not in ('LT5')" +
					 * " GROUP BY rollup(S.CIRNAME) ORDER BY S.CIRNAME ";
					 */
					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) LESSTHAN_3,COUNT(E.REG_NO) GRATHER_3,COUNT(F.REG_NO) GRATHER_6,COUNT(G.REG_NO) GRATHER_1 FROM"
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(ESTSTATUS,'01')='02'  AND COMPLAINT=9 AND SUB_COMPLAINT=5 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') and PRESENT_CATEGORY not in ('LT5'))A,"
							+ " (SELECT REG_NO,CSPARTCD,PAYDT,SAPDEM,COLL FROM NEWCOMP_TAB WHERE REMARKS IN ('BRT','WRT') AND INTIMATE_DATE IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 )B,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS IN ('WRT') AND INTIMATE_DATE IS NOT NULL AND  NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL AND  NVL(COLL,0) > NVL(SAPDEM,0)  AND NVL(SAPDEM,0) >0)C,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT)  <=89)D,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 90 and (SYSDATE-PAYDT) <=179)E,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) >= 180 and (SYSDATE-PAYDT) <=374 )F,"
							+ " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 375)G,"
							+ " (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)" + " AND A.CSPARTCD=S.SECCD"
							+ " AND A.CSPARTCD=B.CSPARTCD(+)" + " AND A.CSPARTCD=C.CSPARTCD(+)"
							+ " AND A.CSPARTCD=D.CSPARTCD(+)" + " AND A.CSPARTCD=E.CSPARTCD(+)"
							+ " AND A.CSPARTCD=F.CSPARTCD(+)" + " AND A.CSPARTCD=G.CSPARTCD(+)"
							// + " and A.PRESENT_CATEGORY not in ('LT5')"
							+ " GROUP BY rollup(S.CIRNAME) ORDER BY S.CIRNAME ";

					reportPStmt = con.prepareStatement(query);
					//System.out.println("DC WORKS (WITH OUT AGL):"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							// dmapobj.setBrt_les_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_1months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setBrt_gtr_6months(reportRst.getString(6));
							// dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							dmapobj.setBrt_gtr_1year(reportRst.getString(7));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setWrt(reportRst.getString(3));

							// dmapobj.setBrt_les_3months(reportRst.getString(4));
							dmapobj.setBrt_gtr_1months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setBrt_gtr_6months(reportRst.getString(6));
							// dmapobj.setBrt_gtr_9months(reportRst.getString(6));
							dmapobj.setBrt_gtr_1year(reportRst.getString(7));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// export DCB Works
	public void exportDcbWorkScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				// if
				// ("RelesedAfterPaidByConsumer".equalsIgnoreCase(cscvo.getStatus()))
				// {
				if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
					status = "  and upper(REPSTAT) like '%TKEY%'  and (complaint||sub_complaint) like '911'    ";
				} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  c.REMARKS IN ('BRT','WRT') AND  c.INTIMATE_DATE IS NOT NULL  AND NVL(TRIM( c.STATUS),'NA')='balance' AND  c.PAYDT IS NOT NULL  AND NVL( c.COLL,0) > NVL( c.SAPDEM,0) AND NVL( c.SAPDEM,0) >0  "
							+ " and NVL(TRIM( c.STATUS),'NA') <> 'deleted' AND NVL( c.ESTSTATUS,'01')='02'  AND  c.COMPLAINT=9 AND  c.SUB_COMPLAINT=5 AND SUBSTR( c.REG_NO,1,1) IN ('2','3','5','7','8')   ";
				} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and   c.REMARKS IN ('WRT') AND  c.INTIMATE_DATE IS NOT NULL AND  NVL(TRIM( c.STATUS),'NA')='balance' AND  c.PAYDT IS NOT NULL AND  NVL( c.COLL,0) > NVL( c.SAPDEM,0)  AND NVL( c.SAPDEM,0) >0 "
							+ " and NVL(TRIM( c.STATUS),'NA') <> 'deleted' AND NVL( c.ESTSTATUS,'01')='02'  AND  c.COMPLAINT=9 AND  c.SUB_COMPLAINT=5 AND SUBSTR( c.REG_NO,1,1) IN ('2','3','5','7','8')   ";
				} else if ("GTR_1MONTH".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  c.REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(c.STATUS),'NA')='balance'  AND NVL(c.COLL,0) > NVL(c.SAPDEM,0) AND NVL(c.SAPDEM,0) >0 AND (SYSDATE-PAYDT)  <=89 "
							+ " and NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(c.ESTSTATUS,'01')='02'  AND c.COMPLAINT=9 AND c.SUB_COMPLAINT=5 AND SUBSTR(c.REG_NO,1,1) IN ('2','3','5','7','8')   ";
				} else if ("GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  c.REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(c.STATUS),'NA')='balance' AND NVL(c.COLL,0) > NVL(c.SAPDEM,0) AND NVL(c.SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 90 and (SYSDATE-PAYDT) <=179 "
							+ " and NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(c.ESTSTATUS,'01')='02'  AND c.COMPLAINT=9 AND c.SUB_COMPLAINT=5 AND SUBSTR(c.REG_NO,1,1) IN ('2','3','5','7','8')   ";
				} else if ("GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  c.REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL  AND NVL(TRIM(c.STATUS),'NA')='balance' AND NVL(c.COLL,0) > NVL(c.SAPDEM,0) AND NVL(c.SAPDEM,0) >0 AND (SYSDATE-PAYDT) >= 180 and (SYSDATE-PAYDT) <=374  "
							+ " and NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(c.ESTSTATUS,'01')='02'  AND c.COMPLAINT=9 AND c.SUB_COMPLAINT=5 AND SUBSTR(c.REG_NO,1,1) IN ('2','3','5','7','8')   ";
				} else if ("GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  c.REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(c.STATUS),'NA')='balance'  AND NVL(c.COLL,0) > NVL(c.SAPDEM,0) AND NVL(c.SAPDEM,0) >0 AND (SYSDATE-PAYDT) > 375  "
							+ " and NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(c.ESTSTATUS,'01')='02'  AND c.COMPLAINT=9 AND c.SUB_COMPLAINT=5 AND SUBSTR(c.REG_NO,1,1) IN ('2','3','5','7','8')   ";
				} else {
					status = "";
				}
				/*
				 * } else if
				 * ("EstimateSanctionedAndAmtPaid".equalsIgnoreCase(cscvo.
				 * getStatus())) { } else { }
				 */
				if ("DIV".equals(cscvo.getFlag())) {
					if (cscvo.getDivision().equalsIgnoreCase("TOTAL")) {
						circle = " and cirname='" + cscvo.getCircle() + "'";

					}

					else {
						circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'";
					}

				} else if ("SUB_DIV".equals(cscvo.getFlag()))

				{
					if (cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
						circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'";

					}

					else {
						circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
								+ "' and subname='" + cscvo.getSubDiv() + "'";
					}

				}

				else if ("SEC".equals(cscvo.getFlag())) {
					if (cscvo.getSec().equalsIgnoreCase("TOTAL")) {
						// circle=" and cirname='" + cscvo.getCircle() + "' and
						// divname='" + cscvo.getDivision()+"'";
						circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
								+ "' and subname='" + cscvo.getSubDiv() + "'";

					}

					else {
						circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
								+ "' and subname='" + cscvo.getSubDiv() + "'";
					}

				} else if ("CIR".equals(cscvo.getFlag())) {

					if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
						circle = "";
					}

					else {
						circle = " and cirname='" + cscvo.getCircle() + "'";
					}

				} else {

				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(" SELECT "
							+ " s.DIVNAME as Division,s.secname as Section,c.customer_name Consumer_Name,C.PHONE_NO Mobile_No,c.COMPLAINT_DESCRIPTION as Nature_Of_Supply"
							// + " ,c.reg_no as reg_no,"
							+ " ,to_char(c.PAYDT,'DD-MM-YYYY') as paid_date "
							// + " ,trunc(trunc(months_between (trunc(c.PAYDT) ,
							// trunc(INTIMATE_DATE)))/12)||'YRS'
							// ||mod(trunc(months_between(trunc(c.PAYDT) ,
							// INTIMATE_DATE)), 12)|| 'MNTS'||round(
							// trunc(c.PAYDT) - add_months(( INTIMATE_DATE),
							// trunc(months_between(trunc(c.PAYDT) ,
							// INTIMATE_DATE))),0) || 'DYS' AS AGEPENDENCY"
							+ ",c.remarks " + " FROM newcomp_tab c ,spdclmaster s,new_complaints n "
							+ " where  substr(c.reg_no,0,5)=seccd and trim(c.reg_no)=trim(n.reg_no)  and c.PRESENT_CATEGORY not in ('LT5') "
							+ status + " " + circle + "");
					// + " and cirname='" + cscvo.getCircle() + "' and
					// divname='"
					// + cscvo.getDivision() + "'");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());adsda
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(" SELECT "
							+ " s.DIVNAME as Division,s.secname as Section,c.customer_name Consumer_Name,C.PHONE_NO Mobile_No,c.COMPLAINT_DESCRIPTION as Nature_Of_Supply"
							// + " ,c.reg_no as reg_no,"
							+ " ,to_char(c.PAYDT,'DD-MM-YYYY') as paid_date "
							// + " ,trunc(trunc(months_between (trunc(c.PAYDT) ,
							// trunc(INTIMATE_DATE)))/12)||'YRS'
							// ||mod(trunc(months_between(trunc(c.PAYDT) ,
							// INTIMATE_DATE)), 12)|| 'MNTS'||round(
							// trunc(c.PAYDT) - add_months(( INTIMATE_DATE),
							// trunc(months_between(trunc(c.PAYDT) ,
							// INTIMATE_DATE))),0) || 'DYS' AS AGEPENDENCY"
							+ ",c.remarks " + " FROM newcomp_tab c ,spdclmaster s,new_complaints n "
							+ " where  substr(c.reg_no,0,5)=seccd and trim(c.reg_no)=trim(n.reg_no)  and c.PRESENT_CATEGORY not in ('LT5') "
							+ status + " " + circle + "");
					// + " and cirname='" + cscvo.getCircle() + "' and
					// divname='"
					// + cscvo.getDivision() + "' and subname='" +
					// cscvo.getSubDiv() + "'");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportPStmt.setString(2, cscvo.getFrom_date());
					// reportPStmt.setString(3, cscvo.getTo_date());
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(" SELECT "
							+ " s.DIVNAME as Division,s.secname as Section,c.customer_name Consumer_Name,C.PHONE_NO Mobile_No,c.COMPLAINT_DESCRIPTION as Nature_Of_Supply"
							// + " ,c.reg_no as reg_no,"
							+ " ,to_char(c.PAYDT,'DD-MM-YYYY') as paid_date "
							// + " ,trunc(trunc(months_between (trunc(c.PAYDT) ,
							// trunc(INTIMATE_DATE)))/12)||'YRS'
							// ||mod(trunc(months_between(trunc(c.PAYDT) ,
							// INTIMATE_DATE)), 12)|| 'MNTS'||round(
							// trunc(c.PAYDT) - add_months(( INTIMATE_DATE),
							// trunc(months_between(trunc(c.PAYDT) ,
							// INTIMATE_DATE))),0) || 'DYS' AS AGEPENDENCY"
							+ ",c.remarks " + " FROM newcomp_tab c ,spdclmaster s,new_complaints n "
							+ " where  substr(c.reg_no,0,5)=seccd and trim(c.reg_no)=trim(n.reg_no)  and c.PRESENT_CATEGORY not in ('LT5') "
							+ status + " " + circle + "");
					// + " and cirname='" + cscvo.getCircle() + "' and
					// divname='"
					// + cscvo.getDivision() + "' and subname='" +
					// cscvo.getSubDiv() + "' and secname='"
					// + cscvo.getSec() + "'");
				} else {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
					 * +
					 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
					 * +
					 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
					 * +
					 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * +
					 * " from csc.rep_final@colldblink a,master.spdclmaster@colldblink b"
					 * + " where a.ncpartcd=b.seccd " + status + "" +
					 * cscvo.getCircle() + "" +
					 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */
					/*
					 * String query = "  SELECT " // + " s.cirname as
					 * cirname,s.secname as //
					 * secname,to_char(c.reg_date,'DD-MM-YYYY') as //
					 * reg_date,c.customer_name //
					 * customer_name,n.present_category as cat" // +
					 * " ,c.reg_no as reg_no," // + " ,c.CONTRACTLOAD as
					 * load,c.EXTDEM as // demand,c.COLL as //
					 * paid,to_char(c.PAYDT,'DD-MM-YYYY') as //
					 * paid_date,c.EXECUTION_TYPE" +
					 * " s.cirname as cirname,s.secname as secname,to_char(c.reg_date,'DD-MM-YYYY') as reg_date,c.customer_name customer_name,n.present_category as cat"
					 * // + " ,c.reg_no as reg_no," +
					 * " ,c.CONTRACTLOAD as load,c.EXTDEM as demand,c.COLL as paid,to_char(c.PAYDT,'DD-MM-YYYY') as paid_date"
					 * +
					 * " ,trunc(trunc(months_between (trunc(c.PAYDT) , trunc(INTIMATE_DATE)))/12)||'YRS' ||mod(trunc(months_between(trunc(c.PAYDT) , INTIMATE_DATE)), 12)|| 'MNTS'||round( trunc(c.PAYDT) - add_months(( INTIMATE_DATE), trunc(months_between(trunc(c.PAYDT) , INTIMATE_DATE))),0) || 'DYS' AS AGEPENDENCY"
					 * + ",c.EXECUTION_TYPE " +
					 * " FROM newcomp_tab c ,spdclmaster s,new_complaints n " +
					 * " where  substr(c.reg_no,0,5)=seccd and trim(c.reg_no)=trim(n.reg_no)  and c.PRESENT_CATEGORY not in ('LT5') "
					 * // + " and " // + " NVL(TRIM(c.STATUS),'NA') <> 'deleted'
					 * AND // NVL(c.ESTSTATUS,'01')='02' AND " // + "
					 * c.COMPLAINT=9 AND c.SUB_COMPLAINT=11 AND //
					 * SUBSTR(c.REG_NO,1,1) IN ('2','3','5','7','8')" + status +
					 * " " + circle + "";
					 * 
					 * System.out.println(query);
					 */
					/*
					 * resultSet = statement.executeQuery(
					 * "select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
					 * +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
					 * + status + " and cirname='" + cscvo.getCircle() + "'");
					 */

					// 26052021

					/*
					 * resultSet = statement.executeQuery(
					 * "select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
					 * +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
					 * + status +" "+circle+"");
					 */

					/*
					 * resultSet = statement.executeQuery(
					 * "select  (ROW_NUMBER() OVER (partition by null order by null)) SNO,cirname,divname,subname,secname,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME, (STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref from newcomp_tab a,"
					 * +
					 * " (select unique cirname,divname,subname,secname,divcd,seccd from  spdclmaster  where circd not in(1,4,6,9)) b where a.cspartcd=b.seccd "
					 * + status +" "+circle+"");
					 */

					resultSet = statement.executeQuery(" SELECT "
							+ " s.DIVNAME as Division,s.secname as Section,c.customer_name Consumer_Name,C.PHONE_NO Mobile_No,c.COMPLAINT_DESCRIPTION as Nature_Of_Supply"
							// + " ,c.reg_no as reg_no,"
							+ " ,to_char(c.PAYDT,'DD-MM-YYYY') as paid_date "
							// + " ,trunc(trunc(months_between (trunc(c.PAYDT) ,
							// trunc(INTIMATE_DATE)))/12)||'YRS'
							// ||mod(trunc(months_between(trunc(c.PAYDT) ,
							// INTIMATE_DATE)), 12)|| 'MNTS'||round(
							// trunc(c.PAYDT) - add_months(( INTIMATE_DATE),
							// trunc(months_between(trunc(c.PAYDT) ,
							// INTIMATE_DATE))),0) || 'DYS' AS AGEPENDENCY"
							+ ",c.remarks " + " FROM newcomp_tab c ,spdclmaster s,new_complaints n "
							+ " where  substr(c.reg_no,0,5)=seccd and trim(c.reg_no)=trim(n.reg_no)  and c.PRESENT_CATEGORY not in ('LT5') "
							+ status + " " + circle + "");

					// +" "+circle+""
					/*
					 * .executeQuery(
					 * " select row_number() over (partition by null order by null) sno,"
					 * +
					 * " cirname Circle,Divname Division,subname SubDivision,secname Section ,"
					 * +
					 * " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,"
					 * +
					 * " consumer_name ,ADDRESS,PHONE_NO,EMAIL,decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,"
					 * + " greatest(nvl(grp_prdt,reg_date)," +
					 * " nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,"
					 * + " meseva_ref reference_no ," +
					 * " PENDING_STAT,SLADESC,EXECUTION_TYPE," +
					 * " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
					 * + " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " and cirname='"
					 * + cscvo.getCircle() +
					 * "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)  ) order by cirname,divname,subname,secname"
					 * +
					 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
					 * );
					 */

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=Status HT Additional Load as " + cscvo.getCtype() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=Status HT Additional Load as " + cscvo.getCtype() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// All counters New Report

	/* 18/09/2021 */

	public CscpayVO getAllCountersNewDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(ltrim(SUBNAME,'z'),'DISCOM'), NVL(ltrim(SECNAME,'z'),'TOTAL')  "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							/*
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt"
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt"
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey"
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) "
							 */
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end)"
							+ " balance,cirname" + " "
							+ " from  rep_final,  spdclmaster     where    NCPARTCD=seccd  AND    circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')  and cirname=? AND DIVNAME=? group by  rollup(SUBNAME,SECNAME),cirname ";
					// + "from (select * from rep_final_abs "
					// + " where seccd in (select seccd from spdclmaster where
					// circd not in('1','4','6','9') and cirname=? AND DIVNAME=?
					// )) group by rollup(SUBNAME,SECNAME),cirname ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
					//System.out.println("DIV:"+query);
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "select NVL(subname,'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							/*
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt"
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt"
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey"
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then 1 else 0 end)"
							 */
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end)"
							+ "  balance" + " "
							+ " from  rep_final,  spdclmaster     where    NCPARTCD=seccd  AND    circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')  and cirname=? AND DIVNAME=? group by  rollup(SUBNAME,SECNAME),cirname ";
					// + "from (select * from rep_final_abs "
					// + " where seccd in (select seccd from spdclmaster where
					// circd not in('1','4','6','9') and cirname=? and divname=?
					// )) group by rollup(subname) ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					//System.out.println("SUB:"+query);
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select NVL(secname,'TOTAL')"
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							/*
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt"
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt"
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey"
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) "
							 */
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end)"
							+ " balance,cirname" + " "
							// + "from (select * from rep_final_abs "
							// + " where seccd in (select seccd from spdclmaster
							// where circd not in('1','4','6','9') and cirname=?
							// and divname=? and subname=? )) group by
							// rollup(secname),cirname ";
							+ " from  rep_final,  spdclmaster     where    NCPARTCD=seccd  AND    circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')  and cirname=? AND DIVNAME=? group by  rollup(SUBNAME,SECNAME),cirname ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();
					//System.out.println("SEC:"+query);

				} else {
					String query = "select NVL(ltrim(cirname,'z'),'DISCOM'), NVL(ltrim(divname,'z'),'TOTAL') "
							+ " ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob"
							+ " ,sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered"
							+ " ,sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%'"
							+ " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted"
							+ " ,sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released"
							+ " ,sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							// + " ,sum(case when upper(REPSTAT) like '%WRT%'
							// then 1 else 0 end) wrt"
							/*
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt"
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey"
							 * +
							 * " ,sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like '%TKEY%' then 1 else 0 end)"
							 */
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end)"
							+ "  balance,'' " + " "
							+ " from  rep_final,  spdclmaster     where    NCPARTCD=seccd  AND    circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')  group by  rollup(cirname,divname)  ORDER BY CIRNAME ";
					// + " from (select * from rep_final_abs "
					// + " where seccd in (select seccd from spdclmaster where
					// circd not in('1','4','6','9'))) group by
					// rollup(CIRNAME,divname) ORDER BY CIRNAME ";

					reportPStmt = con.prepareStatement(query);
					//System.out.println("CIRCLE:"+query);
					reportRst = reportPStmt.executeQuery();
				}

				if (reportRst != null) {

					while (reportRst.next()) {
						CscpayVO dmapobj = new CscpayVO();

						dmapobj.setCircle(reportRst.getString(1));
						dmapobj.setDivision(reportRst.getString(2));

						dmapobj.setAppPending(reportRst.getString(3));
						dmapobj.setAppReceived(reportRst.getString(4));
						dmapobj.setTot_reg(reportRst.getString(5));

						dmapobj.setAppPaid(reportRst.getString(6));
						dmapobj.setAppDeleted(reportRst.getString(7));
						dmapobj.setAppReleased(reportRst.getString(8));
						dmapobj.setTot_crt(reportRst.getString(9));

						dmapobj.setWrt(reportRst.getString(10));
						dmapobj.setBeyondReleased(reportRst.getString(11));
						dmapobj.setTurnKey(reportRst.getString(12));
						dmapobj.setTot_pen(reportRst.getString(13));
						dmapobj.setCircleCode(reportRst.getString(14));

						// cscmap.put(reportRst.getString(1), cscvoobj);
						dashList.add(dmapobj);

					}

					// cscvo.setCscpaymap(cscmap);
					cscvo.setList(dashList);

				}
				/*
				 * if (reportRst != null) { while (reportRst.next()) {
				 * 
				 * if (cscmap.containsKey(reportRst.getString(1))) { CscpayVO
				 * dmapobj = cscmap.get(reportRst.getString(1));
				 * 
				 * dmapobj.setAppPending(reportRst.getString(2));
				 * dmapobj.setAppReceived(reportRst.getString(3));
				 * dmapobj.setTot_reg(reportRst.getString(4));
				 * 
				 * dmapobj.setAppPaid(reportRst.getString(5));
				 * dmapobj.setAppDeleted(reportRst.getString(6));
				 * dmapobj.setAppReleased(reportRst.getString(7));
				 * dmapobj.setTot_crt(reportRst.getString(8));
				 * 
				 * dmapobj.setWrt(reportRst.getString(9));
				 * dmapobj.setBeyondReleased(reportRst.getString(10));
				 * dmapobj.setTurnKey(reportRst.getString(11));
				 * dmapobj.setTot_pen(reportRst.getString(12));
				 * 
				 * } else { CscpayVO dmapobj = new CscpayVO();
				 * 
				 * dmapobj.setAppPending(reportRst.getString(2));
				 * dmapobj.setAppReceived(reportRst.getString(3));
				 * dmapobj.setTot_reg(reportRst.getString(4));
				 * 
				 * dmapobj.setAppPaid(reportRst.getString(5));
				 * dmapobj.setAppDeleted(reportRst.getString(6));
				 * dmapobj.setAppReleased(reportRst.getString(7));
				 * dmapobj.setTot_crt(reportRst.getString(8));
				 * 
				 * dmapobj.setWrt(reportRst.getString(9));
				 * dmapobj.setBeyondReleased(reportRst.getString(10));
				 * dmapobj.setTurnKey(reportRst.getString(11));
				 * dmapobj.setTot_pen(reportRst.getString(12));
				 * 
				 * cscmap.put(reportRst.getString(1), dmapobj); } }
				 * cscvo.setCscpaymap(cscmap);
				 * 
				 * }
				 */

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	/* ALL Counters New LT Details */

	public CscpayVO getAllCountersNewLtDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		if ("1".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where     NCPARTCD=seccd  AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(reg_no)  not like '%H%' AND   CATEGORY_SUPPLY like '1%'";
		} else if ("2".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(reg_no)  not like '%H%' AND CATEGORY_SUPPLY like '2%'";
		} else if ("3".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')  and upper(reg_no)  not like '%H%' AND CATEGORY_SUPPLY like '3%'";
		} else if ("4".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(reg_no)  not like '%H%' AND CATEGORY_SUPPLY like '4%'";
		} 
		else if ("5".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where   NCPARTCD=seccd  AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and  upper(reg_no)  not like '%H%' AND CATEGORY_SUPPLY like '5%'";
		} 
		else if ("5A".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where   NCPARTCD=seccd   AND  circd not in('1','4','6','9') and nvl(consumer_status_val,'NA')='YSR JALAKALA' and  upper(reg_no)  not like '%H%' AND CATEGORY_SUPPLY like '5A%'";
		}
		
		else if ("6".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(reg_no)  not like '%H%'  AND CATEGORY_SUPPLY like '6%'";
		} else if ("7".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')  and upper(reg_no)  not like '%H%'  AND CATEGORY_SUPPLY like '7%'";
		} else if ("8".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(reg_no)  not like '%H%' AND CATEGORY_SUPPLY like '8%'";
		} else {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(REG_NO) not like '%H%' ";
		}

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					
					String query = " select NVL(ltrim(SUBNAME,'z'),'DISCOM'), NVL(ltrim(SECNAME,'z'),'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							/*
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							 * + " like '%TKEY%' then 1 else 0 end)"
							 */
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end)"
							+ "  balance,cirname from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=? AND DIVNAME=? " + " group by  rollup(SUBNAME,SECNAME),cirname ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query = "select NVL(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							/*
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							 * + " like '%TKEY%' then 1 else 0 end) "
							 */
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end)"
							+ " balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=?  and divname=?  " + " group by  rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					String query = "select NVL(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							/*
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							 * + " like '%TKEY%' then 1 else 0 end) "
							 */
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end)"
							+ " balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=?  and divname=?  and subname=?   " + " group by  rollup(secname)";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = " select NVL(ltrim(cirname,'z'),'DISCOM'), NVL(ltrim(divname,'z'),'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							/*
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							 * + " like '%TKEY%' then 1 else 0 end) "
							 */
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end)"
							+ " balance,'' from  rep_final," + "  spdclmaster    " + ltcat + " "
							+ " group by   rollup(CIRNAME,divname) ORDER BY CIRNAME ";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					//System.out.println("ALL:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {

					while (reportRst.next()) {
						CscpayVO dmapobj = new CscpayVO();

						dmapobj.setCircle(reportRst.getString(1));
						dmapobj.setDivision(reportRst.getString(2));

						dmapobj.setAppPending(reportRst.getString(3));
						dmapobj.setAppReceived(reportRst.getString(4));
						dmapobj.setTot_reg(reportRst.getString(5));

						dmapobj.setAppPaid(reportRst.getString(6));
						dmapobj.setAppDeleted(reportRst.getString(7));
						dmapobj.setAppReleased(reportRst.getString(8));
						dmapobj.setTot_crt(reportRst.getString(9));

						dmapobj.setWrt(reportRst.getString(10));
						dmapobj.setBeyondReleased(reportRst.getString(11));
						dmapobj.setTurnKey(reportRst.getString(12));
						dmapobj.setTot_pen(reportRst.getString(13));
						dmapobj.setCircleCode(reportRst.getString(14));

						// cscmap.put(reportRst.getString(1), cscvoobj);
						dashList.add(dmapobj);

					}

					// cscvo.setCscpaymap(cscmap);
					cscvo.setList(dashList);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	// AllCounter ht Details

	public CscpayVO getAllCountersNewHtDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') and upper(REG_NO)  like '%H%' ";
		// }

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "select NVL(ltrim(SUBNAME,'z'),'DISCOM'), NVL(ltrim(SECNAME,'z'),'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							/*
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) tkey,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' or upper(REPSTAT) "
							 * +
							 * " like '%TKEY%' then 1 else 0 end) balance,cirname from  rep_final,"
							 * + "  spdclmaster    "
							 */
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end)"
							+ " balance,'' from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=? AND DIVNAME=? " + " group by  rollup(SUBNAME,SECNAME),cirname";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "select NVL(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							/*
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							 * +
							 * " like '%TKEY%' then 1 else 0 end) balance from  rep_final,"
							 * + "  spdclmaster  "
							 */
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end)"
							+ " balance,'' from  rep_final," + "  spdclmaster    " + "   " + ltcat
							+ " AND cirname=?  and divname=?  " + " group by  rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select nvl(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * +
					 * " where circd not in('1','4','6','9') and cirname=? and divname=? and subname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(secname) ";
					 */
					String query = "select NVL(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							/*
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							 * +
							 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							 * +
							 * " like '%TKEY%' then 1 else 0 end) balance from  rep_final,"
							 * + "  spdclmaster   "
							 */
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end)"
							+ " balance,'' from  rep_final," + "  spdclmaster    " + " " + ltcat
							+ " AND cirname=?  and divname=?  and subname=?   " + " group by  rollup(secname)";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();
					//System.out.println("SEC:" + query);
				} else {

					String query = "select NVL(ltrim(cirname,'z'),'DISCOM'), NVL(ltrim(divname,'z'),'TOTAL'),sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' then 1 else 0 end)"
							+ " balance,'' from  rep_final," + "  spdclmaster    " + ltcat + " "
							+ "    group by rollup(CIRNAME,divname) ORDER BY CIRNAME ";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					//System.out.println("ALL:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {

					while (reportRst.next()) {
						CscpayVO dmapobj = new CscpayVO();

						dmapobj.setCircle(reportRst.getString(1));
						dmapobj.setDivision(reportRst.getString(2));

						dmapobj.setAppPending(reportRst.getString(3));
						dmapobj.setAppReceived(reportRst.getString(4));
						dmapobj.setTot_reg(reportRst.getString(5));

						dmapobj.setAppPaid(reportRst.getString(6));
						dmapobj.setAppDeleted(reportRst.getString(7));
						dmapobj.setAppReleased(reportRst.getString(8));
						dmapobj.setTot_crt(reportRst.getString(9));

						dmapobj.setWrt(reportRst.getString(10));
						dmapobj.setBeyondReleased(reportRst.getString(11));
						dmapobj.setTurnKey(reportRst.getString(12));
						dmapobj.setTot_pen(reportRst.getString(13));
						dmapobj.setCircleCode(reportRst.getString(14));

						// cscmap.put(reportRst.getString(1), cscvoobj);
						dashList.add(dmapobj);

					}

					// cscvo.setCscpaymap(cscmap);
					cscvo.setList(dashList);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	public void exportAllcounterNewYSRJALAKALAScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) like '%H%' ";
						status = "  and  (upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%')  and upper(REG_NO) like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO) like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND  upper(REPSTAT) like '%WRT' and upper(REG_NO) like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND  upper(REPSTAT) like '%BRT' and upper(REG_NO) like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%')   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   AND  upper(REPSTAT) like '%WRT'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%')    and upper(REG_NO) not like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%')  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND   upper(REPSTAT) like '%WRT' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND  upper(REPSTAT) like '%BRT' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {

					if ("DIV".equals(cscvo.getFlag())) {

						
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
										+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
										// +
										// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
										// paid_date"
										+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
										+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
										+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
										+ " and SUBNAME='" + cscvo.getCircle() + "' and SECNAME='" + cscvo.getDivision()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) and  nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
										+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
						
					} else {
						
						String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
								+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
								// +
								// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
								// paid_date"
								+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
								+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
								+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
								+ " and cirname='" + cscvo.getCircle()
								+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) and  nvl(consumer_status_val,'NA') ='YSR JALAKALA' order by cirname,divname,subname,secname"
								+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
						//System.out.println(query);
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
										+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
										// +
										// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
										// paid_date"
										+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
										+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus  "
										+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
										+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  and  nvl(consumer_status_val,'NA') ='YSR JALAKALA'  order by cirname,divname,subname,secname"
										+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

						// }
						// reportPStmt = con.prepareStatement(resultSet);
					}
				}

				else {
					if ("DIV".equals(cscvo.getFlag())) {

						
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
										+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
										// +
										// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
										// paid_date"
										+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
										+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
										+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
										+ " and SUBNAME='" + cscvo.getCircle() + "' and cirname='"
										+ cscvo.getCircleCode()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))   and  nvl(consumer_status_val,'NA') ='YSR JALAKALA'  order by cirname,divname,subname,secname"
										+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
						
					} else {
						
						String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
								+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
								+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
								+ " and cirname='" + cscvo.getCircle()
								+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  and  nvl(consumer_status_val,'NA') ='YSR JALAKALA'  order by cirname,divname,subname,secname"
								+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
						//System.out.println(query);
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
										+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
										// +
										// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
										// paid_date"
										+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
										+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus  "
										+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
										+ " and cirname='" + cscvo.getCircle()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  and  nvl(consumer_status_val,'NA') ='YSR JALAKALA'  order by cirname,divname,subname,secname"
										+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

						// }
						// reportPStmt = con.prepareStatement(resultSet);
					}
				}
				

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}
	
	
	
	// export allcounters Reports Download

	// @SuppressWarnings("unused")
	@SuppressWarnings("unused")
	public void exportAllcounterNewScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) like '%H%' ";
						status = "  and  (upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%')  and upper(REG_NO) like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO) like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND  upper(REPSTAT) like '%WRT' and upper(REG_NO) like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND  upper(REPSTAT) like '%BRT' and upper(REG_NO) like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%')   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   AND  upper(REPSTAT) like '%WRT'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%')    and upper(REG_NO) not like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%')  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND   upper(REPSTAT) like '%WRT' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND  upper(REPSTAT) like '%BRT' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%' )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {

					if ("DIV".equals(cscvo.getFlag())) {

						/*
						 * resultSet = statement.executeQuery(" select " +
						 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
						 * +
						 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
						 * + " from newcomp_tab a," +
						 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
						 * + " where a.cspartcd=b.seccd " + complaint_type + " "
						 * + counter + "" + " " + status + " and subname='" +
						 * cscvo.getCircle() + "' AND secname='" +
						 * cscvo.getDivision() + "'");
						 */
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
										+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
										// +
										// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
										// paid_date"
										+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
										+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
										+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
										+ " and SUBNAME='" + cscvo.getCircle() + "' and SECNAME='" + cscvo.getDivision()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') order by cirname,divname,subname,secname"
										+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
						// reportPStmt = con.prepareStatement(query);
						// reportPStmt.setString(1, cscvo.getCounterName());

						// reportPStmt.setString(2, cscvo.getFrom_date());
						// reportPStmt.setString(3, cscvo.getTo_date());
						// reportPStmt.setString(1, cscvo.getCircle());
						// reportPStmt.setString(2, cscvo.getDivision());

						// reportRst = reportPStmt.executeQuery();
					} else {
						/*
						 * resultSet = statement.executeQuery(
						 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
						 * +
						 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
						 * +
						 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
						 * +
						 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
						 * + " from rep_final a,master.spdclmaster@colldblink b"
						 * + " where a.ncpartcd=b.seccd " + status + "" +
						 * cscvo.getCircle() + "" +
						 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
						 * +
						 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
						 * );
						 */
						String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
								+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
								// +
								// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
								// paid_date"
								+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
								+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
								+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
								+ " and cirname='" + cscvo.getCircle()
								+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
								+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
						//System.out.println(query);
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
										+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
										// +
										// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
										// paid_date"
										+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
										+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus  "
										+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
										+ " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')  order by cirname,divname,subname,secname"
										+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

						// }
						// reportPStmt = con.prepareStatement(resultSet);
					}
				}

				else {
					if ("DIV".equals(cscvo.getFlag())) {

						/*
						 * resultSet = statement.executeQuery(" select " +
						 * " (ROW_NUMBER() OVER (partition by null order by null)) SNO,reg_no,REG_DATE,SERVICE_CONNECTION_NO,CUSTOMER_NAME,FATHER_NAME,"
						 * +
						 * " cleandata(STREET_NAME||DOOR_NO||TOWN_CITY) ADDRESS,PHONE_NO,complaint_description,CONTRACTLOAD,additional_load,meseva_ref"
						 * + " from newcomp_tab a," +
						 * " (select unique cirname,divname,subname,secname,divcd,seccd,subcd from  spdclmaster  where circd not in(1,4,6,9)) b"
						 * + " where a.cspartcd=b.seccd " + complaint_type + " "
						 * + counter + "" + " " + status + " and subname='" +
						 * cscvo.getCircle() + "' AND secname='" +
						 * cscvo.getDivision() + "'");
						 */
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
										+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
										// +
										// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
										// paid_date"
										+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
										+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
										+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
										+ " and SUBNAME='" + cscvo.getCircle() + "' and cirname='"
										+ cscvo.getCircleCode()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))   AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')  order by cirname,divname,subname,secname"
										+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");
						// reportPStmt = con.prepareStatement(query);
						// reportPStmt.setString(1, cscvo.getCounterName());

						// reportPStmt.setString(2, cscvo.getFrom_date());
						// reportPStmt.setString(3, cscvo.getTo_date());
						// reportPStmt.setString(1, cscvo.getCircle());
						// reportPStmt.setString(2, cscvo.getDivision());

						// reportRst = reportPStmt.executeQuery();
					} else {
						/*
						 * resultSet = statement.executeQuery(
						 * " select row_number() over (partition by null order by null) sno,cirname Circle,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT"
						 * +
						 * " ,reg_no,reg_date,consumer_name,category_supply CAT,contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid"
						 * +
						 * " ,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,meseva_ref reference_no"
						 * +
						 * " ,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus"
						 * + " from rep_final a,master.spdclmaster@colldblink b"
						 * + " where a.ncpartcd=b.seccd " + status + "" +
						 * cscvo.getCircle() + "" +
						 * " and seccd in (select seccd from master.spdclmaster@colldblink where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
						 * +
						 * " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date"
						 * );
						 */
						String query = " select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
								+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL,greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)) paid_date,nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus "
								+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
								+ " and cirname='" + cscvo.getCircle()
								+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))   AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')  order by cirname,divname,subname,secname"
								+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date";
						//System.out.println(query);
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,reg_date,consumer_name ,ADDRESS,PHONE_NO, decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT,"
										+ " contracted_load Load,purpose,nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL"
										// +
										// ",greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date))
										// paid_date"
										+ " ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date"
										+ ",nvl(to_char(SUPPLY_RELEASE_DATE,'mm-dd-yy'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus  "
										+ " from rep_final a, spdclmaster  b " + " where a.ncpartcd=b.seccd " + status
										+ " and cirname='" + cscvo.getCircle()
										+ "' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9))  AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY')  order by cirname,divname,subname,secname"
										+ " ,(case when reg_no like '%H%' then 'HT' else 'LT' end),reg_date");

						// }
						// reportPStmt = con.prepareStatement(resultSet);
					}
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// commercial Service released load Report

	public CscpayVO getServiceReleasedLoadDetails(CscpayVO dcbvo) throws Exception {
		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;
		String from_date = null;
		String till_date = null;
		// String connectionURL = "jdbc:oracle:thin:@10.16.1.174:1522:BILLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL,
		// "spdcl_mis", "SPDCL123MIS");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		/*
		 * Map<String, Map<String, SpellDemandVO>> spellMap = new
		 * LinkedHashMap<String, Map<String, SpellDemandVO>>(); Map<String,
		 * Map<String, SpellDemandVO>> spellMap1 = new LinkedHashMap<String,
		 * Map<String, SpellDemandVO>>(); Map<String, Map<String,
		 * SpellDemandVO>> spellMap2 = new LinkedHashMap<String, Map<String,
		 * SpellDemandVO>>();
		 */
		Map<String, CscpayVO> dcbmap = new LinkedHashMap<String, CscpayVO>();
		List<String> statusLIst = new LinkedList<String>();

		Set<String> cats = new TreeSet<String>();
		try {
			// logger.info("START : SpellDemandDAO -
			// getCatwiseSpellDemanReportDetails() ");
			if (con != null) {
				String month = dcbvo.getMonth();
				String year = dcbvo.getYear();
				if (month.length() == 1) {
					month = "0" + month;
				}
				// String monthyear = month + "_" + year;
				String monthyear = year + "_" + month;
				if (Integer.parseInt(dcbvo.getMonth()) < 4) {
					int curr_ye = Integer.parseInt(dcbvo.getYear()) - 1;

					from_date = String.valueOf(curr_ye) + "_04";

					String mm = String.valueOf(curr_month);
					if (mm.length() == 1) {
						mm = "0" + mm;
					}

					String date = String.valueOf(curr_ye) + "_" + mm + "";
					SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy_MM");

					Date convertedDate = dateFormat.parse(date);

					Calendar calen = Calendar.getInstance();
					calen.setTime(convertedDate);

					int lastDate = calen.getActualMaximum(Calendar.DATE);

					calen.set(Calendar.DATE, lastDate);

					till_date = dateFormat.format(calen.getTime());

				} else {
					from_date = String.valueOf(curr_year) + "_04";

					String date = dcbvo.getYear() + "_" + String.valueOf(curr_month - 1) + "";

					SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy_MM");

					Date convertedDate = dateFormat.parse(date);

					Calendar calen = Calendar.getInstance();
					calen.setTime(convertedDate);

					int lastDate = calen.getActualMaximum(Calendar.DATE);

					calen.set(Calendar.DATE, lastDate);

					till_date = dateFormat.format(calen.getTime());

				}

				//System.out.println("from date" + from_date);
				//System.out.println("till date" + till_date);
				//System.out.println("current month " + monthyear);

				/*
				 * String query =
				 * "SELECT C.CATEGORY,M.NLR_SCS,NVL(M.NLR_LOAD,0),M.TPT_SCS,NVL(M.TPT_LOAD,0),M.KDP_SCS,NVL(M.KDP_LOAD,0),M.KNL_SCS,NVL(M.KNL_LOAD,0),M.ATP_SCS,NVL(M.ATP_LOAD,0),(M.NLR_SCS+M.TPT_SCS+M.KDP_SCS+M.KNL_SCS+M.ATP_SCS) TOTAL,"
				 * +
				 * " (NVL(M.NLR_LOAD,0)+NVL(M.TPT_LOAD,0)+NVL(M.KDP_LOAD,0)+NVL(M.KNL_LOAD,0)+NVL(M.ATP_LOAD,0)) TOTAL_LOAD,C.NLR_SCS_TOT,C.NLR_LOAD_TOT,C.TPT_SCS_TOT,C.TPT_LOAD_TOT,C.KDP_SCS_TOT,C.KDP_LOAD_TOT,C.KNL_SCS_TOT,C.KNL_LOAD_TOT,C.ATP_SCS_TOT,C.ATP_LOAD_TOT,(C.NLR_SCS_TOT+C.TPT_SCS_TOT+C.KDP_SCS_TOT+C.KNL_SCS_TOT+C.ATP_SCS_TOT) TOTAL,(C.NLR_LOAD_TOT+C.TPT_LOAD_TOT+C.KDP_LOAD_TOT+C.KNL_LOAD_TOT+C.ATP_LOAD_TOT)TOTAL_LOAD FROM"
				 * +
				 * " (SELECT CATEGORY,SUM(NVL(NLR_SCS,0))NLR_SCS,SUM(NVL(NLR_LOAD,0)) NLR_LOAD,SUM(NVL(TPT_SCS,0))TPT_SCS,SUM(NVL(TPT_LOAD,0))TPT_LOAD,SUM(NVL(KDP_SCS,0))KDP_SCS,SUM(NVL(KDP_LOAD,0))KDP_LOAD,SUM(NVL(KNL_SCS,0))KNL_SCS,SUM(NVL(KNL_LOAD,0)) KNL_LOAD,SUM(NVL(ATP_SCS,0))ATP_SCS,SUM(NVL(ATP_LOAD,0)) ATP_LOAD FROM REP_COMML WHERE N2MONTH=? GROUP BY CATEGORY)M,"
				 * +
				 * " (SELECT CATEGORY,SUM(NLR_SCS_TOT)NLR_SCS_TOT,SUM(NVL(NLR_LOAD_TOT,0))NLR_LOAD_TOT,SUM(TPT_SCS_TOT)TPT_SCS_TOT,SUM(NVL(TPT_LOAD_TOT,0))TPT_LOAD_TOT,SUM(KDP_SCS_TOT)KDP_SCS_TOT,SUM(NVL(KDP_LOAD_TOT,0))KDP_LOAD_TOT,SUM(KNL_SCS_TOT)KNL_SCS_TOT,SUM(NVL(KNL_LOAD_TOT,0))KNL_LOAD_TOT,SUM(ATP_SCS_TOT)ATP_SCS_TOT,SUM(NVL(ATP_LOAD_TOT,0))ATP_LOAD_TOT FROM REP_COMML WHERE N2MONTH BETWEEN ? AND ? GROUP BY CATEGORY)C"
				 * + " WHERE C.CATEGORY=M.CATEGORY(+) ORDER BY C.CATEGORY";
				 */

				String query = "SELECT C.CATEGORY,SUM(NVL(M.NLR_SCS,0))NLR_SCS,SUM(NVL(M.NLR_LOAD,0)) NLR_LOAD,SUM(NVL(M.TPT_SCS,0))TPT_SCS,SUM(NVL(M.TPT_LOAD,0))TPT_LOAD,SUM(NVL(M.KDP_SCS,0))KDP_SCS,SUM(NVL(M.KDP_LOAD,0))KDP_LOAD,SUM(NVL(M.KNL_SCS,0))KNL_SCS,SUM(NVL(M.KNL_LOAD,0)) KNL_LOAD,SUM(NVL(M.ATP_SCS,0))ATP_SCS,SUM(NVL(M.ATP_LOAD,0)) ATP_LOAD,SUM(NVL(M.MONTH_TOTAL,0))MONTH_TOTAL, SUM(NVL(M.MONTH_LOAD,0))MONTH_LOAD,SUM(NVL(C.NLR_SCS_TOT,0))NLR_SCS_TOT,SUM(NVL(C.NLR_LOAD_TOT,0))NLR_LOAD_TOT,SUM(NVL(C.TPT_SCS_TOT,0))TPT_SCS_TOT,SUM(NVL(C.TPT_LOAD_TOT,0))TPT_LOAD_TOT,SUM(NVL(C.KDP_SCS_TOT,0))KDP_SCS_TOT,SUM(NVL(C.KDP_LOAD_TOT,0))KDP_LOAD_TOT,SUM(NVL(C.KNL_SCS_TOT,0))KNL_SCS_TOT,SUM(NVL(C.KNL_LOAD_TOT,0))KNL_LOAD_TOT,SUM(NVL(C.ATP_SCS_TOT,0))ATP_SCS_TOT,SUM(NVL(C.ATP_LOAD_TOT,0))ATP_LOAD_TOT, SUM(NVL(C.TOTAL,0)) CUMM_TOTAL,SUM(NVL(TOTAL_LOAD,0))CUMM_LOAD FROM"
						+ " (SELECT CATEGORY,SUM(NVL(NLR_SCS,0))NLR_SCS,SUM(NVL(NLR_LOAD,0)) NLR_LOAD,SUM(NVL(TPT_SCS,0))TPT_SCS,SUM(NVL(TPT_LOAD,0))TPT_LOAD,SUM(NVL(KDP_SCS,0))KDP_SCS,SUM(NVL(KDP_LOAD,0))KDP_LOAD,SUM(NVL(KNL_SCS,0))KNL_SCS,SUM(NVL(KNL_LOAD,0)) KNL_LOAD,SUM(NVL(ATP_SCS,0))ATP_SCS,SUM(NVL(ATP_LOAD,0)) ATP_LOAD ,SUM(NVL(NLR_SCS,0)+NVL(TPT_SCS,0)+NVL(KDP_SCS,0)+NVL(KNL_SCS,0)+NVL(ATP_SCS,0)) MONTH_TOTAL,SUM(NVL(NLR_LOAD,0)+NVL(TPT_LOAD,0)+NVL(KDP_LOAD,0)+NVL(KNL_LOAD,0)+NVL(ATP_LOAD,0)) MONTH_LOAD FROM REP_COMML WHERE N2MONTH=? GROUP BY CATEGORY)M,"
						+ " (SELECT CATEGORY,SUM(NLR_SCS_TOT)NLR_SCS_TOT,SUM(NVL(NLR_LOAD_TOT,0))NLR_LOAD_TOT,SUM(TPT_SCS_TOT)TPT_SCS_TOT,SUM(NVL(TPT_LOAD_TOT,0))TPT_LOAD_TOT,SUM(KDP_SCS_TOT)KDP_SCS_TOT,SUM(NVL(KDP_LOAD_TOT,0))KDP_LOAD_TOT,SUM(KNL_SCS_TOT)KNL_SCS_TOT,SUM(NVL(KNL_LOAD_TOT,0))KNL_LOAD_TOT,SUM(ATP_SCS_TOT)ATP_SCS_TOT,SUM(NVL(ATP_LOAD_TOT,0))ATP_LOAD_TOT,SUM(NVL(NLR_SCS_TOT,0)+NVL(TPT_SCS_TOT,0)+NVL(KDP_SCS_TOT,0)+NVL(KNL_SCS_TOT,0)+NVL(ATP_SCS_TOT,0)) TOTAL,SUM(NVL(NLR_LOAD_TOT,0)+NVL(TPT_LOAD_TOT,0)+NVL(KDP_LOAD_TOT,0)+NVL(KNL_LOAD_TOT,0)+NVL(ATP_LOAD_TOT,0))TOTAL_LOAD FROM REP_COMML WHERE N2MONTH BETWEEN ? AND ? GROUP BY CATEGORY)C"
						+ " WHERE C.CATEGORY=M.CATEGORY(+) GROUP BY C.CATEGORY ORDER BY C.CATEGORY ";

				reportPStmt = con.prepareStatement(query);
				reportPStmt.setString(1, monthyear);
				reportPStmt.setString(2, from_date);
				reportPStmt.setString(3, till_date);

				// reportPStmt.setString(4, monthyear);
				// reportPStmt.setString(5, from_date);
				// reportPStmt.setString(6, till_date);

				reportRst = reportPStmt.executeQuery();

				if (reportRst != null) {
					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCat(reportRst.getString(1));
						// vo.setSubcat(reportRst.getString(2));

						vo.setNlr_scs(reportRst.getInt(2));
						vo.setNlr_cl(reportRst.getBigDecimal(3));

						vo.setTpt_scs(reportRst.getInt(4));
						vo.setTpt_cl(reportRst.getBigDecimal(5));

						vo.setKdp_scs(reportRst.getInt(6));
						vo.setKdp_cl(reportRst.getBigDecimal(7));

						vo.setKur_scs(reportRst.getInt(8));
						vo.setKur_cl(reportRst.getBigDecimal(9));

						vo.setAnt_scs(reportRst.getInt(10));
						vo.setAnt_cl(reportRst.getBigDecimal(11));

						vo.setTot_scs(reportRst.getInt(12));
						vo.setTot_load(reportRst.getBigDecimal(13));

						vo.setNlr_fscs(reportRst.getInt(14));
						vo.setNlr_fcl(reportRst.getBigDecimal(15));

						vo.setTpt_fscs(reportRst.getInt(16));
						vo.setTpt_fcl(reportRst.getBigDecimal(17));

						vo.setKdp_fscs(reportRst.getInt(18));
						vo.setKdp_fcl(reportRst.getBigDecimal(19));

						vo.setKur_fscs(reportRst.getInt(20));
						vo.setKur_fcl(reportRst.getBigDecimal(21));

						vo.setAnt_fscs(reportRst.getInt(22));
						vo.setAnt_fcl(reportRst.getBigDecimal(23));

						vo.setFtot_scs(reportRst.getInt(24));
						vo.setFtot_load(reportRst.getBigDecimal(25));

						dashList.add(vo);
					}
				}
				dcbvo.setList(dashList);

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {

			if (con != null) {
				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}

			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

		}
		return dcbvo;
	}

	// Servuice relased

	// commercial Service released load Report

	public CscpayVO getServiceReleasedDetails(CscpayVO dcbvo) throws Exception {
		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;
		String from_date = null;
		String till_date = null;
		// String connectionURL = "jdbc:oracle:thin:@10.16.1.174:1522:BILLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL,
		// "spdcl_mis", "SPDCL123MIS");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		/*
		 * Map<String, Map<String, SpellDemandVO>> spellMap = new
		 * LinkedHashMap<String, Map<String, SpellDemandVO>>(); Map<String,
		 * Map<String, SpellDemandVO>> spellMap1 = new LinkedHashMap<String,
		 * Map<String, SpellDemandVO>>(); Map<String, Map<String,
		 * SpellDemandVO>> spellMap2 = new LinkedHashMap<String, Map<String,
		 * SpellDemandVO>>();
		 */
		Map<String, CscpayVO> dcbmap = new LinkedHashMap<String, CscpayVO>();
		List<String> statusLIst = new LinkedList<String>();

		Set<String> cats = new TreeSet<String>();
		try {
			// logger.info("START : SpellDemandDAO -
			// getCatwiseSpellDemanReportDetails() ");
			if (con != null) {
				String month = dcbvo.getMonth();
				String year = dcbvo.getYear();
				if (month.length() == 1) {
					month = "0" + month;
				}
				// String monthyear = month + "_" + year;
				String monthyear = year + "_" + month;
				if (Integer.parseInt(dcbvo.getMonth()) < 4) {
					int curr_ye = Integer.parseInt(dcbvo.getYear()) - 1;

					from_date = String.valueOf(curr_ye) + "_04";

					String mm = String.valueOf(curr_month);
					if (mm.length() == 1) {
						mm = "0" + mm;
					}

					String date = String.valueOf(curr_ye) + "_" + mm + "";
					SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy_MM");

					Date convertedDate = dateFormat.parse(date);

					Calendar calen = Calendar.getInstance();
					calen.setTime(convertedDate);

					int lastDate = calen.getActualMaximum(Calendar.DATE);

					calen.set(Calendar.DATE, lastDate);

					till_date = dateFormat.format(calen.getTime());

				} else {
					from_date = String.valueOf(curr_year) + "_04";

					String date = dcbvo.getYear() + "_" + String.valueOf(curr_month - 1) + "";

					SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy_MM");

					Date convertedDate = dateFormat.parse(date);

					Calendar calen = Calendar.getInstance();
					calen.setTime(convertedDate);

					int lastDate = calen.getActualMaximum(Calendar.DATE);

					calen.set(Calendar.DATE, lastDate);

					till_date = dateFormat.format(calen.getTime());

				}

				System.out.println("from date" + from_date);
				System.out.println("till date" + till_date);
				System.out.println("current month " + monthyear);

				/*
				 * String query =
				 * "SELECT C.CATEGORY,SUM(NVL(M.NLR_SCS,0))NLR_SCS,SUM(NVL(M.TPT_SCS,0))TPT_SCS,SUM(NVL(M.KDP_SCS,0))KDP_SCS,SUM(NVL(M.KNL_SCS,0))KNL_SCS,SUM(NVL(M.ATP_SCS,0))ATP_SCS,SUM(NVL(M.NLR_SCS+M.TPT_SCS+M.KDP_SCS+M.KNL_SCS+M.ATP_SCS,0)) TOTAL,SUM(NVL(C.NLR_SCS_TOT,0))NLR_TOT,SUM(NVL(C.TPT_SCS_TOT,0))TPT_TOT,SUM(NVL(C.KDP_SCS_TOT,0))KDP_TOT,SUM(NVL(C.KNL_SCS_TOT,0))KNL_TOT,SUM(NVL(C.ATP_SCS_TOT,0))ATP_TOT,SUM(NVL(C.NLR_SCS_TOT+C.TPT_SCS_TOT+C.KDP_SCS_TOT+C.KNL_SCS_TOT+C.ATP_SCS_TOT,0)) TOTAL  FROM"
				 * +
				 * " (SELECT CATEGORY,SUM(NVL(NLR_SCS,0))NLR_SCS,SUM(NVL(TPT_SCS,0))TPT_SCS,SUM(NVL(KDP_SCS,0))KDP_SCS,SUM(NVL(KNL_SCS,0))KNL_SCS,SUM(NVL(ATP_SCS,0))ATP_SCS FROM REP_COMML WHERE N2MONTH=? GROUP BY CATEGORY)M,"
				 * +
				 * " (SELECT CATEGORY,SUM(NLR_SCS_TOT)NLR_SCS_TOT,SUM(TPT_SCS_TOT)TPT_SCS_TOT,SUM(KDP_SCS_TOT)KDP_SCS_TOT,SUM(KNL_SCS_TOT)KNL_SCS_TOT,SUM(ATP_SCS_TOT)ATP_SCS_TOT FROM REP_COMML WHERE N2MONTH BETWEEN ? AND ? GROUP BY CATEGORY)C"
				 * + " WHERE C.CATEGORY=M.CATEGORY(+)" + " GROUP BY C.CATEGORY"
				 * + " ORDER BY C.CATEGORY";
				 */

				String query = "SELECT C.CATEGORY,SUM(NVL(M.NLR_SCS,0))NLR_SCS,SUM(NVL(M.TPT_SCS,0))TPT_SCS,SUM(NVL(M.KDP_SCS,0))KDP_SCS,SUM(NVL(M.KNL_SCS,0))KNL_SCS,SUM(NVL(M.ATP_SCS,0))ATP_SCS,SUM(NVL(M.NLR_SCS,0)+NVL(M.TPT_SCS,0)+NVL(M.KDP_SCS,0)+NVL(M.KNL_SCS,0)+NVL(M.ATP_SCS,0)) TOTAL,SUM(NVL(C.NLR_SCS_TOT,0))NLR_TOT,SUM(NVL(C.TPT_SCS_TOT,0))TPT_TOT,SUM(NVL(C.KDP_SCS_TOT,0))KDP_TOT,SUM(NVL(C.KNL_SCS_TOT,0))KNL_TOT,SUM(NVL(C.ATP_SCS_TOT,0))ATP_TOT,SUM(NVL(C.NLR_SCS_TOT,0)+NVL(C.TPT_SCS_TOT,0)+NVL(C.KDP_SCS_TOT,0)+NVL(C.KNL_SCS_TOT,0)+NVL(C.ATP_SCS_TOT,0)) TOTAL  FROM"
						+ " (SELECT CATEGORY,SUM(NVL(NLR_SCS,0))NLR_SCS,SUM(NVL(TPT_SCS,0))TPT_SCS,SUM(NVL(KDP_SCS,0))KDP_SCS,SUM(NVL(KNL_SCS,0))KNL_SCS,SUM(NVL(ATP_SCS,0))ATP_SCS FROM REP_COMML WHERE N2MONTH=? GROUP BY CATEGORY)M,"
						+ " (SELECT CATEGORY,SUM(NLR_SCS_TOT)NLR_SCS_TOT,SUM(TPT_SCS_TOT)TPT_SCS_TOT,SUM(KDP_SCS_TOT)KDP_SCS_TOT,SUM(KNL_SCS_TOT)KNL_SCS_TOT,SUM(ATP_SCS_TOT)ATP_SCS_TOT FROM REP_COMML WHERE N2MONTH BETWEEN ? AND ? GROUP BY CATEGORY)C"
						+ " WHERE C.CATEGORY=M.CATEGORY(+) " + " GROUP BY C.CATEGORY ORDER BY C.CATEGORY";

				reportPStmt = con.prepareStatement(query);
				reportPStmt.setString(1, monthyear);
				reportPStmt.setString(2, from_date);
				reportPStmt.setString(3, till_date);

				// reportPStmt.setString(4, monthyear);
				// reportPStmt.setString(5, from_date);
				// reportPStmt.setString(6, till_date);

				reportRst = reportPStmt.executeQuery();
				System.out.println("query"+query);

				if (reportRst != null) {
					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCat(reportRst.getString(1));
						// vo.setSubcat(reportRst.getString(2));

						vo.setNlr_scs(reportRst.getInt(2));
						vo.setTpt_scs(reportRst.getInt(3));
						vo.setKdp_scs(reportRst.getInt(4));
						vo.setKur_scs(reportRst.getInt(5));
						vo.setAnt_scs(reportRst.getInt(6));
						vo.setTot_scs(reportRst.getInt(7));

						vo.setNlr_fscs(reportRst.getInt(8));
						vo.setTpt_fscs(reportRst.getInt(9));
						vo.setKdp_fscs(reportRst.getInt(10));
						vo.setKur_fscs(reportRst.getInt(11));
						vo.setAnt_fscs(reportRst.getInt(12));
						vo.setFtot_scs(reportRst.getInt(13));

						dashList.add(vo);
					}
				}
				dcbvo.setList(dashList);

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {

			if (con != null) {
				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}

			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

		}
		return dcbvo;
	}

	// Community Wise Ser Release

	public CscpayVO getCommunityWiseServiceReleasedDetails(CscpayVO dcbvo) throws Exception {
		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;
		String from_date = null;
		String till_date = null;
		// String connectionURL = "jdbc:oracle:thin:@10.16.1.174:1522:BILLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL,
		// "spdcl_mis", "SPDCL123MIS");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		/*
		 * Map<String, Map<String, SpellDemandVO>> spellMap = new
		 * LinkedHashMap<String, Map<String, SpellDemandVO>>(); Map<String,
		 * Map<String, SpellDemandVO>> spellMap1 = new LinkedHashMap<String,
		 * Map<String, SpellDemandVO>>(); Map<String, Map<String,
		 * SpellDemandVO>> spellMap2 = new LinkedHashMap<String, Map<String,
		 * SpellDemandVO>>();
		 */
		Map<String, CscpayVO> dcbmap = new LinkedHashMap<String, CscpayVO>();
		List<String> statusLIst = new LinkedList<String>();

		Set<String> cats = new TreeSet<String>();
		try {
			// logger.info("START : SpellDemandDAO -
			// getCatwiseSpellDemanReportDetails() ");
			if (con != null) {
				String month = dcbvo.getMonth();
				String year = dcbvo.getYear();
				if (month.length() == 1) {
					month = "0" + month;
				}
				// String monthyear = month + "_" + year;
				String monthyear = year + "_" + month;
				if (Integer.parseInt(dcbvo.getMonth()) < 4) {
					int curr_ye = Integer.parseInt(dcbvo.getYear()) - 1;

					from_date = String.valueOf(curr_ye) + "_04";

					String mm = String.valueOf(curr_month);
					if (mm.length() == 1) {
						mm = "0" + mm;
					}

					String date = String.valueOf(curr_ye) + "_" + mm + "";
					SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy_MM");

					Date convertedDate = dateFormat.parse(date);

					Calendar calen = Calendar.getInstance();
					calen.setTime(convertedDate);

					int lastDate = calen.getActualMaximum(Calendar.DATE);

					calen.set(Calendar.DATE, lastDate);

					till_date = dateFormat.format(calen.getTime());

				} else {
					from_date = String.valueOf(curr_year) + "_04";

					String date = dcbvo.getYear() + "_" + String.valueOf(curr_month - 1) + "";

					SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy_MM");

					Date convertedDate = dateFormat.parse(date);

					Calendar calen = Calendar.getInstance();
					calen.setTime(convertedDate);

					int lastDate = calen.getActualMaximum(Calendar.DATE);

					calen.set(Calendar.DATE, lastDate);

					till_date = dateFormat.format(calen.getTime());

				}

				System.out.println("from date" + from_date);
				System.out.println("till date" + till_date);
				System.out.println("current month " + monthyear);

				/*
				 * String query =
				 * "SELECT C.CATEGORY,NVL(C.N2GROUP,'NA'),M.NLR_SCS,M.TPT_SCS,M.KDP_SCS,M.KNL_SCS,M.ATP_SCS,(M.NLR_SCS+M.TPT_SCS+M.KDP_SCS+M.KNL_SCS+M.ATP_SCS) TOTAL,C.NLR_SCS_TOT,C.TPT_SCS_TOT,C.KDP_SCS_TOT,C.KNL_SCS_TOT,C.ATP_SCS_TOT,(C.NLR_SCS_TOT+C.TPT_SCS_TOT+C.KDP_SCS_TOT+C.KNL_SCS_TOT+C.ATP_SCS_TOT) TOTAL FROM"
				 * +
				 * " (SELECT CATEGORY,N2GROUP,SUM(NVL(NLR_SCS,0))NLR_SCS,SUM(NVL(NLR_LOAD,0)) NLR_LOAD,SUM(NVL(TPT_SCS,0))TPT_SCS,SUM(NVL(TPT_LOAD,0))TPT_LOAD,SUM(NVL(KDP_SCS,0))KDP_SCS,SUM(NVL(KDP_LOAD,0))KDP_LOAD,SUM(NVL(KNL_SCS,0))KNL_SCS,SUM(NVL(KNL_LOAD,0)) KNL_LOAD,SUM(NVL(ATP_SCS,0))ATP_SCS,SUM(NVL(ATP_LOAD,0)) ATP_LOAD FROM REP_COMML WHERE N2MONTH=? GROUP BY CATEGORY,N2GROUP)M,"
				 * +
				 * " (SELECT CATEGORY,N2GROUP,SUM(NLR_SCS_TOT)NLR_SCS_TOT,SUM(NVL(NLR_LOAD_TOT,0))NLR_LOAD_TOT,SUM(TPT_SCS_TOT)TPT_SCS_TOT,SUM(NVL(TPT_LOAD_TOT,0))TPT_LOAD_TOT,SUM(KDP_SCS_TOT)KDP_SCS_TOT,SUM(NVL(KDP_LOAD_TOT,0))KDP_LOAD_TOT,SUM(KNL_SCS_TOT)KNL_SCS_TOT,SUM(NVL(KNL_LOAD_TOT,0))KNL_LOAD_TOT,SUM(ATP_SCS_TOT)ATP_SCS_TOT,SUM(NVL(ATP_LOAD_TOT,0))ATP_LOAD_TOT FROM REP_COMML WHERE N2MONTH BETWEEN ? AND ? GROUP BY CATEGORY,N2GROUP)C"
				 * + " WHERE C.CATEGORY=M.CATEGORY(+)" +
				 * " AND C.N2GROUP=M.N2GROUP(+)" +
				 * " ORDER BY C.CATEGORY,C.N2GROUP";
				 */
				String query = "SELECT C.CATEGORY,NVL(C.N2GROUP,'NA'),SUM(NVL(M.NLR_SCS,0))NLR_SCS,SUM(NVL(M.TPT_SCS,0))TPT_SCS,SUM(NVL(M.KDP_SCS,0))KDP_SCS,SUM(NVL(M.KNL_SCS,0))KNL_SCS,SUM(NVL(M.ATP_SCS,0))ATP_SCS, SUM(NVL(M.TOTAL,0)) TOTAL,SUM(NVL(C.NLR_SCS_TOT,0))NLR_SCS_TOT,SUM(NVL(C.TPT_SCS_TOT,0))TPT_SCS_TOT,SUM(NVL(C.KDP_SCS_TOT,0))KDP_SCS_TOT,SUM(NVL(C.KNL_SCS_TOT,0))KNL_SCS_TOT,SUM(NVL(C.ATP_SCS_TOT,0)) ATP_SCS_TOT,SUM(NVL(CUMM_TOTAL,0))CUMM_TOTAL FROM"
						+ " (SELECT CATEGORY,N2GROUP,SUM(NVL(NLR_SCS,0))NLR_SCS,SUM(NVL(NLR_LOAD,0)) NLR_LOAD,SUM(NVL(TPT_SCS,0))TPT_SCS,SUM(NVL(TPT_LOAD,0))TPT_LOAD,SUM(NVL(KDP_SCS,0))KDP_SCS,SUM(NVL(KDP_LOAD,0))KDP_LOAD,SUM(NVL(KNL_SCS,0))KNL_SCS,SUM(NVL(KNL_LOAD,0)) KNL_LOAD,SUM(NVL(ATP_SCS,0))ATP_SCS,SUM(NVL(ATP_LOAD,0)) ATP_LOAD,SUM(NVL(NLR_SCS,0)+NVL(TPT_SCS,0)+NVL(KDP_SCS,0)+NVL(KNL_SCS,0)+NVL(ATP_SCS,0)) TOTAL FROM REP_COMML WHERE N2MONTH=? GROUP BY CATEGORY,N2GROUP)M,"
						+ " (SELECT CATEGORY,N2GROUP,SUM(NLR_SCS_TOT)NLR_SCS_TOT,SUM(NVL(NLR_LOAD_TOT,0))NLR_LOAD_TOT,SUM(TPT_SCS_TOT)TPT_SCS_TOT,SUM(NVL(TPT_LOAD_TOT,0))TPT_LOAD_TOT,SUM(KDP_SCS_TOT)KDP_SCS_TOT,SUM(NVL(KDP_LOAD_TOT,0))KDP_LOAD_TOT,SUM(KNL_SCS_TOT)KNL_SCS_TOT,SUM(NVL(KNL_LOAD_TOT,0))KNL_LOAD_TOT,SUM(ATP_SCS_TOT)ATP_SCS_TOT,SUM(NVL(ATP_LOAD_TOT,0))ATP_LOAD_TOT,SUM(NVL(NLR_SCS_TOT,0)+NVL(TPT_SCS_TOT,0)+NVL(KDP_SCS_TOT,0)+NVL(KNL_SCS_TOT,0)+NVL(ATP_SCS_TOT,0)) CUMM_TOTAL FROM REP_COMML WHERE N2MONTH BETWEEN ? AND ? GROUP BY CATEGORY,N2GROUP)C"
						+ " WHERE C.CATEGORY=M.CATEGORY(+)" + " AND C.N2GROUP=M.N2GROUP(+)"
						+ " GROUP BY  C.CATEGORY,C.N2GROUP" + " ORDER BY C.CATEGORY,C.N2GROUP";

				
				System.out.println("query_COMM" +query);
				reportPStmt = con.prepareStatement(query);
				reportPStmt.setString(1, monthyear);
				reportPStmt.setString(2, from_date);
				reportPStmt.setString(3, till_date);

				// reportPStmt.setString(4, monthyear);
				// reportPStmt.setString(5, from_date);
				// reportPStmt.setString(6, till_date);

				reportRst = reportPStmt.executeQuery();
				//System.out.println("query_COMM" +query);

				if (reportRst != null) {
					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCat(reportRst.getString(1));
						vo.setGroup(reportRst.getString(2));
						// vo.setSubcat(reportRst.getString(2));

						vo.setNlr_scs(reportRst.getInt(3));
						vo.setTpt_scs(reportRst.getInt(4));
						vo.setKdp_scs(reportRst.getInt(5));
						vo.setKur_scs(reportRst.getInt(6));
						vo.setAnt_scs(reportRst.getInt(7));
						vo.setTot_scs(reportRst.getInt(8));

						vo.setNlr_fscs(reportRst.getInt(9));
						vo.setTpt_fscs(reportRst.getInt(10));
						vo.setKdp_fscs(reportRst.getInt(11));
						vo.setKur_fscs(reportRst.getInt(12));
						vo.setAnt_fscs(reportRst.getInt(13));
						vo.setFtot_scs(reportRst.getInt(14));

						dashList.add(vo);
					}
				}
				dcbvo.setList(dashList);

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {

			if (con != null) {
				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}

			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

		}
		return dcbvo;
	}

	// LT INDL Pending Commercial Reports

	public CscpayVO getCommercialLtIndlPenDetails(CscpayVO cscvo) throws Exception {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		/*
		 * Calendar c = Calendar.getInstance(); int curr_year =
		 * c.get(Calendar.YEAR); int curr_month = c.get(Calendar.MONTH) + 1;
		 */

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = c.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));
		String endDate1 = String.valueOf(curr_date);
		if (endDate1.length() == 1)
			endDate1 = "0".concat(endDate1);
		endDate = endDate1.concat("-")
				.concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		System.out.println("Date:" + startDate);
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(REG_NO)  like '%H%' ";
		// }

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		Map<String, CscpayVO> cscmap1 = new LinkedHashMap<String, CscpayVO>();
		Map<String, CscpayVO> cscmap2 = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select NVL(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
					 * +
					 * " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then 1 else 0 end) balance from  rep_final,"
					 * + "  spdclmaster    " + ltcat + " AND cirname=? " +
					 * " group by  rollup(divname)"; reportPStmt =
					 * con.prepareStatement(query);
					 * 
					 * reportPStmt.setString(1, cscvo.getCircle()); //
					 * reportPStmt.setString(2, chkVO.getCirname());
					 * 
					 * reportRst = reportPStmt.executeQuery();
					 */
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select NVL(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
					 * +
					 * " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then 1 else 0 end) balance from  rep_final,"
					 * + "  spdclmaster    " + ltcat +
					 * " AND cirname=?  and divname=?  " +
					 * " group by  rollup(subname)"; reportPStmt =
					 * con.prepareStatement(query);
					 * 
					 * reportPStmt.setString(1, cscvo.getCircle());
					 * reportPStmt.setString(2, cscvo.getDivision());
					 * 
					 * reportRst = reportPStmt.executeQuery();
					 */
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select NVL(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
					 * +
					 * " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then 1 else 0 end) balance from  rep_final,"
					 * + "  spdclmaster    " + ltcat +
					 * " AND cirname=?  and divname=?  and subname=?   " +
					 * " group by  rollup(secname)";
					 * 
					 * reportPStmt = con.prepareStatement(query);
					 * 
					 * reportPStmt.setString(1, cscvo.getCircle());
					 * reportPStmt.setString(2, cscvo.getDivision());
					 * reportPStmt.setString(3, cscvo.getSubDiv());
					 * 
					 * reportRst = reportPStmt.executeQuery();
					 */

				} else {

					String query = "SELECT  NVL(S.CIRNAME,'TOTAL'),COUNT(I.REG_NO) OB,SUM(NVL(I.CONTRACTED_LOAD,0)*.746/1000000) MVA,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000) MVA,COUNT(C.REG_NO) DELETED,SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000) MVA,COUNT(D.REG_NO) RELEASED,SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000) MVA ,(COUNT(I.REG_NO)+COUNT(B.REG_NO)-COUNT(C.REG_NO)-COUNT(D.REG_NO))CLOSING_BAL,(SUM(NVL(I.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000))TOTAL_MVA FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X' )A,"
							+ " (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X'  AND TRUNC(REG_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE-1)B,"
							+ " (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE-1 AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)C,"
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CONTRACTED_LOAD FROM REP_FINAL WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  SUPPLY_RELEASE_DATE BETWEEN '"
							+ startDate + "' AND SYSDATE-1)D,"
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT,CONTRACTED_LOAD FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=I.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD " + " AND A.CATEGORY_SUPPLY LIKE '3%' "
							+ " AND upper(A.reg_no)  not like '%H%' " + " GROUP BY rollup(S.CIRNAME)	";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("ALL:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj.setTot_reg(reportRst.getString(4));
							dmapobj.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj.setAppReleased(reportRst.getString(8));
							dmapobj.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj.setCb(reportRst.getInt(10));
							dmapobj.setNew_cb_load(reportRst.getBigDecimal(11));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj.setTot_reg(reportRst.getString(4));
							dmapobj.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj.setAppReleased(reportRst.getString(8));
							dmapobj.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj.setCb(reportRst.getInt(10));
							dmapobj.setNew_cb_load(reportRst.getBigDecimal(11));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "select NVL(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=? " + " group by  rollup(divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "select NVL(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=?  and divname=?  " + " group by  rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select NVL(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=?  and divname=?  and subname=?   " + " group by  rollup(secname)";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO) OB,SUM(NVL(A.ADDITIONAL_LOAD,0)*.746/1000000)OB_LOAD,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.ADDITIONAL_LOAD,0)*.746/1000000)REG_LOAD,COUNT(D.REG_NO) RELEASED,SUM(NVL(D.ADDITIONAL_LOAD,0)*.746/1000000)REL_LOAD,COUNT(C.REG_NO) DELETED,SUM(NVL(C.ADDITIONAL_LOAD,0)*.746/1000000)DEL_LOAD,COUNT(E.REG_NO)PENDING,SUM(NVL(E.ADDITIONAL_LOAD,0)*.746/1000000)PEN_LOAD  FROM"
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD,PRESENT_CATEGORY FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=9 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') )F,"
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=9 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8')  AND REPSTAT LIKE '%OB%')A,"
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=9 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8')  AND REG_DATE BETWEEN '"
							+ startDate + "' AND SYSDATE)B,"
							+ " (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='deleted' )C,"
							+ " (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='released' )D,"
							+ " (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='balance')E,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE F.REG_NO=A.REG_NO(+)"
							+ " AND F.REG_NO=B.REG_NO(+)" + " AND F.REG_NO=C.REG_NO(+)" + " AND F.REG_NO=D.REG_NO(+)"
							+ " AND F.REG_NO=E.REG_NO(+)" + " AND A.CSPARTCD=S.SECCD"
							+ " AND F.PRESENT_CATEGORY LIKE 'LT3%'" + " GROUP BY rollup(S.CIRNAME)	";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("ALL: Additionla Load: " + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap1.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj1 = cscmap1.get(reportRst.getString(1));

							dmapobj1.setAppPending(reportRst.getString(2));
							dmapobj1.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj1.setTot_reg(reportRst.getString(4));
							dmapobj1.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj1.setAppDeleted(reportRst.getString(6));
							dmapobj1.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj1.setAppReleased(reportRst.getString(8));
							dmapobj1.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj1.setCb(reportRst.getInt(10));
							dmapobj1.setNew_cb_load(reportRst.getBigDecimal(11));

						} else {
							CscpayVO dmapobj1 = new CscpayVO();

							dmapobj1.setAppPending(reportRst.getString(2));
							dmapobj1.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj1.setTot_reg(reportRst.getString(4));
							dmapobj1.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj1.setAppDeleted(reportRst.getString(6));
							dmapobj1.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj1.setAppReleased(reportRst.getString(8));
							dmapobj1.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj1.setCb(reportRst.getInt(10));
							dmapobj1.setNew_cb_load(reportRst.getBigDecimal(11));

							cscmap1.put(reportRst.getString(1), dmapobj1);
						}
					}
					cscvo.setCscpaymap1(cscmap1);

				}

				// Sum
				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select NVL(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
					 * +
					 * " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then 1 else 0 end) balance from  rep_final,"
					 * + "  spdclmaster    " + ltcat + " AND cirname=? " +
					 * " group by  rollup(divname)"; reportPStmt =
					 * con.prepareStatement(query);
					 * 
					 * reportPStmt.setString(1, cscvo.getCircle()); //
					 * reportPStmt.setString(2, chkVO.getCirname());
					 * 
					 * reportRst = reportPStmt.executeQuery();
					 */
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select NVL(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
					 * +
					 * " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then 1 else 0 end) balance from  rep_final,"
					 * + "  spdclmaster    " + ltcat +
					 * " AND cirname=?  and divname=?  " +
					 * " group by  rollup(subname)"; reportPStmt =
					 * con.prepareStatement(query);
					 * 
					 * reportPStmt.setString(1, cscvo.getCircle());
					 * reportPStmt.setString(2, cscvo.getDivision());
					 * 
					 * reportRst = reportPStmt.executeQuery();
					 */
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {
					/*
					 * String query =
					 * "select NVL(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
					 * +
					 * " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then 1 else 0 end) balance from  rep_final,"
					 * + "  spdclmaster    " + ltcat +
					 * " AND cirname=?  and divname=?  and subname=?   " +
					 * " group by  rollup(secname)";
					 * 
					 * reportPStmt = con.prepareStatement(query);
					 * 
					 * reportPStmt.setString(1, cscvo.getCircle());
					 * reportPStmt.setString(2, cscvo.getDivision());
					 * reportPStmt.setString(3, cscvo.getSubDiv());
					 * 
					 * reportRst = reportPStmt.executeQuery();
					 */

				} else {

					String query = "SELECT NVL(CIRNAME,'TOTAL'),sum(Ob),sum(OB_LOAD),sum(REGISTERED),sum(REG_LOAD),sum(DELETED),sum(DEL_LOAD),sum(RELEASED),sum(REL_LOAD),sum(CLOSING_BAL),sum(PEN_LOAD) from ("
							+ " SELECT p.CIRNAME,COUNT(I.REG_NO) OB,SUM(NVL(I.CONTRACTED_LOAD,0)*.746/1000000) OB_LOAD,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000) REG_LOAD,COUNT(C.REG_NO) DELETED,SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000) DEL_LOAD,COUNT(D.REG_NO) RELEASED,SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000) REL_LOAD ,(COUNT(I.REG_NO)+COUNT(B.REG_NO)-COUNT(C.REG_NO)-COUNT(D.REG_NO))CLOSING_BAL,(SUM(NVL(I.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000))PEN_LOAD FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X' )A,"
							+ " (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X'  AND TRUNC(REG_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE-1)B,"
							+ " (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE-1 AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)C,"
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CONTRACTED_LOAD FROM REP_FINAL WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  SUPPLY_RELEASE_DATE BETWEEN '"
							+ startDate + "' AND SYSDATE-1)D,"
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT,CONTRACTED_LOAD FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER) p" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=I.REG_NO(+)"
							+ " AND A.NCPARTCD=p.SECCD " + " AND A.CATEGORY_SUPPLY LIKE '3%' "
							+ " AND upper(A.reg_no)  not like '%H%' " + " GROUP BY(p.CIRNAME)" + " union"
							+ " SELECT S.CIRNAME,COUNT(A.REG_NO) OB,SUM(NVL(A.ADDITIONAL_LOAD,0)*.746/1000000)OB_LOAD,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.ADDITIONAL_LOAD,0)*.746/1000000)REG_LOAD,COUNT(D.REG_NO) RELEASED,SUM(NVL(D.ADDITIONAL_LOAD,0)*.746/1000000)REL_LOAD,COUNT(C.REG_NO) DELETED,SUM(NVL(C.ADDITIONAL_LOAD,0)*.746/1000000)DEL_LOAD,COUNT(E.REG_NO)PENDING,SUM(NVL(E.ADDITIONAL_LOAD,0)*.746/1000000)PEN_LOAD  FROM"
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD,PRESENT_CATEGORY FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=9 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') )F,"
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=9 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8')  AND REPSTAT LIKE '%OB%')A,"
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=9 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8')  AND REG_DATE BETWEEN '"
							+ startDate + "' AND SYSDATE)B,"
							+ " (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='deleted' )C,"
							+ " (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='released' )D,"
							+ " (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='balance')E,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE F.REG_NO=A.REG_NO(+)"
							+ " AND F.REG_NO=B.REG_NO(+)" + " AND F.REG_NO=C.REG_NO(+)" + " AND F.REG_NO=D.REG_NO(+)"
							+ " AND F.REG_NO=E.REG_NO(+)" + " AND A.CSPARTCD=S.SECCD"
							+ " AND F.PRESENT_CATEGORY LIKE 'LT3%'"
							+ " GROUP BY S.CIRNAME) group by rollup(CIRNAME) order by CIRNAME";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("ALL: Abstarct:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap2.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj1 = cscmap2.get(reportRst.getString(1));

							dmapobj1.setAppPending(reportRst.getString(2));
							dmapobj1.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj1.setTot_reg(reportRst.getString(4));
							dmapobj1.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj1.setAppDeleted(reportRst.getString(6));
							dmapobj1.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj1.setAppReleased(reportRst.getString(8));
							dmapobj1.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj1.setCb(reportRst.getInt(10));
							dmapobj1.setNew_cb_load(reportRst.getBigDecimal(11));

						} else {
							CscpayVO dmapobj1 = new CscpayVO();

							dmapobj1.setAppPending(reportRst.getString(2));
							dmapobj1.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj1.setTot_reg(reportRst.getString(4));
							dmapobj1.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj1.setAppDeleted(reportRst.getString(6));
							dmapobj1.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj1.setAppReleased(reportRst.getString(8));
							dmapobj1.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj1.setCb(reportRst.getInt(10));
							dmapobj1.setNew_cb_load(reportRst.getBigDecimal(11));

							cscmap2.put(reportRst.getString(1), dmapobj1);
						}
					}
					cscvo.setCscpaymap2(cscmap2);

				} else {

					throw new DatabaseFailureException(
							"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
				}
			}
		} catch (Exception ee) {
			ee.printStackTrace();

		} finally {

			if (con != null) {
				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}

			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

		}
		return cscvo;

	}

	// getHpWiseAglPumpSetsScsDetails

	public CscpayVO getHpWiseAglPumpSetsScsDetails(CscpayVO dcbvo) throws Exception {
		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;
		String from_date = null;
		String till_date = null;
		// String connectionURL = "jdbc:oracle:thin:@10.16.1.174:1522:BILLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL,
		// "spdcl_mis", "SPDCL123MIS");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		/*
		 * Map<String, Map<String, SpellDemandVO>> spellMap = new
		 * LinkedHashMap<String, Map<String, SpellDemandVO>>(); Map<String,
		 * Map<String, SpellDemandVO>> spellMap1 = new LinkedHashMap<String,
		 * Map<String, SpellDemandVO>>(); Map<String, Map<String,
		 * SpellDemandVO>> spellMap2 = new LinkedHashMap<String, Map<String,
		 * SpellDemandVO>>();
		 */
		Map<String, CscpayVO> dcbmap = new LinkedHashMap<String, CscpayVO>();
		List<String> statusLIst = new LinkedList<String>();

		Set<String> cats = new TreeSet<String>();
		try {
			// logger.info("START : SpellDemandDAO -
			// getCatwiseSpellDemanReportDetails() ");
			if (con != null) {

				String query = "SELECT * FROM (SELECT S.CIRNAME,N.CONTRACTED_LOAD,COUNT(N.REG_NO) NOOF FROM "
						+ " (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE CATEGORY_SUPPLY LIKE '5A2%' AND  TO_DATE(SUPPLY_RELEASE_DATE) >='01'||'-'||TO_CHAR(SYSDATE,'MON-YY') AND"
						+ " TO_DATE(SUPPLY_RELEASE_DATE)<='30'||'-'||TO_CHAR(SYSDATE,'MON-YY')  AND LENGTH(USCNO)=13)N,"
						+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE N.NCPARTCD=S.SECCD"
						+ " GROUP BY N.CONTRACTED_LOAD,S.CIRNAME)"
						+ " PIVOT (SUM(NVL(NOOF,0))  FOR CONTRACTED_LOAD IN (3,5,8,10,12,14,16,18,20))";

				reportPStmt = con.prepareStatement(query);

				// reportPStmt.setString(4, monthyear);
				// reportPStmt.setString(5, from_date);
				// reportPStmt.setString(6, till_date);

				reportRst = reportPStmt.executeQuery();

				if (reportRst != null) {
					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircle(reportRst.getString(1));
						// vo.setSubcat(reportRst.getString(2));

						vo.setThree_hp(reportRst.getInt(2));
						vo.setFive_hp(reportRst.getInt(3));
						vo.setEight_hp(reportRst.getInt(4));
						vo.setTen_hp(reportRst.getInt(5));
						vo.setTwele_hp(reportRst.getInt(6));
						vo.setFourteen_hp(reportRst.getInt(7));
						vo.setSixteenhp(reportRst.getInt(8));
						vo.setEighteenhp(reportRst.getInt(9));
						vo.setTwentyhp(reportRst.getInt(10));
						// vo.setAgl_othe_scs(reportRst.getInt(6));

						dashList.add(vo);
					}
				}
				dcbvo.setList(dashList);

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {

			if (con != null) {
				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}

			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

		}
		return dcbvo;
	}

	// HP Wise Agl Pump Sets

	public CscpayVO getCatCommWiseAglScsDetails(CscpayVO dcbvo) throws Exception {
		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;
		String from_date = null;
		String till_date = null;
		// String connectionURL = "jdbc:oracle:thin:@10.16.1.174:1522:BILLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL,
		// "spdcl_mis", "SPDCL123MIS");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		/*
		 * Map<String, Map<String, SpellDemandVO>> spellMap = new
		 * LinkedHashMap<String, Map<String, SpellDemandVO>>(); Map<String,
		 * Map<String, SpellDemandVO>> spellMap1 = new LinkedHashMap<String,
		 * Map<String, SpellDemandVO>>(); Map<String, Map<String,
		 * SpellDemandVO>> spellMap2 = new LinkedHashMap<String, Map<String,
		 * SpellDemandVO>>();
		 */
		Map<String, CscpayVO> dcbmap = new LinkedHashMap<String, CscpayVO>();
		List<String> statusLIst = new LinkedList<String>();

		Set<String> cats = new TreeSet<String>();
		try {
			// logger.info("START : SpellDemandDAO -
			// getCatwiseSpellDemanReportDetails() ");
			if (con != null) {

				String query = "SELECT * FROM (SELECT S.CIRNAME,N.SOCIAL_GROUP,COUNT(N.REG_NO) NOOF FROM "
						+ " (SELECT REG_NO,NCPARTCD,DECODE(SOCIAL_GROUP,1,'SC',2,'ST',3,'BC',4,'OC',5,'SC',6,'ST',9,'OTHERS') SOCIAL_GROUP FROM REP_FINAL WHERE CATEGORY_SUPPLY LIKE '5A2%' AND SUPPLY_RELEASE_DATE <='31-MAR-20' AND LENGTH(USCNO)=13)N,"
						+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE N.NCPARTCD=S.SECCD"
						+ " GROUP BY N.SOCIAL_GROUP,S.CIRNAME)" + " PIVOT (SUM(NVL(NOOF,0))  "
						+ " FOR SOCIAL_GROUP IN ('SC' as SC ,'ST' as ST ,'BC' as BC,'OC'  as OC,'OTHERS' as OTH))";

				reportPStmt = con.prepareStatement(query);

				// reportPStmt.setString(4, monthyear);
				// reportPStmt.setString(5, from_date);
				// reportPStmt.setString(6, till_date);

				reportRst = reportPStmt.executeQuery();

				if (reportRst != null) {
					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircle(reportRst.getString(1));
						// vo.setSubcat(reportRst.getString(2));

						vo.setAgl_sc_scs(reportRst.getInt(2));
						vo.setAgl_st_scs(reportRst.getInt(3));
						vo.setAgl_bc_scs(reportRst.getInt(4));
						vo.setAgl_oc_scs(reportRst.getInt(5));
						vo.setAgl_othe_scs(reportRst.getInt(6));

						dashList.add(vo);
					}
				}
				dcbvo.setList(dashList);

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {

			if (con != null) {
				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}

			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

		}
		return dcbvo;
	}
	// HT /CT meter Service Released

	public CscpayVO getLtCrMeterSerRelDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
			InstantiationException, IllegalAccessException, ClassNotFoundException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		String connectionURL = "jdbc:oracle:thin:@10.16.1.181:1528:PRODCBS";
		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		Connection con = DriverManager.getConnection(connectionURL, "SPDCLMIS", "SPDCL123MIS");
		// Connection con =
		// DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "select NVL(s.divname,'TOTAL'),SUM(a.scs) htnew,0 additionalload,SUM(b.scs) lt3 from "
							+ " (select distinct circd,cirname,divcd,divname from spdclmaster)s,"
							+ " (select substr(USCNO,0,2) divcd,count(1)scs from ONLINEHTINSPECTIONREPORT where substr(USCNO,6,1)  in ('H','C') and METERTYPE='HT' and INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') group by  substr(USCNO,0,2))a, "
							+ " (SELECT SUBSTR(REGNO,0,2) divcd,COUNT(1)SCS FROM ONLINEHTINSPECTIONREPORT where SUBSTR(REGNO,1,1) NOT IN('C') AND METERTYPE='LTM' AND INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') GROUP BY SUBSTR(REGNO,0,2))b"
							// + " (select substr(USCNO,0,2) divcd,count(1)scs
							// from ONLINEHTINSPECTIONREPORT where
							// substr(USCNO,6,1) in ('N','C') and METERTYPE='HT'
							// and CMCAT='LT3' and INSPECTIONDATE between
							// to_date('"
							// + cscvo.getFrom_date() + "','DD-MM-YYYY') and
							// to_date('" + cscvo.getTo_date()
							// + "','DD-MM-YYYY') group by substr(USCNO,0,2))b"

							+ " where s.divcd=a.divcd(+) and s.divcd=b.divcd(+) and cirname=? "
							+ " GROUP BY ROLLUP(S.DIVNAME)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "select NVL(s.SUBNAME,'TOTAL'),SUM(a.scs) htnew,0 additionalload,SUM(b.scs) lt3 from "
							+ " (select distinct circd,cirname,divcd,divname,SUBNAME,SUBCD from spdclmaster)s,"
							+ " (select substr(USCNO,0,4) SUBCD,count(1)scs from ONLINEHTINSPECTIONREPORT where substr(USCNO,6,1)  in ('H','C') and METERTYPE='HT' and INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') group by  substr(USCNO,0,4))a,"
							// + " (select substr(USCNO,0,4) SUBCD,count(1)scs
							// from ONLINEHTINSPECTIONREPORT where
							// substr(USCNO,6,1) in ('N','C') and METERTYPE='HT'
							// and CMCAT='LT3' and INSPECTIONDATE between
							// to_date('"
							// + cscvo.getFrom_date() + "','DD-MM-YYYY') and
							// to_date('" + cscvo.getTo_date()
							// + "','DD-MM-YYYY') group by substr(USCNO,0,4))b"
							+ " (SELECT SUBSTR(REGNO,0,4) SUBCD,COUNT(1)SCS FROM ONLINEHTINSPECTIONREPORT where SUBSTR(REGNO,1,1) NOT IN('C') AND METERTYPE='LTM' AND INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') GROUP BY SUBSTR(REGNO,0,4))b"
							+ " where s.SUBCD=a.SUBCD(+) and s.SUBCD=b.SUBCD(+) and cirname=? AND DIVNAME=? "
							+ " GROUP BY ROLLUP(S.SUBNAME)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select NVL(s.SECNAME,'TOTAL'),SUM(a.scs) htnew,0 additionalload,SUM(b.scs) lt3 from "
							+ " (select distinct circd,cirname,divcd,divname,SUBNAME,SUBCD ,SECNAME,SECCD from spdclmaster)s,"
							+ " (select substr(USCNO,0,5) SECCD,count(1)scs from ONLINEHTINSPECTIONREPORT where substr(USCNO,6,1)  in ('H','C') and METERTYPE='HT' and INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') group by  substr(USCNO,0,5))a,"
							// + " (select substr(USCNO,0,5) SECCD,count(1)scs
							// from ONLINEHTINSPECTIONREPORT where
							// substr(USCNO,6,1) in ('N','C') and METERTYPE='HT'
							// and CMCAT='LT3' and INSPECTIONDATE between
							// to_date('"
							// + cscvo.getFrom_date() + "','DD-MM-YYYY') and
							// to_date('" + cscvo.getTo_date()
							// + "','DD-MM-YYYY') group by substr(USCNO,0,5))b"
							+ " (SELECT SUBSTR(REGNO,0,5) SECCD,COUNT(1)SCS FROM ONLINEHTINSPECTIONREPORT where SUBSTR(REGNO,1,1) NOT IN('C') AND METERTYPE='LTM' AND INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') GROUP BY SUBSTR(REGNO,0,5))b"
							+ " where s.SECCD=a.SECCD(+) and s.SECCD=b.SECCD(+) and cirname=? AND DIVNAME=? AND SUBNAME=? "
							+ " GROUP BY ROLLUP(S.SECNAME)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "select NVL(S.CIRNAME,'TOTAL'),sum(a.scs) htnew,0 additionalload,sum(b.scs) lt3 from "
							+ " (select distinct circd,cirname from spdclmaster)s,"
							+ " (select substr(USCNO,0,1) circd,count(1)scs from ONLINEHTINSPECTIONREPORT where substr(USCNO,6,1)  in ('H','C') and METERTYPE='HT' and INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') group by  substr(USCNO,0,1))a,"
							// + " (select substr(USCNO,0,1) circd,count(1)scs
							// from ONLINEHTINSPECTIONREPORT where
							// substr(USCNO,6,1) in ('N','C') and METERTYPE='HT'
							// and CMCAT='LT3' and INSPECTIONDATE between
							// to_date('"
							// + cscvo.getFrom_date() + "','DD-MM-YYYY') and
							// to_date('" + cscvo.getFrom_date()
							// + "','DD-MM-YYYY') group by substr(USCNO,0,1))b"
							+ " (SELECT SUBSTR(REGNO,0,1) CIRCD,COUNT(1)SCS FROM ONLINEHTINSPECTIONREPORT where SUBSTR(REGNO,1,1) NOT IN('C') AND METERTYPE='LTM' AND INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') GROUP BY SUBSTR(REGNO,0,1))b"
							+ " where s.circd=a.circd(+) and s.circd=b.circd(+) and s.circd not in (1,4,6,9) group by rollup(s.cirname)";
					// cb=ob+demabd-collection";

					reportPStmt = con.prepareStatement(query);
					System.out.println("HT/CT Meter Service Released:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setHt_new(reportRst.getInt(2));
							dmapobj.setHt_addi(reportRst.getInt(3));
							dmapobj.setHt_lt3(reportRst.getInt(4));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setHt_new(reportRst.getInt(2));
							dmapobj.setHt_addi(reportRst.getInt(3));
							dmapobj.setHt_lt3(reportRst.getInt(4));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	// export HT/CT Meter Released

	public void exportHtDcSerRelDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		// Connection con =
		// DBConnectionManager.getInstance().getConnection("cscdb");
		String connectionURL = "jdbc:oracle:thin:@10.16.1.181:1528:PRODCBS";
		Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		Connection con = DriverManager.getConnection(connectionURL, "SPDCLMIS", "SPDCL123MIS");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				// if
				// ("RelesedAfterPaidByConsumer".equalsIgnoreCase(cscvo.getStatus()))
				// {
				if ("HT_NEW".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  substr(USCNO,6,1)  in ('H','C') and METERTYPE='HT' and INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY')   ";
				} else if ("LT3".equalsIgnoreCase(cscvo.getCtype())) {
					/*
					 * status =
					 * "  substr(USCNO,6,1)  in ('N','C') and METERTYPE='HT' and CMCAT='LT3' and INSPECTIONDATE between to_date('"
					 * + cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('"
					 * + cscvo.getTo_date() + "','DD-MM-YYYY') ";
					 */
					status = "   AND METERTYPE='LTM' and INSPECTIONDATE between to_date('" + cscvo.getFrom_date()
							+ "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date() + "','DD-MM-YYYY') ";
				} else {
					status = "";
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						resultSet = statement.executeQuery(
								" select s.cirname,S.DIVNAME,S.SECNAME,A.USCNO,CMCNAME AS CONSUMER_NAME,CMCAT,CMCTRLOAD,INSPECTIONDATE AS DATE_OF_CHARGE from"
										+ " (select distinct circd,cirname,DIVCD,DIVNAME,subname,subcd,SECCD,SECNAME from spdclmaster)s,"
										+ " (select substr(REGNO,0,1) circd,substr(REGNO,0,2) DIVCD,substr(REGNO,0,5) SECCD,USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE from ONLINEHTINSPECTIONREPORT where  substr(REGNO,0,2)  NOT in ('C') "
										+ status
										+ " group by  substr(REGNO,0,1),substr(REGNO,0,2),substr(REGNO,0,5),USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE)a"
										+ " where s.circd=a.circd(+) AND s.DIVCD=a.DIVCD(+) AND  s.SECCD=a.SECCD(+)  and s.circd not in (1,4,6,9) and  divname='"
										+ cscvo.getDivision() + "' AND USCNO IS NOT NULL");
					} else {
						resultSet = statement.executeQuery(
								" select s.cirname,S.DIVNAME,S.SECNAME,A.USCNO,CMCNAME AS CONSUMER_NAME,CMCAT,CMCTRLOAD,INSPECTIONDATE AS DATE_OF_CHARGE from"
										+ " (select distinct circd,cirname,DIVCD,DIVNAME,subname,subcd,SECCD,SECNAME from spdclmaster)s,"
										+ " (select substr(REGNO,0,1) circd,substr(REGNO,0,2) DIVCD,substr(REGNO,0,5) SECCD,USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE from ONLINEHTINSPECTIONREPORT where  substr(REGNO,0,2)  NOT in ('C') "
										+ status
										+ " group by  substr(REGNO,0,1),substr(REGNO,0,2),substr(REGNO,0,5),USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE)a"
										+ " where s.circd=a.circd(+) AND s.DIVCD=a.DIVCD(+) AND  s.SECCD=a.SECCD(+)  and s.circd not in (1,4,6,9) and  cirname='"
										+ cscvo.getCircle() + "' AND USCNO IS NOT NULL");
					}

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						resultSet = statement.executeQuery(
								" select s.cirname,S.DIVNAME,S.SECNAME,A.USCNO,CMCNAME AS CONSUMER_NAME,CMCAT,CMCTRLOAD,INSPECTIONDATE AS DATE_OF_CHARGE from"
										+ " (select distinct circd,cirname,DIVCD,DIVNAME,SECCD,subname,subcd,SECNAME from spdclmaster)s,"
										+ " (select substr(REGNO,0,1) circd,substr(REGNO,0,2) DIVCD,substr(REGNO,0,5) SECCD,USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE from ONLINEHTINSPECTIONREPORT where   substr(REGNO,0,4)  NOT in ('C') "
										+ status
										+ " group by  substr(REGNO,0,1),substr(REGNO,0,2),substr(REGNO,0,5),USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE)a"
										+ " where s.circd=a.circd(+) AND s.DIVCD=a.DIVCD(+) AND  s.SECCD=a.SECCD(+)  and s.circd not in (1,4,6,9) and  subname='"
										+ cscvo.getSubDiv() + "' AND USCNO IS NOT NULL");
					} else {
						resultSet = statement.executeQuery(
								" select s.cirname,S.DIVNAME,S.SECNAME,A.USCNO,CMCNAME AS CONSUMER_NAME,CMCAT,CMCTRLOAD,INSPECTIONDATE AS DATE_OF_CHARGE from"
										+ " (select distinct circd,cirname,DIVCD,DIVNAME,SECCD,subname,subcd,SECNAME from spdclmaster)s,"
										+ " (select substr(REGNO,0,1) circd,substr(REGNO,0,2) DIVCD,substr(REGNO,0,5) SECCD,USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE from ONLINEHTINSPECTIONREPORT where  substr(REGNO,0,4)  NOT in ('C') "
										+ status
										+ " group by  substr(REGNO,0,1),substr(REGNO,0,2),substr(REGNO,0,5),USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE)a"
										+ " where s.circd=a.circd(+) AND s.DIVCD=a.DIVCD(+) AND  s.SECCD=a.SECCD(+)  and s.circd not in (1,4,6,9) and  divname='"
										+ cscvo.getDivision() + "' AND USCNO IS NOT NULL");
					}

				} else if ("SEC".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						resultSet = statement.executeQuery(
								" select s.cirname,S.DIVNAME,S.SECNAME,A.USCNO,CMCNAME AS CONSUMER_NAME,CMCAT,CMCTRLOAD,INSPECTIONDATE AS DATE_OF_CHARGE from"
										+ " (select distinct circd,cirname,DIVCD,DIVNAME,subname,subcd,SECCD,SECNAME from spdclmaster)s,"
										+ " (select substr(REGNO,0,1) circd,substr(REGNO,0,2) DIVCD,substr(REGNO,0,5) SECCD,USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE from ONLINEHTINSPECTIONREPORT where  substr(REGNO,0,5)  NOT in ('C') "
										+ status
										+ " group by  substr(REGNO,0,1),substr(REGNO,0,2),substr(REGNO,0,5),USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE)a"
										+ " where s.circd=a.circd(+) AND s.DIVCD=a.DIVCD(+) AND  s.SECCD=a.SECCD(+)  and s.circd not in (1,4,6,9) and  secname='"
										+ cscvo.getSec() + "' AND USCNO IS NOT NULL");
					} else {
						resultSet = statement.executeQuery(
								" select s.cirname,S.DIVNAME,S.SECNAME,A.USCNO,CMCNAME AS CONSUMER_NAME,CMCAT,CMCTRLOAD,INSPECTIONDATE AS DATE_OF_CHARGE from"
										+ " (select distinct circd,cirname,DIVCD,DIVNAME,subname,subcd,SECCD,SECNAME from spdclmaster)s,"
										+ " (select substr(REGNO,0,1) circd,substr(REGNO,0,2) DIVCD,substr(REGNO,0,5) SECCD,USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE from ONLINEHTINSPECTIONREPORT where  substr(REGNO,0,5)  NOT in ('C') "
										+ status
										+ " group by  substr(REGNO,0,1),substr(REGNO,0,2),substr(REGNO,0,5),USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE)a"
										+ " where s.circd=a.circd(+) AND s.DIVCD=a.DIVCD(+) AND  s.SECCD=a.SECCD(+)  and s.circd not in (1,4,6,9) and  subname='"
										+ cscvo.getSubDiv() + "' AND USCNO IS NOT NULL");
					}
				} else {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
						resultSet = statement.executeQuery(
								" select s.cirname,S.DIVNAME,S.SECNAME,A.USCNO,CMCNAME AS CONSUMER_NAME,CMCAT,CMCTRLOAD,INSPECTIONDATE AS DATE_OF_CHARGE from"
										+ " (select distinct circd,cirname,DIVCD,DIVNAME,subname,subcd,SECCD,SECNAME from spdclmaster)s,"
										+ " (select substr(REGNO,0,1) circd,substr(REGNO,0,2) DIVCD,substr(REGNO,0,5) SECCD,USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE from ONLINEHTINSPECTIONREPORT where substr(REGNO,0,1)  NOT in ('C')"
										+ status
										+ " group by  substr(REGNO,0,1),substr(REGNO,0,2),substr(REGNO,0,5),USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE)a"
										+ " where s.circd=a.circd(+) AND s.DIVCD=a.DIVCD(+) AND  s.SECCD=a.SECCD(+)  and s.circd not in (1,4,6,9) and  cirname='"
										+ cscvo.getCircle() + "' AND USCNO IS NOT NULL");
					} else {
						resultSet = statement.executeQuery(
								" select s.cirname,S.DIVNAME,S.SECNAME,A.USCNO,CMCNAME AS CONSUMER_NAME,CMCAT,CMCTRLOAD,INSPECTIONDATE AS DATE_OF_CHARGE from"
										+ " (select distinct circd,cirname,DIVCD,DIVNAME,subname,subcd,SECCD,SECNAME from spdclmaster)s,"
										+ " (select substr(REGNO,0,1) circd,substr(REGNO,0,2) DIVCD,substr(REGNO,0,5) SECCD,USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE from ONLINEHTINSPECTIONREPORT where substr(REGNO,0,1)  NOT in ('C') "
										+ status
										+ " group by  substr(REGNO,0,1),substr(REGNO,0,2),substr(REGNO,0,5),USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE)a"
										+ " where s.circd=a.circd(+) AND s.DIVCD=a.DIVCD(+) AND  s.SECCD=a.SECCD(+)  and s.circd not in (1,4,6,9)  AND USCNO IS NOT NULL");
					}

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=LT/CT Meter Services releaseed " + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=Status HT Additional Load as " + cscvo.getCtype() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// commercial Service released load With Rural Urban Report

	public CscpayVO getServiceReleasedLoadUrbRulDetails(CscpayVO dcbvo) throws Exception {
		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;
		String from_date = null;
		String till_date = null;
		// String connectionURL = "jdbc:oracle:thin:@10.16.1.174:1522:BILLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL,
		// "spdcl_mis", "SPDCL123MIS");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		/*
		 * Map<String, Map<String, SpellDemandVO>> spellMap = new
		 * LinkedHashMap<String, Map<String, SpellDemandVO>>(); Map<String,
		 * Map<String, SpellDemandVO>> spellMap1 = new LinkedHashMap<String,
		 * Map<String, SpellDemandVO>>(); Map<String, Map<String,
		 * SpellDemandVO>> spellMap2 = new LinkedHashMap<String, Map<String,
		 * SpellDemandVO>>();
		 */
		Map<String, CscpayVO> dcbmap = new LinkedHashMap<String, CscpayVO>();
		List<String> statusLIst = new LinkedList<String>();

		Set<String> cats = new TreeSet<String>();
		try {
			// logger.info("START : SpellDemandDAO -
			// getCatwiseSpellDemanReportDetails() ");
			if (con != null) {
				String month = dcbvo.getMonth();
				String year = dcbvo.getYear();
				if (month.length() == 1) {
					month = "0" + month;
				}
				// String monthyear = month + "_" + year;
				String monthyear = year + "_" + month;
				if (Integer.parseInt(dcbvo.getMonth()) < 4) {
					int curr_ye = Integer.parseInt(dcbvo.getYear()) - 1;

					from_date = String.valueOf(curr_ye) + "_04";

					String mm = String.valueOf(curr_month);
					if (mm.length() == 1) {
						mm = "0" + mm;
					}

					String date = String.valueOf(curr_ye) + "_" + mm + "";
					SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy_MM");

					Date convertedDate = dateFormat.parse(date);

					Calendar calen = Calendar.getInstance();
					calen.setTime(convertedDate);

					int lastDate = calen.getActualMaximum(Calendar.DATE);

					calen.set(Calendar.DATE, lastDate);

					till_date = dateFormat.format(calen.getTime());

				} else {
					from_date = String.valueOf(curr_year) + "_04";

					String date = dcbvo.getYear() + "_" + String.valueOf(curr_month - 1) + "";

					SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy_MM");

					Date convertedDate = dateFormat.parse(date);

					Calendar calen = Calendar.getInstance();
					calen.setTime(convertedDate);

					int lastDate = calen.getActualMaximum(Calendar.DATE);

					calen.set(Calendar.DATE, lastDate);

					till_date = dateFormat.format(calen.getTime());

				}

				System.out.println("from date" + from_date);
				System.out.println("till date" + till_date);
				System.out.println("current month " + monthyear);

				/*
				 * String query =
				 * "SELECT C.CATEGORY,C.FMTYPE,SUM(NVL(M.NLR_SCS,0))NLR_SCS,SUM(NVL(M.NLR_LOAD,0))NLR_LOAD,SUM(NVL(M.TPT_SCS,0))TPT_SCS,SUM(NVL(M.TPT_LOAD,0))TOT_LOAD,SUM(NVL(M.KDP_SCS,0))KDP_SCS,SUM(NVL(M.KDP_LOAD,0))KDP_LOAD,SUM(NVL(M.KNL_SCS,0))KNL_SCS,SUM(NVL(M.KNL_LOAD,0))KNL_LOAD,SUM(NVL(M.ATP_SCS,0))ATP_SCS,SUM(NVL(M.ATP_LOAD,0))ATP_LOD,SUM(NVL(M.MONTH_TOTAL,0))MONTH_TOTAL,SUM(NVL(M.TOTAL_LOAD,0)) TOTAL_LOAD,"
				 * +
				 * " SUM(NVL(C.NLR_SCS_TOT,0))NLR_CUMM_SCS,SUM(NVL(C.NLR_LOAD_TOT,0))NLR_CUMM_LOAD,SUM(NVL(C.TPT_SCS_TOT,0))TPT_CUMM_SCS,SUM(NVL(C.TPT_LOAD_TOT,0))TPT_CUMM_LOAD,SUM(NVL(C.KDP_SCS_TOT,0))KDP_CUMM_SCS,SUM(NVL(C.KDP_LOAD_TOT,0))KDP_CUMM_LOAD,SUM(NVL(C.KNL_SCS_TOT,0))KNL_CUMM_SCS,SUM(NVL(C.KNL_LOAD_TOT,0))KNL_CUM_LOAD,SUM(NVL(C.ATP_SCS_TOT,0))ATP_CUMM_SCS,SUM(NVL(C.ATP_LOAD_TOT,0))ATP_CUM_LOAD, SUM(NVL(C.CUMM_TOTAL,0))CUMM_TOTAL,SUM(NVL(C.CUMM_LOAD,0))CUMM_LOAD FROM"
				 * +
				 * " (SELECT CATEGORY,NVL(FMTYPE,'URBAN') FMTYPE,SUM(NVL(NLR_SCS,0))NLR_SCS,SUM(NVL(NLR_LOAD,0)) NLR_LOAD,SUM(NVL(TPT_SCS,0))TPT_SCS,SUM(NVL(TPT_LOAD,0))TPT_LOAD,SUM(NVL(KDP_SCS,0))KDP_SCS,SUM(NVL(KDP_LOAD,0))KDP_LOAD,SUM(NVL(KNL_SCS,0))KNL_SCS,SUM(NVL(KNL_LOAD,0)) KNL_LOAD,SUM(NVL(ATP_SCS,0))ATP_SCS,SUM(NVL(ATP_LOAD,0)) ATP_LOAD,SUM(NVL(NLR_SCS,0)+NVL(TPT_SCS,0)+NVL(KDP_SCS,0)+NVL(KNL_SCS,0)+NVL(ATP_SCS,0))MONTH_TOTAL,SUM(NVL(NLR_LOAD,0)+NVL(TPT_LOAD,0)+NVL(KDP_LOAD,0)+NVL(KNL_LOAD,0)+NVL(ATP_LOAD,0)) TOTAL_LOAD FROM REP_COMML WHERE N2MONTH=? GROUP BY CATEGORY,NVL(FMTYPE,'URBAN'))M,"
				 * +
				 * " (SELECT CATEGORY,NVL(FMTYPE,'URBAN') FMTYPE,SUM(NLR_SCS_TOT)NLR_SCS_TOT,SUM(NVL(NLR_LOAD_TOT,0))NLR_LOAD_TOT,SUM(TPT_SCS_TOT)TPT_SCS_TOT,SUM(NVL(TPT_LOAD_TOT,0))TPT_LOAD_TOT,SUM(KDP_SCS_TOT)KDP_SCS_TOT,SUM(NVL(KDP_LOAD_TOT,0))KDP_LOAD_TOT,SUM(KNL_SCS_TOT)KNL_SCS_TOT,SUM(NVL(KNL_LOAD_TOT,0))KNL_LOAD_TOT,SUM(ATP_SCS_TOT)ATP_SCS_TOT,SUM(NVL(ATP_LOAD_TOT,0))ATP_LOAD_TOT,SUM(NVL(NLR_SCS_TOT,0)+NVL(TPT_SCS_TOT,0)+NVL(KDP_SCS_TOT,0)+NVL(KNL_SCS_TOT,0)+NVL(ATP_SCS_TOT,0)) CUMM_TOTAL,SUM(NVL(NLR_LOAD_TOT,0)+NVL(TPT_LOAD_TOT,0)+NVL(KDP_LOAD_TOT,0)+NVL(KNL_LOAD_TOT,0)+NVL(ATP_LOAD_TOT,0)) CUMM_LOAD FROM REP_COMML WHERE N2MONTH BETWEEN ? AND ? GROUP BY CATEGORY,NVL(FMTYPE,'URBAN'))C"
				 * + " WHERE C.CATEGORY=M.CATEGORY(+)" +
				 * " AND C.FMTYPE=M.FMTYPE(+)" +
				 * " GROUP BY C.CATEGORY,C.FMTYPE " + " ORDER BY C.CATEGORY ";
				 */

				String query = "SELECT  nvl(C.CATEGORY,'TOTAL'),nvl(C.FMTYPE,'TOTAL'),SUM(NVL(M.NLR_SCS,0))NLR_SCS,SUM(NVL(M.NLR_LOAD,0))NLR_LOAD,SUM(NVL(M.TPT_SCS,0))TPT_SCS,SUM(NVL(M.TPT_LOAD,0))TOT_LOAD,SUM(NVL(M.KDP_SCS,0))KDP_SCS,SUM(NVL(M.KDP_LOAD,0))KDP_LOAD,SUM(NVL(M.KNL_SCS,0))KNL_SCS,SUM(NVL(M.KNL_LOAD,0))KNL_LOAD,SUM(NVL(M.ATP_SCS,0))ATP_SCS,SUM(NVL(M.ATP_LOAD,0))ATP_LOD,SUM(NVL(M.MONTH_TOTAL,0))MONTH_TOTAL,SUM(NVL(M.TOTAL_LOAD,0)) TOTAL_LOAD,"
						+ " SUM(NVL(C.NLR_SCS_TOT,0))NLR_CUMM_SCS,SUM(NVL(C.NLR_LOAD_TOT,0))NLR_CUMM_LOAD,SUM(NVL(C.TPT_SCS_TOT,0))TPT_CUMM_SCS,SUM(NVL(C.TPT_LOAD_TOT,0))TPT_CUMM_LOAD,SUM(NVL(C.KDP_SCS_TOT,0))KDP_CUMM_SCS,SUM(NVL(C.KDP_LOAD_TOT,0))KDP_CUMM_LOAD,SUM(NVL(C.KNL_SCS_TOT,0))KNL_CUMM_SCS,SUM(NVL(C.KNL_LOAD_TOT,0))KNL_CUM_LOAD,SUM(NVL(C.ATP_SCS_TOT,0))ATP_CUMM_SCS,SUM(NVL(C.ATP_LOAD_TOT,0))ATP_CUM_LOAD, SUM(NVL(C.CUMM_TOTAL,0))CUMM_TOTAL,SUM(NVL(C.CUMM_LOAD,0))CUMM_LOAD FROM"
						+ " (SELECT CATEGORY,NVL(FMTYPE,'URBAN') FMTYPE,SUM(NVL(NLR_SCS,0))NLR_SCS,SUM(NVL(NLR_LOAD,0)) NLR_LOAD,SUM(NVL(TPT_SCS,0))TPT_SCS,SUM(NVL(TPT_LOAD,0))TPT_LOAD,SUM(NVL(KDP_SCS,0))KDP_SCS,SUM(NVL(KDP_LOAD,0))KDP_LOAD,SUM(NVL(KNL_SCS,0))KNL_SCS,SUM(NVL(KNL_LOAD,0)) KNL_LOAD,SUM(NVL(ATP_SCS,0))ATP_SCS,SUM(NVL(ATP_LOAD,0)) ATP_LOAD,SUM(NVL(NLR_SCS,0)+NVL(TPT_SCS,0)+NVL(KDP_SCS,0)+NVL(KNL_SCS,0)+NVL(ATP_SCS,0))MONTH_TOTAL,SUM(NVL(NLR_LOAD,0)+NVL(TPT_LOAD,0)+NVL(KDP_LOAD,0)+NVL(KNL_LOAD,0)+NVL(ATP_LOAD,0)) TOTAL_LOAD FROM REP_COMML WHERE N2MONTH=? GROUP BY CATEGORY,NVL(FMTYPE,'URBAN'))M,"
						+ " (SELECT CATEGORY,NVL(FMTYPE,'URBAN') FMTYPE,SUM(NLR_SCS_TOT)NLR_SCS_TOT,SUM(NVL(NLR_LOAD_TOT,0))NLR_LOAD_TOT,SUM(TPT_SCS_TOT)TPT_SCS_TOT,SUM(NVL(TPT_LOAD_TOT,0))TPT_LOAD_TOT,SUM(KDP_SCS_TOT)KDP_SCS_TOT,SUM(NVL(KDP_LOAD_TOT,0))KDP_LOAD_TOT,SUM(KNL_SCS_TOT)KNL_SCS_TOT,SUM(NVL(KNL_LOAD_TOT,0))KNL_LOAD_TOT,SUM(ATP_SCS_TOT)ATP_SCS_TOT,SUM(NVL(ATP_LOAD_TOT,0))ATP_LOAD_TOT,SUM(NVL(NLR_SCS_TOT,0)+NVL(TPT_SCS_TOT,0)+NVL(KDP_SCS_TOT,0)+NVL(KNL_SCS_TOT,0)+NVL(ATP_SCS_TOT,0)) CUMM_TOTAL,SUM(NVL(NLR_LOAD_TOT,0)+NVL(TPT_LOAD_TOT,0)+NVL(KDP_LOAD_TOT,0)+NVL(KNL_LOAD_TOT,0)+NVL(ATP_LOAD_TOT,0)) CUMM_LOAD FROM REP_COMML WHERE N2MONTH BETWEEN ? AND ? GROUP BY CATEGORY,NVL(FMTYPE,'URBAN'))C"
						+ " WHERE C.CATEGORY=M.CATEGORY(+)" + " AND C.FMTYPE=M.FMTYPE(+)"
						+ " GROUP by ROLLUP(C.CATEGORY,C.FMTYPE)" + " ORDER BY C.CATEGORY,C.FMTYPE ";

				reportPStmt = con.prepareStatement(query);
				reportPStmt.setString(1, monthyear);
				reportPStmt.setString(2, from_date);
				reportPStmt.setString(3, till_date);

				// reportPStmt.setString(4, monthyear);
				// reportPStmt.setString(5, from_date);
				// reportPStmt.setString(6, till_date);

				reportRst = reportPStmt.executeQuery();

				if (reportRst != null) {
					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCat(reportRst.getString(1));
						vo.setType(reportRst.getString(2));

						vo.setNlr_scs(reportRst.getInt(3));
						vo.setNlr_cl(reportRst.getBigDecimal(4));

						vo.setTpt_scs(reportRst.getInt(5));
						vo.setTpt_cl(reportRst.getBigDecimal(6));

						vo.setKdp_scs(reportRst.getInt(7));
						vo.setKdp_cl(reportRst.getBigDecimal(8));

						vo.setKur_scs(reportRst.getInt(9));
						vo.setKur_cl(reportRst.getBigDecimal(10));

						vo.setAnt_scs(reportRst.getInt(11));
						vo.setAnt_cl(reportRst.getBigDecimal(12));

						vo.setTot_scs(reportRst.getInt(13));
						vo.setTot_load(reportRst.getBigDecimal(15));

						vo.setNlr_fscs(reportRst.getInt(15));
						vo.setNlr_fcl(reportRst.getBigDecimal(16));

						vo.setTpt_fscs(reportRst.getInt(17));
						vo.setTpt_fcl(reportRst.getBigDecimal(18));

						vo.setKdp_fscs(reportRst.getInt(19));
						vo.setKdp_fcl(reportRst.getBigDecimal(20));

						vo.setKur_fscs(reportRst.getInt(21));
						vo.setKur_fcl(reportRst.getBigDecimal(22));

						vo.setAnt_fscs(reportRst.getInt(23));
						vo.setAnt_fcl(reportRst.getBigDecimal(24));

						vo.setFtot_scs(reportRst.getInt(25));
						vo.setFtot_load(reportRst.getBigDecimal(26));

						dashList.add(vo);
					}
				}
				dcbvo.setList(dashList);

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {

			if (con != null) {
				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}

			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

		}
		return dcbvo;
	}

	// Cat Wise Service release
	public CscpayVO getCatwiseServiceRelDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
			InstantiationException, IllegalAccessException, ClassNotFoundException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		/*
		 * String connectionURL = "jdbc:oracle:thin:@10.16.1.181:1528:PRODCBS";
		 * Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		 * Connection con = DriverManager.getConnection(connectionURL,
		 * "SPDCLMIS", "SPDCL123MIS");
		 */
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		String month = cscvo.getMonth();
		String year = cscvo.getYear();

		if (month.length() == 1) {
			month = "0" + month;
		}

		String fromdate = cscvo.getMonth().substring(5, 7) + "-" + cscvo.getMonth().substring(0, 4);
		String todate = cscvo.getYear().substring(5, 7) + "-" + cscvo.getYear().substring(0, 4);

		String monthYear = month + "-" + year;
		// String Yearmonth = year + "-" + month;

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "select NVL(s.divname,'TOTAL'),SUM(a.scs) htnew,0 additionalload,SUM(b.scs) lt3 from "
							+ " (select distinct circd,cirname,divcd,divname from spdclmaster)s,"
							+ " (select substr(USCNO,0,2) divcd,count(1)scs from ONLINEHTINSPECTIONREPORT where substr(USCNO,6,1)  in ('H','C') and METERTYPE='HT' and INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') group by  substr(USCNO,0,2))a,"
							+ " (select substr(USCNO,0,2) divcd,count(1)scs from ONLINEHTINSPECTIONREPORT where substr(USCNO,6,1)  in ('N','C') and METERTYPE='HT' and CMCAT='LT3' and INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') group by  substr(USCNO,0,2))b"
							+ " where s.divcd=a.divcd(+) and s.divcd=b.divcd(+) and cirname=? "
							+ " GROUP BY ROLLUP(S.DIVNAME)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "select NVL(s.SUBNAME,'TOTAL'),SUM(a.scs) htnew,0 additionalload,SUM(b.scs) lt3 from "
							+ " (select distinct circd,cirname,divcd,divname,SUBNAME,SUBCD from spdclmaster)s,"
							+ " (select substr(USCNO,0,4) SUBCD,count(1)scs from ONLINEHTINSPECTIONREPORT where substr(USCNO,6,1)  in ('H','C') and METERTYPE='HT' and INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') group by  substr(USCNO,0,4))a,"
							+ " (select substr(USCNO,0,4) SUBCD,count(1)scs from ONLINEHTINSPECTIONREPORT where substr(USCNO,6,1)  in ('N','C') and METERTYPE='HT' and CMCAT='LT3' and INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') group by  substr(USCNO,0,4))b"
							+ " where s.SUBCD=a.SUBCD(+) and s.SUBCD=b.SUBCD(+) and cirname=? AND DIVNAME=? "
							+ " GROUP BY ROLLUP(S.SUBNAME)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select NVL(s.SECNAME,'TOTAL'),SUM(a.scs) htnew,0 additionalload,SUM(b.scs) lt3 from "
							+ " (select distinct circd,cirname,divcd,divname,SUBNAME,SUBCD ,SECNAME,SECCD from spdclmaster)s,"
							+ " (select substr(USCNO,0,5) SECCD,count(1)scs from ONLINEHTINSPECTIONREPORT where substr(USCNO,6,1)  in ('H','C') and METERTYPE='HT' and INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') group by  substr(USCNO,0,5))a,"
							+ " (select substr(USCNO,0,5) SECCD,count(1)scs from ONLINEHTINSPECTIONREPORT where substr(USCNO,6,1)  in ('N','C') and METERTYPE='HT' and CMCAT='LT3' and INSPECTIONDATE between to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') group by  substr(USCNO,0,5))b"
							+ " where s.SECCD=a.SECCD(+) and s.SECCD=b.SECCD(+) and cirname=? AND DIVNAME=? AND SUBNAME=? "
							+ " GROUP BY ROLLUP(S.SECNAME)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(CIRNAME,'TOTAL'), NVL(SUM(LT1),0) LT1,NVL(SUM(CAT2),0) LT2,NVL(SUM(CAT3),0) LT3,NVL(SUM(CAT4),0) LT4,NVL(SUM(AGL),0) LT5AGL ,NVL(SUM(AQUA),0) LT5AQUA, NVL(SUM(CAT5OTH),0) CAT5OTH, NVL(SUM(LT1),0)+NVL(SUM(CAT2),0)+NVL(SUM(CAT3),0)+NVL(SUM(CAT4),0)+NVL(SUM(AGL),0)+NVL(SUM(AQUA),0)+NVL(SUM(CAT5OTH),0) LTTOAL,NVL(SUM(HT),0) HT, NVL(SUM(LT1),0)+NVL(SUM(CAT2),0)+NVL(SUM(CAT3),0)+NVL(SUM(CAT4),0)+NVL(SUM(AGL),0)+NVL(SUM(AQUA),0)+NVL(SUM(CAT5OTH),0)+NVL(SUM(HT),0) GRAND_TOTAL  "
							+ "  FROM REP_CSC where sdate between '" + fromdate + "' and '" + todate
							+ "' GROUP BY  ROLLUP (CIRNAME)";
					// cb=ob+demabd-collection";

					reportPStmt = con.prepareStatement(query);
					System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setCat1Scs(reportRst.getInt(2));
							dmapobj.setCat2Scs(reportRst.getInt(3));
							dmapobj.setCat3Scs(reportRst.getInt(4));
							dmapobj.setCat4Scs(reportRst.getInt(5));

							dmapobj.setCat5Agl(reportRst.getInt(6));
							dmapobj.setCat5Aqua(reportRst.getInt(7));
							dmapobj.setCat5Other(reportRst.getInt(8));
							dmapobj.setTot_ltcat(reportRst.getInt(9));

							dmapobj.setHt_scs(reportRst.getInt(10));
							dmapobj.setTot_cat(reportRst.getInt(11));

							// dmapobj.setHt_new(reportRst.getInt(2));
							// dmapobj.setHt_addi(reportRst.getInt(3));
							// dmapobj.setHt_lt3(reportRst.getInt(4));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setCat1Scs(reportRst.getInt(2));
							dmapobj.setCat2Scs(reportRst.getInt(3));
							dmapobj.setCat3Scs(reportRst.getInt(4));
							dmapobj.setCat4Scs(reportRst.getInt(5));

							dmapobj.setCat5Agl(reportRst.getInt(6));
							dmapobj.setCat5Aqua(reportRst.getInt(7));
							dmapobj.setCat5Other(reportRst.getInt(8));
							dmapobj.setTot_ltcat(reportRst.getInt(9));

							dmapobj.setHt_scs(reportRst.getInt(10));
							dmapobj.setTot_cat(reportRst.getInt(11));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	/// Monthly Ser Released Report

	public CscpayVO getMonthlySerRelDetails(CscpayVO cscvo) throws Exception {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		Map<String, Map<String, CscpayVO>> exmapfinal = new LinkedHashMap<String, Map<String, CscpayVO>>();
		List<String> catList = new LinkedList<String>();

		SimpleDateFormat format = new SimpleDateFormat("dd");
		Date date = new Date();
		String sysdate = "SYSDATE";
		if (Integer.parseInt(format.format(date)) == 1) {
			sysdate = "SYSDATE-1";
		}

		String currentmonth = String.valueOf(cscvo.getMonth());

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String monyear = currentmonth + "-" + cscvo.getYear();

		try {
			// logger.info("START : DcbReportsDAO -
			// getCatwiseTotScsReportDetails() ");
			if (con != null) {
				double scs = 0;
				if ("DIV".equals(cscvo.getFlag())) {

					String compRuralRegisQry = "select divname,cat,NVL(SUM(SCS),0) from DCB where month=to_char("
							+ sysdate + ",'mm') and year=to_char(" + sysdate
							+ ",'yyyy') and cat in ('LT1','LT2','LT3','LT4','LT5')   and  Status not in('99','14')  and cirname=? group by cat,divname order by divname";

					reportPStmt = con.prepareStatement(compRuralRegisQry);

					reportPStmt.setString(1, cscvo.getCirname());
					reportRst = reportPStmt.executeQuery();

				} else if ("ERO".equals(cscvo.getFlag())) {

					String compRuralRegisQry = "select eroname,cat,NVL(SUM(SCS),0) from DCB where month=to_char("
							+ sysdate + ",'mm') and year=to_char(" + sysdate
							+ ",'yyyy') and cat in ('LT1','LT2','LT3','LT4','LT5')  and  Status not in('99','14')   and divname=? and cirname=? group by cat,eroname order by eroname";

					reportPStmt = con.prepareStatement(compRuralRegisQry);

					reportPStmt.setString(1, cscvo.getDivname());
					reportPStmt.setString(2, cscvo.getCirname());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String compRuralRegisQry = "select subname,cat,NVL(SUM(SCS),0) from DCB where month=to_char("
							+ sysdate + ",'mm') and year=to_char(" + sysdate
							+ ",'yyyy') and cat in ('LT1','LT2','LT3','LT4','LT5')   and  Status not in('99','14')   and eroname=? and divname=? and cirname=? group by cat,subname order by subname";

					reportPStmt = con.prepareStatement(compRuralRegisQry);

					reportPStmt.setString(1, cscvo.getEroname());
					reportPStmt.setString(2, cscvo.getDivname());
					reportPStmt.setString(3, cscvo.getCirname());
					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String compRuralRegisQry = "select secname,cat,NVL(SUM(SCS),0) from DCB where month=to_char("
							+ sysdate + ",'mm') and year=to_char(" + sysdate
							+ ",'yyyy') and cat in ('LT1','LT2','LT3','LT4','LT5')    and  Status not in('99','14')  and subname=?  and eroname=? and divname=? and cirname=? group by cat,secname order by secname";

					reportPStmt = con.prepareStatement(compRuralRegisQry);

					reportPStmt.setString(1, cscvo.getSubname());
					reportPStmt.setString(2, cscvo.getEroname());
					reportPStmt.setString(3, cscvo.getDivname());
					reportPStmt.setString(4, cscvo.getCirname());
					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sec");
				} else {
					String compRuralRegisQry = "SELECT * FROM (SELECT S.CIRNAME,N.N1CATEGORY_TYPE||N.CAT,COUNT(N.USCNO) NOFO FROM "
							+ " (SELECT CIRCLE_CODE,REG_NO,CATEGORY_SUPPLY,USCNO ,NCPARTCD,SUBSTR(CATEGORY_SUPPLY,1,3) CAT,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) N1CATEGORY_TYPE FROM REP_FINAL "
							+ " WHERE  TO_CHAR(SUPPLY_RELEASE_DATE,'MM-YYYY')='" + monyear + "' )N,"
							+ " (SELECT CIRNAME,COUNT(MANDALNAME) MANDAL,CIRCD,SECCD FROM SPDCL_MASTER GROUP BY CIRNAME,CIRCD,SECCD)S"
							+ " WHERE N.NCPARTCD=S.SECCD(+) AND  S.CIRNAME not in('VIJAYAWADA','CRDA','GUNTUR','ONGOLE')"
							+ " GROUP BY S.CIRNAME,N.N1CATEGORY_TYPE||N.CAT ORDER BY S.CIRNAME,N.N1CATEGORY_TYPE||N.CAT) ";
					
					/*String compRuralRegisQry = "SELECT * FROM (SELECT S.CIRNAME,N.N1CATEGORY_TYPE||N.CAT,COUNT(N.USCNO) NOFO FROM "
							+ " (SELECT CIRCLE_CODE,REG_NO,CATEGORY_SUPPLY,USCNO ,NCPARTCD,SUBSTR(CATEGORY_SUPPLY,1,1) CAT,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) N1CATEGORY_TYPE FROM REP_FINAL  WHERE SUBSTR(CATEGORY_SUPPLY,1,1) IN ('1','2','3','4','5') "
							+ " AND  TO_CHAR(SUPPLY_RELEASE_DATE,'MM-YYYY')='" + monyear + "' )N,"
							+ " (SELECT CIRNAME,COUNT(MANDALNAME) MANDAL,CIRCD,SECCD FROM SPDCL_MASTER GROUP BY CIRNAME,CIRCD,SECCD)S"
							+ " WHERE N.NCPARTCD=S.SECCD(+)"
							+ " GROUP BY S.CIRNAME,N.N1CATEGORY_TYPE||N.CAT ORDER BY S.CIRNAME,N.N1CATEGORY_TYPE||N.CAT) ";*/

					reportPStmt = con.prepareStatement(compRuralRegisQry);
					System.out.println("compRuralRegisQry_circle" +compRuralRegisQry);
					reportRst = reportPStmt.executeQuery();
					//System.out.println("compRuralRegisQry_circle" +compRuralRegisQry);
				}

				if (reportRst != null) {
					
					while (reportRst.next()) {

						if (exmapfinal.containsKey(reportRst.getString(1))) {
							Map<String, CscpayVO> exmap = exmapfinal.get(reportRst.getString(1));
							if (exmap.containsKey(reportRst.getString(2))) {
								CscpayVO evo = exmap.get(reportRst.getString(2));
								evo.setTot_scs(reportRst.getInt(3));

							} else {
								CscpayVO evo = new CscpayVO();
								evo.setTot_scs(reportRst.getInt(3));

								exmap.put(reportRst.getString(2), evo);
								if (!catList.contains(reportRst.getString(2))) {
									catList.add(reportRst.getString(2));
								}

							}
						} else {
							Map<String, CscpayVO> exmap = new LinkedHashMap<String, CscpayVO>();
							CscpayVO evo = new CscpayVO();
							evo.setTot_scs(reportRst.getInt(3));

							exmap.put(reportRst.getString(2), evo);
							exmapfinal.put(reportRst.getString(1), exmap);
							if (!catList.contains(reportRst.getString(2))) {
								catList.add(reportRst.getString(2));
							}
						}

					}

					Collections.sort(catList);
					cscvo.setCatmapFinal(exmapfinal);
					cscvo.setCscCols(catList);

				}
			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

		}

		return cscvo;
	}

	// AGL Ser Released
	public CscpayVO getAglSerRelDetails(CscpayVO cscvo) throws Exception {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		Map<String, Map<String, CscpayVO>> exmapfinal = new LinkedHashMap<String, Map<String, CscpayVO>>();
		List<String> catList = new LinkedList<String>();

		SimpleDateFormat format = new SimpleDateFormat("dd");
		Date date = new Date();
		String sysdate = "SYSDATE";
		if (Integer.parseInt(format.format(date)) == 1) {
			sysdate = "SYSDATE-1";
		}
		
		

		try {
			// logger.info("START : DcbReportsDAO -
			// getCatwiseTotScsReportDetails() ");
			if (con != null) {
				double scs = 0;
				if ("DIV".equals(cscvo.getFlag())) {

					String compRuralRegisQry = "select divname,cat,NVL(SUM(SCS),0) from DCB where month=to_char("
							+ sysdate + ",'mm') and year=to_char(" + sysdate
							+ ",'yyyy') and cat in ('LT1','LT2','LT3','LT4','LT5')   and  Status not in('99','14')  and cirname=? group by cat,divname order by divname";

					reportPStmt = con.prepareStatement(compRuralRegisQry);

					reportPStmt.setString(1, cscvo.getCirname());
					reportRst = reportPStmt.executeQuery();

				} else if ("ERO".equals(cscvo.getFlag())) {

					String compRuralRegisQry = "select eroname,cat,NVL(SUM(SCS),0) from DCB where month=to_char("
							+ sysdate + ",'mm') and year=to_char(" + sysdate
							+ ",'yyyy') and cat in ('LT1','LT2','LT3','LT4','LT5')  and  Status not in('99','14')   and divname=? and cirname=? group by cat,eroname order by eroname";

					reportPStmt = con.prepareStatement(compRuralRegisQry);

					reportPStmt.setString(1, cscvo.getDivname());
					reportPStmt.setString(2, cscvo.getCirname());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String compRuralRegisQry = "select subname,cat,NVL(SUM(SCS),0) from DCB where month=to_char("
							+ sysdate + ",'mm') and year=to_char(" + sysdate
							+ ",'yyyy') and cat in ('LT1','LT2','LT3','LT4','LT5')   and  Status not in('99','14')   and eroname=? and divname=? and cirname=? group by cat,subname order by subname";

					reportPStmt = con.prepareStatement(compRuralRegisQry);

					reportPStmt.setString(1, cscvo.getEroname());
					reportPStmt.setString(2, cscvo.getDivname());
					reportPStmt.setString(3, cscvo.getCirname());
					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String compRuralRegisQry = "select secname,cat,NVL(SUM(SCS),0) from DCB where month=to_char("
							+ sysdate + ",'mm') and year=to_char(" + sysdate
							+ ",'yyyy') and cat in ('LT1','LT2','LT3','LT4','LT5')    and  Status not in('99','14')  and subname=?  and eroname=? and divname=? and cirname=? group by cat,secname order by secname";

					reportPStmt = con.prepareStatement(compRuralRegisQry);

					reportPStmt.setString(1, cscvo.getSubname());
					reportPStmt.setString(2, cscvo.getEroname());
					reportPStmt.setString(3, cscvo.getDivname());
					reportPStmt.setString(4, cscvo.getCirname());
					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sec");
				} else {
					String compRuralRegisQry = "SELECT S.CIRNAME,N.MON_YEAR,COUNT(N.REG_NO) NOOF FROM"
							+ " (SELECT REG_NO,NCPARTCD,TO_CHAR(SUPPLY_RELEASE_DATE,'MON-YY') MON_YEAR FROM REP_FINAL WHERE CATEGORY_SUPPLY IN ('5A2','5A1') AND SUPPLY_RELEASE_DATE IS NOT NULL  AND"
							+ " TO_CHAR(SUPPLY_RELEASE_DATE,'YYYY-MM')  BETWEEN TO_CHAR(to_date('"+cscvo.getFrom_date()+"','YYYY-MM'),'YYYY-MM')  AND TO_CHAR(to_date('"+cscvo.getTo_date()+"','YYYY-MM'),'YYYY-MM') ) N,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE N.NCPARTCD=S.SECCD"
							+ " GROUP BY  S.CIRNAME,N.MON_YEAR ORDER BY S.CIRNAME,to_date(N.MON_YEAR,'MON-YY') ";
					System.out.println("compRuralRegisQry_cir" +compRuralRegisQry);
					reportPStmt = con.prepareStatement(compRuralRegisQry);
					reportRst = reportPStmt.executeQuery();
					
				}

				if (reportRst != null) {

					while (reportRst.next()) {

						if (exmapfinal.containsKey(reportRst.getString(1))) {
							Map<String, CscpayVO> exmap = exmapfinal.get(reportRst.getString(1));
							if (exmap.containsKey(reportRst.getString(2))) {
								CscpayVO evo = exmap.get(reportRst.getString(2));
								evo.setTot_scs(reportRst.getInt(3));

							} else {
								CscpayVO evo = new CscpayVO();
								evo.setTot_scs(reportRst.getInt(3));

								exmap.put(reportRst.getString(2), evo);
								if (!catList.contains(reportRst.getString(2))) {
									catList.add(reportRst.getString(2));
								}

							}
						} else {
							Map<String, CscpayVO> exmap = new LinkedHashMap<String, CscpayVO>();
							CscpayVO evo = new CscpayVO();
							evo.setTot_scs(reportRst.getInt(3));

							exmap.put(reportRst.getString(2), evo);
							exmapfinal.put(reportRst.getString(1), exmap);
							if (!catList.contains(reportRst.getString(2))) {
								catList.add(reportRst.getString(2));
							}
						}

					}

					// Collections.sort(catList);
					cscvo.setCatmapFinal(exmapfinal);
					cscvo.setCscCols(catList);

				}
			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

		}

		return cscvo;
	}

	// Service rel with Feder code
	public CscpayVO getServiceReleasedLoadUrbRulDetails1(CscpayVO cscvo) throws Exception {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		Map<String, Map<String, CscpayVO>> exmapfinal = new LinkedHashMap<String, Map<String, CscpayVO>>();
		Map<String, CscpayVO> spellMap = new LinkedHashMap<String, CscpayVO>();
		List<String> catList = new LinkedList<String>();

		SimpleDateFormat format = new SimpleDateFormat("dd");
		Date date = new Date();
		String sysdate = "SYSDATE";
		if (Integer.parseInt(format.format(date)) == 1) {
			sysdate = "SYSDATE-1";
		}

		try {
			// logger.info("START : DcbReportsDAO -
			// getCatwiseTotScsReportDetails() ");
			if (con != null) {
				double scs = 0;
				if ("DIV".equals(cscvo.getFlag())) {

					String compRuralRegisQry = "select divname,cat,NVL(SUM(SCS),0) from DCB where month=to_char("
							+ sysdate + ",'mm') and year=to_char(" + sysdate
							+ ",'yyyy') and cat in ('LT1','LT2','LT3','LT4','LT5')   and  Status not in('99','14')  and cirname=? group by cat,divname order by divname";

					reportPStmt = con.prepareStatement(compRuralRegisQry);

					reportPStmt.setString(1, cscvo.getCirname());
					reportRst = reportPStmt.executeQuery();

				} else if ("ERO".equals(cscvo.getFlag())) {

					String compRuralRegisQry = "select eroname,cat,NVL(SUM(SCS),0) from DCB where month=to_char("
							+ sysdate + ",'mm') and year=to_char(" + sysdate
							+ ",'yyyy') and cat in ('LT1','LT2','LT3','LT4','LT5')  and  Status not in('99','14')   and divname=? and cirname=? group by cat,eroname order by eroname";

					reportPStmt = con.prepareStatement(compRuralRegisQry);

					reportPStmt.setString(1, cscvo.getDivname());
					reportPStmt.setString(2, cscvo.getCirname());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String compRuralRegisQry = "select subname,cat,NVL(SUM(SCS),0) from DCB where month=to_char("
							+ sysdate + ",'mm') and year=to_char(" + sysdate
							+ ",'yyyy') and cat in ('LT1','LT2','LT3','LT4','LT5')   and  Status not in('99','14')   and eroname=? and divname=? and cirname=? group by cat,subname order by subname";

					reportPStmt = con.prepareStatement(compRuralRegisQry);

					reportPStmt.setString(1, cscvo.getEroname());
					reportPStmt.setString(2, cscvo.getDivname());
					reportPStmt.setString(3, cscvo.getCirname());
					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String compRuralRegisQry = "select secname,cat,NVL(SUM(SCS),0) from DCB where month=to_char("
							+ sysdate + ",'mm') and year=to_char(" + sysdate
							+ ",'yyyy') and cat in ('LT1','LT2','LT3','LT4','LT5')    and  Status not in('99','14')  and subname=?  and eroname=? and divname=? and cirname=? group by cat,secname order by secname";

					reportPStmt = con.prepareStatement(compRuralRegisQry);

					reportPStmt.setString(1, cscvo.getSubname());
					reportPStmt.setString(2, cscvo.getEroname());
					reportPStmt.setString(3, cscvo.getDivname());
					reportPStmt.setString(4, cscvo.getCirname());
					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sec");
				} else {
					String compRuralRegisQry = "SELECT C.CATEGORY,C.FMTYPE,SUM(NVL(M.NLR_SCS,0))NLR_SCS,SUM(NVL(M.NLR_LOAD,0))NLR_LOAD,SUM(NVL(M.TPT_SCS,0))TPT_SCS,SUM(NVL(M.TPT_LOAD,0))TPT_LOAD,SUM(NVL(M.KDP_SCS,0))KDP_SCS,SUM(NVL(M.KDP_LOAD,0))KDP_LOAD,SUM(NVL(M.KNL_SCS,0))KNL_SCS,SUM(NVL(M.KNL_LOAD,0))KNL_LOAD,SUM(NVL(M.ATP_SCS,0))ATP_SCS,SUM(NVL(M.ATP_LOAD,0))ATP_LOD,SUM(NVL(M.MONTH_TOTAL,0))MONTH_TOTAL,SUM(NVL(M.TOTAL_LOAD,0)) TOTAL_LOAD,"
							+ " SUM(NVL(C.NLR_SCS_TOT,0))NLR_CUMM_SCS,SUM(NVL(C.NLR_LOAD_TOT,0))NLR_CUMM_LOAD,SUM(NVL(C.TPT_SCS_TOT,0))TPT_CUMM_SCS,SUM(NVL(C.TPT_LOAD_TOT,0))TPT_CUMM_LOAD,SUM(NVL(C.KDP_SCS_TOT,0))KDP_CUMM_SCS,SUM(NVL(C.KDP_LOAD_TOT,0))KDP_CUMM_LOAD,SUM(NVL(C.KNL_SCS_TOT,0))KNL_CUMM_SCS,SUM(NVL(C.KNL_LOAD_TOT,0))KNL_CUM_LOAD,SUM(NVL(C.ATP_SCS_TOT,0))ATP_CUMM_SCS,SUM(NVL(C.ATP_LOAD_TOT,0))ATP_CUM_LOAD, SUM(NVL(C.CUMM_TOTAL,0))CUMM_TOTAL,SUM(NVL(C.CUMM_LOAD,0))CUMM_LOAD FROM"
							+ " (SELECT CATEGORY,NVL(FMTYPE,'URBAN') FMTYPE,SUM(NVL(NLR_SCS,0))NLR_SCS,SUM(NVL(NLR_LOAD,0)) NLR_LOAD,SUM(NVL(TPT_SCS,0))TPT_SCS,SUM(NVL(TPT_LOAD,0))TPT_LOAD,SUM(NVL(KDP_SCS,0))KDP_SCS,SUM(NVL(KDP_LOAD,0))KDP_LOAD,SUM(NVL(KNL_SCS,0))KNL_SCS,SUM(NVL(KNL_LOAD,0)) KNL_LOAD,SUM(NVL(ATP_SCS,0))ATP_SCS,SUM(NVL(ATP_LOAD,0)) ATP_LOAD,SUM(NVL(NLR_SCS,0)+NVL(TPT_SCS,0)+NVL(KDP_SCS,0)+NVL(KNL_SCS,0)+NVL(ATP_SCS,0))MONTH_TOTAL,SUM(NVL(NLR_LOAD,0)+NVL(TPT_LOAD,0)+NVL(KDP_LOAD,0)+NVL(KNL_LOAD,0)+NVL(ATP_LOAD,0)) TOTAL_LOAD FROM REP_COMML WHERE N2MONTH='2021_10' GROUP BY CATEGORY,NVL(FMTYPE,'URBAN'))M,"
							+ " (SELECT CATEGORY,NVL(FMTYPE,'URBAN') FMTYPE,SUM(NLR_SCS_TOT)NLR_SCS_TOT,SUM(NVL(NLR_LOAD_TOT,0))NLR_LOAD_TOT,SUM(TPT_SCS_TOT)TPT_SCS_TOT,SUM(NVL(TPT_LOAD_TOT,0))TPT_LOAD_TOT,SUM(KDP_SCS_TOT)KDP_SCS_TOT,SUM(NVL(KDP_LOAD_TOT,0))KDP_LOAD_TOT,SUM(KNL_SCS_TOT)KNL_SCS_TOT,SUM(NVL(KNL_LOAD_TOT,0))KNL_LOAD_TOT,SUM(ATP_SCS_TOT)ATP_SCS_TOT,SUM(NVL(ATP_LOAD_TOT,0))ATP_LOAD_TOT,SUM(NVL(NLR_SCS_TOT,0)+NVL(TPT_SCS_TOT,0)+NVL(KDP_SCS_TOT,0)+NVL(KNL_SCS_TOT,0)+NVL(ATP_SCS_TOT,0)) CUMM_TOTAL,SUM(NVL(NLR_LOAD_TOT,0)+NVL(TPT_LOAD_TOT,0)+NVL(KDP_LOAD_TOT,0)+NVL(KNL_LOAD_TOT,0)+NVL(ATP_LOAD_TOT,0)) CUMM_LOAD FROM REP_COMML WHERE N2MONTH BETWEEN '2021_04' AND '2021_10' GROUP BY CATEGORY,NVL(FMTYPE,'URBAN'))C"
							+ " WHERE C.CATEGORY=M.CATEGORY(+)"
							+ " AND C.FMTYPE=M.FMTYPE(+) GROUP BY C.CATEGORY,C.FMTYPE ORDER BY C.CATEGORY ";

					reportPStmt = con.prepareStatement(compRuralRegisQry);
					reportRst = reportPStmt.executeQuery();
				}

				if (reportRst != null) {

					double totalScs_totalM1 = 0, units_totalM1 = 0, demand_totalM1 = 0;
					double totalScs_totalM2 = 0, units_totalM2 = 0, demand_totalM2 = 0;
					double row_totalScs = 0, row_demand = 0, row_units = 0;
					// List<String> service = new LinkedList<String>();
					while (reportRst.next()) {
						if (exmapfinal.containsKey(reportRst.getString(1))) {
							CscpayVO vo = spellMap.get(reportRst.getString(1));

							if ("RURAL".equals(reportRst.getString(2))) {

								vo.setFlag(reportRst.getString(2));

								vo.setNlr_scs(reportRst.getInt(3));
								vo.setNlr_cl(reportRst.getBigDecimal(4));

								vo.setTpt_scs(reportRst.getInt(5));
								vo.setTpt_cl(reportRst.getBigDecimal(6));

								vo.setKdp_scs(reportRst.getInt(7));
								vo.setKdp_cl(reportRst.getBigDecimal(8));

								vo.setKur_scs(reportRst.getInt(9));
								vo.setKur_cl(reportRst.getBigDecimal(10));

								vo.setAnt_scs(reportRst.getInt(11));
								vo.setAnt_cl(reportRst.getBigDecimal(12));

								vo.setTot_scs(reportRst.getInt(13));
								vo.setTot_load(reportRst.getBigDecimal(14));

								vo.setNlr_fscs(reportRst.getInt(15));
								vo.setNlr_fcl(reportRst.getBigDecimal(16));

								vo.setTpt_fscs(reportRst.getInt(17));
								vo.setTpt_fcl(reportRst.getBigDecimal(18));

								vo.setKdp_fscs(reportRst.getInt(19));
								vo.setKdp_fcl(reportRst.getBigDecimal(20));

								vo.setKur_fscs(reportRst.getInt(21));
								vo.setKur_fcl(reportRst.getBigDecimal(22));

								vo.setAnt_fscs(reportRst.getInt(23));
								vo.setAnt_fcl(reportRst.getBigDecimal(24));

								vo.setFtot_scs(reportRst.getInt(25));
								vo.setFtot_load(reportRst.getBigDecimal(26));

							} else {

								vo.setFlag(reportRst.getString(2));
								vo.setRnlr_scs(reportRst.getInt(3));
								vo.setRnlr_cl(reportRst.getBigDecimal(4));

								vo.setRtpt_scs(reportRst.getInt(5));
								vo.setRtpt_cl(reportRst.getBigDecimal(6));

								vo.setRkdp_scs(reportRst.getInt(7));
								vo.setRkdp_cl(reportRst.getBigDecimal(8));

								vo.setRkur_scs(reportRst.getInt(9));
								vo.setRkur_cl(reportRst.getBigDecimal(10));

								vo.setRant_scs(reportRst.getInt(11));
								vo.setRant_cl(reportRst.getBigDecimal(12));

								vo.setRtot_scs(reportRst.getInt(13));
								vo.setRtot_load(reportRst.getBigDecimal(14));

								vo.setRnlr_fscs(reportRst.getInt(15));
								vo.setRnlr_fcl(reportRst.getBigDecimal(16));

								vo.setRtpt_fscs(reportRst.getInt(17));
								vo.setRtpt_fcl(reportRst.getBigDecimal(18));

								vo.setRkdp_fscs(reportRst.getInt(19));
								vo.setRkdp_fcl(reportRst.getBigDecimal(20));

								vo.setRkur_fscs(reportRst.getInt(21));
								vo.setRkur_fcl(reportRst.getBigDecimal(22));

								vo.setRant_fscs(reportRst.getInt(23));
								vo.setRant_fcl(reportRst.getBigDecimal(24));

								vo.setRftot_scs(reportRst.getInt(25));
								vo.setRftot_load(reportRst.getBigDecimal(26));

							}
						} else {

							CscpayVO vo = new CscpayVO();

							if ("RURAL".equals(reportRst.getString(2))) {

								vo.setFlag(reportRst.getString(2));

								vo.setNlr_scs(reportRst.getInt(3));
								vo.setNlr_cl(reportRst.getBigDecimal(4));

								vo.setTpt_scs(reportRst.getInt(5));
								vo.setTpt_cl(reportRst.getBigDecimal(6));

								vo.setKdp_scs(reportRst.getInt(7));
								vo.setKdp_cl(reportRst.getBigDecimal(8));

								vo.setKur_scs(reportRst.getInt(9));
								vo.setKur_cl(reportRst.getBigDecimal(10));

								vo.setAnt_scs(reportRst.getInt(11));
								vo.setAnt_cl(reportRst.getBigDecimal(12));

								vo.setTot_scs(reportRst.getInt(13));
								vo.setTot_load(reportRst.getBigDecimal(14));

								vo.setNlr_fscs(reportRst.getInt(15));
								vo.setNlr_fcl(reportRst.getBigDecimal(16));

								vo.setTpt_fscs(reportRst.getInt(17));
								vo.setTpt_fcl(reportRst.getBigDecimal(18));

								vo.setKdp_fscs(reportRst.getInt(19));
								vo.setKdp_fcl(reportRst.getBigDecimal(20));

								vo.setKur_fscs(reportRst.getInt(21));
								vo.setKur_fcl(reportRst.getBigDecimal(22));

								vo.setAnt_fscs(reportRst.getInt(23));
								vo.setAnt_fcl(reportRst.getBigDecimal(24));

								vo.setFtot_scs(reportRst.getInt(25));
								vo.setFtot_load(reportRst.getBigDecimal(26));

							} else {

								vo.setFlag(reportRst.getString(2));
								vo.setRnlr_scs(reportRst.getInt(3));
								vo.setRnlr_cl(reportRst.getBigDecimal(4));

								vo.setRtpt_scs(reportRst.getInt(5));
								vo.setRtpt_cl(reportRst.getBigDecimal(6));

								vo.setRkdp_scs(reportRst.getInt(7));
								vo.setRkdp_cl(reportRst.getBigDecimal(8));

								vo.setRkur_scs(reportRst.getInt(9));
								vo.setRkur_cl(reportRst.getBigDecimal(10));

								vo.setRant_scs(reportRst.getInt(11));
								vo.setRant_cl(reportRst.getBigDecimal(12));

								vo.setRtot_scs(reportRst.getInt(13));
								vo.setRtot_load(reportRst.getBigDecimal(14));

								vo.setRnlr_fscs(reportRst.getInt(15));
								vo.setRnlr_fcl(reportRst.getBigDecimal(16));

								vo.setRtpt_fscs(reportRst.getInt(17));
								vo.setRtpt_fcl(reportRst.getBigDecimal(18));

								vo.setRkdp_fscs(reportRst.getInt(19));
								vo.setRkdp_fcl(reportRst.getBigDecimal(20));

								vo.setRkur_fscs(reportRst.getInt(21));
								vo.setRkur_fcl(reportRst.getBigDecimal(22));

								vo.setRant_fscs(reportRst.getInt(23));
								vo.setRant_fcl(reportRst.getBigDecimal(24));

								vo.setRftot_scs(reportRst.getInt(25));
								vo.setRftot_load(reportRst.getBigDecimal(26));
							}

							spellMap.put(reportRst.getString(1), vo);

						}

					}
					cscvo.setCscmap(spellMap);

					/*
					 * 
					 * while (reportRst.next()) {
					 * 
					 * if (exmapfinal.containsKey(reportRst.getString(1))) {
					 * Map<String, CscpayVO> exmap =
					 * exmapfinal.get(reportRst.getString(1)); if
					 * (exmap.containsKey(reportRst.getString(2))) { CscpayVO vo
					 * = exmap.get(reportRst.getString(2));
					 * 
					 * vo.setNlr_scs(reportRst.getInt(3));
					 * vo.setNlr_cl(reportRst.getBigDecimal(4));
					 * 
					 * vo.setTpt_scs(reportRst.getInt(5));
					 * vo.setTpt_cl(reportRst.getBigDecimal(6));
					 * 
					 * vo.setKdp_scs(reportRst.getInt(7));
					 * vo.setKdp_cl(reportRst.getBigDecimal(8));
					 * 
					 * vo.setKur_scs(reportRst.getInt(9));
					 * vo.setKur_cl(reportRst.getBigDecimal(10));
					 * 
					 * vo.setAnt_scs(reportRst.getInt(11));
					 * vo.setAnt_cl(reportRst.getBigDecimal(12));
					 * 
					 * vo.setTot_scs(reportRst.getInt(13));
					 * vo.setTot_load(reportRst.getBigDecimal(14));
					 * 
					 * vo.setNlr_fscs(reportRst.getInt(15));
					 * vo.setNlr_fcl(reportRst.getBigDecimal(16));
					 * 
					 * vo.setTpt_fscs(reportRst.getInt(17));
					 * vo.setTpt_fcl(reportRst.getBigDecimal(18));
					 * 
					 * vo.setKdp_fscs(reportRst.getInt(19));
					 * vo.setKdp_fcl(reportRst.getBigDecimal(20));
					 * 
					 * vo.setKur_fscs(reportRst.getInt(21));
					 * vo.setKur_fcl(reportRst.getBigDecimal(22));
					 * 
					 * vo.setAnt_fscs(reportRst.getInt(23));
					 * vo.setAnt_fcl(reportRst.getBigDecimal(24));
					 * 
					 * vo.setFtot_scs(reportRst.getInt(25));
					 * vo.setFtot_load(reportRst.getBigDecimal(26));
					 * 
					 * } else { CscpayVO vo = new CscpayVO();
					 * 
					 * 
					 * vo.setNlr_scs(reportRst.getInt(3));
					 * vo.setNlr_cl(reportRst.getBigDecimal(4));
					 * 
					 * vo.setTpt_scs(reportRst.getInt(5));
					 * vo.setTpt_cl(reportRst.getBigDecimal(6));
					 * 
					 * vo.setKdp_scs(reportRst.getInt(7));
					 * vo.setKdp_cl(reportRst.getBigDecimal(8));
					 * 
					 * vo.setKur_scs(reportRst.getInt(9));
					 * vo.setKur_cl(reportRst.getBigDecimal(10));
					 * 
					 * vo.setAnt_scs(reportRst.getInt(11));
					 * vo.setAnt_cl(reportRst.getBigDecimal(12));
					 * 
					 * vo.setTot_scs(reportRst.getInt(13));
					 * vo.setTot_load(reportRst.getBigDecimal(14));
					 * 
					 * vo.setNlr_fscs(reportRst.getInt(15));
					 * vo.setNlr_fcl(reportRst.getBigDecimal(16));
					 * 
					 * vo.setTpt_fscs(reportRst.getInt(17));
					 * vo.setTpt_fcl(reportRst.getBigDecimal(18));
					 * 
					 * vo.setKdp_fscs(reportRst.getInt(19));
					 * vo.setKdp_fcl(reportRst.getBigDecimal(20));
					 * 
					 * vo.setKur_fscs(reportRst.getInt(21));
					 * vo.setKur_fcl(reportRst.getBigDecimal(22));
					 * 
					 * vo.setAnt_fscs(reportRst.getInt(23));
					 * vo.setAnt_fcl(reportRst.getBigDecimal(24));
					 * 
					 * vo.setFtot_scs(reportRst.getInt(25));
					 * vo.setFtot_load(reportRst.getBigDecimal(26));
					 * 
					 * 
					 * exmap.put(reportRst.getString(2), vo); if
					 * (!catList.contains(reportRst.getString(2))) {
					 * catList.add(reportRst.getString(2)); }
					 * 
					 * } } else { Map<String, CscpayVO> exmap = new
					 * LinkedHashMap<String, CscpayVO>(); CscpayVO vo = new
					 * CscpayVO();
					 * 
					 * vo.setNlr_scs(reportRst.getInt(3));
					 * vo.setNlr_cl(reportRst.getBigDecimal(4));
					 * 
					 * vo.setTpt_scs(reportRst.getInt(5));
					 * vo.setTpt_cl(reportRst.getBigDecimal(6));
					 * 
					 * vo.setKdp_scs(reportRst.getInt(7));
					 * vo.setKdp_cl(reportRst.getBigDecimal(8));
					 * 
					 * vo.setKur_scs(reportRst.getInt(9));
					 * vo.setKur_cl(reportRst.getBigDecimal(10));
					 * 
					 * vo.setAnt_scs(reportRst.getInt(11));
					 * vo.setAnt_cl(reportRst.getBigDecimal(12));
					 * 
					 * vo.setTot_scs(reportRst.getInt(13));
					 * vo.setTot_load(reportRst.getBigDecimal(14));
					 * 
					 * vo.setNlr_fscs(reportRst.getInt(15));
					 * vo.setNlr_fcl(reportRst.getBigDecimal(16));
					 * 
					 * vo.setTpt_fscs(reportRst.getInt(17));
					 * vo.setTpt_fcl(reportRst.getBigDecimal(18));
					 * 
					 * vo.setKdp_fscs(reportRst.getInt(19));
					 * vo.setKdp_fcl(reportRst.getBigDecimal(20));
					 * 
					 * vo.setKur_fscs(reportRst.getInt(21));
					 * vo.setKur_fcl(reportRst.getBigDecimal(22));
					 * 
					 * vo.setAnt_fscs(reportRst.getInt(23));
					 * vo.setAnt_fcl(reportRst.getBigDecimal(24));
					 * 
					 * vo.setFtot_scs(reportRst.getInt(25));
					 * vo.setFtot_load(reportRst.getBigDecimal(26));
					 * 
					 * exmap.put(reportRst.getString(2), vo);
					 * exmapfinal.put(reportRst.getString(1), exmap); if
					 * (!catList.contains(reportRst.getString(2))) {
					 * catList.add(reportRst.getString(2)); } }
					 * 
					 * }
					 * 
					 * Collections.sort(catList);
					 * cscvo.setCatmapFinal(exmapfinal);
					 * cscvo.setCscCols(catList);
					 * 
					 */}
			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

		}

		return cscvo;
	}

	// HT INdustrial Pending

	public CscpayVO getCommercialHtIndlPenDetails(CscpayVO cscvo) throws Exception {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		/*
		 * Calendar c = Calendar.getInstance(); int curr_year =
		 * c.get(Calendar.YEAR); int curr_month = c.get(Calendar.MONTH) + 1;
		 */

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = c.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));
		String endDate1 = String.valueOf(curr_date);
		if (endDate1.length() == 1)
			endDate1 = "0".concat(endDate1);
		endDate = endDate1.concat("-")
				.concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		System.out.println("Date:" + startDate);
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(REG_NO)  like '%H%' ";
		// }

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		Map<String, CscpayVO> cscmap1 = new LinkedHashMap<String, CscpayVO>();
		Map<String, CscpayVO> cscmap2 = new LinkedHashMap<String, CscpayVO>();
		Map<String, CscpayVO> cscmap3 = new LinkedHashMap<String, CscpayVO>();
		Map<String, CscpayVO> cscmap4 = new LinkedHashMap<String, CscpayVO>();
		Map<String, CscpayVO> cscmap5 = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

				} else if ("SEC".equals(cscvo.getFlag())) {

				} else {
					String query = "SELECT  NVL(S.CIRNAME,'TOTAL'),COUNT(I.REG_NO) OB,SUM(NVL(I.CONTRACTED_LOAD,0)*.746/1000000) MVA,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000) MVA,COUNT(C.REG_NO) DELETED,SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000) MVA,COUNT(D.REG_NO) RELEASED,SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000) MVA ,(COUNT(I.REG_NO)+COUNT(B.REG_NO)-COUNT(C.REG_NO)-COUNT(D.REG_NO))CLOSING_BAL,(SUM(NVL(I.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000))TOTAL_MVA FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X' )A, "
							+ " (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X'  AND TRUNC(REG_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE-1)B,"
							+ " (SELECT REG_NO,NCPARTCD,VOLTAGE FROM new_connections WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X' and  VOLTAGE like'11%' AND TRUNC(REG_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE-1)G,"
							+ " (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE-1 AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)C,"
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CONTRACTED_LOAD FROM REP_FINAL WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  SUPPLY_RELEASE_DATE BETWEEN '"
							+ startDate + "' AND SYSDATE-1)D,"
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT,CONTRACTED_LOAD FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S WHERE A.REG_NO=B.REG_NO(+) AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=I.REG_NO(+)  AND A.REG_NO=G.REG_NO(+) AND A.NCPARTCD=S.SECCD and  A.NCPARTCD=G.NCPARTCD   AND SUBSTR(A.REG_NO,6,1)='H'  GROUP BY rollup(S.CIRNAME)	";

					reportPStmt = con.prepareStatement(query);
					System.out.println("ALL:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj.setTot_reg(reportRst.getString(4));
							dmapobj.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj.setAppReleased(reportRst.getString(8));
							dmapobj.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj.setCb(reportRst.getInt(10));
							dmapobj.setNew_cb_load(reportRst.getBigDecimal(11));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj.setTot_reg(reportRst.getString(4));
							dmapobj.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj.setAppReleased(reportRst.getString(8));
							dmapobj.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj.setCb(reportRst.getInt(10));
							dmapobj.setNew_cb_load(reportRst.getBigDecimal(11));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 11kv addtional Loads

				if ("DIV".equals(cscvo.getFlag())) {

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

				} else {

					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO) OB,SUM(NVL(A.ADDITIONAL_LOAD,0)*.746/1000000)OB_LOAD,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.ADDITIONAL_LOAD,0)*.746/1000000)REG_LOAD,COUNT(D.REG_NO) RELEASED,SUM(NVL(D.ADDITIONAL_LOAD,0)*.746/1000000)REL_LOAD,COUNT(C.REG_NO) DELETED,SUM(NVL(C.ADDITIONAL_LOAD,0)*.746/1000000)DEL_LOAD,COUNT(E.REG_NO)PENDING,SUM(NVL(E.ADDITIONAL_LOAD,0)*.746/1000000)PEN_LOAD  FROM "
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD,PRESENT_CATEGORY FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11  and  PRESENT_CATEGORY like 'HT3%' AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') )F,"
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8')  AND REPSTAT LIKE '%OB%')A, "
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8')  AND REG_DATE BETWEEN '"
							+ startDate + "' AND SYSDATE)B,"
							+ " (SELECT REG_NO,CSPARTCD,VOLTAGE FROM new_complaints WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X' and   nvl(VOLTAGE,VOLTAGE2) like '11%'  AND COMPLAINT=9 AND SUB_COMPLAINT=11  and SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') AND TRUNC(REG_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE-1)G,"
							+ " (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='deleted' )C,"
							+ " (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='released' )D,"
							+ " (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='balance')E, "
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S"
							+ " WHERE F.REG_NO=A.REG_NO(+) AND F.REG_NO=B.REG_NO(+) AND F.REG_NO=C.REG_NO(+) AND F.REG_NO=D.REG_NO(+) AND F.REG_NO=E.REG_NO(+)  AND F.REG_NO=G.REG_NO(+)"
							+ " AND A.CSPARTCD=S.SECCD and A.CSPARTCD=G.CSPARTCD AND  SUBSTR(A.REG_NO,6,1)='H' GROUP BY rollup(S.CIRNAME)";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("ALL: 11 KV Additionla Load: " + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap1.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj1 = cscmap1.get(reportRst.getString(1));

							dmapobj1.setAppPending(reportRst.getString(2));
							dmapobj1.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj1.setTot_reg(reportRst.getString(4));
							dmapobj1.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj1.setAppDeleted(reportRst.getString(6));
							dmapobj1.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj1.setAppReleased(reportRst.getString(8));
							dmapobj1.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj1.setCb(reportRst.getInt(10));
							dmapobj1.setNew_cb_load(reportRst.getBigDecimal(11));

						} else {
							CscpayVO dmapobj1 = new CscpayVO();

							dmapobj1.setAppPending(reportRst.getString(2));
							dmapobj1.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj1.setTot_reg(reportRst.getString(4));
							dmapobj1.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj1.setAppDeleted(reportRst.getString(6));
							dmapobj1.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj1.setAppReleased(reportRst.getString(8));
							dmapobj1.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj1.setCb(reportRst.getInt(10));
							dmapobj1.setNew_cb_load(reportRst.getBigDecimal(11));

							cscmap1.put(reportRst.getString(1), dmapobj1);
						}
					}
					cscvo.setCscpaymap1(cscmap1);

				}

				// Sum
				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				if ("DIV".equals(cscvo.getFlag())) {

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

				} else if ("SEC".equals(cscvo.getFlag())) {

				} else {

					/*
					 * String query =
					 * "SELECT  NVL(S.CIRNAME,'TOTAL'),COUNT(I.REG_NO) OB,SUM(NVL(I.CONTRACTED_LOAD,0)*.746/1000000) MVA,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000) MVA,COUNT(C.REG_NO) DELETED,SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000) MVA,COUNT(D.REG_NO) RELEASED,SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000) MVA ,(COUNT(I.REG_NO)+COUNT(B.REG_NO)-COUNT(C.REG_NO)-COUNT(D.REG_NO))CLOSING_BAL,(SUM(NVL(I.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000))TOTAL_MVA FROM  "
					 * +
					 * "(SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X' )A,"
					 * +
					 * "  (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X'  AND TRUNC(REG_DATE) BETWEEN '"
					 * + startDate + "' AND SYSDATE-1)B," +
					 * " (SELECT REG_NO,NCPARTCD,VOLTAGE FROM new_connections WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X' and  VOLTAGE like'11%' AND TRUNC(REG_DATE) BETWEEN '"
					 * + startDate + "' AND SYSDATE-1)G, " +
					 * "(SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN '"
					 * + startDate +
					 * "' AND SYSDATE-1 AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CONTRACTED_LOAD FROM REP_FINAL WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  SUPPLY_RELEASE_DATE BETWEEN '"
					 * + startDate + "' AND SYSDATE-1)D," +
					 * " (SELECT REG_NO,NCPARTCD ,REPSTAT,CONTRACTED_LOAD FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I, (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S WHERE A.REG_NO=B.REG_NO(+) AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=I.REG_NO(+)  AND A.REG_NO=G.REG_NO(+) AND A.NCPARTCD=S.SECCD and  A.NCPARTCD=G.NCPARTCD   AND SUBSTR(A.REG_NO,6,1)='H'  GROUP BY rollup(S.CIRNAME)"
					 * + " union" +
					 * " SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO) OB,SUM(NVL(A.ADDITIONAL_LOAD,0)*.746/1000000)OB_LOAD,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.ADDITIONAL_LOAD,0)*.746/1000000)REG_LOAD,COUNT(D.REG_NO) RELEASED,SUM(NVL(D.ADDITIONAL_LOAD,0)*.746/1000000)REL_LOAD,COUNT(C.REG_NO) DELETED,SUM(NVL(C.ADDITIONAL_LOAD,0)*.746/1000000)DEL_LOAD,COUNT(E.REG_NO)PENDING,SUM(NVL(E.ADDITIONAL_LOAD,0)*.746/1000000)PEN_LOAD  FROM "
					 * +
					 * " (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD,PRESENT_CATEGORY FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') )F,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8')  AND REPSTAT LIKE '%OB%')A,"
					 * +
					 * "  (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8')  AND REG_DATE BETWEEN '"
					 * + startDate + "' AND SYSDATE)B," +
					 * " (SELECT REG_NO,CSPARTCD,VOLTAGE FROM new_complaints WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X' and   nvl(VOLTAGE,VOLTAGE2) like '11%'  AND COMPLAINT=9 AND SUB_COMPLAINT=11  and SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') AND TRUNC(REG_DATE) BETWEEN '"
					 * + startDate + "' AND SYSDATE-1)G," +
					 * " (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='deleted' )C, (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='released' )D, (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='balance')E,  (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S WHERE F.REG_NO=A.REG_NO(+) AND F.REG_NO=B.REG_NO(+) AND F.REG_NO=C.REG_NO(+) AND F.REG_NO=D.REG_NO(+) AND F.REG_NO=E.REG_NO(+)  AND F.REG_NO=G.REG_NO(+) AND A.CSPARTCD=S.SECCD and A.CSPARTCD=G.CSPARTCD AND  SUBSTR(A.REG_NO,6,1)='H' GROUP BY rollup(S.CIRNAME)"
					 * ;
					 */
					String query = "SELECT NVL(CIRNAME,'TOTAL'),sum(Ob) ,sum(OB_LOAD)  ,sum(REGISTERED),sum(REG_LOAD),sum(DELETED),sum(DEL_LOAD),sum(RELEASED),sum(REL_LOAD),sum(PENDING),sum(PEN_LOAD) from "
							+ " (SELECT p.cirname,COUNT(F.REG_NO)OB,SUM(NVL(F.CONTRACTED_LOAD,0)*.746/1000000)OB_LOAD,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000)REG_LOAD,COUNT(D.REG_NO)RELEASED,SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000)REL_LOAD,COUNT(C.REG_NO) DELETED,SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000)DEL_LOAD,COUNT(F.REG_NO)+COUNT(B.REG_NO)-COUNT(C.REG_NO)-COUNT(D.REG_NO)PENDING,SUM(NVL(F.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000)-SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000)-SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000)PEN_LOAD FROM  (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS,VOLTAGE  FROM REP_FINAL where  NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H' AND VOLTAGE LIKE '33%' AND CATEGORY_SUPPLY LIKE '3%')A, (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,CONTRACTED_LOAD FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN '"
							+ startDate
							+ "' AND SYSDATE )B, (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE PENDING_STAT='DEL'   AND  TRUNC(RESPONSE_DATE) BETWEEN '"
							+ startDate
							+ "' AND SYSDATE )C, (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CONTRACTED_LOAD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  SUPPLY_RELEASE_DATE BETWEEN '"
							+ startDate
							+ "' AND SYSDATE)D, (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE  SLADESC='Pending for service release')E, (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD  FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' AND  SUBSTR(REG_NO,6,1)='H' )F, (SELECT REG_NO,NCPARTCD,NVL(VOLTAGE,VOLTAGE1) voltage FROM NEW_CONNECTIONS WHERE NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')N, (SELECT CIRNAME,SECCD FROM SPDCLMASTER)p WHERE A.REG_NO=B.REG_NO(+) AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=E.REG_NO(+) AND A.REG_NO=F.REG_NO(+) AND A.REG_NO=N.REG_NO(+) AND A.NCPARTCD=p.SECCD  AND NVL(A.ESTSTATUS,'01')='02' GROUP BY p.CIRNAME"
							+ " union"
							+ " SELECT S.CIRNAME,COUNT(F.REG_NO)OB,SUM(NVL(F.CONTRACTED_LOAD,0)*.746/1000000)OB_LOAD,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000)REG_LOAD,COUNT(D.REG_NO)RELEASED,SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000)REL_LOAD,COUNT(C.REG_NO) DELETED,SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000)DEL_LOAD,COUNT(F.REG_NO)+COUNT(B.REG_NO)-COUNT(C.REG_NO)-COUNT(D.REG_NO)PENDING,SUM(NVL(F.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000)-SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000)-SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000)PEN_LOAD FROM  (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS,VOLTAGE  FROM REP_FINAL where  NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H' AND VOLTAGE LIKE '11%' AND CATEGORY_SUPPLY LIKE '3%')A, (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,CONTRACTED_LOAD FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN '"
							+ startDate
							+ "' AND SYSDATE )B, (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE PENDING_STAT='DEL'   AND  TRUNC(RESPONSE_DATE) BETWEEN '"
							+ startDate
							+ "' AND SYSDATE )C, (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CONTRACTED_LOAD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  SUPPLY_RELEASE_DATE BETWEEN '"
							+ startDate
							+ "' AND SYSDATE)D, (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE  SLADESC='Pending for service release')E, (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD  FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' AND  SUBSTR(REG_NO,6,1)='H' )F, (SELECT REG_NO,NCPARTCD,NVL(VOLTAGE,VOLTAGE1) voltage FROM NEW_CONNECTIONS WHERE NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')N, (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S WHERE A.REG_NO=B.REG_NO(+) AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=E.REG_NO(+) AND A.REG_NO=F.REG_NO(+) AND A.REG_NO=N.REG_NO(+) AND A.NCPARTCD=S.SECCD  AND NVL(A.ESTSTATUS,'01')='02' GROUP BY S.CIRNAME"
							+ " union"
							+ " SELECT NVL(Q.CIRNAME,'TOTAL'),COUNT(A.REG_NO) OB,SUM(NVL(A.ADDITIONAL_LOAD,0)*.746/1000000)OB_LOAD,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.ADDITIONAL_LOAD,0)*.746/1000000)REG_LOAD,COUNT(D.REG_NO) RELEASED,SUM(NVL(D.ADDITIONAL_LOAD,0)*.746/1000000)REL_LOAD,COUNT(C.REG_NO) DELETED,SUM(NVL(C.ADDITIONAL_LOAD,0)*.746/1000000)DEL_LOAD,COUNT(E.REG_NO)PENDING,SUM(NVL(E.ADDITIONAL_LOAD,0)*.746/1000000)PEN_LOAD  FROM  (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD,PRESENT_CATEGORY FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11  and  PRESENT_CATEGORY like 'HT3%' AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') )F, (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8')  AND REPSTAT LIKE '%OB%')A,  (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8')  AND REG_DATE BETWEEN '"
							+ startDate
							+ "' AND SYSDATE)B, (SELECT REG_NO,CSPARTCD,VOLTAGE FROM new_complaints WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X' and   nvl(VOLTAGE,VOLTAGE2) like '33%'  AND COMPLAINT=9 AND SUB_COMPLAINT=11  and SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') AND TRUNC(REG_DATE) BETWEEN '"
							+ startDate
							+ "' AND SYSDATE-1)G, (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='deleted' )C, (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='released' )D, (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='balance')E,  (SELECT CIRNAME,SECCD FROM SPDCLMASTER)Q WHERE F.REG_NO=A.REG_NO(+) AND F.REG_NO=B.REG_NO(+) AND F.REG_NO=C.REG_NO(+) AND F.REG_NO=D.REG_NO(+) AND F.REG_NO=E.REG_NO(+)  AND F.REG_NO=G.REG_NO(+) AND A.CSPARTCD=Q.SECCD and A.CSPARTCD=G.CSPARTCD AND  SUBSTR(A.REG_NO,6,1)='H' GROUP BY Q.CIRNAME"
							+ " UNION"
							+ " SELECT NVL(R.CIRNAME,'TOTAL'),COUNT(A.REG_NO) OB,SUM(NVL(A.ADDITIONAL_LOAD,0)*.746/1000000)OB_LOAD,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.ADDITIONAL_LOAD,0)*.746/1000000)REG_LOAD,COUNT(D.REG_NO) RELEASED,SUM(NVL(D.ADDITIONAL_LOAD,0)*.746/1000000)REL_LOAD,COUNT(C.REG_NO) DELETED,SUM(NVL(C.ADDITIONAL_LOAD,0)*.746/1000000)DEL_LOAD,COUNT(E.REG_NO)PENDING,SUM(NVL(E.ADDITIONAL_LOAD,0)*.746/1000000)PEN_LOAD  FROM  (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD,PRESENT_CATEGORY FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11  and  PRESENT_CATEGORY like 'HT3%' AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') )F, (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8')  AND REPSTAT LIKE '%OB%')A,  (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8')  AND REG_DATE BETWEEN '"
							+ startDate
							+ "' AND SYSDATE)B, (SELECT REG_NO,CSPARTCD,VOLTAGE FROM new_complaints WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X' and   nvl(VOLTAGE,VOLTAGE2) like '11%'  AND COMPLAINT=9 AND SUB_COMPLAINT=11  and SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') AND TRUNC(REG_DATE) BETWEEN '"
							+ startDate
							+ "' AND SYSDATE-1)G, (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='deleted' )C, (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='released' )D, (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='balance')E,  (SELECT CIRNAME,SECCD FROM SPDCLMASTER)R WHERE F.REG_NO=A.REG_NO(+) AND F.REG_NO=B.REG_NO(+) AND F.REG_NO=C.REG_NO(+) AND F.REG_NO=D.REG_NO(+) AND F.REG_NO=E.REG_NO(+)  AND F.REG_NO=G.REG_NO(+) AND A.CSPARTCD=R.SECCD and A.CSPARTCD=G.CSPARTCD AND  SUBSTR(A.REG_NO,6,1)='H' GROUP BY R.CIRNAME )"
							+ "  GROUP BY ROLLUP(CIRNAME) ORDER BY cirname";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("ALL: Abstarct:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap2.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj1 = cscmap2.get(reportRst.getString(1));

							dmapobj1.setAppPending(reportRst.getString(2));
							dmapobj1.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj1.setTot_reg(reportRst.getString(4));
							dmapobj1.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj1.setAppDeleted(reportRst.getString(6));
							dmapobj1.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj1.setAppReleased(reportRst.getString(8));
							dmapobj1.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj1.setCb(reportRst.getInt(10));
							dmapobj1.setNew_cb_load(reportRst.getBigDecimal(11));

						} else {
							CscpayVO dmapobj1 = new CscpayVO();

							dmapobj1.setAppPending(reportRst.getString(2));
							dmapobj1.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj1.setTot_reg(reportRst.getString(4));
							dmapobj1.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj1.setAppDeleted(reportRst.getString(6));
							dmapobj1.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj1.setAppReleased(reportRst.getString(8));
							dmapobj1.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj1.setCb(reportRst.getInt(10));
							dmapobj1.setNew_cb_load(reportRst.getBigDecimal(11));

							cscmap2.put(reportRst.getString(1), dmapobj1);
						}
					}
					cscvo.setCscpaymap2(cscmap2);
				}

				// 33KV NEW SERVICES

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				if ("DIV".equals(cscvo.getFlag())) {

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

				} else if ("SEC".equals(cscvo.getFlag())) {

				} else {

					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(F.REG_NO)OB,SUM(NVL(F.CONTRACTED_LOAD,0)*.746/1000000)OB_LOAD,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000)REG_LOAD,COUNT(D.REG_NO)RELEASED,SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000)REL_LOAD,COUNT(C.REG_NO) DELETED,SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000)DEL_LOAD,COUNT(F.REG_NO)+COUNT(B.REG_NO)-COUNT(C.REG_NO)-COUNT(D.REG_NO)PENDING,SUM(NVL(F.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000)-SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000)-SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000)PEN_LOAD FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS,VOLTAGE  FROM REP_FINAL where  NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H' AND VOLTAGE LIKE '33%' AND CATEGORY_SUPPLY LIKE '3%')A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,CONTRACTED_LOAD FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE )B,"
							+ " (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE PENDING_STAT='DEL'   AND  TRUNC(RESPONSE_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE )C,"
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CONTRACTED_LOAD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  SUPPLY_RELEASE_DATE BETWEEN '"
							+ startDate + "' AND SYSDATE)D,"
							+ " (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE  SLADESC='Pending for service release')E,"
							+ " (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD  FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' AND  SUBSTR(REG_NO,6,1)='H' )F,"
							+ " (SELECT REG_NO,NCPARTCD,NVL(VOLTAGE,VOLTAGE1) voltage FROM NEW_CONNECTIONS WHERE NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')N,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=N.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD "
							+ " AND NVL(A.ESTSTATUS,'01')='02'" + " GROUP BY ROLLUP(S.CIRNAME) ORDER BY S.CIRNAME ";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("33KV NEW SERVICES: Abstarct:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap3.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj1 = cscmap3.get(reportRst.getString(1));

							dmapobj1.setAppPending(reportRst.getString(2));
							dmapobj1.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj1.setTot_reg(reportRst.getString(4));
							dmapobj1.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj1.setAppDeleted(reportRst.getString(6));
							dmapobj1.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj1.setAppReleased(reportRst.getString(8));
							dmapobj1.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj1.setCb(reportRst.getInt(10));
							dmapobj1.setNew_cb_load(reportRst.getBigDecimal(11));

						} else {
							CscpayVO dmapobj1 = new CscpayVO();

							dmapobj1.setAppPending(reportRst.getString(2));
							dmapobj1.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj1.setTot_reg(reportRst.getString(4));
							dmapobj1.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj1.setAppDeleted(reportRst.getString(6));
							dmapobj1.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj1.setAppReleased(reportRst.getString(8));
							dmapobj1.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj1.setCb(reportRst.getInt(10));
							dmapobj1.setNew_cb_load(reportRst.getBigDecimal(11));

							cscmap3.put(reportRst.getString(1), dmapobj1);
						}
					}
					cscvo.setCscpaymap3(cscmap3);
				}

				// 11KV NEW SERVICES

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				if ("DIV".equals(cscvo.getFlag())) {

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

				} else if ("SEC".equals(cscvo.getFlag())) {

				} else {

					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(F.REG_NO)OB,SUM(NVL(F.CONTRACTED_LOAD,0)*.746/1000000)OB_LOAD,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000)REG_LOAD,COUNT(D.REG_NO)RELEASED,SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000)REL_LOAD,COUNT(C.REG_NO) DELETED,SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000)DEL_LOAD,COUNT(F.REG_NO)+COUNT(B.REG_NO)-COUNT(C.REG_NO)-COUNT(D.REG_NO)PENDING,SUM(NVL(F.CONTRACTED_LOAD,0)*.746/1000000)+SUM(NVL(B.CONTRACTED_LOAD,0)*.746/1000000)-SUM(NVL(C.CONTRACTED_LOAD,0)*.746/1000000)-SUM(NVL(D.CONTRACTED_LOAD,0)*.746/1000000)PEN_LOAD FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS,VOLTAGE  FROM REP_FINAL where  NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H' AND VOLTAGE LIKE '11%' AND CATEGORY_SUPPLY LIKE '3%')A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,CONTRACTED_LOAD FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE )B,"
							+ " (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE PENDING_STAT='DEL'   AND  TRUNC(RESPONSE_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE )C,"
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE,CONTRACTED_LOAD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  SUPPLY_RELEASE_DATE BETWEEN '"
							+ startDate + "' AND SYSDATE)D,"
							+ " (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD FROM REP_FINAL WHERE  SLADESC='Pending for service release')E,"
							+ " (SELECT REG_NO,NCPARTCD,CONTRACTED_LOAD  FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' AND  SUBSTR(REG_NO,6,1)='H' )F,"
							+ " (SELECT REG_NO,NCPARTCD,NVL(VOLTAGE,VOLTAGE1) voltage FROM NEW_CONNECTIONS WHERE NVL(ESTSTATUS,'01')='02'  AND SUBSTR(REG_NO,6,1)='H')N,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=N.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD "
							+ " AND NVL(A.ESTSTATUS,'01')='02'" + " GROUP BY ROLLUP(S.CIRNAME) ORDER BY S.CIRNAME ";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("11KV NEW SERVICES: Abstarct:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap4.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj1 = cscmap4.get(reportRst.getString(1));

							dmapobj1.setAppPending(reportRst.getString(2));
							dmapobj1.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj1.setTot_reg(reportRst.getString(4));
							dmapobj1.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj1.setAppDeleted(reportRst.getString(6));
							dmapobj1.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj1.setAppReleased(reportRst.getString(8));
							dmapobj1.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj1.setCb(reportRst.getInt(10));
							dmapobj1.setNew_cb_load(reportRst.getBigDecimal(11));

						} else {
							CscpayVO dmapobj1 = new CscpayVO();

							dmapobj1.setAppPending(reportRst.getString(2));
							dmapobj1.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj1.setTot_reg(reportRst.getString(4));
							dmapobj1.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj1.setAppDeleted(reportRst.getString(6));
							dmapobj1.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj1.setAppReleased(reportRst.getString(8));
							dmapobj1.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj1.setCb(reportRst.getInt(10));
							dmapobj1.setNew_cb_load(reportRst.getBigDecimal(11));

							cscmap4.put(reportRst.getString(1), dmapobj1);
						}
					}
					cscvo.setCscpaymap4(cscmap4);
				}
				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 33kv Additional Loads

				if ("DIV".equals(cscvo.getFlag())) {

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

				} else {

					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO) OB,SUM(NVL(A.ADDITIONAL_LOAD,0)*.746/1000000)OB_LOAD,COUNT(B.REG_NO) REGISTERED,SUM(NVL(B.ADDITIONAL_LOAD,0)*.746/1000000)REG_LOAD,COUNT(D.REG_NO) RELEASED,SUM(NVL(D.ADDITIONAL_LOAD,0)*.746/1000000)REL_LOAD,COUNT(C.REG_NO) DELETED,SUM(NVL(C.ADDITIONAL_LOAD,0)*.746/1000000)DEL_LOAD,COUNT(E.REG_NO)PENDING,SUM(NVL(E.ADDITIONAL_LOAD,0)*.746/1000000)PEN_LOAD  FROM "
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD,PRESENT_CATEGORY FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11  and  PRESENT_CATEGORY like 'HT3%' AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') )F,"
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8')  AND REPSTAT LIKE '%OB%')A, "
							+ " (SELECT REG_NO,CSPARTCD,ESTSTATUS,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(rejected),'NA') <> 'X'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8')  AND REG_DATE BETWEEN '"
							+ startDate + "' AND SYSDATE)B,"
							+ " (SELECT REG_NO,CSPARTCD,VOLTAGE FROM new_complaints WHERE NVL(ESTSTATUS,'01')='02' AND NVL(REJECTED,'Y') <> 'X' and   nvl(VOLTAGE,VOLTAGE2) like '33%'  AND COMPLAINT=9 AND SUB_COMPLAINT=11  and SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8') AND TRUNC(REG_DATE) BETWEEN '"
							+ startDate + "' AND SYSDATE-1)G,"
							+ " (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='deleted' )C,"
							+ " (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='released' )D,"
							+ " (SELECT REG_NO,CSPARTCD,ADDITIONAL_LOAD FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA')='balance')E, "
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S"
							+ " WHERE F.REG_NO=A.REG_NO(+) AND F.REG_NO=B.REG_NO(+) AND F.REG_NO=C.REG_NO(+) AND F.REG_NO=D.REG_NO(+) AND F.REG_NO=E.REG_NO(+)  AND F.REG_NO=G.REG_NO(+)"
							+ " AND A.CSPARTCD=S.SECCD and A.CSPARTCD=G.CSPARTCD AND  SUBSTR(A.REG_NO,6,1)='H' GROUP BY rollup(S.CIRNAME)";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("ALL: 33 kv Additionla Load: " + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap5.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj1 = cscmap5.get(reportRst.getString(1));

							dmapobj1.setAppPending(reportRst.getString(2));
							dmapobj1.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj1.setTot_reg(reportRst.getString(4));
							dmapobj1.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj1.setAppDeleted(reportRst.getString(6));
							dmapobj1.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj1.setAppReleased(reportRst.getString(8));
							dmapobj1.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj1.setCb(reportRst.getInt(10));
							dmapobj1.setNew_cb_load(reportRst.getBigDecimal(11));

						} else {
							CscpayVO dmapobj1 = new CscpayVO();

							dmapobj1.setAppPending(reportRst.getString(2));
							dmapobj1.setNew_ob_load(reportRst.getBigDecimal(3));

							dmapobj1.setTot_reg(reportRst.getString(4));
							dmapobj1.setNew_reg_load(reportRst.getBigDecimal(5));

							dmapobj1.setAppDeleted(reportRst.getString(6));
							dmapobj1.setNew_del_load(reportRst.getBigDecimal(7));

							dmapobj1.setAppReleased(reportRst.getString(8));
							dmapobj1.setNew_rel_load(reportRst.getBigDecimal(9));

							dmapobj1.setCb(reportRst.getInt(10));
							dmapobj1.setNew_cb_load(reportRst.getBigDecimal(11));

							cscmap5.put(reportRst.getString(1), dmapobj1);
						}
					}
					cscvo.setCscpaymap5(cscmap5);

				} else {

					throw new DatabaseFailureException(
							"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
				}
			}
		} catch (Exception ee) {
			ee.printStackTrace();

		} finally {

			if (con != null) {
				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}

			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

		}
		return cscvo;

	}
	
	public CscpayVO getHTTrackingApplicationAbstractDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{

		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					
					String query = "select NVL(DIVNAME,'TOTAL'),sum(case when (substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) then 1 else 0 end )+\r\n" + 
							"sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)+sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end)+\r\n" + 
							"sum(case when (STATUS='Payment not paid' ) then 1 else 0 end)+sum(case when (REL_ON IS NULL AND STATUS='Payment paid') then 1 else 0 end) Total_Applications\r\n" + 
							",sum(case when (STATUS NOT IN ('Estimate not created', 'Estimate not approved','Payment not paid')) then 1 else 0 end)+\r\n" + 
							"sum(case when (substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) then 1 else 0 end ) EST_APRD\r\n" + 
							",sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)PEN_EST_CRE	\r\n" + 
							",sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end)EST_NOT_APRD	\r\n" + 
							",sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)+sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end) TOTAL_PEN_EST_APR\r\n" + 
							",sum(case when (STATUS='Payment not paid' ) then 1 else 0 end)PAYMENT_NOT_PAID\r\n" + 
							",sum(case when (REL_ON IS NULL AND STATUS='Payment paid') then 1 else 0 end) PEN_FOR_REL_ORDER\r\n" + 
							",sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)+sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end)+\r\n" + 
							"sum(case when (STATUS='Payment not paid' ) then 1 else 0 end)+sum(case when (REL_ON IS NULL AND STATUS='Payment paid') then 1 else 0 end) TOTAL_PENDING\r\n" + 
							",sum(case when (substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) then 1 else 0 end )RELEASED\r\n" + 
							"FROM \r\n" + 
							"(select cirname,divname,REG_NO,USCNO,REG_DATE from REP_FINAL,spdclmaster WHERE NCPARTCD=SECCD and SUBSTR(REG_NO,6,1)='H' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')a,\r\n" + 
							"(select trim(zregid)zregid,status,rel_on from it_all where ZREQUEST_TYPE='NEW') b\r\n" + 
							"where a.reg_no=trim(b.zregid(+))  AND CIRNAME=? \r\n" + 
							"and TRUNC(REG_DATE) BETWEEN TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY')\r\n" + 
							"group by ROLLUP (DIVNAME) ORDER BY DIVNAME";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getFrom_date());
					reportPStmt.setString(3, cscvo.getTo_date());
					
					reportRst = reportPStmt.executeQuery();
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "select NVL(SUBNAME,'TOTAL'),sum(case when (substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) then 1 else 0 end )+\r\n" + 
							"sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)+sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end)+\r\n" + 
							"sum(case when (STATUS='Payment not paid' ) then 1 else 0 end)+sum(case when (REL_ON IS NULL AND STATUS='Payment paid') then 1 else 0 end) Total_Applications\r\n" + 
							",sum(case when (STATUS NOT IN ('Estimate not created', 'Estimate not approved','Payment not paid')) then 1 else 0 end)+\r\n" + 
							"sum(case when (substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) then 1 else 0 end ) EST_APRD\r\n" + 
							",sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)PEN_EST_CRE	\r\n" + 
							",sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end)EST_NOT_APRD	\r\n" + 
							",sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)+sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end) TOTAL_PEN_EST_APR\r\n" + 
							",sum(case when (STATUS='Payment not paid' ) then 1 else 0 end)PAYMENT_NOT_PAID\r\n" + 
							",sum(case when (REL_ON IS NULL AND STATUS='Payment paid') then 1 else 0 end) PEN_FOR_REL_ORDER\r\n" + 
							",sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)+sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end)+\r\n" + 
							"sum(case when (STATUS='Payment not paid' ) then 1 else 0 end)+sum(case when (REL_ON IS NULL AND STATUS='Payment paid') then 1 else 0 end) TOTAL_PENDING\r\n" + 
							",sum(case when (substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) then 1 else 0 end )RELEASED\r\n" + 
							"FROM \r\n" + 
							"(select cirname,divname,SUBNAME,REG_NO,USCNO,REG_DATE from REP_FINAL,spdclmaster WHERE NCPARTCD=SECCD and SUBSTR(REG_NO,6,1)='H' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')a,\r\n" + 
							"(select trim(zregid)zregid,status,rel_on from it_all where ZREQUEST_TYPE='NEW') b\r\n" + 
							"where a.reg_no=trim(b.zregid(+))  AND CIRNAME=? AND DIVNAME=?\r\n" + 
							"and TRUNC(REG_DATE) BETWEEN TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY')\r\n" + 
							"group by ROLLUP (SUBNAME) ORDER BY SUBNAME";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					
					reportPStmt.setString(3, cscvo.getFrom_date());
					reportPStmt.setString(4, cscvo.getTo_date());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select NVL(SECNAME,'TOTAL'),sum(case when (substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) then 1 else 0 end )+\r\n" + 
							"sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)+sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end)+\r\n" + 
							"sum(case when (STATUS='Payment not paid' ) then 1 else 0 end)+sum(case when (REL_ON IS NULL AND STATUS='Payment paid') then 1 else 0 end) Total_Applications\r\n" + 
							",sum(case when (STATUS NOT IN ('Estimate not created', 'Estimate not approved','Payment not paid')) then 1 else 0 end)+\r\n" + 
							"sum(case when (substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) then 1 else 0 end ) EST_APRD\r\n" + 
							",sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)PEN_EST_CRE	\r\n" + 
							",sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end)EST_NOT_APRD	\r\n" + 
							",sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)+sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end) TOTAL_PEN_EST_APR\r\n" + 
							",sum(case when (STATUS='Payment not paid' ) then 1 else 0 end)PAYMENT_NOT_PAID\r\n" + 
							",sum(case when (REL_ON IS NULL AND STATUS='Payment paid') then 1 else 0 end) PEN_FOR_REL_ORDER\r\n" + 
							",sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)+sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end)+\r\n" + 
							"sum(case when (STATUS='Payment not paid' ) then 1 else 0 end)+sum(case when (REL_ON IS NULL AND STATUS='Payment paid') then 1 else 0 end) TOTAL_PENDING\r\n" + 
							",sum(case when (substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) then 1 else 0 end )RELEASED\r\n" + 
							"FROM \r\n" + 
							"(select cirname,divname,SUBNAME,SECNAME,REG_NO,USCNO,REG_DATE from REP_FINAL,spdclmaster WHERE NCPARTCD=SECCD and SUBSTR(REG_NO,6,1)='H' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')a,\r\n" + 
							"(select trim(zregid)zregid,status,rel_on from it_all where ZREQUEST_TYPE='NEW') b\r\n" + 
							"where a.reg_no=trim(b.zregid(+))  AND CIRNAME=? AND DIVNAME=? AND SUBNAME=?\r\n" + 
							"and TRUNC(REG_DATE) BETWEEN TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY')\r\n" + 
							"group by ROLLUP (SECNAME) ORDER BY SECNAME";
					
					
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());
					reportPStmt.setString(4, cscvo.getFrom_date());
					reportPStmt.setString(5, cscvo.getTo_date());
					
					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "select NVL(CIRNAME,'TOTAL'),sum(case when (substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) then 1 else 0 end )+\r\n" + 
							"sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)+sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end)+\r\n" + 
							"sum(case when (STATUS='Payment not paid' ) then 1 else 0 end)+sum(case when (REL_ON IS NULL AND STATUS='Payment paid') then 1 else 0 end) Total_Applications\r\n" + 
							",sum(case when (STATUS NOT IN ('Estimate not created', 'Estimate not approved','Payment not paid')) then 1 else 0 end)+\r\n" + 
							"sum(case when (substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) then 1 else 0 end ) EST_APRD\r\n" + 
							",sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)PEN_EST_CRE	\r\n" + 
							",sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end)EST_NOT_APRD	\r\n" + 
							",sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)+sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end) TOTAL_PEN_EST_APR\r\n" + 
							",sum(case when (STATUS='Payment not paid' ) then 1 else 0 end)PAYMENT_NOT_PAID\r\n" + 
							",sum(case when (REL_ON IS NULL AND STATUS='Payment paid') then 1 else 0 end) PEN_FOR_REL_ORDER\r\n" + 
							",sum(case when (STATUS='Estimate not created' ) then 1 else 0 end)+sum(case when (STATUS='Estimate not approved' ) then 1 else 0 end)+\r\n" + 
							"sum(case when (STATUS='Payment not paid' ) then 1 else 0 end)+sum(case when (REL_ON IS NULL AND STATUS='Payment paid') then 1 else 0 end) TOTAL_PENDING\r\n" + 
							",sum(case when (substr(uscno,1,3) in ('CDP','NLR','TPT','ATP','KNL')) then 1 else 0 end )RELEASED\r\n" + 
							"FROM \r\n" + 
							"(select cirname,divname,REG_NO,USCNO,REG_DATE from REP_FINAL,spdclmaster WHERE NCPARTCD=SECCD and SUBSTR(REG_NO,6,1)='H' AND NVL(REJECTED,'Y') <> 'X' AND NVL(ESTSTATUS,'03')='02')a,\r\n" + 
							"(select trim(zregid)zregid,status,rel_on from it_all where ZREQUEST_TYPE='NEW') b\r\n" + 
							"where a.reg_no=trim(b.zregid(+)) \r\n" + 
							"and TRUNC(REG_DATE) BETWEEN TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY')\r\n" + 
							"group by ROLLUP (cirname)";
					
					System.out.println("HTtracking_abstract1:"+query);
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					System.out.println("HTtracking_abstract2:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setTotregistration(reportRst.getString(2));
							dmapobj.setTotestimateapprove(reportRst.getString(3));
							dmapobj.setPendingforestimatecreation(reportRst.getString(4));
							dmapobj.setPendingforapproval(reportRst.getString(5));
							/*dmapobj.setPendingattransco(reportRst.getString(6));*/
							dmapobj.setTotpendingforestimateapprove(reportRst.getString(6));
							dmapobj.setPendingforpayment(reportRst.getString(7));
							/*dmapobj.setPendingforworkcompletion(reportRst.getString(9));
							dmapobj.setPendingforagreement(reportRst.getString(10));*/
							dmapobj.setPendingforreleaseorder(reportRst.getString(8));
							/*dmapobj.setPendingfortestreport(reportRst.getString(12));*/
							/*dmapobj.setPendingforbilling(reportRst.getString(13));*/
							dmapobj.setTotalpending(reportRst.getString(9));
							dmapobj.setBillingdone(reportRst.getString(10));
							
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setTotregistration(reportRst.getString(2));
							dmapobj.setTotestimateapprove(reportRst.getString(3));
							dmapobj.setPendingforestimatecreation(reportRst.getString(4));
							dmapobj.setPendingforapproval(reportRst.getString(5));
							/*dmapobj.setPendingattransco(reportRst.getString(6));*/
							dmapobj.setTotpendingforestimateapprove(reportRst.getString(6));
							dmapobj.setPendingforpayment(reportRst.getString(7));
							/*dmapobj.setPendingforworkcompletion(reportRst.getString(9));
							dmapobj.setPendingforagreement(reportRst.getString(10));*/
							dmapobj.setPendingforreleaseorder(reportRst.getString(8));
							/*dmapobj.setPendingfortestreport(reportRst.getString(12));*/
							/*dmapobj.setPendingforbilling(reportRst.getString(13));*/
							dmapobj.setTotalpending(reportRst.getString(9));
							dmapobj.setBillingdone(reportRst.getString(10));
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
		
	}
	
	public CscpayVO geta11kvfeedersurveysDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{
		
		

		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					
					String query = "SELECT nvl(s.divname,'TOTAL')AS CIRNAME,COUNT(s.divname)  AS CIRCLECOUNT\r\n" + 
							"FROM feedermast f,spdclmaster s\r\n" + 
							"WHERE  f.FMSECCD=s.seccd AND s.cirname=? \r\n" + 
							"GROUP BY ROLLUP(s.divname)\r\n" + 
							"ORDER BY s.divname";
					
					reportPStmt = con.prepareStatement(query);
					/*reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());*/
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(s.subname,'TOTAL')AS CIRNAME,COUNT(s.subname)  AS CIRCLECOUNT\r\n" + 
							"FROM feedermast f,spdclmaster s\r\n" + 
							"WHERE  f.FMSECCD=s.seccd AND s.cirname=? AND s.divname=?\r\n" + 
							"GROUP BY ROLLUP(s.subname)\r\n" + 
							"ORDER BY s.subname\r\n" + 
							"";
					
					
					reportPStmt = con.prepareStatement(query);
					/*reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());*/
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(s.secname,'TOTAL')AS CIRNAME,COUNT(s.secname)  AS CIRCLECOUNT\r\n" + 
							"FROM feedermast f,spdclmaster s\r\n" + 
							"WHERE  f.FMSECCD=s.seccd AND s.cirname=? AND s.divname=? and s.subname=?\r\n" + 
							"GROUP BY ROLLUP(s.secname)\r\n" + 
							"ORDER BY s.secname\r\n" + 
							"";
					reportPStmt = con.prepareStatement(query);
					/*reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());*/
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(s.cirname,'TOTAL')AS CIRNAME,COUNT(s.CIRNAME)  AS CIRCLECOUNT\r\n" + 
							"FROM feedermast f,spdclmaster s\r\n" + 
							"WHERE  f.FMSECCD=s.seccd\r\n" + 
							"GROUP BY ROLLUP(s.CIRNAME)\r\n" + 
							"ORDER BY s.CIRNAME";
					
					reportPStmt = con.prepareStatement(query);
					//reportPStmt.setString(1, cscvo.getFrom_date());
					//reportPStmt.setString(2, cscvo.getTo_date());
					System.out.println("11KV:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setA11kvcircount(reportRst.getString(2));
							//dmapobj.setCat2Scs(reportRst.getInt(3));
							
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setA11kvcircount(reportRst.getString(2));
							//dmapobj.setCat2Scs(reportRst.getInt(3));
							
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
		
	}
	
	public CscpayVO get11kvfeedersurveyabstractdetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{
	
	
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "";
					
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "";
					
					
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());
					reportPStmt.setString(5, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					//System.out.println("PaidApp_abstract"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setCat1Scs(reportRst.getInt(2));
							
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setCat1Scs(reportRst.getInt(2));
							
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
	
	
	
	}
	
	public CscpayVO get33kvfeedersurveyabstractdetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{
	
	
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "";
					
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "";
					
					
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());
					reportPStmt.setString(5, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					//System.out.println("PaidApp_abstract"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setCat1Scs(reportRst.getInt(2));
							
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setCat1Scs(reportRst.getInt(2));
							
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
	
	
	
	}
	
	public CscpayVO getcirclewiseprogress11kvfeedersurveyabstractdetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{
	
	
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "";
					
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "";
					
					
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());
					reportPStmt.setString(5, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					//System.out.println("PaidApp_abstract"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setCat1Scs(reportRst.getInt(2));
							
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setCat1Scs(reportRst.getInt(2));
							
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
	
	
	
	}
	
	public CscpayVO getcirclewiseprogress33kvfeedersurveyabstractdetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{
	
	
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "";
					
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "";
					
					
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());
					reportPStmt.setString(5, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					//System.out.println("PaidApp_abstract"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setCat1Scs(reportRst.getInt(2));
							
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setCat1Scs(reportRst.getInt(2));
							
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
	
	
	
	}
	
	
	public CscpayVO getCircleWiseGIS_Survey33_11KVabstractdetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{
	
	
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "";
					
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "";
					
					
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());
					reportPStmt.setString(5, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					//System.out.println("PaidApp_abstract"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setCat1Scs(reportRst.getInt(2));
							
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setCat1Scs(reportRst.getInt(2));
							
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
	
	
	
	}
	
	
	public CscpayVO getGIS_Survey33_11KVabstractdetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{
	
	
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "";
					
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "";
					
					
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());
					reportPStmt.setString(5, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					//System.out.println("PaidApp_abstract"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setCat1Scs(reportRst.getInt(2));
							
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setCat1Scs(reportRst.getInt(2));
							
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
	
	
	
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public CscpayVO getPaidApplicationDeleteAbstractDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					
					String query = "SELECT nvl(DIVNAME,'TOTAL')\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='1') THEN 1 ELSE 0 END) LT1\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='2') THEN 1 ELSE 0 END) LT2\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='3') THEN 1 ELSE 0 END) LT3\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='4') THEN 1 ELSE 0 END) LT4\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,3) IN ('5A1','5A2')) THEN 1 ELSE 0 END) LT5_AGL\r\n" + 
							",sum(case when  (substr(reg_no,6,1) in ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,3)  IN ('5A3','5A4','5A5','5A6') OR  SUBSTR(CATEGORY_SUPPLY,1,2) IN ('5B','5D','5T')) THEN 1 ELSE 0 END) LT5_OTHER\r\n" + 
							",sum(case when  (substr(reg_no,6,1) ='H')  then 1 else 0 end) ht\r\n" + 
							"\r\n" + 
							"FROM\r\n" + 
							"(SELECT CIRNAME,DIVNAME,REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL A,SPDCLMASTER WHERE NCPARTCD=SECCD  \r\n" + 
							"AND (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) AND NVL(TOTAMT,0)  > 500 AND USCNO IS NULL AND EXISTS \r\n" + 
							"(select  reg_no from connection_responses r where  trunc(response_date) between TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY') AND CIRNAME=? and r.reg_no=a.reg_no and nvl(pending_at,'0') in ('4','20')))\r\n" + 
							"GROUP BY ROLLUP(DIVNAME) ORDER BY DIVNAME";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(SUBNAME,'TOTAL')\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='1') THEN 1 ELSE 0 END) LT1\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='2') THEN 1 ELSE 0 END) LT2\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='3') THEN 1 ELSE 0 END) LT3\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='4') THEN 1 ELSE 0 END) LT4\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,3) IN ('5A1','5A2')) THEN 1 ELSE 0 END) LT5_AGL\r\n" + 
							",sum(case when  (substr(reg_no,6,1) in ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,3)  IN ('5A3','5A4','5A5','5A6') OR  SUBSTR(CATEGORY_SUPPLY,1,2) IN ('5B','5D','5T')) THEN 1 ELSE 0 END) LT5_OTHER\r\n" + 
							",sum(case when  (substr(reg_no,6,1) ='H')  then 1 else 0 end) ht\r\n" + 
							"\r\n" + 
							"FROM\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL A,SPDCLMASTER WHERE NCPARTCD=SECCD  \r\n" + 
							"AND (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) AND NVL(TOTAMT,0)  > 500 AND USCNO IS NULL AND EXISTS \r\n" + 
							"(select  reg_no from connection_responses r where  trunc(response_date) between TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY') AND CIRNAME=? AND DIVNAME=? and r.reg_no=a.reg_no and nvl(pending_at,'0') in ('4','20')))\r\n" + 
							"GROUP BY ROLLUP(SUBNAME) ORDER BY SUBNAME";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(SECNAME,'TOTAL')\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='1') THEN 1 ELSE 0 END) LT1\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='2') THEN 1 ELSE 0 END) LT2\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='3') THEN 1 ELSE 0 END) LT3\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='4') THEN 1 ELSE 0 END) LT4\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,3) IN ('5A1','5A2')) THEN 1 ELSE 0 END) LT5_AGL\r\n" + 
							",sum(case when  (substr(reg_no,6,1) in ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,3)  IN ('5A3','5A4','5A5','5A6') OR  SUBSTR(CATEGORY_SUPPLY,1,2) IN ('5B','5D','5T')) THEN 1 ELSE 0 END) LT5_OTHER\r\n" + 
							",sum(case when  (substr(reg_no,6,1) ='H')  then 1 else 0 end) ht\r\n" + 
							"\r\n" + 
							"FROM\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL A,SPDCLMASTER WHERE NCPARTCD=SECCD  \r\n" + 
							"AND (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) AND NVL(TOTAMT,0)  > 500 AND USCNO IS NULL AND EXISTS \r\n" + 
							"(select  reg_no from connection_responses r where  trunc(response_date) between TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY') AND CIRNAME=? AND DIVNAME=? AND SUBNAME=? and r.reg_no=a.reg_no and nvl(pending_at,'0') in ('4','20')))\r\n" + 
							"GROUP BY ROLLUP(SECNAME) ORDER BY SECNAME";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());
					reportPStmt.setString(5, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(CIRNAME,'TOTAL')\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='1') THEN 1 ELSE 0 END) LT1\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='2') THEN 1 ELSE 0 END) LT2\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='3') THEN 1 ELSE 0 END) LT3\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,1) ='4') THEN 1 ELSE 0 END) LT4\r\n" + 
							",SUM(CASE WHEN  (SUBSTR(REG_NO,6,1) IN ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,3) IN ('5A1','5A2')) THEN 1 ELSE 0 END) LT5_AGL\r\n" + 
							",sum(case when  (substr(reg_no,6,1) in ('S','N') AND SUBSTR(CATEGORY_SUPPLY,1,3)  IN ('5A3','5A4','5A5','5A6') OR  SUBSTR(CATEGORY_SUPPLY,1,2) IN ('5B','5D','5T')) THEN 1 ELSE 0 END) LT5_OTHER\r\n" + 
							",sum(case when  (substr(reg_no,6,1) ='H')  then 1 else 0 end) ht\r\n" + 
							"\r\n" + 
							"FROM\r\n" + 
							"(SELECT CIRNAME,REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL A,SPDCLMASTER WHERE NCPARTCD=SECCD  \r\n" + 
							"AND (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) AND NVL(TOTAMT,0)  > 500 AND USCNO IS NULL AND EXISTS \r\n" + 
							"(select  reg_no from connection_responses r where  trunc(response_date) between TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY') and r.reg_no=a.reg_no and nvl(pending_at,'0') in ('4','20')))\r\n" + 
							"GROUP BY ROLLUP(CIRNAME) ORDER BY CIRNAME";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getFrom_date());
					reportPStmt.setString(2, cscvo.getTo_date());
					//System.out.println("PaidApp_abstract"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setCat1Scs(reportRst.getInt(2));
							dmapobj.setCat2Scs(reportRst.getInt(3));
							dmapobj.setCat3Scs(reportRst.getInt(4));
							dmapobj.setCat4Scs(reportRst.getInt(5));

							dmapobj.setCat5Agl(reportRst.getInt(6));
							//dmapobj.setCat5Aqua(reportRst.getInt(8));
							dmapobj.setCat5Other(reportRst.getInt(7));
							// dmapobj.setTot_ltcat(reportRst.getInt(9));

							dmapobj.setHt_scs(reportRst.getInt(8));
							

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setCat1Scs(reportRst.getInt(2));
							dmapobj.setCat2Scs(reportRst.getInt(3));
							dmapobj.setCat3Scs(reportRst.getInt(4));
							dmapobj.setCat4Scs(reportRst.getInt(5));

							dmapobj.setCat5Agl(reportRst.getInt(6));
							
							dmapobj.setCat5Other(reportRst.getInt(7));
							

							dmapobj.setHt_scs(reportRst.getInt(8));
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	}
	public CscpayVO getJaganannaNesthamEstimate(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException {


		
		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {
                if ("DIV".equals(cscvo.getFlag())) {

					
                	String query = "SELECT NVL(DIVNAME,'ZTOTAL')DIVNAME,SUM(CASE WHEN NVL(CSTAT,'NA')='AE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END)AE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='FAPR'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END)ADE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='ADE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END)DE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='DE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END )SE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='SE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END )CGM\r\n" + 
							"FROM RAITHU_NESTHAM_ESTIMATE,MASTER.SPDCLMASTER WHERE SUBSTR(ZREGID,1,5)=SECCD  AND CIRCD NOT IN ('4','6','9','1')AND CIRNAME=? GROUP BY  ROLLUP (DIVNAME) ORDER BY DIVNAME";
					
					
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					//System.out.println(compRuralRegisQry);
					//System.out.println(cscvo.getCircle());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("div");
				} /*else if ("ERO".equals(cscvo.getFlag())) {
					String compRuralRegisQry = "";

					reportPStmt = con.prepareStatement(compRuralRegisQry);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportPStmt.setString(3, month);
					reportPStmt.setString(4, cscvo.getYear());

					// reportPStmt.setString(4, cscvo.getTo_date());
					reportRst = reportPStmt.executeQuery();
					//System.out.println("ero" + compRuralRegisQry);
				}*/ else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(SUBNAME,'ZTOTAL')SUBNAME,SUM(CASE WHEN NVL(CSTAT,'NA')='AE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END)AE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='FAPR'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END)ADE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='ADE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END)DE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='DE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END )SE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='SE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END )CGM\r\n" + 
							"FROM RAITHU_NESTHAM_ESTIMATE,MASTER.SPDCLMASTER WHERE SUBSTR(ZREGID,1,5)=SECCD  AND CIRCD NOT IN ('4','6','9','1')AND CIRNAME=? AND DIVNAME=? GROUP BY  ROLLUP (SUBNAME) ORDER BY SUBNAME";
					
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					
					

					// reportPStmt.setString(5, cscvo.getTo_date());
					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(SECNAME,'ZTOTAL')SECNAME,SUM(CASE WHEN NVL(CSTAT,'NA')='AE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END)AE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='FAPR'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END)ADE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='ADE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END)DE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='DE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END )SE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='SE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END )CGM\r\n" + 
							"FROM RAITHU_NESTHAM_ESTIMATE,MASTER.SPDCLMASTER WHERE SUBSTR(ZREGID,1,5)=SECCD  AND CIRCD NOT IN ('4','6','9','1')AND CIRNAME=? AND DIVNAME=? AND SUBNAME=? GROUP BY  ROLLUP (SECNAME) ORDER BY SECNAME";
					
					
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					
					reportPStmt.setString(3, cscvo.getSubDiv());
					

					// reportPStmt.setString(6, cscvo.getTo_date());
					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sec");
				} else {
					/*if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())){
						
					}*/

					
					
					
					String query = "SELECT NVL(CIRNAME,'ZTOTAL')CIRNAME,SUM(CASE WHEN NVL(CSTAT,'NA')='AE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END)AE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='FAPR'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END)ADE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='ADE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END)DE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='DE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END )SE\r\n" + 
							",SUM(CASE WHEN NVL(CSTAT,'NA')='SE'  AND NVL(POSID,'NA') <> 'NA'   THEN 1 ELSE 0 END )CGM\r\n" + 
							"FROM RAITHU_NESTHAM_ESTIMATE,MASTER.SPDCLMASTER WHERE SUBSTR(ZREGID,1,5)=SECCD  AND CIRCD NOT IN ('4','6','9','1') GROUP BY  ROLLUP (CIRNAME) ORDER BY CIRNAME";
					
					
					
					
					
					reportPStmt = con.prepareStatement(query);
					
					reportRst = reportPStmt.executeQuery();
					
					//System.out.println("getRaithuNesthamDetails :" + query);
				}

if (reportRst != null) {
	while (reportRst.next()) {

		if (cscmap.containsKey(reportRst.getString(1))) {

			CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

			    dmapobj.setNoofapp(reportRst.getString(2));
				dmapobj.setDelapp(reportRst.getString(3));
				dmapobj.setBalapp(reportRst.getString(4));
				dmapobj.setEstcreatedless15(reportRst.getString(5));
				dmapobj.setEstcreatedgtr15(reportRst.getString(6));
				/*dmapobj.setApptobeestless15(reportRst.getString(7));
				dmapobj.setApptobeestgtr15(reportRst.getString(8));
				dmapobj.setEstimatesSanapp(reportRst.getString(9));
				dmapobj.setNoofapppaid(reportRst.getString(10));
				dmapobj.setNoofapptobepaid(reportRst.getString(11));
				dmapobj.setServicereleasedless30(reportRst.getString(12));
				dmapobj.setServicereleasedgtr30(reportRst.getString(13));
				dmapobj.setBalscstobereleased(reportRst.getString(14));*/

		} else {
			CscpayVO dmapobj = new CscpayVO();

			   dmapobj.setNoofapp(reportRst.getString(2));
				dmapobj.setDelapp(reportRst.getString(3));
				dmapobj.setBalapp(reportRst.getString(4));
				dmapobj.setEstcreatedless15(reportRst.getString(5));
				dmapobj.setEstcreatedgtr15(reportRst.getString(6));
				/*dmapobj.setApptobeestless15(reportRst.getString(7));
				dmapobj.setApptobeestgtr15(reportRst.getString(8));
				dmapobj.setEstimatesSanapp(reportRst.getString(9));
				dmapobj.setNoofapppaid(reportRst.getString(10));
				dmapobj.setNoofapptobepaid(reportRst.getString(11));
				dmapobj.setServicereleasedless30(reportRst.getString(12));
				dmapobj.setServicereleasedgtr30(reportRst.getString(13));
				dmapobj.setBalscstobereleased(reportRst.getString(14));*/
			

			cscmap.put(reportRst.getString(1), dmapobj);
		}
	}
	cscvo.setCscpaymap(cscmap);

}

} else {
throw new DatabaseFailureException(
		"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
}
} finally {
try {
if (con != null) {

	DBConnectionManager.getInstance().freeConnection(con);
	con.close();
}
if (reportPStmt != null)
	reportPStmt.close();
if (reportRst != null)
	reportRst.close();
} catch (Exception ex) {
ex.printStackTrace();
}
}
return cscvo;
	
		
		
	
		
	}
		public CscpayVO getJaganannaNesthamPending(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
		InstantiationException, IllegalAccessException, ClassNotFoundException {

		
		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {
                if ("DIV".equals(cscvo.getFlag())) {

					
                	String query = "SELECT NVL(DIVNAME,'ZTOTAL')DIVNAME,SUM(CASE WHEN NVL(ZWFUSER,'NA')='AE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)AE\r\n" + 
                			",SUM(CASE WHEN NVL(ZWFUSER,'NA')='ADE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)ADE	\r\n" + 
                			",SUM(CASE WHEN NVL(ZWFUSER,'NA')='DE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)DE\r\n" + 
                			",SUM(CASE WHEN NVL(ZWFUSER,'NA')='SE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)SE\r\n" + 
                			",SUM(CASE WHEN NVL(ZWFUSER,'NA')='CGM'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)CGM\r\n" + 
                			"FROM RAITHU_NESTHAM,MASTER.SPDCLMASTER WHERE SUBSTR(ZREGID,1,5)=SECCD AND CIRCD NOT IN ('4','6','9','1')" + 
							"AND CIRNAME=? GROUP BY ROLLUP (DIVNAME)  ORDER BY DIVNAME";
					
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					//System.out.println(compRuralRegisQry);
					//System.out.println(cscvo.getCircle());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("div");
				} /*else if ("ERO".equals(cscvo.getFlag())) {
					String compRuralRegisQry = "";

					reportPStmt = con.prepareStatement(compRuralRegisQry);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportPStmt.setString(3, month);
					reportPStmt.setString(4, cscvo.getYear());

					// reportPStmt.setString(4, cscvo.getTo_date());
					reportRst = reportPStmt.executeQuery();
					//System.out.println("ero" + compRuralRegisQry);
				}*/ else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(SUBNAME,'ZTOTAL')SUBNAME,SUM(CASE WHEN NVL(ZWFUSER,'NA')='AE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)AE\r\n" + 
							",SUM(CASE WHEN NVL(ZWFUSER,'NA')='ADE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)ADE	\r\n" + 
							",SUM(CASE WHEN NVL(ZWFUSER,'NA')='DE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)DE\r\n" + 
							",SUM(CASE WHEN NVL(ZWFUSER,'NA')='SE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)SE\r\n" + 
							",SUM(CASE WHEN NVL(ZWFUSER,'NA')='CGM'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)CGM\r\n" + 
							"FROM RAITHU_NESTHAM,MASTER.SPDCLMASTER WHERE SUBSTR(ZREGID,1,5)=SECCD AND CIRCD NOT IN ('4','6','9','1')" + 
							"AND CIRNAME=? AND DIVNAME=? GROUP BY ROLLUP (SUBNAME)  ORDER BY SUBNAME";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					
					

					// reportPStmt.setString(5, cscvo.getTo_date());
					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(SECNAME,'ZTOTAL')SECNAME,SUM(CASE WHEN NVL(ZWFUSER,'NA')='AE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)AE\r\n" + 
							",SUM(CASE WHEN NVL(ZWFUSER,'NA')='ADE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)ADE	\r\n" + 
							",SUM(CASE WHEN NVL(ZWFUSER,'NA')='DE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)DE\r\n" + 
							",SUM(CASE WHEN NVL(ZWFUSER,'NA')='SE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)SE\r\n" + 
							",SUM(CASE WHEN NVL(ZWFUSER,'NA')='CGM'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)CGM\r\n" + 
							"FROM RAITHU_NESTHAM,MASTER.SPDCLMASTER WHERE SUBSTR(ZREGID,1,5)=SECCD AND CIRCD NOT IN ('4','6','9','1')" + 
							"AND CIRNAME=? AND DIVNAME=? AND SUBNAME=? GROUP BY ROLLUP (SECNAME)  ORDER BY SECNAME";
					
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					
					reportPStmt.setString(3, cscvo.getSubDiv());
					

					// reportPStmt.setString(6, cscvo.getTo_date());
					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sec");
				} else {
					/*if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())){
						
					}*/

					
					
					
					String query = "SELECT NVL(CIRNAME,'ZTOTAL')CIRNAME,SUM(CASE WHEN NVL(ZWFUSER,'NA')='AE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)AE\r\n" + 
							",SUM(CASE WHEN NVL(ZWFUSER,'NA')='ADE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)ADE	\r\n" + 
							",SUM(CASE WHEN NVL(ZWFUSER,'NA')='DE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)DE\r\n" + 
							",SUM(CASE WHEN NVL(ZWFUSER,'NA')='SE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA' THEN 1 ELSE 0 END)SE\r\n" + 
							",SUM(CASE WHEN NVL(ZWFUSER,'NA')='CGM'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)CGM\r\n" + 
							"FROM RAITHU_NESTHAM,MASTER.SPDCLMASTER WHERE SUBSTR(ZREGID,1,5)=SECCD AND CIRCD NOT IN ('4','6','9','1')" + 
							"GROUP BY ROLLUP (CIRNAME)  ORDER BY CIRNAME";
					
					
					
					
					
					reportPStmt = con.prepareStatement(query);
					
					reportRst = reportPStmt.executeQuery();
					
					//System.out.println("getRaithuNesthamDetails :" + query);
				}

if (reportRst != null) {
	while (reportRst.next()) {

		if (cscmap.containsKey(reportRst.getString(1))) {

			CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

			    dmapobj.setNoofapp(reportRst.getString(2));
				dmapobj.setDelapp(reportRst.getString(3));
				dmapobj.setBalapp(reportRst.getString(4));
				dmapobj.setEstcreatedless15(reportRst.getString(5));
				dmapobj.setEstcreatedgtr15(reportRst.getString(6));
				/*dmapobj.setApptobeestless15(reportRst.getString(7));
				dmapobj.setApptobeestgtr15(reportRst.getString(8));
				dmapobj.setEstimatesSanapp(reportRst.getString(9));
				dmapobj.setNoofapppaid(reportRst.getString(10));
				dmapobj.setNoofapptobepaid(reportRst.getString(11));
				dmapobj.setServicereleasedless30(reportRst.getString(12));
				dmapobj.setServicereleasedgtr30(reportRst.getString(13));
				dmapobj.setBalscstobereleased(reportRst.getString(14));*/

		} else {
			CscpayVO dmapobj = new CscpayVO();

			    dmapobj.setNoofapp(reportRst.getString(2));
				dmapobj.setDelapp(reportRst.getString(3));
				dmapobj.setBalapp(reportRst.getString(4));
				dmapobj.setEstcreatedless15(reportRst.getString(5));
				dmapobj.setEstcreatedgtr15(reportRst.getString(6));
				/*dmapobj.setApptobeestless15(reportRst.getString(7));
				dmapobj.setApptobeestgtr15(reportRst.getString(8));
				dmapobj.setEstimatesSanapp(reportRst.getString(9));
				dmapobj.setNoofapppaid(reportRst.getString(10));
				dmapobj.setNoofapptobepaid(reportRst.getString(11));
				dmapobj.setServicereleasedless30(reportRst.getString(12));
				dmapobj.setServicereleasedgtr30(reportRst.getString(13));
				dmapobj.setBalscstobereleased(reportRst.getString(14));*/
			

			cscmap.put(reportRst.getString(1), dmapobj);
		}
	}
	cscvo.setCscpaymap(cscmap);

}

} else {
throw new DatabaseFailureException(
		"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
}
} finally {
try {
if (con != null) {

	DBConnectionManager.getInstance().freeConnection(con);
	con.close();
}
if (reportPStmt != null)
	reportPStmt.close();
if (reportRst != null)
	reportRst.close();
} catch (Exception ex) {
ex.printStackTrace();
}
}
return cscvo;
	
	
		
	}
	
	
	public CscpayVO getJaganannaNesthamDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
			InstantiationException, IllegalAccessException, ClassNotFoundException {
		
		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {
                if ("DIV".equals(cscvo.getFlag())) {

					
					String query = "SELECT NVL(DIVNAME,'ZTOTAL')AS DIVNAME,SUM(CASE WHEN ZREGID IS NOT NULL THEN 1 ELSE 0 END)NO_OF_APP\r\n" + 
							"           ,SUM(CASE WHEN NVL(REGIND,'NA')='X' AND NVL(POSID,'NA') ='NA' THEN 1 ELSE 0 END)DEL_APP\r\n" + 
							"           ,SUM(CASE WHEN ZREGID IS NOT NULL THEN 1 ELSE 0 END)-SUM(CASE WHEN NVL(REGIND,'NA')='X'  THEN 1 ELSE 0 END)BAL_APP\r\n" + 
							"           ,SUM(CASE WHEN NVL(WBSIND,'NA')='X' AND POSID IS NOT NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)EST_WITH_IN_SOP\r\n" + 
							"           ,SUM(CASE WHEN NVL(WBSIND,'NA') ='NA' AND POSID IS NOT NULL AND ZREGID IS NOT NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)EST_BEYOND_SOP\r\n" + 
							"           ,SUM(CASE WHEN NVL(ZNDAPP,'0') >=0 AND NVL(ZNDAPP,'0') <=15 AND ZREGID IS NOT NULL AND POSID IS NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)APP_TOBE_EST_LESS15\r\n" + 
							"           ,SUM(CASE WHEN NVL(ZNDAPP,'0') > 15 AND ZREGID IS NOT NULL AND POSID IS NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)APP_TOBE_EST_GRA15\r\n" + 
							"           ,SUM(CASE WHEN NVL(ESAPP,'NA') ='X'  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)EST_SAN\r\n" + 
							"           ,SUM(CASE WHEN PAYDT IS NOT NULL  AND ZREGID IS NOT NULL AND NVL(ESAPP,'NA') ='X' THEN 1 ELSE 0 END)PAID_APP\r\n" + 
							"           ,SUM(CASE WHEN NVL(ESAPP,'NA') ='X'  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)-SUM(CASE WHEN PAYDT IS NOT NULL  AND ZREGID IS NOT NULL AND NVL(ESAPP,'NA') ='X' THEN 1 ELSE 0 END)TO_BE_PAID\r\n" + 
							"           ,SUM(CASE WHEN NVL(SUPIND,'NA') ='X' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)SER_REL_PAY_LESS30\r\n" + 
							"           ,SUM(CASE WHEN NVL(SUPIND,'NA')='NA' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)SER_REL_PAY_GRA30\r\n" + 
							"           ,SUM(CASE WHEN PAYDT IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)-SUM(CASE WHEN NVL(SUPIND,'NA') ='X' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)-\r\n" + 
							"     SUM(CASE WHEN NVL(SUPIND,'NA')='NA' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)SER_TOBE_REL\r\n" + 
							"FROM RAITHU_NESTHAM,MASTER.SPDCLMASTER WHERE SUBSTR(ZREGID,1,5)=SECCD AND CIRCD NOT IN ('4','6','9','1')" + 
							"AND CIRNAME=? GROUP BY ROLLUP(DIVNAME) ORDER BY DIVNAME";
					
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					//System.out.println(compRuralRegisQry);
					//System.out.println(cscvo.getCircle());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("div");
				} /*else if ("ERO".equals(cscvo.getFlag())) {
					String compRuralRegisQry = "";

					reportPStmt = con.prepareStatement(compRuralRegisQry);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportPStmt.setString(3, month);
					reportPStmt.setString(4, cscvo.getYear());

					// reportPStmt.setString(4, cscvo.getTo_date());
					reportRst = reportPStmt.executeQuery();
					//System.out.println("ero" + compRuralRegisQry);
				}*/ else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(SUBNAME,'ZTOTAL')AS SUBNAME,SUM(CASE WHEN ZREGID IS NOT NULL THEN 1 ELSE 0 END)NO_OF_APP\r\n" + 
							"           ,SUM(CASE WHEN NVL(REGIND,'NA')='X' AND NVL(POSID,'NA') ='NA' THEN 1 ELSE 0 END)DEL_APP\r\n" + 
							"           ,SUM(CASE WHEN ZREGID IS NOT NULL THEN 1 ELSE 0 END)-SUM(CASE WHEN NVL(REGIND,'NA')='X'  THEN 1 ELSE 0 END)BAL_APP\r\n" + 
							"           ,SUM(CASE WHEN NVL(WBSIND,'NA')='X' AND POSID IS NOT NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)EST_WITH_IN_SOP\r\n" + 
							"           ,SUM(CASE WHEN NVL(WBSIND,'NA') ='NA' AND POSID IS NOT NULL AND ZREGID IS NOT NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)EST_BEYOND_SOP\r\n" + 
							"           ,SUM(CASE WHEN NVL(ZNDAPP,'0') >=0 AND NVL(ZNDAPP,'0') <=15 AND ZREGID IS NOT NULL AND POSID IS NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)APP_TOBE_EST_LESS15\r\n" + 
							"           ,SUM(CASE WHEN NVL(ZNDAPP,'0') > 15 AND ZREGID IS NOT NULL AND POSID IS NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)APP_TOBE_EST_GRA15\r\n" + 
							"           ,SUM(CASE WHEN NVL(ESAPP,'NA') ='X'  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)EST_SAN\r\n" + 
							"           ,SUM(CASE WHEN PAYDT IS NOT NULL  AND ZREGID IS NOT NULL AND NVL(ESAPP,'NA') ='X' THEN 1 ELSE 0 END)PAID_APP\r\n" + 
							"           ,SUM(CASE WHEN NVL(ESAPP,'NA') ='X'  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)-SUM(CASE WHEN PAYDT IS NOT NULL  AND ZREGID IS NOT NULL AND NVL(ESAPP,'NA') ='X' THEN 1 ELSE 0 END)TO_BE_PAID\r\n" + 
							"           ,SUM(CASE WHEN NVL(SUPIND,'NA') ='X' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)SER_REL_PAY_LESS30\r\n" + 
							"           ,SUM(CASE WHEN NVL(SUPIND,'NA')='NA' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)SER_REL_PAY_GRA30\r\n" + 
							"           ,SUM(CASE WHEN PAYDT IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)-SUM(CASE WHEN NVL(SUPIND,'NA') ='X' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)-\r\n" + 
							"     SUM(CASE WHEN NVL(SUPIND,'NA')='NA' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)SER_TOBE_REL\r\n" + 
							"FROM RAITHU_NESTHAM,MASTER.SPDCLMASTER WHERE SUBSTR(ZREGID,1,5)=SECCD AND CIRCD NOT IN ('4','6','9','1')" + 
							"AND CIRNAME=? AND DIVNAME=? GROUP BY ROLLUP(SUBNAME) ORDER BY SUBNAME";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					
					

					// reportPStmt.setString(5, cscvo.getTo_date());
					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(SECNAME,'ZTOTAL')AS SECNAME,SUM(CASE WHEN ZREGID IS NOT NULL THEN 1 ELSE 0 END)NO_OF_APP\r\n" + 
							"           ,SUM(CASE WHEN NVL(REGIND,'NA')='X' AND NVL(POSID,'NA') ='NA' THEN 1 ELSE 0 END)DEL_APP\r\n" + 
							"           ,SUM(CASE WHEN ZREGID IS NOT NULL THEN 1 ELSE 0 END)-SUM(CASE WHEN NVL(REGIND,'NA')='X'  THEN 1 ELSE 0 END)BAL_APP\r\n" + 
							"           ,SUM(CASE WHEN NVL(WBSIND,'NA')='X' AND POSID IS NOT NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)EST_WITH_IN_SOP\r\n" + 
							"           ,SUM(CASE WHEN NVL(WBSIND,'NA') ='NA' AND POSID IS NOT NULL AND ZREGID IS NOT NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)EST_BEYOND_SOP\r\n" + 
							"           ,SUM(CASE WHEN NVL(ZNDAPP,'0') >=0 AND NVL(ZNDAPP,'0') <=15 AND ZREGID IS NOT NULL AND POSID IS NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)APP_TOBE_EST_LESS15\r\n" + 
							"           ,SUM(CASE WHEN NVL(ZNDAPP,'0') > 15 AND ZREGID IS NOT NULL AND POSID IS NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)APP_TOBE_EST_GRA15\r\n" + 
							"           ,SUM(CASE WHEN NVL(ESAPP,'NA') ='X'  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)EST_SAN\r\n" + 
							"           ,SUM(CASE WHEN PAYDT IS NOT NULL  AND ZREGID IS NOT NULL AND NVL(ESAPP,'NA') ='X' THEN 1 ELSE 0 END)PAID_APP\r\n" + 
							"           ,SUM(CASE WHEN NVL(ESAPP,'NA') ='X'  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)-SUM(CASE WHEN PAYDT IS NOT NULL  AND ZREGID IS NOT NULL AND NVL(ESAPP,'NA') ='X' THEN 1 ELSE 0 END)TO_BE_PAID\r\n" + 
							"           ,SUM(CASE WHEN NVL(SUPIND,'NA') ='X' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)SER_REL_PAY_LESS30\r\n" + 
							"           ,SUM(CASE WHEN NVL(SUPIND,'NA')='NA' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)SER_REL_PAY_GRA30\r\n" + 
							"           ,SUM(CASE WHEN PAYDT IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)-SUM(CASE WHEN NVL(SUPIND,'NA') ='X' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)-\r\n" + 
							"     SUM(CASE WHEN NVL(SUPIND,'NA')='NA' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)SER_TOBE_REL\r\n" + 
							"FROM RAITHU_NESTHAM,MASTER.SPDCLMASTER WHERE SUBSTR(ZREGID,1,5)=SECCD AND CIRCD NOT IN ('4','6','9','1')" + 
							"AND CIRNAME=? AND DIVNAME=?  AND SUBNAME=? GROUP BY ROLLUP(SECNAME) ORDER BY SECNAME";
					
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					
					reportPStmt.setString(3, cscvo.getSubDiv());
					

					// reportPStmt.setString(6, cscvo.getTo_date());
					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sec");
				} else {
					/*if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())){
						
					}*/

					
					
					String query = "SELECT NVL(CIRNAME,'ZTOTAL')CIRNAME,SUM(CASE WHEN ZREGID IS NOT NULL THEN 1 ELSE 0 END)NO_OF_APP\r\n" + 
							"           ,SUM(CASE WHEN NVL(REGIND,'NA')='X' AND NVL(POSID,'NA') ='NA' THEN 1 ELSE 0 END)DEL_APP\r\n" + 
							"           ,SUM(CASE WHEN ZREGID IS NOT NULL THEN 1 ELSE 0 END)-SUM(CASE WHEN NVL(REGIND,'NA')='X'  THEN 1 ELSE 0 END)BAL_APP\r\n" + 
							"           ,SUM(CASE WHEN NVL(WBSIND,'NA')='X' AND POSID IS NOT NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)EST_WITH_IN_SOP\r\n" + 
							"           ,SUM(CASE WHEN NVL(WBSIND,'NA') ='NA' AND POSID IS NOT NULL AND ZREGID IS NOT NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)EST_BEYOND_SOP\r\n" + 
							"           ,SUM(CASE WHEN NVL(ZNDAPP,'0') >=0 AND NVL(ZNDAPP,'0') <=15 AND ZREGID IS NOT NULL AND POSID IS NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)APP_TOBE_EST_LESS15\r\n" + 
							"           ,SUM(CASE WHEN NVL(ZNDAPP,'0') > 15 AND ZREGID IS NOT NULL AND POSID IS NULL AND NVL(REGIND,'NA')='NA' THEN 1 ELSE 0 END)APP_TOBE_EST_GRA15\r\n" + 
							"           ,SUM(CASE WHEN NVL(ESAPP,'NA') ='X'  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)EST_SAN\r\n" + 
							"           ,SUM(CASE WHEN PAYDT IS NOT NULL  AND ZREGID IS NOT NULL AND NVL(ESAPP,'NA') ='X' THEN 1 ELSE 0 END)PAID_APP\r\n" + 
							"           ,SUM(CASE WHEN NVL(ESAPP,'NA') ='X'  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)-SUM(CASE WHEN PAYDT IS NOT NULL  AND ZREGID IS NOT NULL AND NVL(ESAPP,'NA') ='X' THEN 1 ELSE 0 END)TO_BE_PAID\r\n" + 
							"           ,SUM(CASE WHEN NVL(SUPIND,'NA') ='X' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)SER_REL_PAY_LESS30\r\n" + 
							"           ,SUM(CASE WHEN NVL(SUPIND,'NA')='NA' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)SER_REL_PAY_GRA30\r\n" + 
							"           ,SUM(CASE WHEN PAYDT IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)-SUM(CASE WHEN NVL(SUPIND,'NA') ='X' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)-\r\n" + 
							"     SUM(CASE WHEN NVL(SUPIND,'NA')='NA' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL THEN 1 ELSE 0 END)SER_TOBE_REL\r\n" + 
							"FROM RAITHU_NESTHAM,MASTER.SPDCLMASTER WHERE SUBSTR(ZREGID,1,5)=SECCD AND CIRCD NOT IN ('4','6','9','1')" + 
							"GROUP BY ROLLUP (CIRNAME) ORDER BY CIRNAME";
					
					
					
					
					
					reportPStmt = con.prepareStatement(query);
					
					reportRst = reportPStmt.executeQuery();
					
					//System.out.println("getRaithuNesthamDetails :" + query);
				}

if (reportRst != null) {
	while (reportRst.next()) {

		if (cscmap.containsKey(reportRst.getString(1))) {

			CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

			    dmapobj.setNoofapp(reportRst.getString(2));
				dmapobj.setDelapp(reportRst.getString(3));
				dmapobj.setBalapp(reportRst.getString(4));
				dmapobj.setEstcreatedless15(reportRst.getString(5));
				dmapobj.setEstcreatedgtr15(reportRst.getString(6));
				dmapobj.setApptobeestless15(reportRst.getString(7));
				dmapobj.setApptobeestgtr15(reportRst.getString(8));
				dmapobj.setEstimatesSanapp(reportRst.getString(9));
				dmapobj.setNoofapppaid(reportRst.getString(10));
				dmapobj.setNoofapptobepaid(reportRst.getString(11));
				dmapobj.setServicereleasedless30(reportRst.getString(12));
				dmapobj.setServicereleasedgtr30(reportRst.getString(13));
				dmapobj.setBalscstobereleased(reportRst.getString(14));

		} else {
			CscpayVO dmapobj = new CscpayVO();

			   dmapobj.setNoofapp(reportRst.getString(2));
				dmapobj.setDelapp(reportRst.getString(3));
				dmapobj.setBalapp(reportRst.getString(4));
				dmapobj.setEstcreatedless15(reportRst.getString(5));
				dmapobj.setEstcreatedgtr15(reportRst.getString(6));
				dmapobj.setApptobeestless15(reportRst.getString(7));
				dmapobj.setApptobeestgtr15(reportRst.getString(8));
				dmapobj.setEstimatesSanapp(reportRst.getString(9));
				dmapobj.setNoofapppaid(reportRst.getString(10));
				dmapobj.setNoofapptobepaid(reportRst.getString(11));
				dmapobj.setServicereleasedless30(reportRst.getString(12));
				dmapobj.setServicereleasedgtr30(reportRst.getString(13));
				dmapobj.setBalscstobereleased(reportRst.getString(14));
			

			cscmap.put(reportRst.getString(1), dmapobj);
		}
	}
	cscvo.setCscpaymap(cscmap);

}

} else {
throw new DatabaseFailureException(
		"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
}
} finally {
try {
if (con != null) {

	DBConnectionManager.getInstance().freeConnection(con);
	con.close();
}
if (reportPStmt != null)
	reportPStmt.close();
if (reportRst != null)
	reportRst.close();
} catch (Exception ex) {
ex.printStackTrace();
}
}
return cscvo;
	}
	
	// Cat Wise Service release
		public CscpayVO getCatwiseServiceRelDetails1(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
		InstantiationException, IllegalAccessException, ClassNotFoundException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		
		try {
			if (con != null) {

				
					String query = "SELECT\r\n" + 
							"nvl(S.SECNAME,'TOTAL')\r\n" + 
							", SUM(NVL(R.CAT1,0))LT1\r\n" + 
							",SUM(NVL(R.CAT2,0))LT2\r\n" + 
							",SUM(NVL(R.CAT3,0)) LT3\r\n" + 
							",SUM(NVL(R.CAT4,0))LT4\r\n" + 
							",SUM(NVL(R.CAT5,0))LT5\r\n" + 
							",SUM(NVL(R.CAT5OTH,0))LT5OTH\r\n" + 
							",SUM(NVL(R.AQUA,0)) AQUA\r\n" + 
							",SUM(NVL(R.HT,0)) HT FROM  REP_CSC R,SPDCLMASTER S,CSCAPPUSERS C\r\n" + 
							"where S.SECCD=C.USER_SUBDIV_CODE\r\n" + 
							"AND R.SECNAME=S.SECNAME\r\n" + 
							"AND USER_ID='"+cscvo.getLoginusername()+"'" + 
							"GROUP BY  ROLLUP (S.SECNAME)";
					
					reportPStmt = con.prepareStatement(query);
					System.out.println(cscvo.getLoginusername());
					System.out.println(query);
					reportRst = reportPStmt.executeQuery();
					//System.out.println("CATWISE:"+query);
				
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setCat1Scs(reportRst.getInt(2));
							dmapobj.setCat2Scs(reportRst.getInt(3));
							dmapobj.setCat3Scs(reportRst.getInt(4));
							dmapobj.setCat4Scs(reportRst.getInt(5));

							dmapobj.setCat5Agl(reportRst.getInt(6));
							dmapobj.setCat5Aqua(reportRst.getInt(8));
							dmapobj.setCat5Other(reportRst.getInt(7));
							// dmapobj.setTot_ltcat(reportRst.getInt(9));

							dmapobj.setHt_scs(reportRst.getInt(9));
							// dmapobj.setTot_cat(reportRst.getInt(11));

							// dmapobj.setHt_new(reportRst.getInt(2));
							// dmapobj.setHt_addi(reportRst.getInt(3));
							// dmapobj.setHt_lt3(reportRst.getInt(4));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setCat1Scs(reportRst.getInt(2));
							dmapobj.setCat2Scs(reportRst.getInt(3));
							dmapobj.setCat3Scs(reportRst.getInt(4));
							dmapobj.setCat4Scs(reportRst.getInt(5));

							dmapobj.setCat5Agl(reportRst.getInt(6));
							dmapobj.setCat5Aqua(reportRst.getInt(8));
							dmapobj.setCat5Other(reportRst.getInt(7));
							// dmapobj.setTot_ltcat(reportRst.getInt(9));

							dmapobj.setHt_scs(reportRst.getInt(9));
							// dmapobj.setTot_cat(reportRst.getInt(11));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// export Servic e wise released details

	// export HT/CT Meter Released

	public void exportCatwiseSerRelDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		// String connectionURL = "jdbc:oracle:thin:@10.16.1.181:1528:PRODCBS";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL,
		// "SPDCLMIS", "SPDCL123MIS");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				// if
				// ("RelesedAfterPaidByConsumer".equalsIgnoreCase(cscvo.getStatus()))
				// {
				if ("CAT1".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  N.CATEGORY  LIKE '1%'  and SUBSTR(N.REG_NO,6,1) not in('H')  ";// and
					// SUPPLY_RELEASE_DATE
					// between
					// '"+cscvo.getFrom_date()+"'
					// AND
					// '"+cscvo.getTo_date()+"'";
				} else if ("CAT2".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  N.CATEGORY  LIKE '2%'   and SUBSTR(N.REG_NO,6,1) not in('H')  ";// and
					// SUPPLY_RELEASE_DATE
					// between
					// '"+cscvo.getFrom_date()+"'
					// AND
					// '"+cscvo.getTo_date()+"'";
				} else if ("CAT3".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and N.CATEGORY  LIKE '3%'  and SUBSTR(N.REG_NO,6,1) not in('H')   ";// and
					// SUPPLY_RELEASE_DATE
					// between
					// '"+cscvo.getFrom_date()+"'
					// AND
					// '"+cscvo.getTo_date()+"'";
				} else if ("CAT4".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  N.CATEGORY  LIKE '4%'  and SUBSTR(N.REG_NO,6,1) not in('H')  ";// and
					// SUPPLY_RELEASE_DATE
					// between
					// '"+cscvo.getFrom_date()+"'
					// AND
					// '"+cscvo.getTo_date()+"'";
				} else if ("CAT5AGL".equalsIgnoreCase(cscvo.getCtype())) {
					// status = " and SUBSTR(N.CAT_SUBCAT,1,3) IN ('5A2','5A1')
					// ";
					status = " and SUBSTR(N.CATEGORY,1,4) IN ('5-A2','5-A1')  and SUBSTR(N.REG_NO,6,1) not in('H')  ";

					// and SUPPLY_RELEASE_DATE between
					// '"+cscvo.getFrom_date()+"' AND '"+cscvo.getTo_date()+"'";
				} else if ("CAT5AQUA".equalsIgnoreCase(cscvo.getCtype())) {
					// status = " and SUBSTR(N.CAT_SUBCAT,1,2) IN ('5B') ";
					status = "  and SUBSTR(N.CATEGORY,1,3) IN ('5-B')  and SUBSTR(N.REG_NO,6,1) not in('H') "; // and
					// SUPPLY_RELEASE_DATE
					// between
					// '"+cscvo.getFrom_date()+"'
					// AND
					// '"+cscvo.getTo_date()+"'";
				} else if ("CAT5Other".equalsIgnoreCase(cscvo.getCtype())) {
					// status = " and (SUBSTR(N.CAT_SUBCAT ,1,3) IN
					// ('5A3','5A4','5A5','5A6') OR (SUBSTR(N.CAT_SUBCAT ,1,2)
					// IN ('5D','5T'))) ";//and SUPPLY_RELEASE_DATE between
					// '"+cscvo.getFrom_date()+"' AND '"+cscvo.getTo_date()+"'";
					// status = " and (SUBSTR(N.CAT_SUBCAT ,1,4) IN
					// ('5-A3','5-A4','5-A5','5-A6') OR (SUBSTR(N.CAT_SUBCAT
					// ,1,3) IN ('5-D','5-T'))) ";
					status = " and  (SUBSTR(N.CATEGORY ,1,4) IN ('5-A3','5-A4','5-A5','5-A6') OR (SUBSTR(N.CATEGORY ,1,3) IN ('5-D','5-T')))  and SUBSTR(N.REG_NO,6,1) not in('H')  ";

				} else if ("CATTotal".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and SUBSTR(N.REG_NO,6,1) not in('H') ";// and
																		// SUPPLY_RELEASE_DATE
																		// between
																		// '"+cscvo.getFrom_date()+"'
																		// AND
																		// '"+cscvo.getTo_date()+"'";
				} else if ("HT".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  SUBSTR(N.REG_NO,6,1)='H' ";// and
																// SUPPLY_RELEASE_DATE
																// between
																// '"+cscvo.getFrom_date()+"'
																// AND
																// '"+cscvo.getTo_date()+"'";
				} else {
					// status = " (SUBSTR(REG_NO,6,1)='H')) or
					// ((SUBSTR(REG_NO,6,1)='L')) ";//// and SUPPLY_RELEASE_DATE
					// between '"+cscvo.getFrom_date()+"' AND
					// '"+cscvo.getTo_date()+"'";
					status = "  ";
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						/*
						 * resultSet = statement.executeQuery(
						 * " select s.cirname,S.DIVNAME,S.SECNAME,A.USCNO,CMCNAME AS CONSUMER_NAME,CMCAT,CMCTRLOAD,INSPECTIONDATE AS DATE_OF_CHARGE from"
						 * +
						 * " (select distinct circd,cirname,DIVCD,DIVNAME,subname,subcd,SECCD,SECNAME from spdclmaster)s,"
						 * +
						 * " (select substr(USCNO,0,1) circd,substr(USCNO,0,2) DIVCD,substr(USCNO,0,5) SECCD,USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE from ONLINEHTINSPECTIONREPORT where "
						 * + status +
						 * " group by  substr(USCNO,0,1),substr(USCNO,0,2),substr(USCNO,0,5),USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE)a"
						 * +
						 * " where s.circd=a.circd(+) AND s.DIVCD=a.DIVCD(+) AND  s.SECCD=a.SECCD(+)  and s.circd not in (1,4,6,9) and  divname='"
						 * + cscvo.getDivision() + "' AND USCNO IS NOT NULL");
						 */
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.CONTRACTED_LOAD,TRIM(N.CATEGORY_TYPE),N.CAT_SUBCAT,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PRDATE,N.MESEVA_REF,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE)REG_RELEASE,CEIL(N.PAY_RELEASE)PAY_RELEASE,N.ESTSTATUS,N.INTIMATE_DATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) CATEGORY_TYPE , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PRDATE,MESEVA_REF,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,ESTSTATUS,INTIMATE_DATE,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CAT_SUBCAT,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE  between to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD AND S.CIRNAME='"+
						 * cscvo.getCircle() + "'  AND S.DIVNAME='"+
						 * cscvo.getDivision() + "'" + " "+status+ "");
						 */
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,S.DIVNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PAID_DATE,"
						 * +
						 * " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
						 * +
						 * " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD " + "  AND S.CIRNAME='"
						 * +cscvo.getCircle()+ "'AND S.DIVNAME='"+
						 * cscvo.getDivision() + "'" + "  "+status+ " ");
						 */
						resultSet = statement.executeQuery(
								" select S.CIRNAME,S.DIVNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
										+ " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT"
										// + " ,MAXPRDT PAID_DATE,"
										+ "	,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,"
										+ " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
										+ " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
										+ " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
										+ " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'"
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, "
										+ " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'"
										+ " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
										+ " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','dd-mm-yyyy') AND to_date('" + cscvo.getTo_date()
										+ "','dd-mm-yyyy') )N,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE N.NCPARTCD=S.SECCD" + "  AND S.CIRNAME='" + cscvo.getCircle()
										+ "'AND S.DIVNAME='" + cscvo.getDivision() + "'" + "  " + status + "");
					} else {
						/*
						 * resultSet = statement.executeQuery(
						 * " select s.cirname,S.DIVNAME,S.SECNAME,A.USCNO,CMCNAME AS CONSUMER_NAME,CMCAT,CMCTRLOAD,INSPECTIONDATE AS DATE_OF_CHARGE from"
						 * +
						 * " (select distinct circd,cirname,DIVCD,DIVNAME,subname,subcd,SECCD,SECNAME from spdclmaster)s,"
						 * +
						 * " (select substr(USCNO,0,1) circd,substr(USCNO,0,2) DIVCD,substr(USCNO,0,5) SECCD,USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE from ONLINEHTINSPECTIONREPORT where "
						 * + status +
						 * " group by  substr(USCNO,0,1),substr(USCNO,0,2),substr(USCNO,0,5),USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE)a"
						 * +
						 * " where s.circd=a.circd(+) AND s.DIVCD=a.DIVCD(+) AND  s.SECCD=a.SECCD(+)  and s.circd not in (1,4,6,9) and  cirname='"
						 * + cscvo.getCircle() + "' AND USCNO IS NOT NULL");
						 */
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.CONTRACTED_LOAD,TRIM(N.CATEGORY_TYPE),N.CAT_SUBCAT,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PRDATE,N.MESEVA_REF,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE)REG_RELEASE,CEIL(N.PAY_RELEASE)PAY_RELEASE,N.ESTSTATUS,N.INTIMATE_DATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) CATEGORY_TYPE , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PRDATE,MESEVA_REF,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,ESTSTATUS,INTIMATE_DATE,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CAT_SUBCAT,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE  between  to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD AND S.CIRNAME='"+
						 * cscvo.getCircle() + "'" + " "+status+ "");
						 */
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,S.DIVNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PAID_DATE,"
						 * +
						 * " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
						 * +
						 * " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD " + "  AND S.CIRNAME='"
						 * +cscvo.getCircle()+ "'" + "  "+status+ " ");
						 */
						resultSet = statement.executeQuery(
								" select S.CIRNAME,S.DIVNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
										+ " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT"
										// + " ,MAXPRDT PAID_DATE,"
										+ "	,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,"
										+ " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
										+ " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
										+ " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
										+ " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'"
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, "
										+ " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'"
										+ " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
										+ " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','dd-mm-yyyy') AND to_date('" + cscvo.getTo_date()
										+ "','dd-mm-yyyy') )N,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE N.NCPARTCD=S.SECCD" + "  AND S.CIRNAME='" + cscvo.getCircle() + "'"
										+ "  " + status + "");
					}

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						/*
						 * resultSet = statement.executeQuery(
						 * " select s.cirname,S.DIVNAME,S.SECNAME,A.USCNO,CMCNAME AS CONSUMER_NAME,CMCAT,CMCTRLOAD,INSPECTIONDATE AS DATE_OF_CHARGE from"
						 * +
						 * " (select distinct circd,cirname,DIVCD,DIVNAME,SECCD,subname,subcd,SECNAME from spdclmaster)s,"
						 * +
						 * " (select substr(USCNO,0,1) circd,substr(USCNO,0,2) DIVCD,substr(USCNO,0,5) SECCD,USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE from ONLINEHTINSPECTIONREPORT where "
						 * + status +
						 * " group by  substr(USCNO,0,1),substr(USCNO,0,2),substr(USCNO,0,5),USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE)a"
						 * +
						 * " where s.circd=a.circd(+) AND s.DIVCD=a.DIVCD(+) AND  s.SECCD=a.SECCD(+)  and s.circd not in (1,4,6,9) and  subname='"
						 * + cscvo.getSubDiv() + "' AND USCNO IS NOT NULL");
						 */
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.CONTRACTED_LOAD,TRIM(N.CATEGORY_TYPE),N.CAT_SUBCAT,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PRDATE,N.MESEVA_REF,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE)REG_RELEASE,CEIL(N.PAY_RELEASE)PAY_RELEASE,N.ESTSTATUS,N.INTIMATE_DATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) CATEGORY_TYPE , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PRDATE,MESEVA_REF,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,ESTSTATUS,INTIMATE_DATE,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CAT_SUBCAT,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE  between  to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD AND S.CIRNAME='"+
						 * cscvo.getCircle() + "'  AND S.DIVNAME='"+
						 * cscvo.getDivision() + "'  AND S.SUBNAME='"+
						 * cscvo.getSubDiv() + "'" + " "+status+ "");
						 */
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,S.DIVNAME,S.SUBNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PAID_DATE,"
						 * +
						 * " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
						 * +
						 * " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD " + "  AND S.CIRNAME='"+
						 * cscvo.getCircle() + "'  AND S.DIVNAME='"+
						 * cscvo.getDivision() + "'  AND S.SUBNAME='"+
						 * cscvo.getSubDiv() + "'" + "  "+status+ " ");
						 */
						resultSet = statement.executeQuery(
								" select S.CIRNAME,S.DIVNAME,S.SUBNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
										+ " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT"
										// + " ,MAXPRDT PAID_DATE,"
										+ "	,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,"
										+ " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
										+ " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
										+ " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
										+ " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'"
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, "
										+ " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'"
										+ " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
										+ " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','dd-mm-yyyy') AND to_date('" + cscvo.getTo_date()
										+ "','dd-mm-yyyy') )N,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE N.NCPARTCD=S.SECCD"
										// + " AND
										// S.CIRNAME='"+cscvo.getCircle()+ "'AND
										// S.DIVNAME='"+ cscvo.getDivision() +
										// "'"
										+ "  AND S.CIRNAME='" + cscvo.getCircle() + "'  AND S.DIVNAME='"
										+ cscvo.getDivision() + "'  AND S.SUBNAME='" + cscvo.getSubDiv() + "'" + "  "
										+ status + "");
					} else {
						/*
						 * resultSet = statement.executeQuery(
						 * " select s.cirname,S.DIVNAME,S.SECNAME,A.USCNO,CMCNAME AS CONSUMER_NAME,CMCAT,CMCTRLOAD,INSPECTIONDATE AS DATE_OF_CHARGE from"
						 * +
						 * " (select distinct circd,cirname,DIVCD,DIVNAME,SECCD,subname,subcd,SECNAME from spdclmaster)s,"
						 * +
						 * " (select substr(USCNO,0,1) circd,substr(USCNO,0,2) DIVCD,substr(USCNO,0,5) SECCD,USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE from ONLINEHTINSPECTIONREPORT where "
						 * + status +
						 * " group by  substr(USCNO,0,1),substr(USCNO,0,2),substr(USCNO,0,5),USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE)a"
						 * +
						 * " where s.circd=a.circd(+) AND s.DIVCD=a.DIVCD(+) AND  s.SECCD=a.SECCD(+)  and s.circd not in (1,4,6,9) and  divname='"
						 * + cscvo.getDivision() + "' AND USCNO IS NOT NULL");
						 */
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.CONTRACTED_LOAD,TRIM(N.CATEGORY_TYPE),N.CAT_SUBCAT,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PRDATE,N.MESEVA_REF,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE)REG_RELEASE,CEIL(N.PAY_RELEASE)PAY_RELEASE,N.ESTSTATUS,N.INTIMATE_DATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) CATEGORY_TYPE , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PRDATE,MESEVA_REF,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,ESTSTATUS,INTIMATE_DATE,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CAT_SUBCAT,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE  between  to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD AND S.CIRNAME='"+
						 * cscvo.getCircle() + "'  AND S.DIVNAME='"+
						 * cscvo.getDivision() + "'" + " "+status+ "");
						 */
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,S.DIVNAME,S.SUBNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PAID_DATE,"
						 * +
						 * " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
						 * +
						 * " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD " + "  AND S.CIRNAME='"+
						 * cscvo.getCircle() + "'  AND S.DIVNAME='"+
						 * cscvo.getDivision() + "'" + "  "+status+ " ");
						 */
						resultSet = statement.executeQuery(
								" select S.CIRNAME,S.DIVNAME,S.SUBNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
										+ " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT"
										// + " ,MAXPRDT PAID_DATE,"
										+ "	,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,"
										+ " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
										+ " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
										+ " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
										+ " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'"
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, "
										+ " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'"
										+ " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
										+ " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','dd-mm-yyyy') AND to_date('" + cscvo.getTo_date()
										+ "','dd-mm-yyyy') )N,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE N.NCPARTCD=S.SECCD"
										// + " AND
										// S.CIRNAME='"+cscvo.getCircle()+ "'AND
										// S.DIVNAME='"+ cscvo.getDivision() +
										// "'"
										+ "  AND S.CIRNAME='" + cscvo.getCircle() + "'  AND S.DIVNAME='"
										+ cscvo.getDivision() + "'" + "  " + status + "");
					}

				} else if ("SEC".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						/*
						 * resultSet = statement.executeQuery(
						 * " select s.cirname,S.DIVNAME,S.SECNAME,A.USCNO,CMCNAME AS CONSUMER_NAME,CMCAT,CMCTRLOAD,INSPECTIONDATE AS DATE_OF_CHARGE from"
						 * +
						 * " (select distinct circd,cirname,DIVCD,DIVNAME,subname,subcd,SECCD,SECNAME from spdclmaster)s,"
						 * +
						 * " (select substr(USCNO,0,1) circd,substr(USCNO,0,2) DIVCD,substr(USCNO,0,5) SECCD,USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE from ONLINEHTINSPECTIONREPORT where "
						 * + status +
						 * " group by  substr(USCNO,0,1),substr(USCNO,0,2),substr(USCNO,0,5),USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE)a"
						 * +
						 * " where s.circd=a.circd(+) AND s.DIVCD=a.DIVCD(+) AND  s.SECCD=a.SECCD(+)  and s.circd not in (1,4,6,9) and  secname='"
						 * + cscvo.getSec() + "' AND USCNO IS NOT NULL");
						 */
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.CONTRACTED_LOAD,TRIM(N.CATEGORY_TYPE),N.CAT_SUBCAT,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PRDATE,N.MESEVA_REF,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE)REG_RELEASE,CEIL(N.PAY_RELEASE)PAY_RELEASE,N.ESTSTATUS,N.INTIMATE_DATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) CATEGORY_TYPE , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PRDATE,MESEVA_REF,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,ESTSTATUS,INTIMATE_DATE,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CAT_SUBCAT,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE  between  to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD AND S.CIRNAME='"+
						 * cscvo.getCircle() + "'  AND S.DIVNAME='"+
						 * cscvo.getDivision() + "'  AND S.SUBNAME='"+
						 * cscvo.getSubDiv() + "'  AND S.secname='"+
						 * cscvo.getSec() + "'" + " "+status+ "");
						 */
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PAID_DATE,"
						 * +
						 * " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
						 * +
						 * " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD " + "  AND S.CIRNAME='"+
						 * cscvo.getCircle() + "'  AND S.DIVNAME='"+
						 * cscvo.getDivision() + "'  AND S.SUBNAME='"+
						 * cscvo.getSubDiv() + "'  AND S.secname='"+
						 * cscvo.getSec() + "'" + "  "+status+ " ");
						 */
						resultSet = statement.executeQuery(
								" select S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
										+ " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT"
										// + " ,MAXPRDT PAID_DATE,"
										+ "	,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,"
										+ " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
										+ " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
										+ " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
										+ " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'"
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, "
										+ " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'"
										+ " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
										+ " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','dd-mm-yyyy') AND to_date('" + cscvo.getTo_date()
										+ "','dd-mm-yyyy') )N,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE N.NCPARTCD=S.SECCD"
										// + " AND
										// S.CIRNAME='"+cscvo.getCircle()+ "'AND
										// S.DIVNAME='"+ cscvo.getDivision() +
										// "'"
										+ "  AND S.CIRNAME='" + cscvo.getCircle() + "'  AND S.DIVNAME='"
										+ cscvo.getDivision() + "'  AND S.SUBNAME='" + cscvo.getSubDiv()
										+ "'  AND S.secname='" + cscvo.getSec() + "'" + "  " + status + "");

					} else {
						/*
						 * resultSet = statement.executeQuery(
						 * " select s.cirname,S.DIVNAME,S.SECNAME,A.USCNO,CMCNAME AS CONSUMER_NAME,CMCAT,CMCTRLOAD,INSPECTIONDATE AS DATE_OF_CHARGE from"
						 * +
						 * " (select distinct circd,cirname,DIVCD,DIVNAME,subname,subcd,SECCD,SECNAME from spdclmaster)s,"
						 * +
						 * " (select substr(USCNO,0,1) circd,substr(USCNO,0,2) DIVCD,substr(USCNO,0,5) SECCD,USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE from ONLINEHTINSPECTIONREPORT where "
						 * + status +
						 * " group by  substr(USCNO,0,1),substr(USCNO,0,2),substr(USCNO,0,5),USCNO,CMCNAME,CMCAT,CMCTRLOAD,INSPECTIONDATE)a"
						 * +
						 * " where s.circd=a.circd(+) AND s.DIVCD=a.DIVCD(+) AND  s.SECCD=a.SECCD(+)  and s.circd not in (1,4,6,9) and  subname='"
						 * + cscvo.getSubDiv() + "' AND USCNO IS NOT NULL");
						 */
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.CONTRACTED_LOAD,TRIM(N.CATEGORY_TYPE),N.CAT_SUBCAT,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PRDATE,N.MESEVA_REF,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE)REG_RELEASE,CEIL(N.PAY_RELEASE)PAY_RELEASE,N.ESTSTATUS,N.INTIMATE_DATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) CATEGORY_TYPE , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PRDATE,MESEVA_REF,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,ESTSTATUS,INTIMATE_DATE,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CAT_SUBCAT,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE  between  to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD AND S.CIRNAME='"+
						 * cscvo.getCircle() + "'  AND S.DIVNAME='"+
						 * cscvo.getDivision() + "'  AND S.SUBNAME='"+
						 * cscvo.getSubDiv() + "'" + " "+status+ "");
						 */
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PAID_DATE,"
						 * +
						 * " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
						 * +
						 * " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD " + "  AND S.CIRNAME='"+
						 * cscvo.getCircle() + "'  AND S.DIVNAME='"+
						 * cscvo.getDivision() + "'  AND S.SUBNAME='"+
						 * cscvo.getSubDiv() + "'" + "  "+status+ " ");
						 */
						resultSet = statement.executeQuery(
								" select S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
										+ " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT"
										// + " ,MAXPRDT PAID_DATE,"
										+ "	,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,"
										+ " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
										+ " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
										+ " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
										+ " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'"
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, "
										+ " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'"
										+ " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
										+ " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','dd-mm-yyyy') AND to_date('" + cscvo.getTo_date()
										+ "','dd-mm-yyyy') )N,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE N.NCPARTCD=S.SECCD"
										// + " AND
										// S.CIRNAME='"+cscvo.getCircle()+ "'AND
										// S.DIVNAME='"+ cscvo.getDivision() +
										// "'"
										+ "  AND S.CIRNAME='" + cscvo.getCircle() + "'  AND S.DIVNAME='"
										+ cscvo.getDivision() + "'  AND S.SUBNAME='" + cscvo.getSubDiv() + "'" + "  "
										+ status + "");
					}
				} else {
					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.CONTRACTED_LOAD,TRIM(N.CATEGORY_TYPE),N.CAT_SUBCAT,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PRDATE,N.MESEVA_REF,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE)REG_RELEASE,CEIL(N.PAY_RELEASE)PAY_RELEASE,N.ESTSTATUS,N.INTIMATE_DATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) CATEGORY_TYPE , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PRDATE,MESEVA_REF,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,ESTSTATUS,INTIMATE_DATE,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CAT_SUBCAT,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE  between  to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD AND S.CIRNAME='"+
						 * cscvo.getCircle() + "'" + " "+status+ "");
						 */
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PAID_DATE,"
						 * +
						 * " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
						 * +
						 * " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD " + "  AND S.CIRNAME='"
						 * +cscvo.getCircle()+ "'" + "  "+status+ " ");
						 */
						resultSet = statement.executeQuery(
								" select S.CIRNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
										+ " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT"
										// + " ,MAXPRDT PAID_DATE,"
										+ "	,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,"
										+ " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
										+ " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
										+ " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
										+ " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'"
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, "
										+ " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'"
										+ " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
										+ " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','dd-mm-yyyy') AND to_date('" + cscvo.getTo_date()
										+ "','dd-mm-yyyy') )N,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE N.NCPARTCD=S.SECCD" + "  AND S.CIRNAME='" + cscvo.getCircle() + "'"
										+ "  " + status + "");
					} else {
						/*
						 * resultSet = statement.executeQuery(
						 * " select S.CIRNAME,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.CONTRACTED_LOAD,TRIM(N.CATEGORY_TYPE),N.CAT_SUBCAT,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PRDATE,N.MESEVA_REF,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE)REG_RELEASE,CEIL(N.PAY_RELEASE)PAY_RELEASE,N.ESTSTATUS,N.INTIMATE_DATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) CATEGORY_TYPE , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PRDATE,MESEVA_REF,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,ESTSTATUS,INTIMATE_DATE,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CAT_SUBCAT,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE  SUPPLY_RELEASE_DATE  between  to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD "//AND S.CIRNAME='
						 * "+ cscvo.getCircle() + "'" + " "+status+ "");
						 */
						/*
						 * resultSet = statement.executeQuery(
						 * "select S.CIRNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
						 * +
						 * " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,MAXPRDT PAID_DATE,"
						 * +
						 * " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
						 * +
						 * " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
						 * +
						 * " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
						 * +
						 * " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
						 * +
						 * " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =3) then 'WRT' "
						 * +
						 * " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT' else 'BRT' end)SOP_RELEASED, "
						 * +
						 * " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
						 * +
						 * " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
						 * +
						 * " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
						 * +cscvo.getFrom_date()+"','dd-mm-yyyy') AND to_date('"
						 * +cscvo.getTo_date()+"','dd-mm-yyyy'))N," +
						 * " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
						 * + " WHERE N.NCPARTCD=S.SECCD" //+
						 * "  AND S.CIRNAME='KURNOOL'" + "  "+status+ " ");
						 */
						resultSet = statement.executeQuery(
								" select S.CIRNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE FROM"
										+ " (SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT"
										// + " ,MAXPRDT PAID_DATE,"
										+ "	,(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,"
										+ " (CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' "
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'"
										+ " WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN"
										+ " ,USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS "
										+ " ,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,"
										+ " (case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'"
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  "
										+ " when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, "
										+ " (case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'"
										+ " when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'"
										+ " when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE "
										+ " FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','dd-mm-yyyy') AND to_date('" + cscvo.getTo_date()
										+ "','dd-mm-yyyy') )N,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE N.NCPARTCD=S.SECCD"
										// + " AND S.CIRNAME='KURNOOL'"
										+ "  " + status + "");
					}

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=Catwise  Services releaseed " + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition", "attachment; filename=Catwise Services released.xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}
	
	public void exportjaganannaNesthamEstimate(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {

		


		
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		// String connectionURL = "jdbc:oracle:thin:@10.16.1.181:1528:PRODCBS";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL,
		// "SPDCLMIS", "SPDCL123MIS");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				
				if("AE".equalsIgnoreCase(cscvo.getCtype())){
					
					status="AND NVL(CSTAT,'NA')='AE'  AND NVL(POSID,'NA') <> 'NA'";
					
				}else if("DEE".equalsIgnoreCase(cscvo.getCtype())){
					status="AND NVL(CSTAT,'NA')='FAPR'  AND NVL(POSID,'NA') <> 'NA'";
				
					
			  }
				
				else if("EE".equalsIgnoreCase(cscvo.getCtype())){
				status="AND NVL(CSTAT,'NA')='ADE'  AND NVL(POSID,'NA') <> 'NA'";
				
			   
			}
			  
			  else if("SE".equalsIgnoreCase(cscvo.getCtype())){
				status="AND NVL(CSTAT,'NA')='DE'  AND NVL(POSID,'NA') <> 'NA'";
				
			}
			  else if("CGM".equalsIgnoreCase(cscvo.getCtype())){
				  status="AND NVL(CSTAT,'NA')='SE'  AND NVL(POSID,'NA') <> 'NA'";
				  
			  }
			else{
				status="";
			     }		
						//System.out.println(cscvo.getCtype());
						
						SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");
						
				if ("DIV".equals(cscvo.getFlag())) {

					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  CSTAT AS PENDING_AT_LOGIN,\r\n" + 
								"  ZREGID AS app_Reg_Number,\r\n" + 
								"  ZREGDT AS app_Reg_Date,\r\n" + 
								"  POSID AS Estimate_Number,\r\n" + 
								"  CDATE AS Estimate_Date,\r\n" + 
								"  ZNDAPP AS NoofdDaysPendingfromEstimate\r\n" + 
								"FROM RAITHU_NESTHAM_ESTIMATE,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('1','4','6','9') and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'"  + status + "");
						
						
					} else {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  CSTAT AS PENDING_AT_LOGIN,\r\n" + 
								"  ZREGID AS app_Reg_Number,\r\n" + 
								"  ZREGDT AS app_Reg_Date,\r\n" + 
								"  POSID AS Estimate_Number,\r\n" + 
								"  CDATE AS Estimate_Date,\r\n" + 
								"  ZNDAPP AS NoofdDaysPendingfromEstimate\r\n" + 
								"FROM RAITHU_NESTHAM_ESTIMATE,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('1','4','6','9') and S.CIRNAME='"+cscvo.getCircle()+"'" + status + "");
						
						
					}

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  CSTAT AS PENDING_AT_LOGIN,\r\n" + 
								"  ZREGID AS app_Reg_Number,\r\n" + 
								"  ZREGDT AS app_Reg_Date,\r\n" + 
								"  POSID AS Estimate_Number,\r\n" + 
								"  CDATE AS Estimate_Date,\r\n" + 
								"  ZNDAPP AS NoofdDaysPendingfromEstimate\r\n" + 
								"FROM RAITHU_NESTHAM_ESTIMATE,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('1','4','6','9') and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' " + status + "");
						
								
					} else {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  CSTAT AS PENDING_AT_LOGIN,\r\n" + 
								"  ZREGID AS app_Reg_Number,\r\n" + 
								"  ZREGDT AS app_Reg_Date,\r\n" + 
								"  POSID AS Estimate_Number,\r\n" + 
								"  CDATE AS Estimate_Date,\r\n" + 
								"  ZNDAPP AS NoofdDaysPendingfromEstimate\r\n" + 
								"FROM RAITHU_NESTHAM_ESTIMATE,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('1','4','6','9')  and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'  " + status + "");
						
						
						}

				} else if ("SEC".equals(cscvo.getFlag())) {

					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
						//System.out.println(cscvo.getSec());
						//System.out.println(cscvo.getFlag());
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  CSTAT AS PENDING_AT_LOGIN,\r\n" + 
								"  ZREGID AS app_Reg_Number,\r\n" + 
								"  ZREGDT AS app_Reg_Date,\r\n" + 
								"  POSID AS Estimate_Number,\r\n" + 
								"  CDATE AS Estimate_Date,\r\n" + 
								"  ZNDAPP AS NoofdDaysPendingfromEstimate\r\n" + 
								"FROM RAITHU_NESTHAM_ESTIMATE,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('1','4','6','9') and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"' " + status + "");
						//System.out.println(cscvo.getCircle());
						//System.out.println(cscvo.getDivision());
						//System.out.println(cscvo.getSubDiv());
						//System.out.println(cscvo.getSec());
						//System.out.println("test1");
					} else {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  CSTAT AS PENDING_AT_LOGIN,\r\n" + 
								"  ZREGID AS app_Reg_Number,\r\n" + 
								"  ZREGDT AS app_Reg_Date,\r\n" + 
								"  POSID AS Estimate_Number,\r\n" + 
								"  CDATE AS Estimate_Date,\r\n" + 
								"  ZNDAPP AS NoofdDaysPendingfromEstimate\r\n" + 
								"FROM RAITHU_NESTHAM_ESTIMATE,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('1','4','6','9')  and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  " + status + "");
						
						//System.out.println("test2");
						}
				} else {
					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getCircle())) {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  CSTAT AS PENDING_AT_LOGIN,\r\n" + 
								"  ZREGID AS app_Reg_Number,\r\n" + 
								"  ZREGDT AS app_Reg_Date,\r\n" + 
								"  POSID AS Estimate_Number,\r\n" + 
								"  CDATE AS Estimate_Date,\r\n" + 
								"  ZNDAPP AS NoofdDaysPendingfromEstimate\r\n" + 
								"FROM RAITHU_NESTHAM_ESTIMATE,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('1','4','6','9') and S.CIRNAME='"+cscvo.getCircle()+"'" + status + "");
						//gk123
						
						
					} else {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  CSTAT AS PENDING_AT_LOGIN,\r\n" + 
								"  ZREGID AS app_Reg_Number,\r\n" + 
								"  ZREGDT AS app_Reg_Date,\r\n" + 
								"  POSID AS Estimate_Number,\r\n" + 
								"  CDATE AS Estimate_Date,\r\n" + 
								"  ZNDAPP AS NoofdDaysPendingfromEstimate\r\n" + 
								"FROM RAITHU_NESTHAM_ESTIMATE,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('1','4','6','9') " + status + "");
						
					}

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=Jagananna Rythu Nestham Pending Estimate at "+cscvo.getCtype()+" Report " + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				
				response.setContentType("application/ms-excel");
				
				response.setHeader("Content-Disposition", "attachment; filename=Jagananna Rythu Nestham pending Estimate at "+cscvo.getCtype()+" Report.xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
	}
		public void exportjaganannaNesthamPending(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
				throws Exception {
		


		
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		// String connectionURL = "jdbc:oracle:thin:@10.16.1.181:1528:PRODCBS";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL,
		// "SPDCLMIS", "SPDCL123MIS");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				
				if("AE".equalsIgnoreCase(cscvo.getCtype())){
					
					status="AND NVL(ZWFUSER,'NA')='AE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA'";
					
				}else if("DEE".equalsIgnoreCase(cscvo.getCtype())){
					status="AND NVL(ZWFUSER,'NA')='ADE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA'";
				
					
			  }
				
				else if("EE".equalsIgnoreCase(cscvo.getCtype())){
				status="AND NVL(ZWFUSER,'NA')='DE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA'";
				
			   
			}
			  
			  else if("SE".equalsIgnoreCase(cscvo.getCtype())){
				status="AND NVL(ZWFUSER,'NA')='SE'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA') ='NA'";
				
			}
			  else if("CGM".equalsIgnoreCase(cscvo.getCtype())){
				  status="AND NVL(ZWFUSER,'NA')='CGM'  AND NVL(POSID,'NA') ='NA'  AND NVL(REGIND,'NA')='NA'";
				  
			  }
			else{
				status="";
			     }		
						//System.out.println(cscvo.getCtype());
						
						SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");
				if ("DIV".equals(cscvo.getFlag())) {

					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZWFUSER AS PendingatLogin,\r\n" + 
								"  ZREGID AS AppRegistrationNumber,\r\n" + 
								"  ZREGDT AS AppRegistrationDate,\r\n" + 
								"  ZNDAPP AS pendingfromdateofregistration\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'"  + status + "");
						
						
					} else {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZWFUSER AS PendingatLogin,\r\n" + 
								"  ZREGID AS AppRegistrationNumber,\r\n" + 
								"  ZREGDT AS AppRegistrationDate,\r\n" + 
								"  ZNDAPP AS pendingfromdateofregistration\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') and S.CIRNAME='"+cscvo.getCircle()+"'" + status + "");
						
						
					}

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZWFUSER AS PendingatLogin,\r\n" + 
								"  ZREGID AS AppRegistrationNumber,\r\n" + 
								"  ZREGDT AS AppRegistrationDate,\r\n" + 
								"  ZNDAPP AS pendingfromdateofregistration\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' " + status + "");
						
								
					} else {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZWFUSER AS PendingatLogin,\r\n" + 
								"  ZREGID AS AppRegistrationNumber,\r\n" + 
								"  ZREGDT AS AppRegistrationDate,\r\n" + 
								"  ZNDAPP AS pendingfromdateofregistration\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'  " + status + "");
						
						
						}

				} else if ("SEC".equals(cscvo.getFlag())) {

					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
						//System.out.println(cscvo.getSec());
						//System.out.println(cscvo.getFlag());
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZWFUSER AS PendingatLogin,\r\n" + 
								"  ZREGID AS AppRegistrationNumber,\r\n" + 
								"  ZREGDT AS AppRegistrationDate,\r\n" + 
								"  ZNDAPP AS pendingfromdateofregistration\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"' " + status + "");
						//System.out.println(cscvo.getCircle());
						//System.out.println(cscvo.getDivision());
						//System.out.println(cscvo.getSubDiv());
						//System.out.println(cscvo.getSec());
						//System.out.println("test1");
					} else {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZWFUSER AS PendingatLogin,\r\n" + 
								"  ZREGID AS AppRegistrationNumber,\r\n" + 
								"  ZREGDT AS AppRegistrationDate,\r\n" + 
								"  ZNDAPP AS pendingfromdateofregistration\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  " + status + "");
						
						//System.out.println("test2");
						}
				} else {
					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getCircle())) {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZWFUSER AS PendingatLogin,\r\n" + 
								"  ZREGID AS AppRegistrationNumber,\r\n" + 
								"  ZREGDT AS AppRegistrationDate,\r\n" + 
								"  ZNDAPP AS pendingfromdateofregistration\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') and S.CIRNAME='"+cscvo.getCircle()+"'" + status + "");
						//gk123
						
						
					} else {
						
						resultSet = statement.executeQuery(" SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZWFUSER AS PendingatLogin,\r\n" + 
								"  ZREGID AS AppRegistrationNumber,\r\n" + 
								"  ZREGDT AS AppRegistrationDate,\r\n" + 
								"  ZNDAPP AS pendingfromdateofregistration\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1')" + status + "");
						
					}

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=Jagananna Rythu Nestham Pending at "+cscvo.getCtype()+" Report " + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				
				response.setContentType("application/ms-excel");
				
				response.setHeader("Content-Disposition", "attachment; filename=Jagananna Rythu Nestham pending at "+cscvo.getCtype()+" Report.xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	
		
	}

	public void exportjaganannaNesthamAbstract(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {

		
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		
		// String connectionURL = "jdbc:oracle:thin:@10.16.1.181:1528:PRODCBS";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL,
		// "SPDCLMIS", "SPDCL123MIS");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				
				if("REG".equalsIgnoreCase(cscvo.getCtype())){
					
					status="AND ZREGID IS NOT NULL";
					
				}else if("DEL".equalsIgnoreCase(cscvo.getCtype())){
					status="AND NVL(REGIND,'NA')='X' AND NVL(POSID,'NA') ='NA'";
				
					 
			  }
				
				else if("BAL".equalsIgnoreCase(cscvo.getCtype())){
				status="AND NVL(REGIND,'NA') <> 'X'";
				
			   
			}
			  
			  else if("Est_less15".equalsIgnoreCase(cscvo.getCtype())){
				status="AND NVL(WBSIND,'NA')='X' AND POSID IS NOT NULL AND NVL(REGIND,'NA')='NA'";
				
			}
			  else if("Est_gtr15".equalsIgnoreCase(cscvo.getCtype())){
				  status="AND  NVL(WBSIND,'NA') ='NA' AND POSID IS NOT NULL AND ZREGID IS NOT NULL AND NVL(REGIND,'NA')='NA'";
				  
			  }
			  else if("APP_TOBE_EST_LESS15".equalsIgnoreCase(cscvo.getCtype())){
				  status="AND NVL(ZNDAPP,'0') >=0 AND NVL(ZNDAPP,'0') <=15 AND ZREGID IS NOT NULL AND POSID IS NULL AND NVL(REGIND,'NA')='NA'";
				 
			  }
			  else if("APP_TOBE_EST_GTR15".equalsIgnoreCase(cscvo.getCtype())){
				  status="AND NVL(ZNDAPP,'0') > 15 AND ZREGID IS NOT NULL AND POSID IS NULL AND NVL(REGIND,'NA')='NA'";
				  
			  }
			 
			  else if("EST_SAN".equalsIgnoreCase(cscvo.getCtype())){
				  status="AND NVL(ESAPP,'NA') ='X'  AND ZREGID IS NOT NULL";
				  
			  }
			  else if("PAID_APP".equalsIgnoreCase(cscvo.getCtype())){
				  status="AND PAYDT IS NOT NULL  AND ZREGID IS NOT NULL AND NVL(ESAPP,'NA') ='X'";
				  
			  }
			  else if("TOBE_PAID_APP".equalsIgnoreCase(cscvo.getCtype())){
				  status="AND (NVL(ESAPP,'NA') ='X'  AND ZREGID IS NOT NULL OR PAYDT IS NOT NULL  AND ZREGID IS NOT NULL AND NVL(ESAPP,'NA') ='X')";
				  
			  }
			  else if("SER_REL_PAY_LESS30".equalsIgnoreCase(cscvo.getCtype())){
				  status="AND NVL(SUPIND,'NA') ='X' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL";
				  
			  }
			  else if("SER_REL_PAY_GRA30".equalsIgnoreCase(cscvo.getCtype())){
				  status="AND NVL(SUPIND,'NA')='NA' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL";
				  
			  }
			  else if("SER_TOBE_REL".equalsIgnoreCase(cscvo.getCtype())){
				  status="and (PAYDT IS NOT NULL  AND ZREGID IS NOT NULL or NVL(SUPIND,'NA') ='X' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL or NVL(SUPIND,'NA')='NA' AND USCNO IS NOT NULL  AND ZREGID IS NOT NULL)";
				  
			  }else{
				status="";
			     }		
						//System.out.println(cscvo.getCtype());
						
						SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");
				if ("DIV".equals(cscvo.getFlag())) {

					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZREGID Registration_number,\r\n" + 
								"  ZREGDT Registration_DATE,\r\n" + 
								"  POSID ESTIMATE_NUMBER,\r\n" + 
								"  ERDAT ESTIMATE_CREATION_DATE,\r\n" + 
								"  SUPL_REL_DATE SUPPLY_RELEASE_DATE,\r\n" + 
								"  USCNO SERVICE_NO\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'"  + status + "");
						
						
					} else {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZREGID Registration_number,\r\n" + 
								"  ZREGDT Registration_DATE,\r\n" + 
								"  POSID ESTIMATE_NUMBER,\r\n" + 
								"  ERDAT ESTIMATE_CREATION_DATE,\r\n" + 
								"  SUPL_REL_DATE SUPPLY_RELEASE_DATE,\r\n" + 
								"  USCNO SERVICE_NO\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') and S.CIRNAME='"+cscvo.getCircle()+"'" + status + "");
						
						
					}

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZREGID Registration_number,\r\n" + 
								"  ZREGDT Registration_DATE,\r\n" + 
								"  POSID ESTIMATE_NUMBER,\r\n" + 
								"  ERDAT ESTIMATE_CREATION_DATE,\r\n" + 
								"  SUPL_REL_DATE SUPPLY_RELEASE_DATE,\r\n" + 
								"  USCNO SERVICE_NO\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' " + status + "");
						
								
					} else {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZREGID Registration_number,\r\n" + 
								"  ZREGDT Registration_DATE,\r\n" + 
								"  POSID ESTIMATE_NUMBER,\r\n" + 
								"  ERDAT ESTIMATE_CREATION_DATE,\r\n" + 
								"  SUPL_REL_DATE SUPPLY_RELEASE_DATE,\r\n" + 
								"  USCNO SERVICE_NO\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'  " + status + "");
						
						
						}

				} else if ("SEC".equals(cscvo.getFlag())) {

					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
						//System.out.println(cscvo.getSec());
						//System.out.println(cscvo.getFlag());
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZREGID Registration_number,\r\n" + 
								"  ZREGDT Registration_DATE,\r\n" + 
								"  POSID ESTIMATE_NUMBER,\r\n" + 
								"  ERDAT ESTIMATE_CREATION_DATE,\r\n" + 
								"  SUPL_REL_DATE SUPPLY_RELEASE_DATE,\r\n" + 
								"  USCNO SERVICE_NO\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"' " + status + "");
						//System.out.println(cscvo.getCircle());
						//System.out.println(cscvo.getDivision());
						//System.out.println(cscvo.getSubDiv());
						//System.out.println(cscvo.getSec());
						//System.out.println("test1");
					} else {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZREGID Registration_number,\r\n" + 
								"  ZREGDT Registration_DATE,\r\n" + 
								"  POSID ESTIMATE_NUMBER,\r\n" + 
								"  ERDAT ESTIMATE_CREATION_DATE,\r\n" + 
								"  SUPL_REL_DATE SUPPLY_RELEASE_DATE,\r\n" + 
								"  USCNO SERVICE_NO\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S\r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  " + status + "");
						
						//System.out.println("test2");
						}
				} else {
					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getCircle())) {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZREGID Registration_number,\r\n" + 
								"  ZREGDT  Registration_DATE,\r\n" + 
								"  POSID ESTIMATE_NUMBER,\r\n" + 
								"  ERDAT ESTIMATE_CREATION_DATE,\r\n" + 
								"  SUPL_REL_DATE SUPPLY_RELEASE_DATE,\r\n" + 
								"  USCNO SERVICE_NO\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S \r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') and S.CIRNAME='"+cscvo.getCircle()+"'" + status + "");
						//gk123
						
						
					} else {
						
						resultSet = statement.executeQuery("SELECT CIRNAME,\r\n" + 
								"  DIVNAME,\r\n" + 
								"  SUBNAME,\r\n" + 
								"  SECNAME,\r\n" + 
								"  ZREGID Registration_number,\r\n" + 
								"  ZREGDT Registration_DATE,\r\n" + 
								"  POSID ESTIMATE_NUMBER,\r\n" + 
								"  ERDAT ESTIMATE_CREATION_DATE,\r\n" + 
								"  SUPL_REL_DATE SUPPLY_RELEASE_DATE,\r\n" + 
								"  USCNO SERVICE_NO\r\n" + 
								"FROM RAITHU_NESTHAM,\r\n" + 
								"  MASTER.SPDCLMASTER S \r\n" + 
								"WHERE SUBSTR(ZREGID,1,5)=SECCD\r\n" + 
								"AND CIRCD NOT          IN ('4','6','9','1') " + status + "");
						
					}

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=Jagananna Rythu Nestham ABSTRACT Report " + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				
				response.setContentType("application/ms-excel");
				
				response.setHeader("Content-Disposition", "attachment; filename=Jagananna Rythu Nestham ABSTRACT Report.xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}
		public void exportCatwiseSerRelDetails1(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
				throws Exception {
		
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		// String connectionURL = "jdbc:oracle:thin:@10.16.1.181:1528:PRODCBS";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL,
		// "SPDCLMIS", "SPDCL123MIS");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				// if
				// ("RelesedAfterPaidByConsumer".equalsIgnoreCase(cscvo.getStatus()))
				// {
				if ("CAT1".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  N.CATEGORY  LIKE '1%'  and SUBSTR(N.REG_NO,6,1) not in('H')  ";// and
					// SUPPLY_RELEASE_DATE
					// between
					// '"+cscvo.getFrom_date()+"'
					// AND
					// '"+cscvo.getTo_date()+"'";
				} else if ("CAT2".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  N.CATEGORY  LIKE '2%'   and SUBSTR(N.REG_NO,6,1) not in('H')  ";// and
					// SUPPLY_RELEASE_DATE
					// between
					// '"+cscvo.getFrom_date()+"'
					// AND
					// '"+cscvo.getTo_date()+"'";
				} else if ("CAT3".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and N.CATEGORY  LIKE '3%'  and SUBSTR(N.REG_NO,6,1) not in('H')   ";// and
					// SUPPLY_RELEASE_DATE
					// between
					// '"+cscvo.getFrom_date()+"'
					// AND
					// '"+cscvo.getTo_date()+"'";
				} else if ("CAT4".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  N.CATEGORY  LIKE '4%'  and SUBSTR(N.REG_NO,6,1) not in('H')  ";// and
					// SUPPLY_RELEASE_DATE
					// between
					// '"+cscvo.getFrom_date()+"'
					// AND
					// '"+cscvo.getTo_date()+"'";
				} else if ("CAT5AGL".equalsIgnoreCase(cscvo.getCtype())) {
					// status = " and SUBSTR(N.CAT_SUBCAT,1,3) IN ('5A2','5A1')
					// ";
					status = " and SUBSTR(N.CATEGORY,1,4) IN ('5-A2','5-A1')  and SUBSTR(N.REG_NO,6,1) not in('H')  ";

					// and SUPPLY_RELEASE_DATE between
					// '"+cscvo.getFrom_date()+"' AND '"+cscvo.getTo_date()+"'";
				} else if ("CAT5AQUA".equalsIgnoreCase(cscvo.getCtype())) {
					// status = " and SUBSTR(N.CAT_SUBCAT,1,2) IN ('5B') ";
					status = "  and SUBSTR(N.CATEGORY,1,3) IN ('5-B')  and SUBSTR(N.REG_NO,6,1) not in('H') "; // and
					// SUPPLY_RELEASE_DATE
					// between
					// '"+cscvo.getFrom_date()+"'
					// AND
					// '"+cscvo.getTo_date()+"'";
				} else if ("CAT5Other".equalsIgnoreCase(cscvo.getCtype())) {
					// status = " and (SUBSTR(N.CAT_SUBCAT ,1,3) IN
					// ('5A3','5A4','5A5','5A6') OR (SUBSTR(N.CAT_SUBCAT ,1,2)
					// IN ('5D','5T'))) ";//and SUPPLY_RELEASE_DATE between
					// '"+cscvo.getFrom_date()+"' AND '"+cscvo.getTo_date()+"'";
					// status = " and (SUBSTR(N.CAT_SUBCAT ,1,4) IN
					// ('5-A3','5-A4','5-A5','5-A6') OR (SUBSTR(N.CAT_SUBCAT
					// ,1,3) IN ('5-D','5-T'))) ";
					status = " and  (SUBSTR(N.CATEGORY ,1,4) IN ('5-A3','5-A4','5-A5','5-A6') OR (SUBSTR(N.CATEGORY ,1,3) IN ('5-D','5-T')))  and SUBSTR(N.REG_NO,6,1) not in('H')  ";

				} else if ("CATTotal".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and SUBSTR(N.REG_NO,6,1) not in('H') ";// and
																		// SUPPLY_RELEASE_DATE
																		// between
																		// '"+cscvo.getFrom_date()+"'
																		// AND
																		// '"+cscvo.getTo_date()+"'";
				} else if ("HT".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  SUBSTR(N.REG_NO,6,1)='H' ";// and
																// SUPPLY_RELEASE_DATE
																// between
																// '"+cscvo.getFrom_date()+"'
																// AND
																// '"+cscvo.getTo_date()+"'";
				} else {
					// status = " (SUBSTR(REG_NO,6,1)='H')) or
					// ((SUBSTR(REG_NO,6,1)='L')) ";//// and SUPPLY_RELEASE_DATE
					// between '"+cscvo.getFrom_date()+"' AND
					// '"+cscvo.getTo_date()+"'";
					status = "  ";
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE,N.SOCIAL_GROUP FROM\r\n" + 
								"(SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,\r\n" + 
								"(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' \r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'\r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN\r\n" + 
								",USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS \r\n" + 
								",SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,\r\n" + 
								"decode(SOCIAL_GROUP,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','9','OTHERS')SOCIAL_GROUP,\r\n" + 
								"(case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, \r\n" + 
								"(case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE \r\n" + 
								"FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE('"+cscvo.getFrom_date()+"','DD-MM-YYYY') AND TO_DATE('"+cscvo.getTo_date()+"','DD-MM-YYYY')  )N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"where n.ncpartcd=s.seccd\r\n" + 
								"and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'"  + status + "");
						
						
					} else {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE,N.SOCIAL_GROUP FROM\r\n" + 
								"(SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,\r\n" + 
								"(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' \r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'\r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN\r\n" + 
								",USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS \r\n" + 
								",SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,\r\n" + 
								"decode(SOCIAL_GROUP,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','9','OTHERS')SOCIAL_GROUP,\r\n" + 
								"(case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, \r\n" + 
								"(case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE \r\n" + 
								"FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE('"+cscvo.getFrom_date()+"','DD-MM-YYYY') AND TO_DATE('"+cscvo.getTo_date()+"','DD-MM-YYYY')  )N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"where n.ncpartcd=s.seccd\r\n" + 
								"and S.CIRNAME='"+cscvo.getCircle()+"'" + status + "");
						
						
					}

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE,N.SOCIAL_GROUP FROM\r\n" + 
								"(SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,\r\n" + 
								"(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' \r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'\r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN\r\n" + 
								",USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS \r\n" + 
								",SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,\r\n" + 
								"decode(SOCIAL_GROUP,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','9','OTHERS')SOCIAL_GROUP,\r\n" + 
								"(case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, \r\n" + 
								"(case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE \r\n" + 
								"FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE('"+cscvo.getFrom_date()+"','DD-MM-YYYY') AND TO_DATE('"+cscvo.getTo_date()+"','DD-MM-YYYY')  )N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"where n.ncpartcd=s.seccd\r\n" + 
								"and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' " + status + "");
						
								
					} else {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE,N.SOCIAL_GROUP FROM\r\n" + 
								"(SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,\r\n" + 
								"(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' \r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'\r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN\r\n" + 
								",USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS \r\n" + 
								",SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,\r\n" + 
								"decode(SOCIAL_GROUP,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','9','OTHERS')SOCIAL_GROUP,\r\n" + 
								"(case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, \r\n" + 
								"(case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE \r\n" + 
								"FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE('"+cscvo.getFrom_date()+"','DD-MM-YYYY') AND TO_DATE('"+cscvo.getTo_date()+"','DD-MM-YYYY')  )N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"where n.ncpartcd=s.seccd\r\n" + 
								"and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"'  " + status + "");
						
						
						}

				} else if ("SEC".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
						
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE,N.SOCIAL_GROUP FROM\r\n" + 
								"(SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,\r\n" + 
								"(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' \r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'\r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN\r\n" + 
								",USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS \r\n" + 
								",SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,\r\n" + 
								"decode(SOCIAL_GROUP,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','9','OTHERS')SOCIAL_GROUP,\r\n" + 
								"(case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, \r\n" + 
								"(case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE \r\n" + 
								"FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE('"+cscvo.getFrom_date()+"','DD-MM-YYYY') AND TO_DATE('"+cscvo.getTo_date()+"','DD-MM-YYYY')  )N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"where n.ncpartcd=s.seccd\r\n" + 
								"and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"' AND S.SECNAME='"+cscvo.getSec()+"' " + status + "");
						
					} else {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE,N.SOCIAL_GROUP FROM\r\n" + 
								"(SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,\r\n" + 
								"(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' \r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'\r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN\r\n" + 
								",USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS \r\n" + 
								",SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,\r\n" + 
								"decode(SOCIAL_GROUP,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','9','OTHERS')SOCIAL_GROUP,\r\n" + 
								"(case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, \r\n" + 
								"(case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE \r\n" + 
								"FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE('"+cscvo.getFrom_date()+"','DD-MM-YYYY') AND TO_DATE('"+cscvo.getTo_date()+"','DD-MM-YYYY')  )N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"where n.ncpartcd=s.seccd\r\n" + 
								"and S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' AND S.SUBNAME='"+cscvo.getSubDiv()+"'  " + status + "");
						
						
						}
				} else {
					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE,N.SOCIAL_GROUP FROM\r\n" + 
								"(SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,\r\n" + 
								"(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' \r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'\r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN\r\n" + 
								",USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS \r\n" + 
								",SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,\r\n" + 
								"decode(SOCIAL_GROUP,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','9','OTHERS')SOCIAL_GROUP,\r\n" + 
								"(case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, \r\n" + 
								"(case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE \r\n" + 
								"FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE('"+cscvo.getFrom_date()+"','DD-MM-YYYY') AND TO_DATE('"+cscvo.getTo_date()+"','DD-MM-YYYY')  )N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"where n.ncpartcd=s.seccd\r\n" + 
								"and S.CIRNAME='"+cscvo.getCircle()+"'" + status + "");
						//gk123
						
						
					} else {
						
						resultSet = statement.executeQuery("select S.CIRNAME,S.DIVNAME,S.ERONAME,S.SUBNAME,S.SECNAME,N.LT_HT,N.CATEGORY,N.REG_NO,N.REG_DATE,N.CONSUMER_NAME,N.PHONE_NO,N.BOOKED_IN,N.CONTRACTED_LOAD,N.ESTIMATE_STATUS,N.DATE_TIME_OF_APPROVAL,NVL(SAP_DEMAND,SAPDEM) GRP_DEMAND,N.CSC_DEMAND, N.PAID_AMOUNT,N.PAID_DATE,N.USCNO,N.SUPPLY_RELEASE_DATE, CEIL(N.REG_RELEASE) DAYS_TAKEN_FROM_REGISTRATION,CEIL(N.PAY_RELEASE)DAYS_TAKEN_FROM_PAIDDATE,N.TIME_OF_SMS,N.SOP_RELEASED,SOP_ESTIMATE,N.SOCIAL_GROUP FROM\r\n" + 
								"(SELECT REG_NO,REG_DATE,CONSUMER_NAME,PHONE_NO,CONTRACTED_LOAD,NCPARTCD,(case when (SUBSTR(REG_NO,6,1) IN ('S','N')) then 'LT' else 'HT' end) LT_HT , NVL(GRP_DEMAND+EXTDEM_SD,SAPDEM)SAP_DEMAND,SAPDEM ,NVL(EXTDEM,0)CSC_DEMAND,NVL(GRP_COLL,TOTAMT) PAID_AMOUNT,\r\n" + 
								"(CASE WHEN (GRPAPPNUM IS NOT NULL) THEN GREATEST(GRP_PRDT,MAXPRDT) \r\n" + 
								"WHEN (GRPAPPNUM IS NULL AND TOTAMT > 200) THEN MAXPRDT ELSE NULL END) PAID_DATE,\r\n" + 
								"(CASE WHEN(SUBSTR(MESEVA_REF,1,3) ='MEE') THEN 'MEESEVA' \r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='CAE') THEN 'DICPORTAL'\r\n" + 
								"WHEN (SUBSTR(MESEVA_REF,1,3) ='WEB') THEN 'WEBSITE' ELSE 'GSWS' END) BOOKED_IN\r\n" + 
								",USCNO,SUPPLY_RELEASE_DATE,(SUPPLY_RELEASE_DATE-REG_DATE) REG_RELEASE,(SUPPLY_RELEASE_DATE-MAXPRDT) PAY_RELEASE,DECODE(ESTSTATUS,'01','SIMPLIFIED','02','EXTENSION')ESTIMATE_STATUS,INTIMATE_DATE DATE_TIME_OF_APPROVAL,INTIMATE_DATE+1 TIME_OF_SMS \r\n" + 
								",SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,\r\n" + 
								"decode(SOCIAL_GROUP,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','9','OTHERS')SOCIAL_GROUP,\r\n" + 
								"(case when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =7) then 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('N','S') AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) < =30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=60 )THEN 'WRT' \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=90 )THEN 'WRT'  \r\n" + 
								"when (ESTSTATUS='02'  AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND CEIL(SUPPLY_RELEASE_DATE-MAXPRDT) <=180 )THEN 'WRT' else 'BRT' END)SOP_RELEASED, \r\n" + 
								"(case when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '11%'  AND (INTIMATE_DATE-REG_DATE) <=15) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '33%'  AND (INTIMATE_DATE-REG_DATE) <=30) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='02' AND SUBSTR(REG_NO,6,1) IN ('H') AND VOLTAGE LIKE '132%'  AND (INTIMATE_DATE-REG_DATE) <=45) THEN 'WRT'\r\n" + 
								"when (ESTSTATUS='01' AND SUBSTR(REG_NO,6,1) IN ('N','S')  AND (INTIMATE_DATE-REG_DATE) <=7) THEN '' ELSE 'BRT' END)SOP_ESTIMATE \r\n" + 
								"FROM REP_FINAL WHERE SUPPLY_RELEASE_DATE BETWEEN TO_DATE('"+cscvo.getFrom_date()+"','DD-MM-YYYY') AND TO_DATE('"+cscvo.getTo_date()+"','DD-MM-YYYY')  )N,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,SUBNAME,ERONAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
								"where n.ncpartcd=s.seccd\r\n" + status + "");
						
					}

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition",
						"attachment; filename=Catwise  Services releaseed " + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition", "attachment; filename=Catwise Services released.xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	
	}
	
	// HT and LT3 Pending Application BRT

	public CscpayVO getHtLt3PenAppBrtReportDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		// PreparedStatement reportPStmt1 = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		// AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE
		// REG_NO=REGNO)

		String brt_status = " AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) ";
		try {
			if (con != null) {

				if ("DIV".equals(
						cscvo.getFlag())) {/*
											 * String query =
											 * "SELECT nvl(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO)+COUNT(C.REG_NO) DEPT_TOTAL ,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO)+COUNT(G.REG_NO) TURNKEY_TOTAL FROM "
											 * +
											 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%')A,"
											 * +
											 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
											 * +
											 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
											 * +
											 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60)D,"
											 * +
											 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
											 * +
											 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F,"
											 * +
											 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
											 * +
											 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=179)H,"
											 * +
											 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
											 * +
											 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J,"
											 * +
											 * " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S"
											 * + " WHERE A.REG_NO=B.REG_NO(+)" +
											 * " AND A.REG_NO=C.REG_NO(+)" +
											 * " AND A.REG_NO=D.REG_NO(+)" +
											 * " AND A.REG_NO=E.REG_NO(+)" +
											 * " AND A.REG_NO=F.REG_NO(+)" +
											 * " AND A.REG_NO=G.REG_NO(+)" +
											 * " AND A.REG_NO=H.REG_NO(+)" +
											 * " AND A.REG_NO=I.REG_NO(+)" +
											 * " AND A.REG_NO=J.REG_NO(+)" +
											 * " AND A.NCPARTCD=S.SECCD" +
											 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
											 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
											 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
											 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
											 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
											 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
											 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
											 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
											 * " AND A.NCPARTCD=J.NCPARTCD(+)  and cirname=? GROUP BY ROLLUP(S.divname) "
											 * ;
											 * 
											 * reportPStmt =
											 * con.prepareStatement(query);
											 * reportPStmt.setString(1,
											 * cscvo.getCircle()); reportRst =
											 * reportPStmt.executeQuery();
											 * 
											 */

					/*
					 * String query =
					 * "SELECT NVL(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) GRATHER_3,COUNT(E.REG_NO) GRATHER_6,COUNT(F.REG_NO) GRATHER_9,COUNT(G.REG_NO) GRATHER_1 FROM"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,ESTSTATUS FROM NEWCOMP_TAB WHERE  NVL(TRIM(STATUS),'NA') <> 'deleted' AND NVL(ESTSTATUS,'01')='02'  AND COMPLAINT=9 AND SUB_COMPLAINT=11 AND SUBSTR(REG_NO,1,1) IN ('2','3','5','7','8'))A,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD,PAYDT,SAPDEM,COLL FROM NEWCOMP_TAB WHERE REMARKS IN ('BRT','WRT') AND INTIMATE_DATE IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 )B,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS IN ('WRT') AND INTIMATE_DATE IS NOT NULL AND  NVL(TRIM(STATUS),'NA')='balance' AND PAYDT IS NOT NULL AND  NVL(COLL,0) > NVL(SAPDEM,0)  AND NVL(SAPDEM,0) >0)C,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) >=30 and (PAYDT-INTIMATE_DATE) <=89)D,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND  PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) > 90 and (PAYDT-INTIMATE_DATE) <=179)E,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL  AND NVL(TRIM(STATUS),'NA')='balance' AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) >= 180 and (PAYDT-INTIMATE_DATE) <=374 )F,"
					 * +
					 * " (SELECT REG_NO,CSPARTCD FROM NEWCOMP_TAB WHERE REMARKS ='BRT'  AND INTIMATE_DATE IS NOT NULL AND PAYDT IS NOT NULL AND NVL(TRIM(STATUS),'NA')='balance'  AND NVL(COLL,0) > NVL(SAPDEM,0) AND NVL(SAPDEM,0) >0 AND (PAYDT-INTIMATE_DATE) > 375)G,"
					 * + " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.CSPARTCD=S.SECCD" +
					 * " AND A.CSPARTCD=B.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=C.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=D.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=E.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=F.CSPARTCD(+)" +
					 * " AND A.CSPARTCD=G.CSPARTCD(+)" +
					 * " and cirname=? GROUP BY rollup(S.divname)";
					 */

					// added A sub quert " AND NOT EXISTS (SELECT REGNO FROM
					// ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)"
					String query = " SELECT nvl(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO)+COUNT(C.REG_NO) DEPT_TOTAL ,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO)+COUNT(G.REG_NO) TURNKEY_TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=179)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)" + " AND A.REG_NO=H.REG_NO(+)"
							+ " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND A.NCPARTCD=C.NCPARTCD(+)"
							+ " AND A.NCPARTCD=D.NCPARTCD(+)" + " AND A.NCPARTCD=E.NCPARTCD(+)"
							+ " AND A.NCPARTCD=F.NCPARTCD(+)" + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND A.NCPARTCD=I.NCPARTCD(+)"
							+ " AND A.NCPARTCD=J.NCPARTCD(+) AND CIRNAME='" + cscvo.getCircle()
							+ "'  GROUP BY ROLLUP(S.divname) ";

					reportPStmt = con.prepareStatement(query);
					// reportPStmt1.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO)+COUNT(C.REG_NO) DEPT_TOTAL ,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO)+COUNT(G.REG_NO) TURNKEY_TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=179)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)" + " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
							+ " AND A.REG_NO=E.REG_NO(+)" + " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
							+ " AND A.REG_NO=H.REG_NO(+)" + " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND A.NCPARTCD=C.NCPARTCD(+)" + " AND A.NCPARTCD=D.NCPARTCD(+)"
							+ " AND A.NCPARTCD=E.NCPARTCD(+)" + " AND A.NCPARTCD=F.NCPARTCD(+)"
							+ " AND A.NCPARTCD=G.NCPARTCD(+)" + " AND A.NCPARTCD=H.NCPARTCD(+)"
							+ " AND A.NCPARTCD=I.NCPARTCD(+)" + " AND A.NCPARTCD=J.NCPARTCD(+) AND  CIRNAME='"
							+ cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision()
							+ "'  GROUP BY ROLLUP(S.subname) ";

					reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());
					reportRst = reportPStmt.executeQuery();

					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO)+COUNT(C.REG_NO) DEPT_TOTAL ,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO)+COUNT(G.REG_NO) TURNKEY_TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=179)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)" + " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
							+ " AND A.REG_NO=E.REG_NO(+)" + " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
							+ " AND A.REG_NO=H.REG_NO(+)" + " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND A.NCPARTCD=C.NCPARTCD(+)" + " AND A.NCPARTCD=D.NCPARTCD(+)"
							+ " AND A.NCPARTCD=E.NCPARTCD(+)" + " AND A.NCPARTCD=F.NCPARTCD(+)"
							+ " AND A.NCPARTCD=G.NCPARTCD(+)" + " AND A.NCPARTCD=H.NCPARTCD(+)"
							+ " AND A.NCPARTCD=I.NCPARTCD(+)" + " AND A.NCPARTCD=J.NCPARTCD(+) " + " AND  CIRNAME='"
							+ cscvo.getCircle() + "' AND DIVNAME='" + cscvo.getDivision() + "' AND   subname='"
							+ cscvo.getSubDiv() + "'     GROUP BY ROLLUP(S.secname) ";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());
					// reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO)+COUNT(C.REG_NO) DEPT_TOTAL ,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO)+COUNT(G.REG_NO) TURNKEY_TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' "
							+ brt_status + ")A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=179)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)" + " AND A.REG_NO=H.REG_NO(+)"
							+ " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND A.NCPARTCD=C.NCPARTCD(+)"
							+ " AND A.NCPARTCD=D.NCPARTCD(+)" + " AND A.NCPARTCD=E.NCPARTCD(+)"
							+ " AND A.NCPARTCD=F.NCPARTCD(+)" + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND A.NCPARTCD=I.NCPARTCD(+)"
							+ " AND A.NCPARTCD=J.NCPARTCD(+) " + " GROUP BY ROLLUP(S.CIRNAME) ";

					reportPStmt = con.prepareStatement(query);
					System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}

				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(11));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(12));
							dmapobj.setTot_brt_turnkey(reportRst.getString(13));
							dmapobj.setTot_turnkey(reportRst.getString(14));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(11));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(12));
							dmapobj.setTot_brt_turnkey(reportRst.getString(13));
							dmapobj.setTot_turnkey(reportRst.getString(14));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}
			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	public CscpayVO getHtLt3PenAppBrtReportDetails111(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = c.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));
		String endDate1 = String.valueOf(curr_date);
		if (endDate1.length() == 1)
			endDate1 = "0".concat(endDate1);
		endDate = endDate1.concat("-")
				.concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		System.out.println("Date:" + startDate);

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					System.out.println("DIV");

					String query = "SELECT nvl(S.DIVNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO)+COUNT(C.REG_NO) DEPT_TOTAL ,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO)+COUNT(G.REG_NO) TURNKEY_TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=179)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J,"
							+ " (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER)S WHERE CIRNAME='" + cscvo.getCircle()
							+ "' AND A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)  AND A.REG_NO=D.REG_NO(+)  AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)  AND A.REG_NO=G.REG_NO(+)  AND A.REG_NO=H.REG_NO(+)"
							+ " AND A.REG_NO=I.REG_NO(+)  AND A.REG_NO=J.REG_NO(+)  AND A.NCPARTCD=S.SECCD"
							+ " AND A.NCPARTCD=B.NCPARTCD(+)  AND A.NCPARTCD=C.NCPARTCD(+)"
							+ " AND A.NCPARTCD=D.NCPARTCD(+)  AND A.NCPARTCD=E.NCPARTCD(+)"
							+ " AND A.NCPARTCD=F.NCPARTCD(+)  AND A.NCPARTCD=G.NCPARTCD(+)"
							+ " AND A.NCPARTCD=H.NCPARTCD(+)  AND A.NCPARTCD=I.NCPARTCD(+)"
							+ " AND A.NCPARTCD=J.NCPARTCD(+)   GROUP BY ROLLUP(S.DIVNAME) ";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.subname,'TOTAL'),COUNT(I.REG_NO)OB,COUNT(J.REG_NO) REGISTERED,COUNT(B.REG_NO) DELETED,COUNT(C.REG_NO)RELEASED,"
							+ " (COUNT(J.REG_NO)+COUNT(I.REG_NO)-COUNT(B.REG_NO)-COUNT(C.REG_NO)) OB_AFTER_DEL_REL, COUNT(K.REG_NO)WITHIN_SOP,COUNT(L.REG_NO)BEYOND_SOP,"
							+ " COUNT(D.REG_NO) TOBE_PAID_WITHIN_SOP,COUNT(M.REG_NO)TOBE_PAID_BEYOND_SOP,COUNT(E.REG_NO) PENDING_WRT, COUNT(F.REG_NO) PENDING_BRT,COUNT(N.REG_NO) TURNKEY,COUNT(G.REG_NO) REL_WRT,"
							+ " COUNT(H.REG_NO) REL_BRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL )A,"
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY FROM REP_FINAL WHERE  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE )J, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL)B,  "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE)K, "
							+ " (SELECT REG_NO,NCPARTCD,REG_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN    '"
							+ startDate + "'    AND SYSDATE)L, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT,SUPPLY_RELEASE_DATE FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS null  AND  SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE )C,"
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7')D, "
							+ " (SELECT REG_NO,NCPARTCD,TOTAMT,EXTDEM,INTIMATE_DATE FROM REP_FINAL WHERE   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null )M, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE upper (REPSTAT)  like '%WRT%' AND  SLADESC='Pending for service release')E, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE upper (REPSTAT)  like '%BRT%' AND  SLADESC='Pending for service release')F, "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE upper (REPSTAT)  like '%TKEY%' )N, "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT  FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) BETWEEN '0' AND  '15' AND SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE)G,  "
							+ " (SELECT REG_NO,NCPARTCD,MAXPRDT FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS NOT NULL AND  (SUPPLY_RELEASE_DATE - MAXPRDT) > 15 AND  SUPPLY_RELEASE_DATE BETWEEN    '"
							+ startDate + "'    AND SYSDATE )H, "
							+ " (SELECT REG_NO,NCPARTCD ,REPSTAT FROM REP_FINAL  WHERE  REPSTAT LIKE '%OB%' )I, "
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+) " + " AND A.REG_NO=C.REG_NO(+) "
							+ " AND A.REG_NO=D.REG_NO(+) " + " AND A.REG_NO=E.REG_NO(+)  "
							+ " AND A.REG_NO=F.REG_NO(+)  " + " AND A.REG_NO=G.REG_NO(+) "
							+ " AND A.REG_NO=H.REG_NO(+) " + " AND A.REG_NO=I.REG_NO(+) "
							+ " AND A.REG_NO=J.REG_NO(+)  " + " AND A.REG_NO=K.REG_NO(+)  "
							+ " AND A.REG_NO=L.REG_NO(+) " + " AND A.REG_NO=M.REG_NO(+) "
							+ " AND A.REG_NO=N.REG_NO(+)  " + " AND A.NCPARTCD=S.SECCD  "
							+ " AND A.CATEGORY_SUPPLY=J.CATEGORY_SUPPLY(+) " + " AND A.NCPARTCD=J.NCPARTCD(+) "
							+ " AND NVL(A.ESTSTATUS,'01')='02'   " + " " + category + " "
							// + " AND A.CATEGORY_SUPPLY LIKE '1%' "
							// + " AND upper(A.reg_no) not like '%H%' "
							+ " " + cattype + " "
							+ " and cirname=? and divname=? GROUP BY rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO)+COUNT(C.REG_NO) DEPT_TOTAL ,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO)+COUNT(G.REG_NO) TURNKEY_TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=179)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+) AND A.REG_NO=D.REG_NO(+) AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+) AND A.REG_NO=G.REG_NO(+) AND A.REG_NO=H.REG_NO(+)"
							+ " AND A.REG_NO=I.REG_NO(+) AND A.REG_NO=J.REG_NO(+) AND A.NCPARTCD=S.SECCD"
							+ " AND A.NCPARTCD=B.NCPARTCD(+) AND A.NCPARTCD=C.NCPARTCD(+)"
							+ " AND A.NCPARTCD=D.NCPARTCD(+) AND A.NCPARTCD=E.NCPARTCD(+)"
							+ " AND A.NCPARTCD=F.NCPARTCD(+) AND A.NCPARTCD=G.NCPARTCD(+)"
							+ " AND A.NCPARTCD=H.NCPARTCD(+) AND A.NCPARTCD=I.NCPARTCD(+)"
							+ " AND A.NCPARTCD=J.NCPARTCD(+) GROUP BY ROLLUP(S.CIRNAME) ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

				} else {
					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO)+COUNT(C.REG_NO) DEPT_TOTAL ,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO)+COUNT(G.REG_NO) TURNKEY_TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%')A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=179)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)" + " AND A.REG_NO=H.REG_NO(+)"
							+ " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND A.NCPARTCD=C.NCPARTCD(+)"
							+ " AND A.NCPARTCD=D.NCPARTCD(+)" + " AND A.NCPARTCD=E.NCPARTCD(+)"
							+ " AND A.NCPARTCD=F.NCPARTCD(+)" + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND A.NCPARTCD=I.NCPARTCD(+)"
							+ " AND A.NCPARTCD=J.NCPARTCD(+) " + " GROUP BY ROLLUP(S.CIRNAME) ";

					reportPStmt = con.prepareStatement(query);
					System.out.println(query);

				}
				reportRst = reportPStmt.executeQuery();
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(11));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(12));
							dmapobj.setTot_brt_turnkey(reportRst.getString(13));
							dmapobj.setTot_turnkey(reportRst.getString(14));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(11));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(12));
							dmapobj.setTot_brt_turnkey(reportRst.getString(13));
							dmapobj.setTot_turnkey(reportRst.getString(14));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// HT/LT3 new changes

	public CscpayVO getHtLt3PenAppBrtReportDetails_new(CscpayVO cscvo) throws Exception {

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = c.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));
		String endDate1 = String.valueOf(curr_date);
		if (endDate1.length() == 1)
			endDate1 = "0".concat(endDate1);
		endDate = endDate1.concat("-")
				.concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		//System.out.println("Date:" + startDate);

		if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			// cattype = " AND upper(A.reg_no) like '%H%' ";
			cattype = " AND upper(reg_no)   like '%H%' ";
		} else {
			// cattype = " AND upper(A.reg_no) not like '%H%' ";
			cattype = " AND upper(reg_no)  not like '%H%' ";
		}

		if ("HT".equalsIgnoreCase(cscvo.getCat())) {

			category = " ";
		} else {
			// category = " AND A.CATEGORY_SUPPLY LIKE '" + cscvo.getCat() + "%'
			// ";
			category = " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCat() + "%' ";
		}

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		// Connection con =
		// DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = " SELECT nvl(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=B.NCPARTCD(+) and s.cirname=? "
							+ " GROUP BY ROLLUP(S.divname)  ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = " SELECT nvl(S.subname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=B.NCPARTCD(+) and s.cirname=? and s.divname=? "
							+ " GROUP BY ROLLUP(S.subname)  ";
					// + " and cirname=? and divname=? GROUP BY
					// rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = " SELECT nvl(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=B.NCPARTCD(+) and s.cirname=? and s.divname=? and s.subname=?  "
							+ " GROUP BY ROLLUP(S.secname)  ";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = " SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=B.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " GROUP BY ROLLUP(S.CIRNAME)  ";
					reportPStmt = con.prepareStatement(query);
					System.out.println("123:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 2 WRT DEPT

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(c.REG_NO) WRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=c.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=c.NCPARTCD(+) and s.cirname=? "
							+ " GROUP BY ROLLUP(S.divname) ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(c.REG_NO) WRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=c.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=c.NCPARTCD(+) and s.cirname=? and s.divname=? "
							+ " GROUP BY ROLLUP(S.subname) ";
					// + " and cirname=? and divname=? GROUP BY
					// rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(c.REG_NO) WRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=c.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=c.NCPARTCD(+) and s.cirname=? and s.divname=? and s.subname=? "
							+ " GROUP BY ROLLUP(S.secname) ";
					// + " and cirname=? and divname=? and subname=? GROUP BY
					// rollup(S.secname) ORDER BY S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(c.REG_NO) WRT FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=c.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=c.NCPARTCD(+)"
							+ " GROUP BY ROLLUP(S.CIRNAME) ";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setWrt(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setWrt(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// BRT_DEPT_GRATHER_2

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(d.REG_NO) BRT_DEPT_GRATHER_2 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60  AND (SYSDATE-INTIMATE_DATE) <=179 )D,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=d.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=d.NCPARTCD(+) and s.cirname=? "
							+ " GROUP BY ROLLUP(S.divname)  ";
					// + " " + cattype + " " + " and cirname=? GROUP BY
					// rollup(S.divname) ORDER BY S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(d.REG_NO) BRT_DEPT_GRATHER_2 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60  AND (SYSDATE-INTIMATE_DATE) <=179)D,"
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=d.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=d.NCPARTCD(+) and s.cirname=? and s.divname=?  "
							+ " GROUP BY ROLLUP(S.subname)  ";
					// + " and cirname=? and divname=? GROUP BY
					// rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(d.REG_NO) BRT_DEPT_GRATHER_2 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60  AND (SYSDATE-INTIMATE_DATE) <=179)D,"
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=d.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=d.NCPARTCD(+) and s.cirname=? and s.divname=? and s.subname=?  "
							+ " GROUP BY ROLLUP(S.secname)  ";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(d.REG_NO) BRT_DEPT_GRATHER_2 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60  AND (SYSDATE-INTIMATE_DATE) <=179)D,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=d.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=d.NCPARTCD(+) "
							+ " GROUP BY ROLLUP(S.CIRNAME)  ";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setBrt_gtr_2months(reportRst.getString(2));
						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setBrt_gtr_2months(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 4 BRT_DEPT_GRATHER_6

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(e.REG_NO) BRT_DEPT_GRATHER_6 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)E, "
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=e.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=e.NCPARTCD(+) and s.cirname=? "
							+ " GROUP BY ROLLUP(S.divname) ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(e.REG_NO) BRT_DEPT_GRATHER_6 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)E, "
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=e.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=e.NCPARTCD(+) and s.cirname=? and s.divname=? "
							+ " GROUP BY ROLLUP(S.subname) ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(e.REG_NO) BRT_DEPT_GRATHER_6 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)E, "
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=e.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=e.NCPARTCD(+) and s.cirname=? and s.divname=? and s.subname=?  "
							+ " GROUP BY ROLLUP(S.secname) ";

					// + " and cirname=? and divname=? and subname=? GROUP BY
					// rollup(S.secname) ORDER BY S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(e.REG_NO) BRT_DEPT_GRATHER_6 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)E, "
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=e.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=e.NCPARTCD(+)"
							+ " GROUP BY ROLLUP(S.CIRNAME) ";

					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setBrt_gtr_6months(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setBrt_gtr_6months(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 5 BRT_DEPT_GRATHER_1

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(f.REG_NO) BRT_DEPT_GRATHER_1 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F, "
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=f.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=f.NCPARTCD(+) and s.cirname=? "
							+ " GROUP BY ROLLUP(S.divname) ";
					// + " " + cattype + " " + " and cirname=? GROUP BY
					// rollup(S.divname) ORDER BY S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(f.REG_NO) BRT_DEPT_GRATHER_1 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F, "
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=f.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=f.NCPARTCD(+) and s.cirname=? and s.divname=?  "
							+ " GROUP BY ROLLUP(S.subname) ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(f.REG_NO) BRT_DEPT_GRATHER_1 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F, "
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=f.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=f.NCPARTCD(+) and s.cirname=? and s.divname=? and s.subname=?  "
							+ " GROUP BY ROLLUP(S.secname) ";
					// + " and cirname=? and divname=? and subname=? GROUP BY
					// rollup(S.secname) ORDER BY S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(f.REG_NO) BRT_DEPT_GRATHER_1 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F, "
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=f.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=f.NCPARTCD(+)"
							+ " GROUP BY ROLLUP(S.CIRNAME) ";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setBrt_gtr_1year(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setBrt_gtr_1year(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 6 wrt_tkey

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(g.REG_NO) WRT_TURNKEY FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=g.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=g.NCPARTCD(+) and s.cirname=? "
							+ "  GROUP BY ROLLUP(S.divname) ";
					// + " " + cattype + " " + " and cirname=? GROUP BY
					// rollup(S.divname) ORDER BY S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(g.REG_NO) WRT_TURNKEY FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=g.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=g.NCPARTCD(+) and s.cirname=? and s.divname=?  "
							+ "  GROUP BY ROLLUP(S.subname) ";
					// + " and cirname=? and divname=? GROUP BY
					// rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(g.REG_NO) WRT_TURNKEY FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=g.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=g.NCPARTCD(+) and s.cirname=? and s.divname=? and s.subname=?   "
							+ "  GROUP BY ROLLUP(S.secname) ";
					// + " and cirname=? and divname=? and subname=? GROUP BY
					// rollup(S.secname) ORDER BY S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(g.REG_NO) WRT_TURNKEY FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=g.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=g.NCPARTCD(+)"
							+ "  GROUP BY ROLLUP(S.CIRNAME) ";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setWrt_turnkey(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setWrt_turnkey(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 7 BRT_TURNKEY_GRATHER_3

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(h.REG_NO) BRT_TURNKEY_GRATHER_3 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=179)H,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=h.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=h.NCPARTCD(+) and s.cirname=? "
							+ " GROUP BY ROLLUP(S.divname) ";
					// + " " + cattype + " " + " and cirname=? GROUP BY
					// rollup(S.divname) ORDER BY S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(h.REG_NO) BRT_TURNKEY_GRATHER_3 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=179)H,"
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=h.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=h.NCPARTCD(+) and s.cirname=? and s.divname=?  "
							+ " GROUP BY ROLLUP(S.subname) ";
					// + " and cirname=? and divname=? GROUP BY
					// rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(h.REG_NO) BRT_TURNKEY_GRATHER_3 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=179)H,"
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=h.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=h.NCPARTCD(+) and s.cirname=? and s.divname=? and s.subname=?  "
							+ " GROUP BY ROLLUP(S.secname) ";
					// + " and cirname=? and divname=? and subname=? GROUP BY
					// rollup(S.secname) ORDER BY S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(h.REG_NO) BRT_TURNKEY_GRATHER_3 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=179)H,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S "
							+ " WHERE A.REG_NO=h.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=h.NCPARTCD(+)"
							+ " GROUP BY ROLLUP(S.CIRNAME) ";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setTurnkey_gtr_2months(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setTurnkey_gtr_2months(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 7 BRT_TURNKEY_GRATHER_6

				if ("DIV".equals(cscvo.getFlag())) {
					String query = " SELECT nvl(S.divname,'TOTAL'),COUNT(i.REG_NO) BRT_TURNKEY_GRATHER_6 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=i.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=i.NCPARTCD(+) and s.cirname=? "
							+ " GROUP BY ROLLUP(S.divname)  ";
					// + " " + cattype + " " + " and cirname=? GROUP BY
					// rollup(S.divname) ORDER BY S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = " SELECT nvl(S.subname,'TOTAL'),COUNT(i.REG_NO) BRT_TURNKEY_GRATHER_6 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=i.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=i.NCPARTCD(+) and s.cirname=? and s.divname=?  "
							+ " GROUP BY ROLLUP(S.subname)  ";
					// + " and cirname=? and divname=? GROUP BY
					// rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = " SELECT nvl(S.secname,'TOTAL'),COUNT(i.REG_NO) BRT_TURNKEY_GRATHER_6 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=i.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=i.NCPARTCD(+) and s.cirname=? and s.divname=? and s.subname=?  "
							+ " GROUP BY ROLLUP(S.secname)  ";
					// + " and cirname=? and divname=? and subname=? GROUP BY
					// rollup(S.secname) ORDER BY S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = " SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(i.REG_NO) BRT_TURNKEY_GRATHER_6 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=i.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=i.NCPARTCD(+)"
							+ " GROUP BY ROLLUP(S.CIRNAME)  ";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setTurnkey_gtr_6months(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setTurnkey_gtr_6months(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 7 BRT_TURNKEY_GRATHER_1year

				if ("DIV".equals(cscvo.getFlag())) {
					String query = " SELECT nvl(S.divname,'TOTAL'),COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J, "
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=J.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=J.NCPARTCD(+) and s.cirname=? "
							+ " GROUP BY ROLLUP(S.divname)  ";
					// + " " + cattype + " " + " and cirname=? GROUP BY
					// rollup(S.divname) ORDER BY S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = " SELECT nvl(S.subname,'TOTAL'),COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J, "
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=J.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=J.NCPARTCD(+) and s.cirname=? and s.divname=?  "
							+ " GROUP BY ROLLUP(S.subname)  ";
					// + " and cirname=? and divname=? GROUP BY
					// rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = " SELECT nvl(S.secname,'TOTAL'),COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J, "
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=J.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=J.NCPARTCD(+) and s.cirname=? and s.divname=?  and s.subname=?  "
							+ " GROUP BY ROLLUP(S.secname)  ";
					// + " and cirname=? and divname=? and subname=? GROUP BY
					// rollup(S.secname) ORDER BY S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = " SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1 FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) )A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J, "
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S "
							+ "  WHERE A.REG_NO=J.REG_NO(+) and A.NCPARTCD=S.SECCD  AND A.NCPARTCD=J.NCPARTCD(+)"
							+ " GROUP BY ROLLUP(S.CIRNAME)  ";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setTurnkey_gtr_1year(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setTurnkey_gtr_1year(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

			/*
			 * try { if (con != null) {
			 * 
			 * DBConnectionManager.getInstance().freeConnection(con);
			 * con.close(); } if (reportPStmt != null) reportPStmt.close(); if
			 * (reportRst != null) reportRst.close(); } catch (Exception ex) {
			 * ex.printStackTrace(); }
			 */}
		return cscvo;
	}

	// exppport Extention LT3 and Ht Services

	public CscpayVO getexportcscHTLt(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Calendar cal = Calendar.getInstance();
		int curr_year = cal.get(Calendar.YEAR);
		int curr_month = cal.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = cal.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		String circle = "";
		
		String type = "";

		// String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		// Connection con =
		// DBConnectionManager.getInstance().getConnection("cscdb");
		// Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("Extension1".equalsIgnoreCase(cscvo.getStatus())) {

					if ("HT".equalsIgnoreCase(cscvo.getCategory())) {
						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'   AND "
									// + " CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()+ "%' and "
									// + ""
									+ " upper(REPSTAT) like '%TKEY%'  and upper(REG_NO)  like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = "  NVL(ESTSTATUS,'01')='02'   "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "    AND upper(reg_no)   like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  "
									// + "AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "   AND upper(reg_no)   like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and    PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
									+ startDate + "'     AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL "
									// + "AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "  AND upper(reg_no)   like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
									+ startDate + "'   AND SYSDATE  "
									// + "AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "   AND upper(reg_no)   like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NOT NULL      AND upper(reg_no)   like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and   PENDING_STAT='WRT' AND  SLADESC='Pending for service release'   "
									// + " AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "  AND upper(reg_no)   like '%H%' ";
							type = " and NVL(TRIM(EXECUTION_TYPE),'NA')='Department'";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and PENDING_STAT='BRT' AND  SLADESC='Pending for service release' "
									// + "AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "    AND upper(reg_no)   like '%H%' ";
							type = " and NVL(TRIM(EXECUTION_TYPE),'NA')='Department'";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "     NVL(ESTSTATUS,'01')='02' and ( PENDING_STAT IN('BRT','WRT','TKEY') and SLADESC='Pending for service release'  or upper (REPSTAT)  like '%TKEY%')"
									// + " AND PENDING_STAT
									// IN('BRT','WRT','TKEY') and
									// SLADESC='Pending for service release'"
									// + " AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "   AND upper(reg_no)   like '%H%'  ";
						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND ((upper(REPSTAT) like '%WRT%'  and SLADESC='Pending for service release' ) or (upper(REPSTAT) like '%BRT%' and  SLADESC='Pending for service release') or (upper(REPSTAT) like '%TKEY%' ) ) and upper(REG_NO) like '%H%' ";
						} else if ("DEM_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02'  "
									// + " AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory()
									// + "%' "
									+ "  AND upper(reg_no)  not like '%H%'   AND  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("DEM_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "    AND upper(reg_no)   like '%H%'   AND   NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("PAID_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'  "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "  AND upper(reg_no)   like '%H%'  AND   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7' ";
						} else if ("PAID_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'  "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%'"
									+ "     AND upper(reg_no)   like '%H%'   "
									+ " AND  NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null ";
						} else {
							status = "";
						}
					} else {

						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%' and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) not like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = "  NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and    PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
									+ startDate
									+ "'     AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
									+ startDate + "'   AND SYSDATE  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									+ " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NOT NULL      AND upper(reg_no)  not like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and   PENDING_STAT='WRT' AND  SLADESC='Pending for service release'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
							type = " and NVL(TRIM(EXECUTION_TYPE),'NA')='Department'";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and PENDING_STAT='BRT' AND  SLADESC='Pending for service release' AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
							type = " and NVL(TRIM(EXECUTION_TYPE),'NA')='Department'";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "     NVL(ESTSTATUS,'01')='02' AND PENDING_STAT IN('BRT','WRT') and SLADESC='Pending for service release'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%'  ";
						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) not  like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
						} else if ("DEM_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   AND  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("DEM_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   AND   NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("PAID_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'  AND   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7' ";
						} else if ("PAID_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   "
									+ " AND  NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null ";
						} else {
							status = "";
						}

					}
					// }
				} // else {}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {

						
						resultSet = statement.executeQuery(
								"select row_number() over (partition by null order by null) sno,B.cirname cirname,B.divname Division,b.subname subname,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "  and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "' " + type + " order by A.AGEPENDENCY desc");
					} else {
						
						resultSet = statement.executeQuery(
								"select row_number() over (partition by null order by null) sno,B.cirname cirname,B.divname Division,b.subname subname,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE  from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD " + type + ""
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "   and B.cirname='" + cscvo.getCircle() + "'" + type
										+ " order by A.AGEPENDENCY desc");

					}

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						
						resultSet = statement.executeQuery(
								"select row_number() over (partition by null order by null) sno,B.cirname cirname,B.divname Division,b.subname subname,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,SECNAME,subname,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "  and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "'  and subname='" + cscvo.getSubDiv() + "'" + type
										+ " order by A.AGEPENDENCY desc");
					} else {
						
						resultSet = statement.executeQuery(
								"select row_number() over (partition by null order by null) sno,B.cirname cirname,B.divname Division,b.subname subname,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "   and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "' " + type + " order by A.AGEPENDENCY desc");
					}

				} else if ("SEC".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
						resultSet = statement.executeQuery(
								"select row_number() over (partition by null order by null) sno,B.cirname cirname,B.divname Division,b.subname subname,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "   and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "'  and subname='" + cscvo.getSubDiv()
										+ "' and secname='" + cscvo.getSec() + "'" + type
										+ " order by A.AGEPENDENCY desc");
					} else {
						
						resultSet = statement.executeQuery(
								"select row_number() over (partition by null order by null) sno,B.cirname cirname,B.divname Division,b.subname subname,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "  and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "'  and subname='" + cscvo.getSubDiv() + "'" + type
										+ " order by A.AGEPENDENCY desc");
					}
				} else {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {

						
/*						String query = "select  row_number() over (partition by null order by null) sno,B.cirname cirname,B.divname Division,b.subname subname,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
								+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
								+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
								+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
								+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
								+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
								+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
								+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
								+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
								+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
								+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
								+ "   " + " and    B.cirname='" + cscvo.getCircle() + "' "
								+ type + " order by A.AGEPENDENCY desc";
*/
						//System.out.println("3:"+query);
						resultSet = statement.executeQuery(
								"select row_number() over (partition by null order by null) sno,B.cirname cirname,B.divname Division,b.subname subname,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "  and B.cirname='" + cscvo.getCircle() + "'" + type
										+ " order by A.AGEPENDENCY desc");
					} else {
						
						resultSet = statement.executeQuery(
								"select row_number() over (partition by null order by null) sno,B.cirname cirname,B.divname Division,b.subname subname,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD  "  + type + ""
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ " order by A.AGEPENDENCY desc");
					}

				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						/*
						 * * vo.setCircleName(reportRst.getString(1));
						 * vo.setDivisionName(reportRst.getString(2));
						 * vo.setDcbCollection(reportRst.getString(3));
						 * vo.setDcbDemand(reportRst.getString(4));
						 * vo.setDcbPerCent(reportRst.getString(5));
						 * vo.setCummColl(reportRst.getString(8));
						 */

						vo.setCircleName(resultSet.getString(2));
						vo.setDivision(resultSet.getString(3));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(4));
						vo.setSec(resultSet.getString(5));
						// vo.setType(resultSet.getString(6));
						vo.setReg_no(resultSet.getString(6));
						vo.setRegDate(resultSet.getString(7));
						vo.setCunsu_name(resultSet.getString(8));

						// vo.setAddress(resultSet.getString(10));
						// vo.setPhono(resultSet.getString(11));
						// vo.setS_group(resultSet.getString(12));

						vo.setCat(resultSet.getString(9));
						vo.setLoad(resultSet.getString(10));
						// vo.setPurpose(resultSet.getString(15));
						vo.setDemand(resultSet.getString(11));
						vo.setPaid(resultSet.getString(12));

						// vo.setGroup_demand(resultSet.getString(18));
						// vo.setGroup_coll(resultSet.getString(19));

						vo.setPaid_date(resultSet.getString(13));
						vo.setRel_date(resultSet.getString(14));

						vo.setAgependency(resultSet.getString(15));
						vo.setStatus(resultSet.getString(16));
						vo.setExe_type(resultSet.getString(17));
						vo.setRemarks(resultSet.getString(18));
						// vo.setPen_simply_brt(resultSet.getString(16));
						// vo.setExe_type(resultSet.getString(17));
						/*
						 * vo.setUscno(resultSet.getString(22));
						 * vo.setRef_no(resultSet.getString(23));
						 * 
						 * vo.setPen_simply_brt(resultSet.getString(24));
						 * vo.setSla_desc(resultSet.getString(25));
						 * 
						 * vo.setExe_type(resultSet.getString(26));
						 * vo.setStatus(resultSet.getString(27));
						 */
						// vo.setCategory(reportRst.getString(4));
						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}

	// HT/LT3 Service wise download

	@SuppressWarnings("unused")
	public void exportHtLt3BrtServicesDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String circle = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
					status = "  and  (PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL) "
							+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
				} else if ("DWRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "  and  (PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL ) "
							+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
				} else if ("DBRT_GTR_2MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
					status = "  and  (PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60 AND (SYSDATE-INTIMATE_DATE) <=179) "
							+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
				} else if ("DBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
					status = "  and  (PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374) "
							+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
				} else if ("DBRT_GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
					status = "  and  (PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375) "
							+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
				} else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "  and  (PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL) "
							+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
				} else if ("TBRT_GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
					status = "  and  (PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=179) "
							+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
				} else if ("TBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
					status = "  and  (PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374) "
							+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
				} else if ("TBRT_GTR_IYEAR".equalsIgnoreCase(cscvo.getCtype())) {
					status = "  and  (PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375) "
							+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";

				} else if ("TOT_BRT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "  and  (PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 60) "
							+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
				} else if ("TOT_BRT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
					status = "  and  (PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  > 90) "
							+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
				} else {
					status = "";
				}

				if ("DIV".equals(cscvo.getFlag())) {
					if (cscvo.getDivision().equalsIgnoreCase("TOTAL")) {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
							circle = " ";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "'";
						}
					}

					else {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
							circle = "  and divname='" + cscvo.getDivision() + "'";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "'";
						}
					}

				} else if ("SUB_DIV".equals(cscvo.getFlag()))

				{
					if (cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")
								&& cscvo.getDivision().equalsIgnoreCase("TOTAL")) {
							circle = " ";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "'";
						}

					}

					else {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")
								&& cscvo.getDivision().equalsIgnoreCase("TOTAL")) {
							circle = " and subname='" + cscvo.getSubDiv() + "'";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "'";
						}
					}

				}

				else if ("SEC".equals(cscvo.getFlag())) {
					if (cscvo.getSec().equalsIgnoreCase("TOTAL")) {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL") && cscvo.getDivision().equalsIgnoreCase("TOTAL")
								&& cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
							circle = " ";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "'";
						}

					}

					else {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL") && cscvo.getDivision().equalsIgnoreCase("TOTAL")
								&& cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
							circle = " and secname='" + cscvo.getSec() + "'";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec() + "'";
						}
					}

				} else if ("CIR".equals(cscvo.getFlag())) {

					if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
						circle = "";
					}

					else {
						circle = " and cirname='" + cscvo.getCircle() + "'";
					}

				} else {

				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(
					 * 
					 * " select row_number() over (partition by null order by null) sno,divname Division,secname Section,reg_no,reg_date,consumer_name ,category_supply CAT,"
					 * +
					 * " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,nvl(maxprdt,reg_date) paid_date"
					 * +
					 * " ,trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
					 * + " ,EXECUTION_TYPE  " +
					 * " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + " " + circle + ""
					 * +
					 * " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * + " ,reg_date");
					 */
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname,divname Division,subname,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE"
									+ " from rep_final a, spdclmaster  b  " + " where a.ncpartcd=b.seccd  " + status
									+ "" + circle + ""
									// + " PENDING_STAT IN ('WRT','BRT') AND
									// INTIMATE_DATE IS NOT NULL AND MAXPRDT IS
									// NOT NULL AND SLCPRDT IS NOT NULL AND
									// SDPRDT IS NOT NULL AND
									// SUPPLY_RELEASE_DATE IS NULL"
									// + " and NVL(TRIM(PENDING_STAT),'NA') <>
									// 'DEL' AND NVL(ESTSTATUS,'01')='02' AND
									// CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS
									// (SELECT REGNO FROM
									// ONLINEHTINSPECTIONREPORT WHERE
									// REG_NO=REGNO) "
									// + " and cirname='ANANTHAPUR'"
									+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) ");

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,divname Division,secname Section,reg_no,reg_date,consumer_name ,category_supply CAT,"
					 * +
					 * " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,nvl(maxprdt,reg_date) paid_date"
					 * +
					 * " ,trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
					 * + " ,EXECUTION_TYPE  " +
					 * " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + "" + circle + ""
					 * +
					 * " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * + " ,reg_date");
					 */
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname,divname Division,subname,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE"
									+ " from rep_final a, spdclmaster  b  " + " where a.ncpartcd=b.seccd  " + status
									+ "" + circle + ""
									// + " PENDING_STAT IN ('WRT','BRT') AND
									// INTIMATE_DATE IS NOT NULL AND MAXPRDT IS
									// NOT NULL AND SLCPRDT IS NOT NULL AND
									// SDPRDT IS NOT NULL AND
									// SUPPLY_RELEASE_DATE IS NULL"
									// + " and NVL(TRIM(PENDING_STAT),'NA') <>
									// 'DEL' AND NVL(ESTSTATUS,'01')='02' AND
									// CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS
									// (SELECT REGNO FROM
									// ONLINEHTINSPECTIONREPORT WHERE
									// REG_NO=REGNO) "
									// + " and cirname='ANANTHAPUR'"
									+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) ");

				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(
					 * 
					 * "select row_number() over (partition by null order by null) sno,divname Division,secname Section,reg_no,reg_date,consumer_name ,category_supply CAT,"
					 * +
					 * " contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,nvl(maxprdt,reg_date) paid_date"
					 * 
					 * +
					 * " ,trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY "
					 * + " ,EXECUTION_TYPE  " +
					 * " from rep_final a, spdclmaster  b " +
					 * " where a.ncpartcd=b.seccd " + status + "" + circle + ""
					 * 
					 * +
					 * "  and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname"
					 * + " ,reg_date");
					 */
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname,divname Division,subname,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE"
									+ " from rep_final a, spdclmaster  b  " + " where a.ncpartcd=b.seccd  " + status
									+ "" + circle + ""
									// + " PENDING_STAT IN ('WRT','BRT') AND
									// INTIMATE_DATE IS NOT NULL AND MAXPRDT IS
									// NOT NULL AND SLCPRDT IS NOT NULL AND
									// SDPRDT IS NOT NULL AND
									// SUPPLY_RELEASE_DATE IS NULL"
									// + " and NVL(TRIM(PENDING_STAT),'NA') <>
									// 'DEL' AND NVL(ESTSTATUS,'01')='02' AND
									// CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS
									// (SELECT REGNO FROM
									// ONLINEHTINSPECTIONREPORT WHERE
									// REG_NO=REGNO) "
									// + " and cirname='ANANTHAPUR'"
									+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) ");
				} else {

					String query = "  select row_number() over (partition by null order by null) sno,cirname,divname Division,subname,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE"
							+ " from rep_final a, spdclmaster  b  " + " where a.ncpartcd=b.seccd  and "
							+ " PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL"
							+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) "
							+ " and cirname='ANANTHAPUR' and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by ((SYSDATE-INTIMATE_DATE)/30) desc";
					System.out.println(query);
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname,divname Division,subname,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE"
									+ " from rep_final a, spdclmaster  b  " + " where a.ncpartcd=b.seccd  " + status
									+ "" + circle + ""
									// + " PENDING_STAT IN ('WRT','BRT') AND
									// INTIMATE_DATE IS NOT NULL AND MAXPRDT IS
									// NOT NULL AND SLCPRDT IS NOT NULL AND
									// SDPRDT IS NOT NULL AND
									// SUPPLY_RELEASE_DATE IS NULL"
									// + " and NVL(TRIM(PENDING_STAT),'NA') <>
									// 'DEL' AND NVL(ESTSTATUS,'01')='02' AND
									// CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS
									// (SELECT REGNO FROM
									// ONLINEHTINSPECTIONREPORT WHERE
									// REG_NO=REGNO) "
									// + " and cirname='ANANTHAPUR'"
									+ " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) ");

					// }
					// reportPStmt = con.prepareStatement(resultSet);
				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// extension download for exceution type

	
	public void exportEstimate5ADetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Calendar cal = Calendar.getInstance();
		int curr_year = cal.get(Calendar.YEAR);
		int curr_month = cal.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = cal.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		String circle = "";
		String type = "";

		if ("TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
			circle = "";
		} else {
			circle = "and cirname='" + cscvo.getCircle() + "'";
		}

		if ("TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
			circle = "and cirname='" + cscvo.getCircle() + "'";
		} else {
			circle = "and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'";
		}

		try {
			if (con != null) {

				if ("Extension1".equalsIgnoreCase(cscvo.getStatus())) {

					if ("HT".equalsIgnoreCase(cscvo.getCategory())) {
						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'   AND "
									// + " CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()+ "%' and "
									// + ""
									+ " upper(REPSTAT) like '%TKEY%'  and upper(REG_NO)  like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = "  NVL(ESTSTATUS,'01')='02'   "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "    AND upper(reg_no)   like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  "
									// + "AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "   AND upper(reg_no)   like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and    PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
									+ startDate + "'     AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL "
									// + "AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "  AND upper(reg_no)   like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
									+ startDate + "'   AND SYSDATE  "
									// + "AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "   AND upper(reg_no)   like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NOT NULL      AND upper(reg_no)   like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and   PENDING_STAT='WRT' AND  SLADESC='Pending for service release'   "
									// + " AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "  AND upper(reg_no)   like '%H%' ";
							type = " and NVL(TRIM(EXECUTION_TYPE),'NA')='Department'";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and PENDING_STAT='BRT' AND  SLADESC='Pending for service release' "
									// + "AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "    AND upper(reg_no)   like '%H%' ";
							type = " and NVL(TRIM(EXECUTION_TYPE),'NA')='Department'";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "     NVL(ESTSTATUS,'01')='02' and ( PENDING_STAT IN('BRT','WRT','TKEY') and SLADESC='Pending for service release'  or upper (REPSTAT)  like '%TKEY%')"
									// + " AND PENDING_STAT
									// IN('BRT','WRT','TKEY') and
									// SLADESC='Pending for service release'"
									// + " AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "   AND upper(reg_no)   like '%H%'  ";
						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND ((upper(REPSTAT) like '%WRT%'  and SLADESC='Pending for service release' ) or (upper(REPSTAT) like '%BRT%' and  SLADESC='Pending for service release') or (upper(REPSTAT) like '%TKEY%' ) ) and upper(REG_NO) like '%H%' ";
						} else if ("DEM_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02'  "
									// + " AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory()
									// + "%' "
									+ "  AND upper(reg_no)  not like '%H%'   AND  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("DEM_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "    AND upper(reg_no)   like '%H%'   AND   NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("PAID_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'  "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "  AND upper(reg_no)   like '%H%'  AND   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7' ";
						} else if ("PAID_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'  "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%'"
									+ "     AND upper(reg_no)   like '%H%'   "
									+ " AND  NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null ";
						} else {
							status = "";
						}
					} else {

						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%' and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) not like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = "  NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' ";
							
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and    PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
									+ startDate
									+ "'     AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
							
							System.out.println(status);
							
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
									+ startDate + "'   AND SYSDATE  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									+ " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NOT NULL      AND upper(reg_no)  not like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and   PENDING_STAT='WRT' AND  SLADESC='Pending for service release'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
							type = " and NVL(TRIM(EXECUTION_TYPE),'NA')='Department'";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and PENDING_STAT='BRT' AND  SLADESC='Pending for service release' AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
							type = " and NVL(TRIM(EXECUTION_TYPE),'NA')='Department'";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "     NVL(ESTSTATUS,'01')='02' AND ( PENDING_STAT IN('BRT','WRT','TKEY') and SLADESC='Pending for service release'  or upper (REPSTAT)  like '%TKEY%')  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%'  ";
						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) not  like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
						} else if ("DEM_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   AND  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("DEM_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   AND   NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("PAID_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'  AND   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7' ";
						} else if ("PAID_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   "
									+ " AND  NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null ";
						} else {
							status = "";
						}

					}
					// }
				} // else {}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {

						
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA')='YSR JALAKALA')A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ " and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "' " + type + " order by A.AGEPENDENCY desc");
					} else {
						
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA')='YSR JALAKALA')A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "  and B.cirname='" + cscvo.getCircle() + "'" + type
										+ " order by A.AGEPENDENCY desc");

					}

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA')='YSR JALAKALA')A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,SECNAME,subname,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "   and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "'  and subname='" + cscvo.getSubDiv() + "'" + type
										+ " order by A.AGEPENDENCY desc");
					} else {
						
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA')='YSR JALAKALA')A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "   and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "' " + type + " order by A.AGEPENDENCY desc");
					}

				} else if ("SEC".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA')='YSR JALAKALA')A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "  and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "'  and subname='" + cscvo.getSubDiv()
										+ "' and secname='" + cscvo.getSec() + "'" + type
										+ " order by A.AGEPENDENCY desc");
					} else {
						
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA')='YSR JALAKALA')A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "  and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "'  and subname='" + cscvo.getSubDiv() + "'" + type
										+ " order by A.AGEPENDENCY desc");
					}
				} else {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {

						
						String query = "select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
								+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
								+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
								+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
								+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
								+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
								+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
								+ status + " AND NVL(consumer_status_val,'NA')='YSR JALAKALA')A,"
								+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
								+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
								+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
								+ "  " + "  and B.cirname='" + cscvo.getCircle() + "' "
								+ type + " order by A.AGEPENDENCY desc";

						//System.out.println("TEST GOUSE:"+query);
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA')='YSR JALAKALA')A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "  and B.cirname='" + cscvo.getCircle() + "'" + type
										+ " order by A.AGEPENDENCY desc");
					} else {
						
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA')='YSR JALAKALA')A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD   "
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ " order by A.AGEPENDENCY desc");
					}

				}

				response.setContentType("application/download");
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {

			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	
		
	}
	
	
	@SuppressWarnings("unused")
	public void exportEstimatedDetails1(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Calendar cal = Calendar.getInstance();
		int curr_year = cal.get(Calendar.YEAR);
		int curr_month = cal.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = cal.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		String circle = "";
		String type = "";

		if ("TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
			circle = "";
		} else {
			circle = "and cirname='" + cscvo.getCircle() + "'";
		}

		if ("TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
			circle = "and cirname='" + cscvo.getCircle() + "'";
		} else {
			circle = "and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'";
		}

		try {
			if (con != null) {

				if ("Extension1".equalsIgnoreCase(cscvo.getStatus())) {

					if ("HT".equalsIgnoreCase(cscvo.getCategory())) {
						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'   AND "
									// + " CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()+ "%' and "
									// + ""
									+ " upper(REPSTAT) like '%TKEY%'  and upper(REG_NO)  like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = "  NVL(ESTSTATUS,'01')='02'   "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "    AND upper(reg_no)   like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  "
									// + "AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "   AND upper(reg_no)   like '%H%' ";
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and    PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
									+ startDate + "'     AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL "
									// + "AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "  AND upper(reg_no)   like '%H%' ";
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
									+ startDate + "'   AND SYSDATE  "
									// + "AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "   AND upper(reg_no)   like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NOT NULL      AND upper(reg_no)   like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and   PENDING_STAT='WRT' AND  SLADESC='Pending for service release'   "
									// + " AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "  AND upper(reg_no)   like '%H%' ";
							type = " and NVL(TRIM(EXECUTION_TYPE),'NA')='Department'";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and PENDING_STAT='BRT' AND  SLADESC='Pending for service release' "
									// + "AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "    AND upper(reg_no)   like '%H%' ";
							type = " and NVL(TRIM(EXECUTION_TYPE),'NA')='Department'";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "     NVL(ESTSTATUS,'01')='02' and ( PENDING_STAT IN('BRT','WRT','TKEY') and SLADESC='Pending for service release'  or upper (REPSTAT)  like '%TKEY%')"
									// + " AND PENDING_STAT
									// IN('BRT','WRT','TKEY') and
									// SLADESC='Pending for service release'"
									// + " AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory() + "%' "
									+ "   AND upper(reg_no)   like '%H%'  ";
						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND ((upper(REPSTAT) like '%WRT%'  and SLADESC='Pending for service release' ) or (upper(REPSTAT) like '%BRT%' and  SLADESC='Pending for service release') or (upper(REPSTAT) like '%TKEY%' ) ) and upper(REG_NO) like '%H%' ";
						} else if ("DEM_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02'  "
									// + " AND CATEGORY_SUPPLY LIKE '"
									// + cscvo.getCategory()
									// + "%' "
									+ "  AND upper(reg_no)  not like '%H%'   AND  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("DEM_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "    AND upper(reg_no)   like '%H%'   AND   NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("PAID_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'  "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%' "
									+ "  AND upper(reg_no)   like '%H%'  AND   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7' ";
						} else if ("PAID_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'  "
									// + " AND CATEGORY_SUPPLY LIKE '" +
									// cscvo.getCategory()
									// + "%'"
									+ "     AND upper(reg_no)   like '%H%'   "
									+ " AND  NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null ";
						} else {
							status = "";
						}
					} else {

						if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%' and upper(REPSTAT) like '%TKEY%'  and upper(REG_NO) not like '%H%' ";
						} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
							// status = " and upper(REPSTAT) like '%OB%' and
							// upper(REG_NO) like '%H%' ";
							status = "  NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' and REPSTAT LIKE '%OB%'   ";
						} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and (TRUNC(REG_DATE) BETWEEN       '" + startDate
									+ "'      AND SYSDATE)  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'      AND upper(reg_no)  not like '%H%' ";
							
						} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
						} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and    PENDING_STAT='DEL' AND SLADESC='Rejected' AND  TRUNC(RESPONSE_DATE) BETWEEN   '"
									+ startDate
									+ "'     AND SYSDATE AND SDPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
							
							
							
							System.out.println("status"+status);
							
						} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and  NVL(REJECTED,'Y') <> 'X'  AND SUPPLY_RELEASE_DATE IS  NULL AND  SUPPLY_RELEASE_DATE BETWEEN  '"
									+ startDate + "'   AND SYSDATE  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%' ";
						} else if ("OBREL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and NVL(REJECTED,'Y') <> 'X' and (repstat like '%OB%' or repstat like '%REG%') "
									+ " AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory() + "%' "
									+ " AND TRUNC(NVL(RESPONSE_DATE,SYSDATE)) BETWEEN '" + startDate + "' AND SYSDATE "
									+ " and SUPPLY_RELEASE_DATE IS NOT NULL      AND upper(reg_no)  not like '%H%' ";
						} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02' and   PENDING_STAT='WRT' AND  SLADESC='Pending for service release'  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'     AND upper(reg_no)  not like '%H%' ";
							type = " and NVL(TRIM(EXECUTION_TYPE),'NA')='Department'";
						} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02' and PENDING_STAT='BRT' AND  SLADESC='Pending for service release' AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%' ";
							type = " and NVL(TRIM(EXECUTION_TYPE),'NA')='Department'";
						} else if ("WRTBRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "     NVL(ESTSTATUS,'01')='02' AND ( PENDING_STAT IN('BRT','WRT','TKEY') and SLADESC='Pending for service release'  or upper (REPSTAT)  like '%TKEY%')  AND CATEGORY_SUPPLY LIKE '"
									+ cscvo.getCategory() + "%'      AND upper(reg_no)  not like '%H%'  ";
						} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
							status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' ";
						} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   (upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) not  like '%TKEY%'  ) and upper(REG_NO) like '%H%' ";
						} else if ("DEM_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "    NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   AND  NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) BETWEEN '0' AND '7'   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("DEM_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   AND   NVL(REJECTED,'Y') <> 'X' AND (INTIMATE_DATE-REG_DATE) > 7   AND  TRUNC(REG_DATE) BETWEEN   '"
									+ startDate + "'    AND SYSDATE ";
						} else if ("PAID_WITH_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'  AND   NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) BETWEEN '0' AND '7' ";
						} else if ("PAID_BYND_SOP".equalsIgnoreCase(cscvo.getCtype())) {
							status = "   NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '" + cscvo.getCategory()
									+ "%'     AND upper(reg_no)  not like '%H%'   "
									+ " AND  NVL(REJECTED,'Y') <> 'X'   AND (TOTAMT-EXTDEM_APPFEE) <> NVL(SAPDEM,0)  AND NVL(SAPDEM,0) > 0 AND (SYSDATE-INTIMATE_DATE) > 7  and SUPPLY_RELEASE_DATE is null ";
						} else {
							status = "";
						}

					}
					// }
				} // else {}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {

						
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ " and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "' " + type + " order by A.AGEPENDENCY desc");
					} else {
						
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "  and B.cirname='" + cscvo.getCircle() + "'" + type
										+ " order by A.AGEPENDENCY desc");

					}

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,SECNAME,subname,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "   and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "'  and subname='" + cscvo.getSubDiv() + "'" + type
										+ " order by A.AGEPENDENCY desc");
					} else {
						
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "   and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "' " + type + " order by A.AGEPENDENCY desc");
					}

				} else if ("SEC".equals(cscvo.getFlag())) {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
						
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "  and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "'  and subname='" + cscvo.getSubDiv()
										+ "' and secname='" + cscvo.getSec() + "'" + type
										+ " order by A.AGEPENDENCY desc");
					} else {
						
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "  and B.cirname='" + cscvo.getCircle() + "' and divname='"
										+ cscvo.getDivision() + "'  and subname='" + cscvo.getSubDiv() + "'" + type
										+ " order by A.AGEPENDENCY desc");
					}
				} else {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {

						
						String query = "select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
								+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
								+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
								+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
								+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
								+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
								+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
								+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
								+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
								+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
								+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
								+ " AND SUBSTR(A.reg_no,6,1)='H' " + "  and B.cirname='" + cscvo.getCircle() + "' "
								+ type + " order by A.AGEPENDENCY desc";

						//System.out.println("TEST GOUSE:"+query);
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD"
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ "  and B.cirname='" + cscvo.getCircle() + "'" + type
										+ " order by A.AGEPENDENCY desc");
					} else {
						
						resultSet = statement.executeQuery(
								"select B.divname Division,B.secname Section,a.REG_NO reg_no,A.reg_date,A.consumer_name ,A.CAT, A.Load, A.Demand,A.Paid ,A.paid_date ,"
										+ " A.Estimate_Sanctioned_Date,  A.AGEPENDENCY  ,A.PENDING_STAT,A.EXECUTION_TYPE,C.REMARKS   from "
										+ " (select REG_NO reg_no,NCPARTCD,to_char(reg_date,'DD-MM-YYYY') as reg_date,"
										+ " consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,"
										+ " to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , "
										+ " trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT),"
										+ " trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,NVL(EXECUTION_TYPE,'Department') EXECUTION_TYPE from rep_final WHERE  "
										+ status + " AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY'))A,"
										+ " (SELECT REG_NO,REMARKS||'-'||REASONS REMARKS FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO ,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))C,"
										+ " (SELECT CIRNAME,DIVNAME,subname,SECNAME,SECCD FROM SPDCLMASTER)B"
										+ " WHERE A.REG_NO=C.REG_NO(+)" + " AND A.NCPARTCD=B.SECCD   "
										// + " AND SUBSTR(A.reg_no,6,1)='H' "
										+ " order by A.AGEPENDENCY desc");
					}

				}

				response.setContentType("application/download");
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {

			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// HT BRT

	public CscpayVO getHtPenAppBrtReportDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		// PreparedStatement reportPStmt1 = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		// AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE
		// REG_NO=REGNO)

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.DIVNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') not in ('DEL') AND SUBSTR(REG_NO,6,1)='H' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO and substr(regno,6,1)='H'))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ((REPSTAT LIKE '%RT') OR (REPSTAT LIKE '%KEY'))   AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRT'  AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=60 AND (SYSDATE-MAXPRDT) <=180)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 181 AND (SYSDATE-MAXPRDT) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT  LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <180)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 181 AND (SYSDATE-MAXPRDT) <=374)I,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'   AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >375)J,"
							+ " (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)" + " AND A.REG_NO=H.REG_NO(+)"
							+ " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND A.NCPARTCD=C.NCPARTCD(+)"
							+ " AND A.NCPARTCD=D.NCPARTCD(+)" + " AND A.NCPARTCD=E.NCPARTCD(+)"
							+ " AND A.NCPARTCD=F.NCPARTCD(+)" + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND A.NCPARTCD=I.NCPARTCD(+)"
							+ " AND A.NCPARTCD=J.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ "   and CIRNAME=? GROUP BY ROLLUP(S.DIVNAME)";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.SUBNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') not in ('DEL') AND SUBSTR(REG_NO,6,1)='H' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO and substr(regno,6,1)='H'))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  ((REPSTAT LIKE '%RT') OR (REPSTAT LIKE '%KEY'))  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRT'  AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=60 AND (SYSDATE-MAXPRDT) <=180)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 181 AND (SYSDATE-MAXPRDT) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT  LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <180)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 181 AND (SYSDATE-MAXPRDT) <=374)I,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'   AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >375)J,"
							+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)" + " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
							+ " AND A.REG_NO=E.REG_NO(+)" + " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
							+ " AND A.REG_NO=H.REG_NO(+)" + " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND A.NCPARTCD=C.NCPARTCD(+)" + " AND A.NCPARTCD=D.NCPARTCD(+)"
							+ " AND A.NCPARTCD=E.NCPARTCD(+)" + " AND A.NCPARTCD=F.NCPARTCD(+)"
							+ " AND A.NCPARTCD=G.NCPARTCD(+)" + " AND A.NCPARTCD=H.NCPARTCD(+)"
							+ " AND A.NCPARTCD=I.NCPARTCD(+)" + " AND A.NCPARTCD=J.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ "   and CIRNAME=?  and DIVNAME=? GROUP BY ROLLUP(S.SUBNAME)";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportRst = reportPStmt.executeQuery();

					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') not in ('DEL') AND SUBSTR(REG_NO,6,1)='H' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO and substr(regno,6,1)='H'))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ((REPSTAT LIKE '%RT') OR (REPSTAT LIKE '%KEY'))   AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRT'  AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=60 AND (SYSDATE-MAXPRDT) <=180)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 181 AND (SYSDATE-MAXPRDT) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT  LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <180)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 181 AND (SYSDATE-MAXPRDT) <=374)I,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'   AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >375)J,"
							+ " (SELECT CIRNAME,DIVNAME,SUBNAME,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)" + " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
							+ " AND A.REG_NO=E.REG_NO(+)" + " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
							+ " AND A.REG_NO=H.REG_NO(+)" + " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND A.NCPARTCD=C.NCPARTCD(+)" + " AND A.NCPARTCD=D.NCPARTCD(+)"
							+ " AND A.NCPARTCD=E.NCPARTCD(+)" + " AND A.NCPARTCD=F.NCPARTCD(+)"
							+ " AND A.NCPARTCD=G.NCPARTCD(+)" + " AND A.NCPARTCD=H.NCPARTCD(+)"
							+ " AND A.NCPARTCD=I.NCPARTCD(+)" + " AND A.NCPARTCD=J.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ "   and CIRNAME=?  and DIVNAME=?    AND SUBNAME=?  GROUP BY ROLLUP(S.secname)";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					/*
					 * String query=
					 * "SELECT  nvl(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_3,COUNT(F.REG_NO) BRT_DEPT_GRATHER_4,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_4,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_5,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL and (SYSDATE-MAXPRDT) <=60)C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=61 AND (SYSDATE-MAXPRDT) <=90)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91 AND (MAXPRDT-INTIMATE_DATE) <=120)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and  (SYSDATE-MAXPRDT) <=90)G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120)H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150)I,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >151)J,"
					 * + " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.REG_NO=H.REG_NO(+)" +
					 * " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)"
					 * + " AND A.NCPARTCD=S.SECCD" +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=J.NCPARTCD(+)" +
					 * " AND SUBSTR(A.REG_NO,6,1)='H'" +
					 * " GROUP BY ROLLUP(S.CIRNAME)";
					 */

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY FROM "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') not in ('DEL') AND SUBSTR(REG_NO,6,1)='H' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO and substr(regno,6,1)='H'))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE ((REPSTAT LIKE '%RT') OR (REPSTAT LIKE '%KEY'))   AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRT' AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=60 AND (SYSDATE-MAXPRDT) <=180)D,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 181 AND (SYSDATE-MAXPRDT) <=374)E,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 375)F,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT  LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <180)H,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 181 AND (SYSDATE-MAXPRDT) <=374)I,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'   AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >375)J,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)" + " AND A.REG_NO=E.REG_NO(+)"
							+ " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)" + " AND A.REG_NO=H.REG_NO(+)"
							+ " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)" + " AND A.NCPARTCD=S.SECCD"
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND A.NCPARTCD=C.NCPARTCD(+)"
							+ " AND A.NCPARTCD=D.NCPARTCD(+)" + " AND A.NCPARTCD=E.NCPARTCD(+)"
							+ " AND A.NCPARTCD=F.NCPARTCD(+)" + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND A.NCPARTCD=I.NCPARTCD(+)"
							+ " AND A.NCPARTCD=J.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.CIRNAME)";
					/*
					 * String query =
					 * "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=60 AND (SYSDATE-MAXPRDT) <=180)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 181 AND (SYSDATE-MAXPRDT) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT  LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <180)H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 181 AND (SYSDATE-MAXPRDT) <=374)I,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >375)J,"
					 * + " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.REG_NO=H.REG_NO(+)" +
					 * " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)"
					 * + " AND A.NCPARTCD=S.SECCD" +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=J.NCPARTCD(+)" +
					 * " AND SUBSTR(A.REG_NO,6,1)='H'" +
					 * " GROUP BY rollup(S.CIRNAME)";
					 */

					/*
					 * String query=
					 * "SELECT S.CIRNAME,COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY FROM "
					 * +
					 * "(SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=60 AND (SYSDATE-MAXPRDT) <=180)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 181 AND (SYSDATE-MAXPRDT) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <180)H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 181 AND (SYSDATE-MAXPRDT) <=374)I,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >375)J,"
					 * + " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.REG_NO=H.REG_NO(+)" +
					 * " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)"
					 * + " AND A.NCPARTCD=S.SECCD " +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=J.NCPARTCD(+)" +
					 * " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY S.CIRNAME ";
					 */
					/*
					 * String query =
					 * "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60 AND (SYSDATE-INTIMATE_DATE) <=180)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 181 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 )H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 181 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J,"
					 * + " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.REG_NO=H.REG_NO(+)" +
					 * " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)"
					 * + " AND A.NCPARTCD=S.SECCD" +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=J.NCPARTCD(+)" +
					 * " AND SUBSTR(A.REG_NO,6,1)='H'" +
					 * " GROUP BY ROLLUP(S.CIRNAME) ";
					 */
					reportPStmt = con.prepareStatement(query);
					System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}

				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							// dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));
							// dmapobj.setTot_turnkey(reportRst.getString(14));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							/*
							 * dmapobj.setWrt(reportRst.getString(3));
							 * dmapobj.setBrt_gtr_2months(reportRst.getString(4)
							 * );
							 * dmapobj.setBrt_gtr_6months(reportRst.getString(5)
							 * );
							 * dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							 * dmapobj.setTot_brt_dept(reportRst.getString(7));
							 * dmapobj.setTotal_dept(reportRst.getString(8));
							 * 
							 * dmapobj.setWrt_turnkey(reportRst.getString(9));
							 * dmapobj.setTurnkey_gtr_2months(reportRst.
							 * getString(10));
							 * dmapobj.setTurnkey_gtr_6months(reportRst.
							 * getString(11));
							 * dmapobj.setTurnkey_gtr_1year(reportRst.getString(
							 * 12));
							 */
							// dmapobj.setTot_brt_turnkey(reportRst.getString(13));
							// dmapobj.setTot_turnkey(reportRst.getString(14));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							// dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}
			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	public CscpayVO getLt1PenAppBrtReportDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException{


		PreparedStatement reportPStmt = null;
		// PreparedStatement reportPStmt1 = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		// AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE
		// REG_NO=REGNO)

		String brt_status = " AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) ";
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					
					
					
					
					String query="SELECT NVL(DIVNAME,'TOTAL')\r\n" + 
					   		",COUNT(REG_NO) PAID_PENDING \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%OBTKE%' ) THEN 1 ELSE 0 END) TURN_OB\r\n" + 
					   		"FROM \r\n" + 
					   		"(SELECT CIRNAME,DIVNAME,REG_NO,'LT'||SUBSTR(CATEGORY_SUPPLY,1,1) CAT,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
					   		"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02'\r\n" + 
					   		"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
					   		"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
					   		"	and intimate_date is not null and maxprdt is not null and slcprdt is not null and sdprdt is not null and supply_release_date is null and sladesc='Pending for service release' ) \r\n" + 
					   		"where cat='LT1' AND CIRNAME=?\r\n" + 
					   		"GROUP BY ROLLUP(DIVNAME) ORDER BY DIVNAME";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					
					String query="SELECT NVL(SUBNAME,'TOTAL')\r\n" + 
					   		",COUNT(REG_NO) PAID_PENDING \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%OBTKE%' ) THEN 1 ELSE 0 END) TURN_OB\r\n" + 
					   		"FROM \r\n" + 
					   		"(SELECT CIRNAME,DIVNAME,SUBNAME,REG_NO,'LT'||SUBSTR(CATEGORY_SUPPLY,1,1) CAT,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
					   		"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02'\r\n" + 
					   		"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
					   		"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
					   		"	and intimate_date is not null and maxprdt is not null and slcprdt is not null and sdprdt is not null and supply_release_date is null and sladesc='Pending for service release' ) \r\n" + 
					   		"where cat='LT1' AND CIRNAME=? AND DIVNAME=?\r\n" + 
					   		"GROUP BY ROLLUP(SUBNAME) ORDER BY SUBNAME";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportRst = reportPStmt.executeQuery();

					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query="SELECT NVL(SECNAME,'TOTAL')\r\n" + 
					   		",COUNT(REG_NO) PAID_PENDING \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%OBTKE%' ) THEN 1 ELSE 0 END) TURN_OB\r\n" + 
					   		"FROM \r\n" + 
					   		"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,REG_NO,'LT'||SUBSTR(CATEGORY_SUPPLY,1,1) CAT,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
					   		"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02'\r\n" + 
					   		"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
					   		"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
					   		"	and intimate_date is not null and maxprdt is not null and slcprdt is not null and sdprdt is not null and supply_release_date is null and sladesc='Pending for service release' ) \r\n" + 
					   		"where cat='LT1' AND CIRNAME=? AND DIVNAME=? AND SUBNAME=?\r\n" + 
					   		"GROUP BY ROLLUP(SECNAME) ORDER BY SECNAME";
					
					
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					
					
			   String query="SELECT NVL(CIRNAME,'TOTAL')\r\n" + 
			   		",COUNT(REG_NO) PAID_PENDING \r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%OBTKE%' ) THEN 1 ELSE 0 END) TURN_OB\r\n" + 
			   		"FROM \r\n" + 
			   		"(SELECT CIRNAME,REG_NO,'LT'||SUBSTR(CATEGORY_SUPPLY,1,1) CAT,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
			   		"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02'\r\n" + 
			   		"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
			   		"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
			   		"	and intimate_date is not null and maxprdt is not null and slcprdt is not null and sdprdt is not null and supply_release_date is null and sladesc='Pending for service release' ) \r\n" + 
			   		"where cat='LT1'\r\n" + 
			   		"GROUP BY ROLLUP(CIRNAME) ORDER BY CIRNAME";
				
					reportPStmt = con.prepareStatement(query);
					//System.out.println("lt1:24092022:"+query);
					reportRst = reportPStmt.executeQuery();
				}

				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							//dmapobj.setLtcat(reportRst.getString(2));
							dmapobj.setAppPending(reportRst.getString(2));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							// dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));
							// dmapobj.setTot_turnkey(reportRst.getString(14));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							/*
							 * dmapobj.setWrt(reportRst.getString(3));
							 * dmapobj.setBrt_gtr_2months(reportRst.getString(4)
							 * );
							 * dmapobj.setBrt_gtr_6months(reportRst.getString(5)
							 * );
							 * dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							 * dmapobj.setTot_brt_dept(reportRst.getString(7));
							 * dmapobj.setTotal_dept(reportRst.getString(8));
							 * 
							 * dmapobj.setWrt_turnkey(reportRst.getString(9));
							 * dmapobj.setTurnkey_gtr_2months(reportRst.
							 * getString(10));
							 * dmapobj.setTurnkey_gtr_6months(reportRst.
							 * getString(11));
							 * dmapobj.setTurnkey_gtr_1year(reportRst.getString(
							 * 12));
							 */
							// dmapobj.setTot_brt_turnkey(reportRst.getString(13));
							// dmapobj.setTot_turnkey(reportRst.getString(14));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							// dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}
			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	}
	
	
	
	public CscpayVO getLt2PenAppBrtReportDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException{



		PreparedStatement reportPStmt = null;
		// PreparedStatement reportPStmt1 = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		// AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE
		// REG_NO=REGNO)

		String brt_status = " AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) ";
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					
					
					
					
					String query="SELECT NVL(DIVNAME,'TOTAL')\r\n" + 
					   		",COUNT(REG_NO) PAID_PENDING \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%OBTKE%' ) THEN 1 ELSE 0 END) TURN_OB\r\n" + 
					   		"FROM \r\n" + 
					   		"(SELECT CIRNAME,DIVNAME,REG_NO,'LT'||SUBSTR(CATEGORY_SUPPLY,1,1) CAT,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
					   		"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02'\r\n" + 
					   		"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
					   		"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
					   		"	and intimate_date is not null and maxprdt is not null and slcprdt is not null and sdprdt is not null and supply_release_date is null and sladesc='Pending for service release' ) \r\n" + 
					   		"where cat='LT2' AND CIRNAME=?\r\n" + 
					   		"GROUP BY ROLLUP(DIVNAME) ORDER BY DIVNAME";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					
					String query="SELECT NVL(SUBNAME,'TOTAL')\r\n" + 
					   		",COUNT(REG_NO) PAID_PENDING \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%OBTKE%' ) THEN 1 ELSE 0 END) TURN_OB\r\n" + 
					   		"FROM \r\n" + 
					   		"(SELECT CIRNAME,DIVNAME,SUBNAME,REG_NO,'LT'||SUBSTR(CATEGORY_SUPPLY,1,1) CAT,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
					   		"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02'\r\n" + 
					   		"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
					   		"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
					   		"	and intimate_date is not null and maxprdt is not null and slcprdt is not null and sdprdt is not null and supply_release_date is null and sladesc='Pending for service release' ) \r\n" + 
					   		"where cat='LT2' AND CIRNAME=? AND DIVNAME=?\r\n" + 
					   		"GROUP BY ROLLUP(SUBNAME) ORDER BY SUBNAME";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportRst = reportPStmt.executeQuery();

					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query="SELECT NVL(SECNAME,'TOTAL')\r\n" + 
					   		",COUNT(REG_NO) PAID_PENDING \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%OBTKE%' ) THEN 1 ELSE 0 END) TURN_OB\r\n" + 
					   		"FROM \r\n" + 
					   		"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,REG_NO,'LT'||SUBSTR(CATEGORY_SUPPLY,1,1) CAT,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
					   		"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02'\r\n" + 
					   		"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
					   		"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
					   		"	and intimate_date is not null and maxprdt is not null and slcprdt is not null and sdprdt is not null and supply_release_date is null and sladesc='Pending for service release' ) \r\n" + 
					   		"where cat='LT2' AND CIRNAME=? AND DIVNAME=? AND SUBNAME=?\r\n" + 
					   		"GROUP BY ROLLUP(SECNAME) ORDER BY SECNAME";
					
					
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					
					
			   String query="SELECT NVL(CIRNAME,'TOTAL')\r\n" + 
			   		",COUNT(REG_NO) PAID_PENDING \r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%OBTKE%' ) THEN 1 ELSE 0 END) TURN_OB\r\n" + 
			   		"FROM \r\n" + 
			   		"(SELECT CIRNAME,REG_NO,'LT'||SUBSTR(CATEGORY_SUPPLY,1,1) CAT,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
			   		"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02'\r\n" + 
			   		"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
			   		"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
			   		"	and intimate_date is not null and maxprdt is not null and slcprdt is not null and sdprdt is not null and supply_release_date is null and sladesc='Pending for service release' ) \r\n" + 
			   		"where cat='LT2'\r\n" + 
			   		"GROUP BY ROLLUP(CIRNAME) ORDER BY CIRNAME";
				
					reportPStmt = con.prepareStatement(query);
					//System.out.println("lt2:24092022:"+query);
					reportRst = reportPStmt.executeQuery();
				}

				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							//dmapobj.setLtcat(reportRst.getString(2));
							dmapobj.setAppPending(reportRst.getString(2));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							// dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));
							// dmapobj.setTot_turnkey(reportRst.getString(14));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							/*
							 * dmapobj.setWrt(reportRst.getString(3));
							 * dmapobj.setBrt_gtr_2months(reportRst.getString(4)
							 * );
							 * dmapobj.setBrt_gtr_6months(reportRst.getString(5)
							 * );
							 * dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							 * dmapobj.setTot_brt_dept(reportRst.getString(7));
							 * dmapobj.setTotal_dept(reportRst.getString(8));
							 * 
							 * dmapobj.setWrt_turnkey(reportRst.getString(9));
							 * dmapobj.setTurnkey_gtr_2months(reportRst.
							 * getString(10));
							 * dmapobj.setTurnkey_gtr_6months(reportRst.
							 * getString(11));
							 * dmapobj.setTurnkey_gtr_1year(reportRst.getString(
							 * 12));
							 */
							// dmapobj.setTot_brt_turnkey(reportRst.getString(13));
							// dmapobj.setTot_turnkey(reportRst.getString(14));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							// dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}
			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
		
		
	}
	
	public CscpayVO getLt4PenAppBrtReportDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException{




		PreparedStatement reportPStmt = null;
		// PreparedStatement reportPStmt1 = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		// AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE
		// REG_NO=REGNO)

		String brt_status = " AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) ";
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					
					
					
					
					String query="SELECT NVL(DIVNAME,'TOTAL')\r\n" + 
					   		",COUNT(REG_NO) PAID_PENDING \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%OBTKE%' ) THEN 1 ELSE 0 END) TURN_OB\r\n" + 
					   		"FROM \r\n" + 
					   		"(SELECT CIRNAME,DIVNAME,REG_NO,'LT'||SUBSTR(CATEGORY_SUPPLY,1,1) CAT,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
					   		"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02'\r\n" + 
					   		"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
					   		"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
					   		"	and intimate_date is not null and maxprdt is not null and slcprdt is not null and sdprdt is not null and supply_release_date is null and sladesc='Pending for service release' ) \r\n" + 
					   		"where cat='LT4' AND CIRNAME=?\r\n" + 
					   		"GROUP BY ROLLUP(DIVNAME) ORDER BY DIVNAME";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					
					String query="SELECT NVL(SUBNAME,'TOTAL')\r\n" + 
					   		",COUNT(REG_NO) PAID_PENDING \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%OBTKE%' ) THEN 1 ELSE 0 END) TURN_OB\r\n" + 
					   		"FROM \r\n" + 
					   		"(SELECT CIRNAME,DIVNAME,SUBNAME,REG_NO,'LT'||SUBSTR(CATEGORY_SUPPLY,1,1) CAT,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
					   		"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02'\r\n" + 
					   		"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
					   		"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
					   		"	and intimate_date is not null and maxprdt is not null and slcprdt is not null and sdprdt is not null and supply_release_date is null and sladesc='Pending for service release' ) \r\n" + 
					   		"where cat='LT4' AND CIRNAME=? AND DIVNAME=?\r\n" + 
					   		"GROUP BY ROLLUP(SUBNAME) ORDER BY SUBNAME";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportRst = reportPStmt.executeQuery();

					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query="SELECT NVL(SECNAME,'TOTAL')\r\n" + 
					   		",COUNT(REG_NO) PAID_PENDING \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
					   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
					   		",SUM(CASE WHEN (REPSTAT LIKE '%OBTKE%' ) THEN 1 ELSE 0 END) TURN_OB\r\n" + 
					   		"FROM \r\n" + 
					   		"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,REG_NO,'LT'||SUBSTR(CATEGORY_SUPPLY,1,1) CAT,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
					   		"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02'\r\n" + 
					   		"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
					   		"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
					   		"	and intimate_date is not null and maxprdt is not null and slcprdt is not null and sdprdt is not null and supply_release_date is null and sladesc='Pending for service release' ) \r\n" + 
					   		"where cat='LT4' AND CIRNAME=? AND DIVNAME=? AND SUBNAME=?\r\n" + 
					   		"GROUP BY ROLLUP(SECNAME) ORDER BY SECNAME";
					
					
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					
					
			   String query="SELECT NVL(CIRNAME,'TOTAL')\r\n" + 
			   		",COUNT(REG_NO) PAID_PENDING \r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
			   		",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
			   		",SUM(CASE WHEN (REPSTAT LIKE '%OBTKE%' ) THEN 1 ELSE 0 END) TURN_OB\r\n" + 
			   		"FROM \r\n" + 
			   		"(SELECT CIRNAME,REG_NO,'LT'||SUBSTR(CATEGORY_SUPPLY,1,1) CAT,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
			   		"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02'\r\n" + 
			   		"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
			   		"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
			   		"	and intimate_date is not null and maxprdt is not null and slcprdt is not null and sdprdt is not null and supply_release_date is null and sladesc='Pending for service release' ) \r\n" + 
			   		"where cat='LT4'\r\n" + 
			   		"GROUP BY ROLLUP(CIRNAME) ORDER BY CIRNAME";
				
					reportPStmt = con.prepareStatement(query);
					//System.out.println("lt4:24092022:"+query);
					reportRst = reportPStmt.executeQuery();
				}

				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							//dmapobj.setLtcat(reportRst.getString(2));
							dmapobj.setAppPending(reportRst.getString(2));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							// dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));
							// dmapobj.setTot_turnkey(reportRst.getString(14));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							/*
							 * dmapobj.setWrt(reportRst.getString(3));
							 * dmapobj.setBrt_gtr_2months(reportRst.getString(4)
							 * );
							 * dmapobj.setBrt_gtr_6months(reportRst.getString(5)
							 * );
							 * dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							 * dmapobj.setTot_brt_dept(reportRst.getString(7));
							 * dmapobj.setTotal_dept(reportRst.getString(8));
							 * 
							 * dmapobj.setWrt_turnkey(reportRst.getString(9));
							 * dmapobj.setTurnkey_gtr_2months(reportRst.
							 * getString(10));
							 * dmapobj.setTurnkey_gtr_6months(reportRst.
							 * getString(11));
							 * dmapobj.setTurnkey_gtr_1year(reportRst.getString(
							 * 12));
							 */
							// dmapobj.setTot_brt_turnkey(reportRst.getString(13));
							// dmapobj.setTot_turnkey(reportRst.getString(14));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							// dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}
			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
		
		
	
		
	}
	
	
	public CscpayVO getLt3PenAppBrtReportDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		// PreparedStatement reportPStmt1 = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		// AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE
		// REG_NO=REGNO)

		String brt_status = " AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) ";
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					/*
					 * String query =
					 * "SELECT nvl(S.DIVNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60 AND (SYSDATE-INTIMATE_DATE) <=180)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 181 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 )H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 181 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J,"
					 * + " (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.REG_NO=H.REG_NO(+)" +
					 * " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)"
					 * + " AND A.NCPARTCD=S.SECCD" +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=J.NCPARTCD(+)" +
					 * " AND SUBSTR(A.REG_NO,6,1) <> 'H'" +
					 * " AND CIRNAME=? GROUP BY ROLLUP(S.DIVNAME)";
					 */
					
					/*String query="SELECT nvl(S.DIVNAME,'TOTAL'),NVL(SUM(B.REG_NO),0) PAID_PENDING,NVL(SUM(C.REG_NO),0) WRT,NVL(SUM(D.REG_NO),0) BRT_DEPT_GRATHER_1,NVL(SUM(E.REG_NO),0) BRT_DEPT_GRATHER_6,NVL(SUM(F.REG_NO),0) BRT_DEPT_GRATHER_1,NVL(SUM(D.REG_NO)+SUM(E.REG_NO)+SUM(F.REG_NO),0) BRT_DEPT,NVL(SUM(G.REG_NO),0) WRT_TURNKEY,NVL(SUM(H.REG_NO),0) BRT_TURNKEY_GRATHER_3,NVL(SUM(I.REG_NO),0) BRT_TURNKEY_GRATHER_6,NVL(SUM(J.REG_NO),0) BRT_TURNKEY_GRATHER_1,NVL(SUM(H.REG_NO)+SUM(I.REG_NO)+SUM(J.REG_NO),0) BRT_TURNKEY FROM "
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H'  GROUP BY NCPARTCD)B,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL AND (SYSDATE-MAXPRDT) <=30  AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)C,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=31 AND (SYSDATE-MAXPRDT) <60 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)D,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 61 AND (SYSDATE-MAXPRDT) <=90 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)E,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)F,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) <=90 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)G,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <= 120 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)H,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD	)I,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >151 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)J,"
							+ " (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER WHERE CIRCD NOT IN (1,4,6,9) )S"
							+ " WHERE "
							+ " S.SECCD=B.NCPARTCD(+)"
							+ " AND S.SECCD=C.NCPARTCD(+)"
							+ " AND S.SECCD=D.NCPARTCD(+)"
							+ " AND S.SECCD=E.NCPARTCD(+)"
							+ " AND S.SECCD=F.NCPARTCD(+)"
							+ " AND S.SECCD=G.NCPARTCD(+)"
							+ " AND S.SECCD=H.NCPARTCD(+)"
							+ " AND S.SECCD=I.NCPARTCD(+)"
							+ " AND S.SECCD=J.NCPARTCD(+)"
							+ "  AND S.CIRNAME=?  GROUP BY  ROLLUP  (S.DIVNAME) ORDER BY S.DIVNAME";*/
					
					
					//NEW_16062022
					String query="SELECT NVL(DIVNAME,'TOTAL')\r\n" + 
							",COUNT(REG_NO) PAID_PENDING \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
							"FROM \r\n" + 
							"(SELECT CIRNAME,DIVNAME,REG_NO,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
							"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' \r\n" + 
							"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
							"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
							"	AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL ) \r\n" + 
							" WHERE CIRNAME=? GROUP BY ROLLUP(DIVNAME) order by DIVNAME\r\n" + 
							"";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "SELECT nvl(S.SUBNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60 AND (SYSDATE-INTIMATE_DATE) <=180)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 181 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 )H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 181 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J,"
					 * +
					 * " (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER)S"
					 * + " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.REG_NO=H.REG_NO(+)" +
					 * " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)"
					 * + " AND A.NCPARTCD=S.SECCD" +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=J.NCPARTCD(+)" +
					 * " AND SUBSTR(A.REG_NO,6,1) <> 'H'" +
					 * " AND CIRNAME=? AND DIVNAME=? GROUP BY ROLLUP(S.SUBNAME)"
					 * ;
					 */
					
					/*String query="SELECT nvl(S.SUBNAME,'TOTAL'),NVL(SUM(B.REG_NO),0) PAID_PENDING,NVL(SUM(C.REG_NO),0) WRT,NVL(SUM(D.REG_NO),0) BRT_DEPT_GRATHER_1,NVL(SUM(E.REG_NO),0) BRT_DEPT_GRATHER_6,NVL(SUM(F.REG_NO),0) BRT_DEPT_GRATHER_1,NVL(SUM(D.REG_NO)+SUM(E.REG_NO)+SUM(F.REG_NO),0) BRT_DEPT,NVL(SUM(G.REG_NO),0) WRT_TURNKEY,NVL(SUM(H.REG_NO),0) BRT_TURNKEY_GRATHER_3,NVL(SUM(I.REG_NO),0) BRT_TURNKEY_GRATHER_6,NVL(SUM(J.REG_NO),0) BRT_TURNKEY_GRATHER_1,NVL(SUM(H.REG_NO)+SUM(I.REG_NO)+SUM(J.REG_NO),0) BRT_TURNKEY FROM "
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H'  GROUP BY NCPARTCD)B,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL AND (SYSDATE-MAXPRDT) <=30  AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)C,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=31 AND (SYSDATE-MAXPRDT) <60 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)D,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 61 AND (SYSDATE-MAXPRDT) <=90 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)E,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)F,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) <=90 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)G,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <= 120 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)H,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD	)I,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >151 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)J,"
							+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER WHERE CIRCD NOT IN (1,4,6,9) )S"
							+ " WHERE "
							+ " S.SECCD=B.NCPARTCD(+)"
							+ " AND S.SECCD=C.NCPARTCD(+)"
							+ " AND S.SECCD=D.NCPARTCD(+)"
							+ " AND S.SECCD=E.NCPARTCD(+)"
							+ " AND S.SECCD=F.NCPARTCD(+)"
							+ " AND S.SECCD=G.NCPARTCD(+)"
							+ " AND S.SECCD=H.NCPARTCD(+)"
							+ " AND S.SECCD=I.NCPARTCD(+)"
							+ " AND S.SECCD=J.NCPARTCD(+)"
							+ "  AND S.CIRNAME=?  AND S.DIVNAME=? GROUP BY  ROLLUP  (S.SUBNAME) ORDER BY S.SUBNAME";*/
					
					//NEW_16062022
					String query="SELECT NVL(SUBNAME,'TOTAL')\r\n" + 
							",COUNT(REG_NO) PAID_PENDING \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
							"FROM \r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,REG_NO,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
							"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' \r\n" + 
							"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
							"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
							"	AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL ) \r\n" + 
							" WHERE CIRNAME=? AND DIVNAME=?  GROUP BY ROLLUP(SUBNAME) order by SUBNAME\r\n" + 
							"";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportRst = reportPStmt.executeQuery();

					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "SELECT nvl(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60 AND (SYSDATE-INTIMATE_DATE) <=180)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 181 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 )H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 181 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J,"
					 * +
					 * " (SELECT CIRNAME,DIVNAME,SUBNAME,secname,SECCD FROM SPDCLMASTER)S"
					 * + " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.REG_NO=H.REG_NO(+)" +
					 * " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)"
					 * + " AND A.NCPARTCD=S.SECCD" +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=J.NCPARTCD(+)" +
					 * " AND SUBSTR(A.REG_NO,6,1) <> 'H'" +
					 * " AND CIRNAME=? AND DIVNAME=? AND SUBNAME=? GROUP BY ROLLUP(S.secname)"
					 * ;
					 */
					
					/*String query="SELECT nvl(S.secname,'TOTAL'),NVL(SUM(B.REG_NO),0) PAID_PENDING,NVL(SUM(C.REG_NO),0) WRT,NVL(SUM(D.REG_NO),0) BRT_DEPT_GRATHER_1,NVL(SUM(E.REG_NO),0) BRT_DEPT_GRATHER_6,NVL(SUM(F.REG_NO),0) BRT_DEPT_GRATHER_1,NVL(SUM(D.REG_NO)+SUM(E.REG_NO)+SUM(F.REG_NO),0) BRT_DEPT,NVL(SUM(G.REG_NO),0) WRT_TURNKEY,NVL(SUM(H.REG_NO),0) BRT_TURNKEY_GRATHER_3,NVL(SUM(I.REG_NO),0) BRT_TURNKEY_GRATHER_6,NVL(SUM(J.REG_NO),0) BRT_TURNKEY_GRATHER_1,NVL(SUM(H.REG_NO)+SUM(I.REG_NO)+SUM(J.REG_NO),0) BRT_TURNKEY FROM "
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H'  GROUP BY NCPARTCD)B,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL AND (SYSDATE-MAXPRDT) <=30  AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)C,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=31 AND (SYSDATE-MAXPRDT) <60 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)D,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 61 AND (SYSDATE-MAXPRDT) <=90 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)E,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)F,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) <=90 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)G,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <= 120 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)H,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD	)I,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >151 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)J,"
							+ " (SELECT CIRNAME,DIVNAME,SUBNAME,secname,SECCD FROM SPDCLMASTER WHERE CIRCD NOT IN (1,4,6,9) )S"
							+ " WHERE "
							+ " S.SECCD=B.NCPARTCD(+)"
							+ " AND S.SECCD=C.NCPARTCD(+)"
							+ " AND S.SECCD=D.NCPARTCD(+)"
							+ " AND S.SECCD=E.NCPARTCD(+)"
							+ " AND S.SECCD=F.NCPARTCD(+)"
							+ " AND S.SECCD=G.NCPARTCD(+)"
							+ " AND S.SECCD=H.NCPARTCD(+)"
							+ " AND S.SECCD=I.NCPARTCD(+)"
							+ " AND S.SECCD=J.NCPARTCD(+)"
							+ "  AND S.CIRNAME=?  AND S.DIVNAME=? AND S.SUBNAME=? GROUP BY  ROLLUP  (S.secname) ORDER BY S.secname";*/
					
					//NEW_16062022
					String query="SELECT NVL(SECNAME,'TOTAL')\r\n" + 
							",COUNT(REG_NO) PAID_PENDING \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
							"FROM \r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,REG_NO,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
							"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' \r\n" + 
							"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
							"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
							"	AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL ) \r\n" + 
							" WHERE CIRNAME=? AND DIVNAME=? AND SUBNAME=? GROUP BY ROLLUP(SECNAME) order by SECNAME\r\n" + 
							"";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					/*
					 * String query =
					 * "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING,COUNT(C.REG_NO) WRT,COUNT(D.REG_NO) BRT_DEPT_GRATHER_2,COUNT(E.REG_NO) BRT_DEPT_GRATHER_6,COUNT(F.REG_NO) BRT_DEPT_GRATHER_1,count(D.REG_NO)+count(E.REG_NO)+count(F.REG_NO) BRT_DEPT,COUNT(G.REG_NO) WRT_TURNKEY,COUNT(H.REG_NO) BRT_TURNKEY_GRATHER_3,COUNT(I.REG_NO) BRT_TURNKEY_GRATHER_6,COUNT(J.REG_NO) BRT_TURNKEY_GRATHER_1,count(H.REG_NO)+count(I.REG_NO)+COUNT(J.REG_NO) BRT_TURNKEY FROM "
					 * +
					 * " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )C,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60 AND (SYSDATE-INTIMATE_DATE) <=180)D,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 181 AND (SYSDATE-INTIMATE_DATE) <=374)E,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375)F,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL )G,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 )H,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 181 AND (SYSDATE-INTIMATE_DATE) <=374)I,"
					 * +
					 * " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375)J,"
					 * + " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" +
					 * " WHERE A.REG_NO=B.REG_NO(+)" +
					 * " AND A.REG_NO=C.REG_NO(+)" + " AND A.REG_NO=D.REG_NO(+)"
					 * + " AND A.REG_NO=E.REG_NO(+)" +
					 * " AND A.REG_NO=F.REG_NO(+)" + " AND A.REG_NO=G.REG_NO(+)"
					 * + " AND A.REG_NO=H.REG_NO(+)" +
					 * " AND A.REG_NO=I.REG_NO(+)" + " AND A.REG_NO=J.REG_NO(+)"
					 * + " AND A.NCPARTCD=S.SECCD" +
					 * " AND A.NCPARTCD=B.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=C.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=D.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=E.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=F.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=G.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=H.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=I.NCPARTCD(+)" +
					 * " AND A.NCPARTCD=J.NCPARTCD(+)" +
					 * " AND SUBSTR(A.REG_NO,6,1) <> 'H'" +
					 * " GROUP BY ROLLUP(S.CIRNAME)";
					 */
					
					//OLD_13062022
					/*String query="SELECT  nvl(S.CIRNAME,'TOTAL'),NVL(SUM(B.REG_NO),0) PAID_PENDING,NVL(SUM(C.REG_NO),0) WRT,NVL(SUM(D.REG_NO),0) BRT_DEPT_GRATHER_1,NVL(SUM(E.REG_NO),0) BRT_DEPT_GRATHER_6,NVL(SUM(F.REG_NO),0) BRT_DEPT_GRATHER_1,NVL(SUM(D.REG_NO)+SUM(E.REG_NO)+SUM(F.REG_NO),0) BRT_DEPT,NVL(SUM(G.REG_NO),0) WRT_TURNKEY,NVL(SUM(H.REG_NO),0) BRT_TURNKEY_GRATHER_3,NVL(SUM(I.REG_NO),0) BRT_TURNKEY_GRATHER_6,NVL(SUM(J.REG_NO),0) BRT_TURNKEY_GRATHER_1,NVL(SUM(H.REG_NO)+SUM(I.REG_NO)+SUM(J.REG_NO),0) BRT_TURNKEY FROM "
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H'  GROUP BY NCPARTCD)B,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL AND (SYSDATE-MAXPRDT) <=30  AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)C,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=31 AND (SYSDATE-MAXPRDT) <60 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)D,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 61 AND (SYSDATE-MAXPRDT) <=90 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)E,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)F,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) <=90 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)G,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <= 120 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)H,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD	)I,"
							+ " (SELECT NCPARTCD,COUNT(1) AS REG_NO FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >151 AND NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND SUBSTR(REG_NO,6,1) <> 'H' GROUP BY NCPARTCD)J,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER WHERE CIRCD NOT IN (1,4,6,9) )S"
							+ " WHERE "
							+ " S.SECCD=B.NCPARTCD(+)"
							+ " AND S.SECCD=C.NCPARTCD(+)"
							+ " AND S.SECCD=D.NCPARTCD(+)"
							+ " AND S.SECCD=E.NCPARTCD(+)"
							+ " AND S.SECCD=F.NCPARTCD(+)"
							+ " AND S.SECCD=G.NCPARTCD(+)"
							+ " AND S.SECCD=H.NCPARTCD(+)"
							+ " AND S.SECCD=I.NCPARTCD(+)"
							+ " AND S.SECCD=J.NCPARTCD(+)"
							+ " GROUP BY  ROLLUP  (S.CIRNAME) ORDER BY S.CIRNAME";*/
					
					//NEW_16062022
					
			   String query="SELECT NVL(CIRNAME,'TOTAL')\r\n" + 
							",COUNT(REG_NO) PAID_PENDING \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) <= 30) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 30 AND CEIL(SYSDATE - MAXPRDT) <= 60) THEN 1 ELSE 0 END) DEPT_BRT30 \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 60 AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) DEPT_BRT60 \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE - MAXPRDT) > 90) THEN 1 ELSE 0 END) DEPT_BRT90  \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
							"FROM \r\n" + 
							"(SELECT CIRNAME,REG_NO,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
							"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' \r\n" + 
							"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
							"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) <> 'H' \r\n" + 
							"	AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL ) \r\n" + 
							"  GROUP BY ROLLUP(CIRNAME) order by CIRNAME\r\n" + 
							"";
				
					reportPStmt = con.prepareStatement(query);
					//System.out.println("lt3:16062022"+query);
					reportRst = reportPStmt.executeQuery();
				}

				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							// dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));
							// dmapobj.setTot_turnkey(reportRst.getString(14));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							/*
							 * dmapobj.setWrt(reportRst.getString(3));
							 * dmapobj.setBrt_gtr_2months(reportRst.getString(4)
							 * );
							 * dmapobj.setBrt_gtr_6months(reportRst.getString(5)
							 * );
							 * dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							 * dmapobj.setTot_brt_dept(reportRst.getString(7));
							 * dmapobj.setTotal_dept(reportRst.getString(8));
							 * 
							 * dmapobj.setWrt_turnkey(reportRst.getString(9));
							 * dmapobj.setTurnkey_gtr_2months(reportRst.
							 * getString(10));
							 * dmapobj.setTurnkey_gtr_6months(reportRst.
							 * getString(11));
							 * dmapobj.setTurnkey_gtr_1year(reportRst.getString(
							 * 12));
							 */
							// dmapobj.setTot_brt_turnkey(reportRst.getString(13));
							// dmapobj.setTot_turnkey(reportRst.getString(14));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							// dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}
			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	
	public CscpayVO getHtPenAppBrtReportDetails_new_new(CscpayVO cscvo) throws SQLException, DatabaseFailureException {


		/*PreparedStatement reportPStmt = null;
		// PreparedStatement reportPStmt1 = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		// AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE
		// REG_NO=REGNO)

		//String brt_status = " AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) ";*/
				
		
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = c.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));
		String endDate1 = String.valueOf(curr_date);
		if (endDate1.length() == 1)
			endDate1 = "0".concat(endDate1);
		endDate = endDate1.concat("-")
				.concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		/*System.out.println("Date:" + startDate);*/

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		
		
		
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					
					

                    //NEW_20062022
					
					String query="SELECT NVL(DIVNAME,'TOTAL')\r\n" + 
							",COUNT(REG_NO) PAID_PENDING \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) <=60) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) >=61 AND CEIL(SYSDATE-MAXPRDT) <=90) THEN 1 ELSE 0 END) DEPT_BRT60\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) >= 91 AND CEIL(SYSDATE-MAXPRDT) <=120) THEN 1 ELSE 0 END) DEPT_BRT90 \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) >= 120) THEN 1 ELSE 0 END) DEPT_BRT120\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
							"FROM \r\n" + 
							"(SELECT CIRNAME,DIVNAME,REG_NO,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
							"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02' \r\n" + 
							"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
							"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) = 'H' \r\n" + 
							"	AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL ) \r\n" + 
							"where cirname=? GROUP BY ROLLUP(DIVNAME) ORDER BY DIVNAME\r\n" + 
							"";
					
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					

                    //NEW_20062022
					
					String query="SELECT NVL(SUBNAME,'TOTAL')\r\n" + 
							",COUNT(REG_NO) PAID_PENDING \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) <=60) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) >=61 AND CEIL(SYSDATE-MAXPRDT) <=90) THEN 1 ELSE 0 END) DEPT_BRT60\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) >= 91 AND CEIL(SYSDATE-MAXPRDT) <=120) THEN 1 ELSE 0 END) DEPT_BRT90 \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) >= 120) THEN 1 ELSE 0 END) DEPT_BRT120\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
							"FROM \r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,REG_NO,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
							"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02' \r\n" + 
							"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
							"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) = 'H' \r\n" + 
							"	AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL ) \r\n" + 
							"where CIRNAME=? AND DIVNAME=?   GROUP BY ROLLUP(SUBNAME) ORDER BY SUBNAME\r\n" + 
							"";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportRst = reportPStmt.executeQuery();

					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

                     //NEW_20062022
					
					String query="SELECT NVL(SECNAME,'TOTAL')\r\n" + 
							",COUNT(REG_NO) PAID_PENDING \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) <=60) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) >=61 AND CEIL(SYSDATE-MAXPRDT) <=90) THEN 1 ELSE 0 END) DEPT_BRT60\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) >= 91 AND CEIL(SYSDATE-MAXPRDT) <=120) THEN 1 ELSE 0 END) DEPT_BRT90 \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) >= 120) THEN 1 ELSE 0 END) DEPT_BRT120\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
							"FROM \r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,REG_NO,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
							"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02' \r\n" + 
							"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
							"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) = 'H' \r\n" + 
							"	AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL ) \r\n" + 
							"where CIRNAME=? AND DIVNAME=? AND SUBNAME=?  GROUP BY ROLLUP(SECNAME) ORDER BY SECNAME\r\n" +"";
					
					
					

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					
					
					//NEW_20062022
					
					String query="SELECT NVL(CIRNAME,'TOTAL')\r\n" + 
							",COUNT(REG_NO) PAID_PENDING \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'WRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) <=60) THEN 1 ELSE 0 END) DEPT_WRT\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) >=61 AND CEIL(SYSDATE-MAXPRDT) <=90) THEN 1 ELSE 0 END) DEPT_BRT60\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) >= 91 AND CEIL(SYSDATE-MAXPRDT) <=120) THEN 1 ELSE 0 END) DEPT_BRT90 \r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department' AND CEIL(SYSDATE-MAXPRDT) >= 120) THEN 1 ELSE 0 END) DEPT_BRT120\r\n" + 
							",SUM(CASE WHEN (PENDING_STAT = 'BRT' AND EXECUTION_TYPE = 'Department') THEN 1 ELSE 0 END) DEPT_BRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%WRTTKE%' AND CEIL(SYSDATE - MAXPRDT) <= 90) THEN 1 ELSE 0 END) TURN_WRT\r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 90 AND CEIL(SYSDATE - MAXPRDT) <= 120)  THEN 1 ELSE 0 END) TURN_BRT90 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 120 AND CEIL(SYSDATE - MAXPRDT) <= 150)  THEN 1 ELSE 0 END) TURN_BRT120 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' AND CEIL(SYSDATE - MAXPRDT) > 150) THEN 1 ELSE 0 END) TURN_BRT150 \r\n" + 
							",SUM(CASE WHEN (REPSTAT LIKE '%BRTTKE%' ) THEN 1 ELSE 0 END) TURN_BRT\r\n" + 
							"FROM \r\n" + 
							"(SELECT CIRNAME,REG_NO,PENDING_STAT,REPSTAT,NVL(TRIM(EXECUTION_TYPE),'Department') EXECUTION_TYPE,MAXPRDT  FROM REP_FINAL,SPDCLMASTER   \r\n" + 
							"WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02' \r\n" + 
							"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
							"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) = 'H' \r\n" + 
							"	AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL ) \r\n" + 
							"GROUP BY ROLLUP(CIRNAME) ORDER BY CIRNAME\r\n" + 
							"";
				
					reportPStmt = con.prepareStatement(query);
					System.out.println("Circle:HT3:20062022"+query);
					reportRst = reportPStmt.executeQuery();
				}

				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							// dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));
							// dmapobj.setTot_turnkey(reportRst.getString(14));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							/*
							 * dmapobj.setWrt(reportRst.getString(3));
							 * dmapobj.setBrt_gtr_2months(reportRst.getString(4)
							 * );
							 * dmapobj.setBrt_gtr_6months(reportRst.getString(5)
							 * );
							 * dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							 * dmapobj.setTot_brt_dept(reportRst.getString(7));
							 * dmapobj.setTotal_dept(reportRst.getString(8));
							 * 
							 * dmapobj.setWrt_turnkey(reportRst.getString(9));
							 * dmapobj.setTurnkey_gtr_2months(reportRst.
							 * getString(10));
							 * dmapobj.setTurnkey_gtr_6months(reportRst.
							 * getString(11));
							 * dmapobj.setTurnkey_gtr_1year(reportRst.getString(
							 * 12));
							 */
							// dmapobj.setTot_brt_turnkey(reportRst.getString(13));
							// dmapobj.setTot_turnkey(reportRst.getString(14));

							dmapobj.setWrt(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_6months(reportRst.getString(5));
							dmapobj.setBrt_gtr_1year(reportRst.getString(6));
							dmapobj.setTot_brt_dept(reportRst.getString(7));
							// dmapobj.setTotal_dept(reportRst.getString(8));

							dmapobj.setWrt_turnkey(reportRst.getString(8));
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(9));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(10));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(11));
							dmapobj.setTot_brt_turnkey(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}
			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
	}
	
	
	

	public CscpayVO getexportcscBrtLtHt(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Calendar cal = Calendar.getInstance();
		int curr_year = cal.get(Calendar.YEAR);
		int curr_month = cal.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = cal.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		String circle = "";
		String type = "";

		// String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		// Connection con =
		// DBConnectionManager.getInstance().getConnection("cscdb");
		// Statement statement = con.createStatement();

		try {
			if (con != null) {
				
				/*if ("LT3".equalsIgnoreCase(cscvo.getType())) {

					if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
						status = " where   NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) and PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND SUBSTR(REG_NO,6,1) <> 'H'  ";
					} else if ("DWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) and PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND (SYSDATE-MAXPRDT) <=30  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("DBRT_GTR_2MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  and PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=31 AND (SYSDATE-MAXPRDT) <60  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("DBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)   and  PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 61 AND (SYSDATE-MAXPRDT) <=90  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("DBRT_GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  and  PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  and REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and (SYSDATE-MAXPRDT) <=90 AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("TBRT_GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <= 120  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("TBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND  (SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("TBRT_GTR_IYEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >151 AND SUBSTR(REG_NO,6,1) <> 'H' ";

					} else if ("TOT_BRT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						
						status = "  where  (PENDING_STAT IN ('BRT')  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (((SYSDATE-MAXPRDT) >=31 AND (SYSDATE-MAXPRDT) <=60) or ((SYSDATE-MAXPRDT) >= 61 AND (SYSDATE-MAXPRDT) <=90) or ((SYSDATE-MAXPRDT) >= 91 ))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("TOT_BRT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						
						status = "  where  (REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (((SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <= 120)  or ((SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150) or((SYSDATE-MAXPRDT)  >151))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("TOT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where   (( pending_stat='WRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((SYSDATE-MAXPRDT) <=30))  OR (pending_stat='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " (((SYSDATE-MAXPRDT) >=31 AND (SYSDATE-MAXPRDT) <=60) or ((SYSDATE-MAXPRDT) >= 61 AND (SYSDATE-MAXPRDT) <=90) or ((SYSDATE-MAXPRDT) >= 91 )))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("TOT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (( pending_stat='WRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((SYSDATE-MAXPRDT) <=90))  OR (pending_stat='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((CEIL(SYSDATE-MAXPRDT) >=91 AND CEIL(SYSDATE-MAXPRDT) <=120) or ((SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150) or ((SYSDATE-MAXPRDT) >= 151 ))))  AND SUBSTR(REG_NO,6,1)<>'H'  "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					}

					else {
						status = "";
					}

				} else if ("HT".equalsIgnoreCase(cscvo.getType())) {

					if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
						// ((REPSTAT LIKE '%RT') OR (REPSTAT LIKE '%KEY'))
						// replace PENDING_STAT IN ('WRT','BRT')
						status = " where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) and PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND SUBSTR(REG_NO,6,1)='H'";
					} else if ("DWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) and PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND SUBSTR(REG_NO,6,1)='H'  AND SUPPLY_RELEASE_DATE IS  NULL and (SYSDATE-MAXPRDT) <=60 ";
					} else if ("DBRT_GTR_2MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) and PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL   AND (SYSDATE-MAXPRDT) >=61 AND (SYSDATE-MAXPRDT) <=90 AND SUBSTR(REG_NO,6,1)='H' ";
					} else if ("DBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) and PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND  (SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <=120   AND SUBSTR(REG_NO,6,1)='H' ";
					} else if ("DBRT_GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) and PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND  (SYSDATE-MAXPRDT) >= 121   AND SUBSTR(REG_NO,6,1)='H' ";
					} else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  and REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and     (SYSDATE-MAXPRDT) <=90 AND SUBSTR(REG_NO,6,1)='H' ";
					} else if ("TBRT_GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  and  REPSTAT  LIKE '%BRTTKE%'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120 AND SUBSTR(REG_NO,6,1)='H' ";
					} else if ("TBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150 AND SUBSTR(REG_NO,6,1)='H' ";
					} else if ("TBRT_GTR_IYEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT)  >151   AND SUBSTR(REG_NO,6,1)='H' ";

					} else if ("TOT_BRT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT IN ('BRT')  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (((SYSDATE-MAXPRDT) >=61 AND (SYSDATE-MAXPRDT) <=90) or ((SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <=120) or ((SYSDATE-MAXPRDT) >= 121 ))) AND SUBSTR(REG_NO,6,1)='H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("TOT_BRT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT IN ('BRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND ((CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120)  or ((SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150) or((SYSDATE-MAXPRDT)  >151 ))) AND SUBSTR(REG_NO,6,1)='H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("TOT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where   (( pending_stat='WRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((SYSDATE-MAXPRDT) <=60))  OR (pending_stat='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " (((SYSDATE-MAXPRDT) >=61 AND (SYSDATE-MAXPRDT) <=90) or ((SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <=120) or ((SYSDATE-MAXPRDT) >= 121 )))) AND SUBSTR(REG_NO,6,1)='H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("TOT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (( pending_stat='WRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((SYSDATE-MAXPRDT) <=90))  OR (pending_stat='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120) or ((SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150) or ((SYSDATE-MAXPRDT) >= 151 ))))  AND SUBSTR(REG_NO,6,1)='H'  "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					}

					else {
						status = "";
					}

				}
*/				
				

				if ("LT1".equalsIgnoreCase(cscvo.getType())) {
					
					if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
						status = " where   NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '1%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND SUBSTR(REG_NO,6,1) <> 'H'  ";
					
					}
					//department_Wrt
					else if ("DWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '1%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND (SYSDATE-MAXPRDT) <=30  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} 
					//department_Brt
					else if ("DBRT_GTR_2MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '1%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >30 AND (SYSDATE-MAXPRDT) <=60  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("DBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '1%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and  PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 60 AND (SYSDATE-MAXPRDT) <=90  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("DBRT_GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '1%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and  PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					}
					//Turnkey_Wrt
					else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '1%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and (SYSDATE-MAXPRDT) <=90 AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} 
					//Turnkey_Brt
					else if ("TBRT_GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '1%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <= 120  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("TBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '1%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND  (SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("TBRT_GTR_IYEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '1%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >150 AND SUBSTR(REG_NO,6,1) <> 'H' ";

					} else if ("TOT_BRT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  where  (PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 60) "
						 * +
						 * " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)"
						 * ;
						 */
						status = "  where  (PENDING_STAT IN ('BRT')  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (((SYSDATE-MAXPRDT) >30 AND (SYSDATE-MAXPRDT) <=60) or ((SYSDATE-MAXPRDT) > 60 AND (SYSDATE-MAXPRDT) <=90) or ((SYSDATE-MAXPRDT) > 90 ))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '1%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_BRT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  where  (REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  > 90) "
						 * +
						 * " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)"
						 * ;
						 */
						status = "  where  (REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (((SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <= 120)  or ((SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150) or((SYSDATE-MAXPRDT)  >150))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '1%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where   (( pending_stat='WRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " (CEIL(SYSDATE-MAXPRDT) <=30))  OR (pending_stat='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((CEIL(SYSDATE-MAXPRDT) >30 AND CEIL(SYSDATE-MAXPRDT) <=60) or (CEIL(SYSDATE-MAXPRDT) > 60 AND CEIL(SYSDATE-MAXPRDT) <=90) or (CEIL(SYSDATE-MAXPRDT) > 90 )))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '1%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (( pending_stat='WRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((SYSDATE-MAXPRDT) <=90))  OR (pending_stat='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((CEIL(SYSDATE-MAXPRDT) >90 AND CEIL(SYSDATE-MAXPRDT) <=120) or ((SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150) or ((SYSDATE-MAXPRDT) > 150 ))))  AND SUBSTR(REG_NO,6,1)<>'H'  "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '1%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					}

					else {
						status = "";
					}

							
				}
				else if ("LT2".equalsIgnoreCase(cscvo.getType())) {
					

					if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
						status = " where   NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '2%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND SUBSTR(REG_NO,6,1) <> 'H'  ";
					
					}
					//department_Wrt
					else if ("DWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '2%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND (SYSDATE-MAXPRDT) <=30  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} 
					//department_Brt
					else if ("DBRT_GTR_2MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '2%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >30 AND (SYSDATE-MAXPRDT) <=60  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("DBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '2%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and  PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 60 AND (SYSDATE-MAXPRDT) <=90  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("DBRT_GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '2%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and  PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					}
					//Turnkey_Wrt
					else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '2%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and (SYSDATE-MAXPRDT) <=90 AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} 
					//Turnkey_Brt
					else if ("TBRT_GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '2%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <= 120  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("TBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '2%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND  (SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("TBRT_GTR_IYEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '2%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >150 AND SUBSTR(REG_NO,6,1) <> 'H' ";

					} else if ("TOT_BRT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  where  (PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 60) "
						 * +
						 * " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)"
						 * ;
						 */
						status = "  where  (PENDING_STAT IN ('BRT')  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (((SYSDATE-MAXPRDT) >30 AND (SYSDATE-MAXPRDT) <=60) or ((SYSDATE-MAXPRDT) > 60 AND (SYSDATE-MAXPRDT) <=90) or ((SYSDATE-MAXPRDT) > 90 ))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '2%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_BRT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  where  (REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  > 90) "
						 * +
						 * " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)"
						 * ;
						 */
						status = "  where  (REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (((SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <= 120)  or ((SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150) or((SYSDATE-MAXPRDT)  >150))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '2%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where   (( pending_stat='WRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " (CEIL(SYSDATE-MAXPRDT) <=30))  OR (pending_stat='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((CEIL(SYSDATE-MAXPRDT) >30 AND CEIL(SYSDATE-MAXPRDT) <=60) or (CEIL(SYSDATE-MAXPRDT) > 60 AND CEIL(SYSDATE-MAXPRDT) <=90) or (CEIL(SYSDATE-MAXPRDT) > 90 )))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '2%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (( pending_stat='WRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((SYSDATE-MAXPRDT) <=90))  OR (pending_stat='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((CEIL(SYSDATE-MAXPRDT) >90 AND CEIL(SYSDATE-MAXPRDT) <=120) or ((SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150) or ((SYSDATE-MAXPRDT) > 150 ))))  AND SUBSTR(REG_NO,6,1)<>'H'  "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '2%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					}

					else {
						status = "";
					}
				
					
				}
				else if ("LT3".equalsIgnoreCase(cscvo.getType())) {

					if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
						status = " where   NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND SUBSTR(REG_NO,6,1) <> 'H'  ";
					
					}
					//department_Wrt
					else if ("DWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND (SYSDATE-MAXPRDT) <=30  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} 
					//department_Brt
					else if ("DBRT_GTR_2MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >30 AND (SYSDATE-MAXPRDT) <=60  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("DBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and  PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 60 AND (SYSDATE-MAXPRDT) <=90  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("DBRT_GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and  PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					}
					//Turnkey_Wrt
					else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and (SYSDATE-MAXPRDT) <=90 AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} 
					//Turnkey_Brt
					else if ("TBRT_GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <= 120  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("TBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND  (SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("TBRT_GTR_IYEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >150 AND SUBSTR(REG_NO,6,1) <> 'H' ";

					} else if ("TOT_BRT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  where  (PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 60) "
						 * +
						 * " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)"
						 * ;
						 */
						status = "  where  (PENDING_STAT IN ('BRT')  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (((SYSDATE-MAXPRDT) >30 AND (SYSDATE-MAXPRDT) <=60) or ((SYSDATE-MAXPRDT) > 60 AND (SYSDATE-MAXPRDT) <=90) or ((SYSDATE-MAXPRDT) > 90 ))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_BRT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  where  (REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  > 90) "
						 * +
						 * " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)"
						 * ;
						 */
						status = "  where  (REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (((SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <= 120)  or ((SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150) or((SYSDATE-MAXPRDT)  >150))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where   (( pending_stat='WRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " (CEIL(SYSDATE-MAXPRDT) <=30))  OR (pending_stat='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((CEIL(SYSDATE-MAXPRDT) >30 AND CEIL(SYSDATE-MAXPRDT) <=60) or (CEIL(SYSDATE-MAXPRDT) > 60 AND CEIL(SYSDATE-MAXPRDT) <=90) or (CEIL(SYSDATE-MAXPRDT) > 90 )))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (( pending_stat='WRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((SYSDATE-MAXPRDT) <=90))  OR (pending_stat='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((CEIL(SYSDATE-MAXPRDT) >90 AND CEIL(SYSDATE-MAXPRDT) <=120) or ((SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150) or ((SYSDATE-MAXPRDT) > 150 ))))  AND SUBSTR(REG_NO,6,1)<>'H'  "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					}

					else {
						status = "";
					}
					}
					else if ("LT4".equalsIgnoreCase(cscvo.getType())) {
						
					

					if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
						status = " where   NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '4%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND SUBSTR(REG_NO,6,1) <> 'H'  ";
					
					}
					//department_Wrt
					else if ("DWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '4%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND (SYSDATE-MAXPRDT) <=30  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} 
					//department_Brt
					else if ("DBRT_GTR_2MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '4%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >30 AND (SYSDATE-MAXPRDT) <=60  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("DBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and  PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 60 AND (SYSDATE-MAXPRDT) <=90  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("DBRT_GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '4%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and  PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					}
					//Turnkey_Wrt
					else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '4%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and (SYSDATE-MAXPRDT) <=90 AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} 
					//Turnkey_Brt
					else if ("TBRT_GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '4%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <= 120  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("TBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '4%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND  (SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150  AND SUBSTR(REG_NO,6,1) <> 'H' ";
					} else if ("TBRT_GTR_IYEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '4%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >150 AND SUBSTR(REG_NO,6,1) <> 'H' ";

					} else if ("TOT_BRT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  where  (PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 60) "
						 * +
						 * " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)"
						 * ;
						 */
						status = "  where  (PENDING_STAT IN ('BRT')  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (((SYSDATE-MAXPRDT) >30 AND (SYSDATE-MAXPRDT) <=60) or ((SYSDATE-MAXPRDT) > 60 AND (SYSDATE-MAXPRDT) <=90) or ((SYSDATE-MAXPRDT) > 90 ))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '4%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_BRT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  where  (REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  > 90) "
						 * +
						 * " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)"
						 * ;
						 */
						status = "  where  (REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (((SYSDATE-MAXPRDT) > 90 AND (SYSDATE-MAXPRDT) <= 120)  or ((SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150) or((SYSDATE-MAXPRDT)  >150))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '4%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where   (( pending_stat='WRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " (CEIL(SYSDATE-MAXPRDT) <=30))  OR (pending_stat='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((CEIL(SYSDATE-MAXPRDT) >30 AND CEIL(SYSDATE-MAXPRDT) <=60) or (CEIL(SYSDATE-MAXPRDT) > 60 AND CEIL(SYSDATE-MAXPRDT) <=90) or (CEIL(SYSDATE-MAXPRDT) > 90 )))) AND SUBSTR(REG_NO,6,1)<>'H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '4%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (( pending_stat='WRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((SYSDATE-MAXPRDT) <=90))  OR (pending_stat='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((CEIL(SYSDATE-MAXPRDT) >90 AND CEIL(SYSDATE-MAXPRDT) <=120) or ((SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150) or ((SYSDATE-MAXPRDT) > 150 ))))  AND SUBSTR(REG_NO,6,1)<>'H'  "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '4%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					}

					else {
						status = "";
					}

		

				} else if ("HT".equalsIgnoreCase(cscvo.getType())) {

					if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
						// ((REPSTAT LIKE '%RT') OR (REPSTAT LIKE '%KEY'))
						// replace PENDING_STAT IN ('WRT','BRT')
						status = " where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL'  AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND SUBSTR(REG_NO,6,1)='H'";
						/*status ="WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NCPARTCD = SECCD AND NVL(ESTSTATUS,'01')='02' \r\n" + 
								"	AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) \r\n" + 
								"	AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) AND PENDING_STAT IN ('WRT','BRT') AND SUBSTR(REG_NO,6,1) = 'H' \r\n" + 
								"	AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS NULL ) ";*/
					}
					//department_Wrt
					else if ("DWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND SUBSTR(REG_NO,6,1)='H'  AND SUPPLY_RELEASE_DATE IS  NULL and (SYSDATE-MAXPRDT) <=60 ";
					}
					//department_Brt
					else if ("DBRT_GTR_2MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL   AND (SYSDATE-MAXPRDT) >=61 AND (SYSDATE-MAXPRDT) <=90 AND SUBSTR(REG_NO,6,1)='H' ";
					} else if ("DBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND  (SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <=120   AND SUBSTR(REG_NO,6,1)='H' ";
					} else if ("DBRT_GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND  (SYSDATE-MAXPRDT) >= 120   AND SUBSTR(REG_NO,6,1)='H' ";
					}
					//Turnkey_Wrt
					else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and     (SYSDATE-MAXPRDT) <=90 AND SUBSTR(REG_NO,6,1)='H' ";
					}
					//department_Brt
					else if ("TBRT_GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)  AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and  REPSTAT  LIKE '%BRTTKE%'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120 AND SUBSTR(REG_NO,6,1)='H' ";
					} else if ("TBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150 AND SUBSTR(REG_NO,6,1)='H' ";
					} else if ("TBRT_GTR_IYEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   where NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)  and  REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL  AND (SYSDATE-MAXPRDT)  >150   AND SUBSTR(REG_NO,6,1)='H' ";

					}
					//Totals
					else if ("TOT_BRT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT IN ('BRT')  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (((SYSDATE-MAXPRDT) >=61 AND (SYSDATE-MAXPRDT) <=90) or ((SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <=120) or ((SYSDATE-MAXPRDT) >= 120 ))) AND SUBSTR(REG_NO,6,1)='H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_BRT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT IN ('BRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND ((CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120)  or ((SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150) or((SYSDATE-MAXPRDT)  >150 ))) AND SUBSTR(REG_NO,6,1)='H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where   (( pending_stat='WRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((SYSDATE-MAXPRDT) <=60))  OR (pending_stat='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " (((SYSDATE-MAXPRDT) >=61 AND (SYSDATE-MAXPRDT) <=90) or ((SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <=120) or ((SYSDATE-MAXPRDT) >= 120 )))) AND SUBSTR(REG_NO,6,1)='H' "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0)";
					} else if ("TOT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (( pending_stat='WRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((SYSDATE-MAXPRDT) <=90))  OR (pending_stat='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey'"
								+ " AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND"
								+ " ((CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120) or ((SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150) or ((SYSDATE-MAXPRDT) > 150 ))))  AND SUBSTR(REG_NO,6,1)='H'  "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) AND NVL(SAPDEM,0) > 0 AND NVL(TOTAMT,0) >= NVL(SAPDEM,0) ";
					}

					else {
						status = "";
					}

				} else {
					if ("PEN_APP".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL) "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("DWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL ) "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("DBRT_GTR_2MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department'AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >=60 AND (SYSDATE-INTIMATE_DATE) <=179) "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("DBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374) "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("DBRT_GTR_1YEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 375) "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL) "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("TBRT_GTR_3MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) > 90 AND (SYSDATE-INTIMATE_DATE) <=179) "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("TBRT_GTR_6MONTHS".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 180 AND (SYSDATE-INTIMATE_DATE) <=374) "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("TBRT_GTR_IYEAR".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  >375) "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";

					} else if ("TOT_BRT_DEPT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE) >= 60) "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else if ("TOT_BRT_TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  where  (PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (MAXPRDT-INTIMATE_DATE)  > 90) "
								+ " and NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO)";
					} else {
						status = "";
					}
				}

				if ("DIV".equals(cscvo.getFlag())) {
					if (cscvo.getDivision().equalsIgnoreCase("TOTAL")) {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
							circle = " ";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "'";
						}
					}

					else {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
							circle = "  and divname='" + cscvo.getDivision() + "'";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "'";
						}
					}

				} else if ("SUB_DIV".equals(cscvo.getFlag()))

				{
					if (cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")
								&& cscvo.getDivision().equalsIgnoreCase("TOTAL")) {
							circle = " ";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "'";
						}

					}

					else {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")
								&& cscvo.getDivision().equalsIgnoreCase("TOTAL")) {
							circle = " and subname='" + cscvo.getSubDiv() + "'";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "'";
						}
					}

				}

				else if ("SEC".equals(cscvo.getFlag())) {
					if (cscvo.getSec().equalsIgnoreCase("TOTAL")) {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL") && cscvo.getDivision().equalsIgnoreCase("TOTAL")
								&& cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
							circle = " ";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "'";
						}

					}

					else {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL") && cscvo.getDivision().equalsIgnoreCase("TOTAL")
								&& cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
							circle = " and secname='" + cscvo.getSec() + "'";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec() + "'";
						}
					}

				} else if ("CIR".equals(cscvo.getFlag())) {

					if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
						circle = "";
					}

					else {
						circle = " and cirname='" + cscvo.getCircle() + "'";
					}

				} else {

				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname,divname Division,subname,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE"
					 * + " from rep_final a, spdclmaster  b  " +
					 * " where a.ncpartcd=b.seccd  " + status + "" + circle + ""
					 * +
					 * " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) "
					 * );
					 */

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,S.cirname,S.divname Division,S.subname,S.secname Section,"
									+ " R.REG_NO reg_no,R.reg_date,R.consumer_name ,R.CAT, R.Load, R.Demand,R.Paid ,R.paid_date , R.Estimate_Sanctioned_Date, R.AGEPENDENCY  ,R.PENDING_STAT,R.EXECUTION_TYPE,P.REASONS||'-'||REMARKS FROM"
									+ " (select row_number() over (partition by null order by null) sno,REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE,NCPARTCD from rep_final"
									+ " " + status + " )R,"
									//+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
									+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))P,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
									+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD" + " " + circle + "");
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname,divname Division,subname,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE"
					 * + " from rep_final a, spdclmaster  b  " +
					 * " where a.ncpartcd=b.seccd  " + status + "" + circle + ""
					 * +
					 * " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) "
					 * );
					 */
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,S.cirname,S.divname Division,S.subname,S.secname Section,"
									+ " R.REG_NO reg_no,R.reg_date,R.consumer_name ,R.CAT, R.Load, R.Demand,R.Paid ,R.paid_date , R.Estimate_Sanctioned_Date, R.AGEPENDENCY  ,R.PENDING_STAT,R.EXECUTION_TYPE,P.REASONS||'-'||REMARKS FROM"
									+ " (select row_number() over (partition by null order by null) sno,REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE,NCPARTCD from rep_final"
									+ " " + status + " )R,"
									//+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
									+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))P,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
									+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD" + " " + circle + "");

				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname,divname Division,subname,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE"
					 * + " from rep_final a, spdclmaster  b  " +
					 * " where a.ncpartcd=b.seccd  " + status + "" + circle + ""
					 * +
					 * " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) "
					 * );
					 */
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,S.cirname,S.divname Division,S.subname,S.secname Section,"
									+ " R.REG_NO reg_no,R.reg_date,R.consumer_name ,R.CAT, R.Load, R.Demand,R.Paid ,R.paid_date , R.Estimate_Sanctioned_Date, R.AGEPENDENCY  ,R.PENDING_STAT,R.EXECUTION_TYPE,P.REASONS||'-'||REMARKS FROM"
									+ " (select row_number() over (partition by null order by null) sno,REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE,NCPARTCD from rep_final"
									+ " " + status + " )R,"
									//+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
									+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))P,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
									+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD" + " " + circle + "");
				} else {

					String query = " select row_number() over (partition by null order by null) sno,S.cirname,S.divname Division,S.subname,S.secname Section,"
							+ " R.REG_NO reg_no,R.reg_date,R.consumer_name ,R.CAT, R.Load, R.Demand,R.Paid ,R.paid_date , R.Estimate_Sanctioned_Date, R.AGEPENDENCY  ,R.PENDING_STAT,R.EXECUTION_TYPE,P.REASONS||'-'||REMARKS FROM"
							+ " (select row_number() over (partition by null order by null) sno,REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE,NCPARTCD from rep_final"
							+ " " + status + " )R," + " "
							//+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
							+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))P,"
							+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
							+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD" + " " + circle + " ";
					//System.out.println("circle:export:123:26092022:"+query);
					/*
					 * resultSet = statement.executeQuery(
					 * " select row_number() over (partition by null order by null) sno,cirname,divname Division,subname,secname Section,a.REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE"
					 * + " from rep_final a, spdclmaster  b  " +
					 * " where a.ncpartcd=b.seccd  " + status + "" + circle + ""
					 * +
					 * " and seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) "
					 * );
					 */

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,S.cirname,S.divname Division,S.subname,S.secname Section,"
									+ "  R.REG_NO reg_no,R.reg_date,R.consumer_name ,R.CAT, R.Load, R.Demand,R.Paid ,R.paid_date , R.Estimate_Sanctioned_Date, R.AGEPENDENCY  ,R.PENDING_STAT,R.EXECUTION_TYPE,P.REASONS||'-'||REMARKS FROM"
									+ " (select row_number() over (partition by null order by null) sno,REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE,NCPARTCD from rep_final"
									+ " " + status + " )R,"
									//+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
									+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT WHERE (REG_NO,TRANDT) IN (SELECT REG_NO,MAX(TRANDT) FROM PENDINGLTHTPAYMENT GROUP BY REG_NO ))P,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
									+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD" + " " + circle + "");
					//System.out.println("circle:export:HT3:2"+query);
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						/*
						 * * vo.setCircleName(reportRst.getString(1));
						 * vo.setDivisionName(reportRst.getString(2));
						 * vo.setDcbCollection(reportRst.getString(3));
						 * vo.setDcbDemand(reportRst.getString(4));
						 * vo.setDcbPerCent(reportRst.getString(5));
						 * vo.setCummColl(reportRst.getString(8));
						 */

						vo.setCircleName(resultSet.getString(2));
						vo.setDivision(resultSet.getString(3));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(4));
						vo.setSec(resultSet.getString(5));
						// vo.setType(resultSet.getString(6));
						vo.setReg_no(resultSet.getString(6));
						vo.setRegDate(resultSet.getString(7));
						vo.setCunsu_name(resultSet.getString(8));

						// vo.setAddress(resultSet.getString(10));
						// vo.setPhono(resultSet.getString(11));
						// vo.setS_group(resultSet.getString(12));

						vo.setCat(resultSet.getString(9));
						vo.setLoad(resultSet.getString(10));
						// vo.setPurpose(resultSet.getString(15));
						vo.setDemand(resultSet.getString(11));
						vo.setPaid(resultSet.getString(12));

						// vo.setGroup_demand(resultSet.getString(18));
						// vo.setGroup_coll(resultSet.getString(19));

						vo.setPaid_date(resultSet.getString(13));
						vo.setRel_date(resultSet.getString(14));

						vo.setAgependency(resultSet.getString(15));
						vo.setStatus(resultSet.getString(16));
						vo.setExe_type(resultSet.getString(17));
						vo.setRemarks(resultSet.getString(18));
						// vo.setPen_simply_brt(resultSet.getString(16));
						// vo.setExe_type(resultSet.getString(17));
						/*
						 * vo.setUscno(resultSet.getString(22));
						 * vo.setRef_no(resultSet.getString(23));
						 * 
						 * vo.setPen_simply_brt(resultSet.getString(24));
						 * vo.setSla_desc(resultSet.getString(25));
						 * 
						 * vo.setExe_type(resultSet.getString(26));
						 * vo.setStatus(resultSet.getString(27));
						 */
						// vo.setCategory(reportRst.getString(4));
						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}

	// Automatic Compensation

	public CscpayVO getAutomaticCompensationAglDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		
		ResultSet reportRst = null;
		PreparedStatement reportPStmt2 = null;
		
		ResultSet reportRst2 = null;
		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String cattype = "";
		String loadcattype = "";

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Connection con2 = DBConnectionManager.getInstance().getConnection("ccc");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		if ("WITH_AGL".equalsIgnoreCase(cscvo.getType())) {
			cattype = "";
		}
		if ("WITHOUT_AGL".equalsIgnoreCase(cscvo.getType())) {
			// cattype = " AND CATEGORY_SUPPLY <> '5A2' ";
			cattype = " AND CATEGORY_SUPPLY not in ('5A2','5A1') ";
			loadcattype = " AND  PRESENT_CATEGORY NOT IN ('5A1','5A2') ";
		}

		try {
			if (con != null && con2 != null) {
				
	//changes done on 27-03-2023 			
//Estimate Sanctions BLOCK				

				if ("DIV".equals(cscvo.getFlag())) {
					
					
					String query = "select divname,sum(NO_OF),sum(WRT),sum(BRT),CEIL(sum(WRT)/sum(NO_OF)*100),sum(PENALTY) from "
							+ " (SELECT S.divname as divname,COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,NVL(SUM(NVL(P.DEM_PENALTY,0))/100000,0) PENALTY  FROM "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND TRUNC(MIN_TRANDT) BETWEEN to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') AND  NVL(ESTSTATUS,'03')='02' AND NVL(TOTAMT,0) > 50 " + cattype
							+ " )R, "
							+ " (SELECT REG_NO ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) FROM REP_FINAL whEre  (CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END)=0   )W, "
							+ " (SELECT REG_NO ,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END) FROM REP_FINAL where (CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)='BRT'  )B,"
							+ " (SELECT REG_NO,DEM_PENALTY FROM REP_FINAL)P, "
							+ " (SELECT cirname,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S WHERE R.REG_NO=W.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=P.REG_NO(+) AND R.NCPARTCD=S.SECCD  and  s.cirname=?  GROUP BY S.divname "
							+ " union all"
							+ " SELECT S.divname  as divname,COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,NVL(SUM(NVL(P.DEM_PENALTY,0))/100000,0) PENALTY  FROM "
							+ " (SELECT REG_NO,CSPARTCD FROM newcomp_tab WHERE  NVL(REJECTED,'Y') <> 'X' AND TRUNC(FIRSTDEM_DATE) BETWEEN to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') AND  NVL(ESTSTATUS,'03')='02' AND NVL(coll,0) > 50 AND COMPLAINT=9 AND SUB_COMPLAINT=9  "
							+ loadcattype + " )R, "
							+ " (SELECT REG_NO ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) FROM NEWCOMP_TAB whEre  (CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END)=0  )W, "
							+ " (SELECT REG_NO ,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END) FROM NEWCOMP_TAB where (CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)='BRT'  )B, "
							+ " (SELECT REG_NO,DEM_PENALTY FROM newcomp_tab)P, "
							+ " (SELECT cirname,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
							+ " WHERE R.REG_NO=W.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=P.REG_NO(+) AND R.CSPARTCD=S.SECCD  and  s.cirname=? GROUP BY S.divname )"
							+ " group by divname order by divname";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getCircle());
					
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					
					String query = "select subname,sum(NO_OF),sum(WRT),sum(BRT),CEIL(sum(WRT)/sum(NO_OF)*100),sum(PENALTY) from "
							+ " (SELECT S.subname as subname,COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,NVL(SUM(NVL(P.DEM_PENALTY,0))/100000,0) PENALTY  FROM "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND TRUNC(MIN_TRANDT) BETWEEN to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') AND  NVL(ESTSTATUS,'03')='02' AND NVL(TOTAMT,0) > 50 " + cattype
							+ " )R, "
							+ " (SELECT REG_NO ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) FROM REP_FINAL whEre  (CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END)=0   )W, "
							+ " (SELECT REG_NO ,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END) FROM REP_FINAL where (CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)='BRT'  )B,"
							+ " (SELECT REG_NO,DEM_PENALTY FROM REP_FINAL)P, "
							+ " (SELECT cirname,divname,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S WHERE R.REG_NO=W.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=P.REG_NO(+) AND R.NCPARTCD=S.SECCD  and  s.cirname=?   and s.divname=?  GROUP BY S.subname "
							+ " union all"
							+ " SELECT S.subname  as subname,COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,NVL(SUM(NVL(P.DEM_PENALTY,0))/100000,0) PENALTY  FROM "
							+ " (SELECT REG_NO,CSPARTCD FROM newcomp_tab WHERE  NVL(REJECTED,'Y') <> 'X' AND TRUNC(FIRSTDEM_DATE) BETWEEN to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') AND  NVL(ESTSTATUS,'03')='02' AND NVL(coll,0) > 50 AND COMPLAINT=9 AND SUB_COMPLAINT=9  "
							+ loadcattype + " )R, "
							+ " (SELECT REG_NO ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) FROM NEWCOMP_TAB whEre  (CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END)=0  )W, "
							+ " (SELECT REG_NO ,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END) FROM NEWCOMP_TAB where (CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)='BRT'  )B, "
							+ " (SELECT REG_NO,DEM_PENALTY FROM newcomp_tab)P, "
							+ " (SELECT cirname,divname,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
							+ " WHERE R.REG_NO=W.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=P.REG_NO(+) AND R.CSPARTCD=S.SECCD  and  s.cirname=?   and s.divname=?  GROUP BY S.subname )"
							+ " group by subname order by subname";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportPStmt.setString(3, cscvo.getCircle());
					reportPStmt.setString(4, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();

				} else if ("SEC".equals(cscvo.getFlag())) {
					
					

					String query = "select secname,sum(NO_OF),sum(WRT),sum(BRT),CEIL(sum(WRT)/sum(NO_OF)*100),sum(PENALTY) from "
							+ " (SELECT S.secname as secname,COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,NVL(SUM(NVL(P.DEM_PENALTY,0))/100000,0) PENALTY  FROM "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND TRUNC(MIN_TRANDT) BETWEEN to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') AND  NVL(ESTSTATUS,'03')='02' AND NVL(TOTAMT,0) > 50 " + cattype
							+ " )R, "
							+ " (SELECT REG_NO ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) FROM REP_FINAL whEre  (CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END)=0   )W, "
							+ " (SELECT REG_NO ,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END) FROM REP_FINAL where (CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)='BRT'   )B,"
							+ " (SELECT REG_NO,DEM_PENALTY FROM REP_FINAL)P, "
							+ " (SELECT cirname,divname,subname,SECNAME,SECCD FROM SPDCLMASTER)S WHERE R.REG_NO=W.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=P.REG_NO(+) AND R.NCPARTCD=S.SECCD  and  s.cirname=?   and s.divname=?   and s.subname=?  GROUP BY S.secname "
							+ " union all"
							+ " SELECT S.secname  as secname,COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,NVL(SUM(NVL(P.DEM_PENALTY,0))/100000,0) PENALTY  FROM "
							+ " (SELECT REG_NO,CSPARTCD FROM newcomp_tab WHERE  NVL(REJECTED,'Y') <> 'X' AND TRUNC(FIRSTDEM_DATE) BETWEEN to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') AND  NVL(ESTSTATUS,'03')='02' AND NVL(coll,0) > 50 AND COMPLAINT=9 AND SUB_COMPLAINT=9  "
							+ loadcattype + " )R, "
							+ " (SELECT REG_NO ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) FROM NEWCOMP_TAB whEre  (CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END)=0   )W, "
							+ " (SELECT REG_NO ,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END) FROM NEWCOMP_TAB where (CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)='BRT'  )B, "
							+ " (SELECT REG_NO,DEM_PENALTY FROM newcomp_tab)P, "
							+ " (SELECT cirname,divname,subname,SECNAME,SECCD FROM SPDCLMASTER)S"
							+ " WHERE R.REG_NO=W.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=P.REG_NO(+) AND R.CSPARTCD=S.SECCD  and  s.cirname=?   and s.divname=?   and s.subname=?   GROUP BY S.secname )"
							+ " group by secname order by secname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportPStmt.setString(4, cscvo.getCircle());
					reportPStmt.setString(5, cscvo.getDivision());
					reportPStmt.setString(6, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();
				} else {
					
					

					String query = "select CIRNAME,sum(NO_OF),sum(WRT),sum(BRT),CEIL(sum(WRT)/sum(NO_OF)*100),sum(PENALTY) from "
							+ " (SELECT S.CIRNAME as cirname,COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,NVL(SUM(NVL(P.DEM_PENALTY,0))/100000,0) PENALTY  FROM "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND TRUNC(MIN_TRANDT) BETWEEN to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') AND  NVL(ESTSTATUS,'03')='02' AND NVL(TOTAMT,0) > 50 " + cattype
							+ " )R, "
							+ " (SELECT REG_NO,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) FROM REP_FINAL whEre  (CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END)=0   )W, "
							+ " (SELECT REG_NO ,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END) FROM REP_FINAL where (CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)='BRT'  )B,"
							+ " (SELECT REG_NO,DEM_PENALTY FROM REP_FINAL)P, "
							+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S WHERE R.REG_NO=W.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=P.REG_NO(+) AND R.NCPARTCD=S.SECCD GROUP BY S.CIRNAME "
							+ " union all"
							+ " SELECT S.CIRNAME  as cirname,COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,NVL(SUM(NVL(P.DEM_PENALTY,0))/100000,0) PENALTY  FROM "
							+ " (SELECT REG_NO,CSPARTCD FROM newcomp_tab WHERE  NVL(REJECTED,'Y') <> 'X' AND TRUNC(FIRSTDEM_DATE) BETWEEN to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY') AND  NVL(ESTSTATUS,'03')='02' AND NVL(coll,0) > 50 AND COMPLAINT=9 AND SUB_COMPLAINT=9  "
							+ loadcattype + " )R, "
							+ " (SELECT REG_NO ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) FROM NEWCOMP_TAB whEre  (CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END)=0   )W, "
							+ " (SELECT REG_NO ,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END) FROM NEWCOMP_TAB where (CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)='BRT'  )B, "
							+ " (SELECT REG_NO,DEM_PENALTY FROM newcomp_tab)P, "
							+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
							+ " WHERE R.REG_NO=W.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=P.REG_NO(+) AND R.CSPARTCD=S.SECCD GROUP BY S.CIRNAME )"
							+ " group by CIRNAME order by CIRNAME";

					reportPStmt = con.prepareStatement(query);
					
					System.out.println("query_Estimate Sanctions:"+query);
					
					reportRst = reportPStmt.executeQuery();
				}

				if (reportRst != null) {
					double amt = 0.0;
					while (reportRst.next()) {
						amt = amt + reportRst.getDouble(6);
						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAglpen(reportRst.getInt(2));
							dmapobj.setAglwrt(reportRst.getInt(3));
							dmapobj.setAglbrt(reportRst.getInt(4));
							dmapobj.setPeraglWrt(reportRst.getDouble(5));
							dmapobj.setAglamt(reportRst.getDouble(6));
							
							// dmapobj.setTotal_dept(reportRst.getString(8));
							// dmapobj.setTot_turnkey(reportRst.getString(14));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAglpen(reportRst.getInt(2));
							dmapobj.setAglwrt(reportRst.getInt(3));
							dmapobj.setAglbrt(reportRst.getInt(4));
							dmapobj.setPeraglWrt(reportRst.getDouble(5));
							dmapobj.setAglamt(reportRst.getDouble(6));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);
					cscvo.setAglamt(amt);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}
				
				
				// SUM(NVL(P.REL_PENALTY,0))==NVL(SUM(NVL(P.REL_PENALTY,0))/100000,0)
				
				//ABSTRACT of with  AGL and  with out AGL
		
				
				
//Release of New Services  BLOCK	
				
				if ("DIV".equals(cscvo.getFlag())) {
					
					

					

					String query = "select divname,sum(NO_OF),sum(WRT),sum(BRT),CEIL(sum(WRT)/sum(NO_OF)*100),sum(PENALTY) from "
							+ " (SELECT S.divname as divname,COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,NVL(SUM(NVL(P.REL_PENALTY,0))/100000,0) PENALTY  FROM "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND TRUNC(SUPPLY_RELEASE_DATE) BETWEEN to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY')  AND (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) and reg_no in  (SELECT CSREGNO FROM CSCPAY WHERE CSBCRCNO IN ('999999','888888','444444','111112') ) AND NVL(CONSUMER_STATUS_VAL,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO')  " + cattype + "  )R, "
							+ " (SELECT REG_NO ,(CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END) FROM REP_FINAL whEre  (CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END)=0   )W, "
							+ " (SELECT REG_NO ,(CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END) FROM REP_FINAL where (CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)='BRT'  )B,"
							+ " (SELECT REG_NO,REL_PENALTY FROM REP_FINAL)P, "
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S WHERE R.REG_NO=W.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=P.REG_NO(+) AND R.NCPARTCD=S.SECCD  and s.cirname=? GROUP BY S.divname  ) group by divname order by divname  ";
					
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getCircle());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					

					String query = "select subname,sum(NO_OF),sum(WRT),sum(BRT),CEIL(sum(WRT)/sum(NO_OF)*100),sum(PENALTY) from "
							+ " (SELECT S.subname as subname,COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,NVL(SUM(NVL(P.REL_PENALTY,0))/100000,0) PENALTY  FROM "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND TRUNC(SUPPLY_RELEASE_DATE) BETWEEN to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY')  AND (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) and reg_no in  (SELECT CSREGNO FROM CSCPAY WHERE CSBCRCNO IN ('999999','888888','444444','111112') ) AND NVL(CONSUMER_STATUS_VAL,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO')   " + cattype + "  )R, "
							+ " (SELECT REG_NO ,(CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END) FROM REP_FINAL whEre  (CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END)=0   )W, "
							+ " (SELECT REG_NO ,(CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END) FROM REP_FINAL where (CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)='BRT' )B,"
							+ " (SELECT REG_NO,REL_PENALTY FROM REP_FINAL)P, "
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S WHERE R.REG_NO=W.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=P.REG_NO(+) AND R.NCPARTCD=S.SECCD  and s.cirname=? and s.divname=?   GROUP BY S.subname ) group by subname order by subname   ";
					

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					// reportPStmt.setString(3, cscvo.getCircle());
					// reportPStmt.setString(4, cscvo.getDivision());
					// reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {
					
					


					String query = "select secname,sum(NO_OF),sum(WRT),sum(BRT),CEIL(sum(WRT)/sum(NO_OF)*100),sum(PENALTY) from "
							+ " (SELECT S.secname as secname,COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,NVL(SUM(NVL(P.REL_PENALTY,0))/100000,0) PENALTY  FROM "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND TRUNC(SUPPLY_RELEASE_DATE) BETWEEN to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY')   AND (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) and reg_no in  (SELECT CSREGNO FROM CSCPAY WHERE CSBCRCNO IN ('999999','888888','444444','111112') ) AND NVL(CONSUMER_STATUS_VAL,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO')  " + cattype + "  )R, "
							+ " (SELECT REG_NO ,(CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END) FROM REP_FINAL whEre  (CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END)=0   )W, "
							+ " (SELECT REG_NO ,(CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END) FROM REP_FINAL where (CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)='BRT'   )B,"
							+ " (SELECT REG_NO,REL_PENALTY FROM REP_FINAL)P, "
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S WHERE R.REG_NO=W.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=P.REG_NO(+) AND R.NCPARTCD=S.SECCD  and s.cirname=? and s.divname=?    and subname=?  GROUP BY S.secname  ) group by secname order by secname  ";
					
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					// reportPStmt.setString(4, cscvo.getCircle());
					// reportPStmt.setString(5, cscvo.getDivision());
					// reportPStmt.setString(6, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();
				} else {

					
					

					String query = "select CIRNAME,sum(NO_OF),sum(WRT),sum(BRT),CEIL(sum(WRT)/sum(NO_OF)*100),sum(PENALTY) from "
							+ " (SELECT S.CIRNAME as cirname,COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,NVL(SUM(NVL(P.REL_PENALTY,0))/100000,0) PENALTY  FROM "
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE  NVL(REJECTED,'Y') <> 'X' AND TRUNC(SUPPLY_RELEASE_DATE) BETWEEN to_date('"
							+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
							+ "','DD-MM-YYYY')  AND (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) and reg_no in  (SELECT CSREGNO FROM CSCPAY WHERE CSBCRCNO IN ('999999','888888','444444','111112') ) AND NVL(CONSUMER_STATUS_VAL,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO')  " + cattype + "  )R, "
							+ " (SELECT REG_NO ,(CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END) FROM REP_FINAL whEre  (CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END)=0  )W, "
							+ " (SELECT REG_NO ,(CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END) FROM REP_FINAL where (CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)='BRT'   )B,"
							+ " (SELECT REG_NO,REL_PENALTY FROM REP_FINAL)P, "
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S WHERE R.REG_NO=W.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=P.REG_NO(+) AND R.NCPARTCD=S.SECCD GROUP BY S.CIRNAME ) group by CIRNAME order by CIRNAME  ";
					

					reportPStmt = con.prepareStatement(query);
					
					System.out.println("query_Release of New Services:"+query);
					
					reportRst = reportPStmt.executeQuery();
				}

				if (reportRst != null) {

					double amt = 0.0;
					while (reportRst.next()) {
						amt = amt + reportRst.getDouble(6);
						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setRelaglpen(reportRst.getInt(2));
							dmapobj.setRelaglwrt(reportRst.getInt(3));
							dmapobj.setRelaglbrt(reportRst.getInt(4));
							dmapobj.setRelperaglWrt(reportRst.getDouble(5));
							dmapobj.setRelaglamt(reportRst.getDouble(6));

						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setRelaglpen(reportRst.getInt(2));
							dmapobj.setRelaglwrt(reportRst.getInt(3));
							dmapobj.setRelaglbrt(reportRst.getInt(4));
							dmapobj.setRelperaglWrt(reportRst.getDouble(5));
							dmapobj.setRelaglamt(reportRst.getDouble(6));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);
					cscvo.setRelaglamt(amt);

				}

//	Fuse off Calls BLOCK			
				if ("DIV".equals(cscvo.getFlag())) {
					/*String query = "select s.divname divname,ifnull(t.scs,0) total,ifnull(w.scs,0) wrt,ifnull(b.scs,0) brt,case when ifnull(t.scs,0)>0 then ((ifnull(w.scs,0)/ ifnull(t.scs,0))*100) else 0 end perwrt,ifnull(b.penalty/100000,0) pen from "
							+ " (select distinct divname,divcd from spdclmaster where circd not in (1,4,6,9) and cirname=?) s "
							+ " left join (SELECT count(1) scs,substr(seccd,1,2) divcd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')='SUP' and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') group by substr(seccd,1,2)) t on t.divcd=s.divcd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,2) divcd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')='SUP' and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='WRT' group by substr(seccd,1,2)) w on w.divcd=s.divcd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,2) divcd,sum(case when COMPLAINT_SUB_TYPE in (4,5) then 100 else 50 end) penalty FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')='SUP' and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='BRT' group by substr(seccd,1,2)) b on b.divcd=s.divcd ";
					*/
					//10-11-2022
					String query = "select s.divname divname,ifnull(t.scs,0) total,ifnull(w.scs,0) wrt,ifnull(b.scs,0) brt,case when ifnull(t.scs,0)>0 then ((ifnull(w.scs,0)/ ifnull(t.scs,0))*100) else 0 end perwrt,ifnull(b.penalty/100000,0) pen from "
							+ " (select distinct divname,divcd from spdclmaster where circd not in (1,4,6,9) and cirname=?) s "
							+ " left join (SELECT count(1) scs,substr(seccd,1,2) divcd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')IN('SUP','FEE') AND COMPLAINT_SUB_TYPE  !=82 and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') group by substr(seccd,1,2)) t on t.divcd=s.divcd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,2) divcd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')IN('SUP','FEE') AND COMPLAINT_SUB_TYPE  !=82 and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='WRT' group by substr(seccd,1,2)) w on w.divcd=s.divcd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,2) divcd,sum(case when COMPLAINT_SUB_TYPE in (4,5) then 100 else 50 end) penalty FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')IN('SUP','FEE') AND COMPLAINT_SUB_TYPE  !=82 and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='BRT' group by substr(seccd,1,2)) b on b.divcd=s.divcd ";

					reportPStmt2 = con2.prepareStatement(query);
					reportPStmt2.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());
					reportRst2 = reportPStmt2.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					/*String query = "select s.subname subname,ifnull(t.scs,0) total,ifnull(w.scs,0) wrt,ifnull(b.scs,0) brt,case when ifnull(t.scs,0)>0 then ((ifnull(w.scs,0)/ ifnull(t.scs,0))*100) else 0 end perwrt,ifnull(b.penalty/100000,0) pen from "
							+ " (select distinct subname,subcd from spdclmaster where circd not in (1,4,6,9) and cirname=? and divname=?) s "
							+ " left join (SELECT count(1) scs,substr(seccd,1,4) subcd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')='SUP' and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') group by substr(seccd,1,4)) t on t.subcd=s.subcd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,4) subcd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')='SUP' and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='WRT' group by substr(seccd,1,4)) w on w.subcd=s.subcd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,4) subcd,sum(case when COMPLAINT_SUB_TYPE in (4,5) then 100 else 50 end) penalty FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')='SUP' and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='BRT' group by substr(seccd,1,4)) b on b.subcd=s.subcd ";
					*/
					//10-11-2022
					String query = "select s.subname subname,ifnull(t.scs,0) total,ifnull(w.scs,0) wrt,ifnull(b.scs,0) brt,case when ifnull(t.scs,0)>0 then ((ifnull(w.scs,0)/ ifnull(t.scs,0))*100) else 0 end perwrt,ifnull(b.penalty/100000,0) pen from "
							+ " (select distinct subname,subcd from spdclmaster where circd not in (1,4,6,9) and cirname=? and divname=?) s "
							+ " left join (SELECT count(1) scs,substr(seccd,1,4) subcd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')IN('SUP','FEE') AND COMPLAINT_SUB_TYPE  !=82 and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') group by substr(seccd,1,4)) t on t.subcd=s.subcd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,4) subcd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')IN('SUP','FEE') AND COMPLAINT_SUB_TYPE  !=82 and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='WRT' group by substr(seccd,1,4)) w on w.subcd=s.subcd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,4) subcd,sum(case when COMPLAINT_SUB_TYPE in (4,5) then 100 else 50 end) penalty FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')IN('SUP','FEE') AND COMPLAINT_SUB_TYPE  !=82 and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='BRT' group by substr(seccd,1,4)) b on b.subcd=s.subcd ";

					reportPStmt2 = con2.prepareStatement(query);
					reportPStmt2.setString(1, cscvo.getCircle());
					reportPStmt2.setString(2, cscvo.getDivision());
					reportRst2 = reportPStmt2.executeQuery();

				} else if ("SEC".equals(cscvo.getFlag())) {
					/*String query = "select s.secname secname,ifnull(t.scs,0) total,ifnull(w.scs,0) wrt,ifnull(b.scs,0) brt,case when ifnull(t.scs,0)>0 then ((ifnull(w.scs,0)/ ifnull(t.scs,0))*100) else 0 end perwrt,ifnull(b.penalty/100000,0) pen from "
							+ " (select distinct secname,seccd from spdclmaster where circd not in (1,4,6,9) and cirname=? and divname=? AND SUBNAME=?) s "
							+ " left join (SELECT count(1) scs,substr(seccd,1,5) seccd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')='SUP' and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') group by substr(seccd,1,5)) t on t.seccd=s.seccd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,5) seccd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')='SUP' and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='WRT' group by substr(seccd,1,5)) w on w.seccd=s.seccd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,5) seccd,sum(case when COMPLAINT_SUB_TYPE in (4,5) then 100 else 50 end) penalty FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')='SUP' and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='BRT' group by substr(seccd,1,5)) b on b.seccd=s.seccd ";
					*/
					//10-11-2022
					String query = "select s.secname secname,ifnull(t.scs,0) total,ifnull(w.scs,0) wrt,ifnull(b.scs,0) brt,case when ifnull(t.scs,0)>0 then ((ifnull(w.scs,0)/ ifnull(t.scs,0))*100) else 0 end perwrt,ifnull(b.penalty/100000,0) pen from "
							+ " (select distinct secname,seccd from spdclmaster where circd not in (1,4,6,9) and cirname=? and divname=? AND SUBNAME=?) s "
							+ " left join (SELECT count(1) scs,substr(seccd,1,5) seccd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')IN('SUP','FEE') AND COMPLAINT_SUB_TYPE  !=82 and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') group by substr(seccd,1,5)) t on t.seccd=s.seccd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,5) seccd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')IN('SUP','FEE') AND COMPLAINT_SUB_TYPE  !=82 and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='WRT' group by substr(seccd,1,5)) w on w.seccd=s.seccd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,5) seccd,sum(case when COMPLAINT_SUB_TYPE in (4,5) then 100 else 50 end) penalty FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')IN('SUP','FEE') AND COMPLAINT_SUB_TYPE  !=82 and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='BRT' group by substr(seccd,1,5)) b on b.seccd=s.seccd ";

					reportPStmt2 = con2.prepareStatement(query);

					reportPStmt2.setString(1, cscvo.getCircle());
					reportPStmt2.setString(2, cscvo.getDivision());
					reportPStmt2.setString(3, cscvo.getSubDiv());

					reportRst2 = reportPStmt2.executeQuery();
				} else {

					/*String query = "select s.cirname cirname,ifnull(t.scs,0) total,ifnull(w.scs,0) wrt,ifnull(b.scs,0) brt,case when ifnull(t.scs,0)>0 then ((ifnull(w.scs,0)/ ifnull(t.scs,0))*100) else 0 end perwrt,ifnull(b.penalty/100000,0) pen from "
							+ " (select distinct cirname,circd from spdclmaster where circd not in (1,4,6,9)) s "
							+ " left join (SELECT count(1) scs,substr(seccd,1,1) circd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')='SUP' and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') group by substr(seccd,1,1)) t on t.circd=s.circd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,1) circd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')='SUP' and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='WRT' group by substr(seccd,1,1)) w on w.circd=s.circd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,1) circd,sum(case when COMPLAINT_SUB_TYPE in (4,5) then 100 else 50 end) penalty FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')='SUP'  and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='BRT' group by substr(seccd,1,1)) b on b.circd=s.circd ";
					*/
					
					//10-11-2022
					String query = "select s.cirname cirname,ifnull(t.scs,0) total,ifnull(w.scs,0) wrt,ifnull(b.scs,0) brt,case when ifnull(t.scs,0)>0 then ((ifnull(w.scs,0)/ ifnull(t.scs,0))*100) else 0 end perwrt,ifnull(b.penalty/100000,0) pen from "
							+ " (select distinct cirname,circd from spdclmaster where circd not in (1,4,6,9)) s "
							+ " left join (SELECT count(1) scs,substr(seccd,1,1) circd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')IN('SUP','FEE') AND COMPLAINT_SUB_TYPE  !=82 and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') group by substr(seccd,1,1)) t on t.circd=s.circd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,1) circd FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')IN('SUP','FEE') AND COMPLAINT_SUB_TYPE  !=82 and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='WRT' group by substr(seccd,1,1)) w on w.circd=s.circd "
							+ " left join (SELECT count(1) scs,substr(seccd,1,1) circd,sum(case when COMPLAINT_SUB_TYPE in (4,5) then 100 else 50 end) penalty FROM cm_complaint where ifnull(COMPLAINT_TYPE,'')IN('SUP','FEE') AND COMPLAINT_SUB_TYPE  !=82  and substr(seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
							+ cscvo.getFrom_date() + "','%d-%m-%Y') and STR_TO_DATE('" + cscvo.getTo_date()
							+ "','%d-%m-%Y') and (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='BRT' group by substr(seccd,1,1)) b on b.circd=s.circd ";

					
					
					reportPStmt2 = con2.prepareStatement(query);
					System.out.println("query_Fuse off Calls:"+query);
					//System.out.println(query);
					reportRst2 = reportPStmt2.executeQuery();
				}
				if (reportRst2 != null) {
					int total = 0, wrt = 0, brt = 0;
					double per = 0, amt = 0;
					while (reportRst2.next()) {
						total = total + reportRst2.getInt(2);
						wrt = wrt + reportRst2.getInt(3);
						brt = brt + reportRst2.getInt(4);
						amt = amt + reportRst2.getDouble(6);
						if (cscmap.containsKey(reportRst2.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst2.getString(1));
							dmapobj.setFuseofcallpen(reportRst2.getInt(2));
							dmapobj.setFuseofcallwrt(reportRst2.getInt(3));
							dmapobj.setFuseofcallbrt(reportRst2.getInt(4));
							dmapobj.setPerfuseofcallWrt(reportRst2.getDouble(5));
							dmapobj.setFuseofcallamt(reportRst2.getDouble(6));

						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setFuseofcallpen(reportRst2.getInt(2));
							dmapobj.setFuseofcallwrt(reportRst2.getInt(3));
							dmapobj.setFuseofcallbrt(reportRst2.getInt(4));
							dmapobj.setPerfuseofcallWrt(reportRst2.getDouble(5));
							dmapobj.setFuseofcallamt(reportRst2.getDouble(6));

							cscmap.put(reportRst2.getString(1), dmapobj);
						}
					}
					if (total > 0) {
						per = ((float) wrt / (float) total) * 100;
					} else {
						per = 0;
					}
					// System.out.println(per);
					CscpayVO dmapobj = new CscpayVO();
					if (cscmap.containsKey("TOTAL")) {
						dmapobj = cscmap.get("TOTAL");
					}

					dmapobj.setFuseofcallpen(total);
					dmapobj.setFuseofcallwrt(wrt);
					dmapobj.setFuseofcallbrt(brt);
					dmapobj.setPerfuseofcallWrt(per);
					dmapobj.setFuseofcallamt(amt);
					cscmap.put("TOTAL", dmapobj);
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
			try {
				if (con2 != null) {
					DBConnectionManager.getInstance().freeConnection(con2);
					con2.close();
				}
				if (reportPStmt2 != null) {
					reportPStmt2.close();
				}
				if (reportRst2 != null) {
					reportRst2.close();
				}
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// Automatic Compensation

	public CscpayVO getAutomaticCompensationWithoutAglDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		// PreparedStatement reportPStmt1 = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,SUM(NVL(P.DEM_PENALTY,0)) PENALTY  FROM"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE TRUNC(MIN_TRANDT) IS NOT NULL  AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(MIN_TRANDT) BETWEEN '01-OCT-21' AND SYSDATE AND  NVL(ESTSTATUS,'03')='02' AND NVL(TOTAMT,0) > 50)R,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)=0  OR NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0) AND CATEGORY_SUPPLY <> '5A2' )W,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)> 0  )B,"
							+ " (SELECT REG_NO,DEM_PENALTY FROM REP_FINAL)P,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S" + " WHERE R.REG_NO=W.REG_NO(+)"
							+ " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD"
							+ " and s.cirname=? GROUP BY ROLLUP(S.divname)   ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,SUM(NVL(P.DEM_PENALTY,0)) PENALTY  FROM"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE TRUNC(MIN_TRANDT) IS NOT NULL  AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(MIN_TRANDT) BETWEEN '01-OCT-21' AND SYSDATE AND  NVL(ESTSTATUS,'03')='02' AND NVL(TOTAMT,0) > 50)R,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)=0  OR NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0) AND CATEGORY_SUPPLY <> '5A2' )W,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)> 0  )B,"
							+ " (SELECT REG_NO,DEM_PENALTY FROM REP_FINAL)P,"
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE R.REG_NO=W.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=P.REG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD"
							+ "  and s.cirname=? and s.divname=? GROUP BY ROLLUP(S.subname)   ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,SUM(NVL(P.DEM_PENALTY,0)) PENALTY  FROM"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE TRUNC(MIN_TRANDT) IS NOT NULL  AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(MIN_TRANDT) BETWEEN '01-OCT-21' AND SYSDATE AND  NVL(ESTSTATUS,'03')='02' AND NVL(TOTAMT,0) > 50)R,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)=0  OR NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0) AND CATEGORY_SUPPLY <> '5A2' )W,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)> 0  )B,"
							+ " (SELECT REG_NO,DEM_PENALTY FROM REP_FINAL)P,"
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE R.REG_NO=W.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=P.REG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD"
							+ "   and s.cirname=? and s.divname=? and subname=? GROUP BY ROLLUP(S.secname)   ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();
				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,SUM(NVL(P.DEM_PENALTY,0)) PENALTY  FROM"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE TRUNC(MIN_TRANDT) IS NOT NULL  AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(MIN_TRANDT) BETWEEN '01-OCT-21' AND SYSDATE AND  NVL(ESTSTATUS,'03')='02' AND NVL(TOTAMT,0) > 50)R,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)=0  OR NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0) AND CATEGORY_SUPPLY <> '5A2' )W,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)> 0  )B,"
							+ " (SELECT REG_NO,DEM_PENALTY FROM REP_FINAL)P,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE R.REG_NO=W.REG_NO(+)"
							+ " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD"
							+ " GROUP BY ROLLUP(S.CIRNAME)   ";

					reportPStmt = con.prepareStatement(query);
					//System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}

				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAglpen(reportRst.getInt(2));

							dmapobj.setAglwrt(reportRst.getInt(3));
							dmapobj.setAglbrt(reportRst.getInt(4));
							dmapobj.setPeraglWrt(reportRst.getDouble(5));
							dmapobj.setAglamt(reportRst.getDouble(6));
							// dmapobj.setTotal_dept(reportRst.getString(8));

							// dmapobj.setTot_turnkey(reportRst.getString(14));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAglpen(reportRst.getInt(2));
							dmapobj.setAglwrt(reportRst.getInt(3));
							dmapobj.setAglbrt(reportRst.getInt(4));
							dmapobj.setPeraglWrt(reportRst.getDouble(5));
							dmapobj.setAglamt(reportRst.getDouble(6));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,SUM(NVL(P.REL_PENALTY,0)) PENALTY  FROM"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE TRUNC(SUPPLY_RELEASE_DATE) IS NOT NULL  AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(SUPPLY_RELEASE_DATE) BETWEEN '01-OCT-21' AND SYSDATE  AND NVL(TOTAMT,0) > 50 AND CATEGORY_SUPPLY <> '5A2')R,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)=0  OR NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0)  )W,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0  )B,"
							+ " (SELECT REG_NO,REL_PENALTY FROM REP_FINAL WHERE NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0)P,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER)S" + " WHERE R.REG_NO=W.REG_NO(+)"
							+ " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=P.REG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD and s.cirname=? GROUP BY ROLLUP(S.divname)  ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, cscvo.getDivision());
					// reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,SUM(NVL(P.REL_PENALTY,0)) PENALTY  FROM"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE TRUNC(SUPPLY_RELEASE_DATE) IS NOT NULL  AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(SUPPLY_RELEASE_DATE) BETWEEN '01-OCT-21' AND SYSDATE  AND NVL(TOTAMT,0) > 50 AND CATEGORY_SUPPLY <> '5A2')R,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)=0  OR NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0)  )W,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0  )B,"
							+ " (SELECT REG_NO,REL_PENALTY FROM REP_FINAL WHERE NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0)P,"
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE R.REG_NO=W.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=P.REG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD and s.cirname=?  and s.divname=? GROUP BY ROLLUP(S.subname)  ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					// reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,SUM(NVL(P.REL_PENALTY,0)) PENALTY  FROM"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE TRUNC(SUPPLY_RELEASE_DATE) IS NOT NULL  AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(SUPPLY_RELEASE_DATE) BETWEEN '01-OCT-21' AND SYSDATE  AND NVL(TOTAMT,0) > 50 AND CATEGORY_SUPPLY <> '5A2')R,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)=0  OR NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0)  )W,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0  )B,"
							+ " (SELECT REG_NO,REL_PENALTY FROM REP_FINAL WHERE NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0)P,"
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE R.REG_NO=W.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=P.REG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD  and s.cirname=?  and s.divname=? and s.subname=?  GROUP BY ROLLUP(S.secname)  ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();
				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(R.REG_NO) NO_OF,COUNT(W.REG_NO) WRT,COUNT(B.REG_NO) BRT,CEIL(COUNT(W.REG_NO)/COUNT(R.REG_NO)*100) PER_WRT,SUM(NVL(P.REL_PENALTY,0)) PENALTY  FROM"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE TRUNC(SUPPLY_RELEASE_DATE) IS NOT NULL  AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(SUPPLY_RELEASE_DATE) BETWEEN '01-OCT-21' AND SYSDATE  AND NVL(TOTAMT,0) > 50 AND CATEGORY_SUPPLY <> '5A2')R,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)=0  OR NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0)  )W,"
							+ " (SELECT REG_NO FROM REP_FINAL WHERE NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0  )B,"
							+ " (SELECT REG_NO,REL_PENALTY FROM REP_FINAL WHERE NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0)P,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE R.REG_NO=W.REG_NO(+)"
							+ " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=P.REG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD GROUP BY ROLLUP(S.CIRNAME)  ";

					reportPStmt = con.prepareStatement(query);
					//System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}

				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setRelaglpen(reportRst.getInt(2));
							dmapobj.setRelaglwrt(reportRst.getInt(3));
							dmapobj.setRelaglbrt(reportRst.getInt(4));
							dmapobj.setRelperaglWrt(reportRst.getDouble(5));
							dmapobj.setRelaglamt(reportRst.getDouble(6));

						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setRelaglpen(reportRst.getInt(2));
							dmapobj.setRelaglwrt(reportRst.getInt(3));
							dmapobj.setRelaglbrt(reportRst.getInt(4));
							dmapobj.setRelperaglWrt(reportRst.getDouble(5));
							dmapobj.setRelaglamt(reportRst.getDouble(6));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// Aumatic Comsupation

	public CscpayVO getAglRelEstServicesDetails(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				// if ("WITH_AGL".equalsIgnoreCase(cscvo.getType())) {
//relnewscs
				if ("RelNewScs".equalsIgnoreCase(cscvo.getServiceType())) {
					if ("RELWRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)=0 OR
						// NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0) ";
						// status = " and (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)=0 OR
						// NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0)";
						status = " and (CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END)=0  ";
					} else if ("RELBRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0 ";
						// status = " AND NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)> 0 ";
						status = " and  (CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)='BRT'  ";
					} else if ("RELTOT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "";
					}
				} else {
					if ("ESTWRT".equalsIgnoreCase(cscvo.getCtype())) {
						// esstatus = " AND (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)=0
						// OR NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0) ";
						esstatus = " and (CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END)=0 ";
					} else if ("ESTBRT".equalsIgnoreCase(cscvo.getCtype())) {
						// esstatus = " AND NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)> 0
						// ";
						esstatus = " and (CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)='BRT' ";
					} else if ("ESTTOT".equalsIgnoreCase(cscvo.getCtype())) {
						esstatus = "";
					}
				}

				// }

				// for agl and with out agl
				if ("WITH_AGL".equalsIgnoreCase(cscvo.getType())) {
					cattype = " ";
				}
				if ("WITHOUT_AGL".equalsIgnoreCase(cscvo.getType())) {

					// cattype = " AND CATEGORY_SUPPLY <> '5A2' ";
					cattype = " AND CATEGORY_SUPPLY not in ('5A2','5A1') ";
					loadcattype = " AND  PRESENT_CATEGORY NOT IN ('5A1','5A2') ";
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");
				
//release of new scs export block				

				if ("RelNewScs".equalsIgnoreCase(cscvo.getServiceType())) {
					if ("DIV".equals(cscvo.getFlag())) {
						

						
						
						//NEW_17062022
						resultSet = statement.executeQuery(
								"SELECT  row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTED_LOAD,R.TURNKEY,R.REG_DATE,R.PHONE_NO,R.ESTSTATUS,R.PAYMENT_DATE,R.RELEASE_DATE,R.REL_NOOFDAYS,R.USCNO,R.REL_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.REL_PENALTY FROM"
										+ " (SELECT NCPARTCD,CONSUMER_NAME,REG_NO,GRPAPPNUM,VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,CONTRACTED_LOAD,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY, REG_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " (CASE WHEN (GRPAPPNUM IS NULL) THEN MAXPRDT ELSE GREATEST(GRP_PRDT,MAXPRDT) END ) PAYMENT_DATE,TO_CHAR(SUPPLY_RELEASE_DATE,'DD-MON-YY:HH:MM:SS') RELEASE_DATE,REL_NOOFDAYS,USCNO,REL_SOPDAYS ,"
										+ " (CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END) DAYS_DELAYED,"
										+ " (CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,REL_PENALTY FROM REP_FINAL "
										+ " WHERE (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) and  SUPPLY_RELEASE_DATE IS NOT NULL AND NVL(REJECTED,'Y') <> 'X'   " + cattype
										+ " AND  SUPPLY_RELEASE_DATE BETWEEN to_date('" + cscvo.getFrom_date()
										+ "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date() + "','DD-MM-YYYY') AND REG_NO IN (SELECT CSREGNO FROM CSCPAY WHERE CSBCRCNO IN ('999999','888888','444444','111112') ) AND NVL(CONSUMER_STATUS_VAL,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO'))R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE NCPARTCD=SECCD   " + status + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'");
						
						System.out.println("DIV_RelNewScs2:" + resultSet);
						
						
							} else if ("SUB_DIV".equals(cscvo.getFlag())) {
						
						
						
						String s = "SELECT  row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTED_LOAD,R.load_type,R.TURNKEY,R.REG_DATE,R.PHONE_NO,R.ESTSTATUS,R.PAYMENT_DATE,R.RESPNOSE_DATE,R.REL_NOOFDAYS,R.USCNO,R.REL_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.REL_PENALTY FROM"
								+ " (SELECT NCPARTCD,CONSUMER_NAME,REG_NO,GRPAPPNUM,VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,CONTRACTED_LOAD,(CASE WHEN(SUBSTR(CATEGORY_SUPPLY,1,1) IN ('1','2','4')) THEN 'KW' ELSE 'HP' END)LOAD_TYPE,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY, REG_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
								+ " to_char(GREATEST(NVL(GRP_PRDT,MAXPRDT)),'DD-MM-YYYY') PAYMENT_DATE,TO_CHAR(SUPPLY_RELEASE_DATE,'dd-mm-yyyy') RESPNOSE_DATE ,REL_NOOFDAYS,USCNO,REL_SOPDAYS ,DEM_NOOFDAYS,DEM_SOPDAYS,"
								+ " (CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END) DAYS_DELAYED,"
								+ " (CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,REL_PENALTY FROM REP_FINAL R"
								+ " WHERE   NVL(TOTAMT,0) > 50 and  SUPPLY_RELEASE_DATE IS NOT NULL   " + cattype
								+ " AND  TRUNC(SUPPLY_RELEASE_DATE) BETWEEN to_date('" + cscvo.getFrom_date()
								+ "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date() + "','DD-MM-YYYY') AND NVL(CONSUMER_STATUS_VAL,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO'))R,"
								+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
								+ " WHERE NCPARTCD=SECCD   " + status + "  " + " AND S.CIRNAME='" + cscvo.getCircle()
								+ "' and divname='" + cscvo.getDivision() + "' and subname='" + cscvo.getSubDiv() + "'";

						System.out.println("SUB_DIV_RelNewScs1:" + s);
						

						
						
						
						//NEW_17062022
						resultSet = statement.executeQuery(
								"SELECT  row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTED_LOAD,R.TURNKEY,R.REG_DATE,R.PHONE_NO,R.ESTSTATUS,R.PAYMENT_DATE,R.RELEASE_DATE,R.REL_NOOFDAYS,R.USCNO,R.REL_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.REL_PENALTY FROM"
										+ " (SELECT NCPARTCD,CONSUMER_NAME,REG_NO,GRPAPPNUM,VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,CONTRACTED_LOAD,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY, REG_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " (CASE WHEN (GRPAPPNUM IS NULL) THEN MAXPRDT ELSE GREATEST(GRP_PRDT,MAXPRDT) END ) PAYMENT_DATE,TO_CHAR(SUPPLY_RELEASE_DATE,'DD-MON-YY:HH:MM:SS') RELEASE_DATE,REL_NOOFDAYS,USCNO,REL_SOPDAYS ,"
										+ " (CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END) DAYS_DELAYED,"
										+ " (CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,REL_PENALTY FROM REP_FINAL "
										+ " WHERE (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) and  SUPPLY_RELEASE_DATE IS NOT NULL AND NVL(REJECTED,'Y') <> 'X'   " + cattype
										+ " AND  SUPPLY_RELEASE_DATE BETWEEN to_date('" + cscvo.getFrom_date()
										+ "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date() + "','DD-MM-YYYY') AND REG_NO IN (SELECT CSREGNO FROM CSCPAY WHERE CSBCRCNO IN ('999999','888888','444444','111112') ) AND NVL(CONSUMER_STATUS_VAL,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO'))R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE NCPARTCD=SECCD   " + status + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
										+ "' and subname='" + cscvo.getSubDiv() + "'");
						
						System.out.println("Sub_RelNewScs2:" + resultSet);

						
					} else if ("SEC".equals(cscvo.getFlag())) {

						
						
						
						
						//NEW_17062022
						resultSet = statement.executeQuery(
								"SELECT  row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTED_LOAD,R.TURNKEY,R.REG_DATE,R.PHONE_NO,R.ESTSTATUS,R.PAYMENT_DATE,R.RELEASE_DATE,R.REL_NOOFDAYS,R.USCNO,R.REL_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.REL_PENALTY FROM"
										+ " (SELECT NCPARTCD,CONSUMER_NAME,REG_NO,GRPAPPNUM,VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,CONTRACTED_LOAD,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY, REG_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " (CASE WHEN (GRPAPPNUM IS NULL) THEN MAXPRDT ELSE GREATEST(GRP_PRDT,MAXPRDT) END ) PAYMENT_DATE,TO_CHAR(SUPPLY_RELEASE_DATE,'DD-MON-YY:HH:MM:SS') RELEASE_DATE,REL_NOOFDAYS,USCNO,REL_SOPDAYS ,"
										+ " (CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END) DAYS_DELAYED,"
										+ " (CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,REL_PENALTY FROM REP_FINAL "
										+ " WHERE (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) and  SUPPLY_RELEASE_DATE IS NOT NULL AND NVL(REJECTED,'Y') <> 'X'   " + cattype
										+ " AND  SUPPLY_RELEASE_DATE BETWEEN to_date('" + cscvo.getFrom_date()
										+ "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date() + "','DD-MM-YYYY') AND REG_NO IN (SELECT CSREGNO FROM CSCPAY WHERE CSBCRCNO IN ('999999','888888','444444','111112') ) AND NVL(CONSUMER_STATUS_VAL,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO'))R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE NCPARTCD=SECCD   " + status + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
										+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec()
										+ "' ");
						
						System.out.println("SEC_RelNewScs2:" + resultSet);
						
						
						
						
						
					} else {

						

						

						/*System.out.println(
								"export:" + "SELECT  row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTED_LOAD,R.load_type,R.TURNKEY,R.REG_DATE,R.PHONE_NO,R.ESTSTATUS,R.PAYMENT_DATE,R.RESPNOSE_DATE,R.REL_NOOFDAYS,R.USCNO,R.REL_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.REL_PENALTY FROM"
										+ " (SELECT NCPARTCD,CONSUMER_NAME,REG_NO,GRPAPPNUM,VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,CONTRACTED_LOAD,(CASE WHEN(SUBSTR(CATEGORY_SUPPLY,1,1) IN ('1','2','4')) THEN 'KW' ELSE 'HP' END)LOAD_TYPE,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY, REG_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " GREATEST(NVL(GRP_PRDT,MAXPRDT)) PAYMENT_DATE,TO_CHAR(SUPPLY_RELEASE_DATE,'DD-MON-YY HH:MM:SS') RESPNOSE_DATE ,REL_NOOFDAYS,USCNO,REL_SOPDAYS ,DEM_NOOFDAYS,DEM_SOPDAYS,"
										+ " (CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END) DAYS_DELAYED,"
										+ " (CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,REL_PENALTY FROM REP_FINAL R"
										+ " WHERE  SUPPLY_RELEASE_DATE IS NOT NULL  " + cattype
										+ "   AND TRUNC(SUPPLY_RELEASE_DATE) BETWEEN to_date('" + cscvo.getFrom_date()
										+ "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date() + "','DD-MM-YYYY'))R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE NCPARTCD=SECCD   " + status + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "'" + " UNION"
										+ " SELECT  row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,'','',R.CATEGORY,R.CONTRACTED_LOAD,'',R.APP_DATE,R.PHONE_NO,R.ESTSTATUS,R.PAYMENT_DATE ,R.RESPNOSE_DATE ,R.REL_NOOFDAYS,R.USCNO,R.REL_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.REL_PENALTY FROM"
										+ " (SELECT CSPARTCD,CUSTOMER_NAME CONSUMER_NAME,REG_NO,'','',SUBSTR(PRESENT_CATEGORY,1,1)||'-'||SUBSTR(PRESENT_CATEGORY,2)CATEGORY,CONTRACTLOAD CONTRACTED_LOAD,APP_DATE,PHONE_NO,"
										+ " (CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,GREATEST(NVL(PAYDT,'')) PAYMENT_DATE,"
										+ " TO_CHAR(RESPONSE_DATE,'DD-MON-YY HH:MM:SS')RESPNOSE_DATE, TO_CHAR(FIRSTDEM_DATE)+1 DATE_OF_SMS,DEM_NOOFDAYS,SERVICE_CONNECTION_NO USCNO,PAYDT,DEM_SOPDAYS,REL_NOOFDAYS,REL_SOPDAYS,"
										+ " (CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END) DAYS_DELAYED,("
										+ " CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,REL_PENALTY  FROM NEWCOMP_TAB R"
										+ " WHERE  RESPONSE_DATE IS NOT NULL " + loadcattype
										+ "  AND    TRUNC(RESPONSE_DATE) BETWEEN to_date('" + cscvo.getFrom_date()
										+ "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
										+ "','DD-MM-YYYY')  AND COMPLAINT=9 AND SUB_COMPLAINT=9)R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE CSPARTCD=SECCD   " + status + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "'");*/
						
						//System.out.println("1306");

						
						
						
						//NEW_17062022
						resultSet = statement.executeQuery(
								"SELECT  row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTED_LOAD,R.TURNKEY,R.REG_DATE,R.PHONE_NO,R.ESTSTATUS,R.PAYMENT_DATE,R.RELEASE_DATE,R.REL_NOOFDAYS,R.USCNO,R.REL_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.REL_PENALTY FROM"
										+ " (SELECT NCPARTCD,CONSUMER_NAME,REG_NO,GRPAPPNUM,VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,CONTRACTED_LOAD,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY, REG_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " (CASE WHEN (GRPAPPNUM IS NULL) THEN MAXPRDT ELSE GREATEST(GRP_PRDT,MAXPRDT) END ) PAYMENT_DATE,TO_CHAR(SUPPLY_RELEASE_DATE,'DD-MON-YY:HH:MM:SS') RELEASE_DATE,REL_NOOFDAYS,USCNO,REL_SOPDAYS ,"
										+ " (CASE WHEN(NVL(REL_NOOFDAYS-REL_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(REL_NOOFDAYS-REL_SOPDAYS,0)) END) DAYS_DELAYED,"
										+ " (CASE WHEN((REL_NOOFDAYS-REL_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,REL_PENALTY FROM REP_FINAL "
										+ " WHERE (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) and  SUPPLY_RELEASE_DATE IS NOT NULL AND NVL(REJECTED,'Y') <> 'X'   " + cattype
										+ " AND  SUPPLY_RELEASE_DATE BETWEEN to_date('" + cscvo.getFrom_date()
										+ "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date() + "','DD-MM-YYYY') AND REG_NO IN (SELECT CSREGNO FROM CSCPAY WHERE CSBCRCNO IN ('999999','888888','444444','111112') ) AND NVL(CONSUMER_STATUS_VAL,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO'))R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE NCPARTCD=SECCD   " + status + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "'");
						
						System.out.println("Release of New Services:" + resultSet);
						
						

					}
				} 
	// end of relnewscs
				

				
				
				
//Estimates Sanctions export block
				else {
		//DIV_Estimates Sanctions
					if ("DIV".equals(cscvo.getFlag())) {

						

						
						
						

						resultSet = statement.executeQuery(
								"SELECT row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTED_LOAD,R.TURNKEY,R.APP_DATE,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.USCNO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM"
										+ " (SELECT NCPARTCD,CONSUMER_NAME,REG_NO,GRPAPPNUM,VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,CONTRACTED_LOAD,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY,APP_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " TO_CHAR(MIN_TRANDT,'DD-MM-YYYY')DEMAND_ISSUED,MIN_TRANDT+1 DATE_OF_SMS,DEM_NOOFDAYS,USCNO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY  FROM REP_FINAL"
										+ " WHERE NVL(TOTAMT,0) > 50 " + cattype
										+ " AND NVL(ESTSTATUS,'03')='02' AND TRUNC(MIN_TRANDT) IS NOT NULL AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(MIN_TRANDT) BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
										+ "','DD-MM-YYYY'))R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE NCPARTCD=SECCD " + esstatus + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'" + " UNION"
										+ " SELECT row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,'','',R.CATEGORY,R.CONTRACTED_LOAD,R.TURNKEY,R.APP_DATE,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.USCNO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM"
										+ " (SELECT CSPARTCD,CUSTOMER_NAME CONSUMER_NAME,REG_NO,'','',SUBSTR(PRESENT_CATEGORY,1,1)||'-'||SUBSTR(PRESENT_CATEGORY,2)CATEGORY,CONTRACTLOAD CONTRACTED_LOAD,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY,APP_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " TO_CHAR(FIRSTDEM_DATE,'DD-MM-YYYY')DEMAND_ISSUED,FIRSTDEM_DATE+1 DATE_OF_SMS,DEM_NOOFDAYS,SERVICE_CONNECTION_NO USCNO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY  FROM NEWCOMP_TAB"
										+ " WHERE NVL(COLL,0) > 50  " + loadcattype
										+ " AND NVL(ESTSTATUS,'03')='02' AND TRUNC(FIRSTDEM_DATE) IS NOT NULL AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(FIRSTDEM_DATE) BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
										+ "','DD-MM-YYYY') AND COMPLAINT=9 AND SUB_COMPLAINT=9)R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE CSPARTCD=SECCD " + esstatus + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'");
						
						System.out.println("DIV_EstimatesSanctions:" + resultSet);

						// reportRst = reportPStmt.executeQuery();
						
						
					} 
//SUB_DIV_Estimates Sanctions
					else if ("SUB_DIV".equals(cscvo.getFlag())) {

						

						
						

						
						resultSet = statement.executeQuery(
								"SELECT row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTED_LOAD,R.TURNKEY,R.APP_DATE,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.USCNO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM"
										+ " (SELECT NCPARTCD,CONSUMER_NAME,REG_NO,GRPAPPNUM,VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,CONTRACTED_LOAD,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY,APP_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " TO_CHAR(MIN_TRANDT,'DD-MM-YYYY')DEMAND_ISSUED,MIN_TRANDT+1 DATE_OF_SMS,DEM_NOOFDAYS,USCNO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY  FROM REP_FINAL"
										+ " WHERE NVL(TOTAMT,0) > 50 " + cattype
										+ " AND NVL(ESTSTATUS,'03')='02' AND TRUNC(MIN_TRANDT) IS NOT NULL AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(MIN_TRANDT) BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
										+ "','DD-MM-YYYY'))R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE NCPARTCD=SECCD " + esstatus + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
										+ "' and subname='" + cscvo.getSubDiv() + "'" + " UNION"
										+ " SELECT row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,'','',R.CATEGORY,R.CONTRACTED_LOAD,R.TURNKEY,R.APP_DATE,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.USCNO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM"
										+ " (SELECT CSPARTCD,CUSTOMER_NAME CONSUMER_NAME,REG_NO,'','',SUBSTR(PRESENT_CATEGORY,1,1)||'-'||SUBSTR(PRESENT_CATEGORY,2)CATEGORY,CONTRACTLOAD CONTRACTED_LOAD,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY,APP_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " TO_CHAR(FIRSTDEM_DATE,'DD-MM-YYYY')DEMAND_ISSUED,FIRSTDEM_DATE+1 DATE_OF_SMS,DEM_NOOFDAYS,SERVICE_CONNECTION_NO USCNO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY  FROM NEWCOMP_TAB"
										+ " WHERE NVL(COLL,0) > 50  " + loadcattype
										+ " AND NVL(ESTSTATUS,'03')='02' AND TRUNC(FIRSTDEM_DATE) IS NOT NULL AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(FIRSTDEM_DATE) BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
										+ "','DD-MM-YYYY') AND COMPLAINT=9 AND SUB_COMPLAINT=9)R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE CSPARTCD=SECCD " + esstatus + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
										+ "' and subname='" + cscvo.getSubDiv() + "'");
						System.out.println("SUB_DIV_EstimatesSanctions:" + resultSet);
					}
					
//SEC_Estimates Sanctions					
					else if ("SEC".equals(cscvo.getFlag())) {

						
						
						

						
						resultSet = statement.executeQuery(
								"SELECT row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTED_LOAD,R.TURNKEY,R.APP_DATE,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.USCNO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM"
										+ " (SELECT NCPARTCD,CONSUMER_NAME,REG_NO,GRPAPPNUM,VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,CONTRACTED_LOAD,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY,APP_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " TO_CHAR(MIN_TRANDT,'DD-MM-YYYY')DEMAND_ISSUED,MIN_TRANDT+1 DATE_OF_SMS,DEM_NOOFDAYS,USCNO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY  FROM REP_FINAL"
										+ " WHERE NVL(TOTAMT,0) > 50 " + cattype
										+ " AND NVL(ESTSTATUS,'03')='02' AND TRUNC(MIN_TRANDT) IS NOT NULL AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(MIN_TRANDT) BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
										+ "','DD-MM-YYYY'))R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE NCPARTCD=SECCD  " + esstatus + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'and subname='"
										+ cscvo.getSubDiv() + "' and secname='" + cscvo.getSec() + "' " + " UNION"
										+ " SELECT row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,'','',R.CATEGORY,R.CONTRACTED_LOAD,R.TURNKEY,R.APP_DATE,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.USCNO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM"
										+ " (SELECT CSPARTCD,CUSTOMER_NAME CONSUMER_NAME,REG_NO,'','',SUBSTR(PRESENT_CATEGORY,1,1)||'-'||SUBSTR(PRESENT_CATEGORY,2)CATEGORY,CONTRACTLOAD CONTRACTED_LOAD,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY,APP_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " TO_CHAR(FIRSTDEM_DATE,'DD-MM-YYYY')DEMAND_ISSUED,FIRSTDEM_DATE+1 DATE_OF_SMS,DEM_NOOFDAYS,SERVICE_CONNECTION_NO USCNO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY  FROM NEWCOMP_TAB"
										+ " WHERE NVL(COLL,0) > 50  " + loadcattype
										+ " AND NVL(ESTSTATUS,'03')='02' AND TRUNC(FIRSTDEM_DATE) IS NOT NULL AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(FIRSTDEM_DATE) BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
										+ "','DD-MM-YYYY') AND COMPLAINT=9 AND SUB_COMPLAINT=9)R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE CSPARTCD=SECCD  " + esstatus + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'and subname='"
										+ cscvo.getSubDiv() + "' and secname='" + cscvo.getSec() + "' ");
						
						System.out.println("SEC_EstimatesSanctions:" + resultSet);
					} else {

						
						
						
						
						
						System.out.println(
								"BRT:" + "SELECT row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTED_LOAD,R.TURNKEY,R.APP_DATE,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.USCNO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM"
										+ " (SELECT NCPARTCD,CONSUMER_NAME,REG_NO,GRPAPPNUM,VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,CONTRACTED_LOAD,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY,APP_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " TO_CHAR(MIN_TRANDT,'DD-MM-YYYY')DEMAND_ISSUED,MIN_TRANDT+1 DATE_OF_SMS,DEM_NOOFDAYS,USCNO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY  FROM REP_FINAL"
										+ " WHERE NVL(TOTAMT,0) > 50 " + cattype
										+ " AND NVL(ESTSTATUS,'03')='02' AND TRUNC(MIN_TRANDT) IS NOT NULL AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(MIN_TRANDT) BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
										+ "','DD-MM-YYYY'))R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE NCPARTCD=SECCD  " + esstatus + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "'" + " UNION"
										+ " SELECT row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,'','',R.CATEGORY,R.CONTRACTED_LOAD,R.TURNKEY,R.APP_DATE,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.USCNO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM"
										+ " (SELECT CSPARTCD,CUSTOMER_NAME CONSUMER_NAME,REG_NO,'','',SUBSTR(PRESENT_CATEGORY,1,1)||'-'||SUBSTR(PRESENT_CATEGORY,2)CATEGORY,CONTRACTLOAD CONTRACTED_LOAD,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY,APP_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " TO_CHAR(FIRSTDEM_DATE,'DD-MM-YYYY')DEMAND_ISSUED,FIRSTDEM_DATE+1 DATE_OF_SMS,DEM_NOOFDAYS,SERVICE_CONNECTION_NO USCNO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY  FROM NEWCOMP_TAB"
										+ " WHERE NVL(COLL,0) > 50  " + loadcattype
										+ " AND NVL(ESTSTATUS,'03')='02' AND TRUNC(FIRSTDEM_DATE) IS NOT NULL AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(FIRSTDEM_DATE) BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
										+ "','DD-MM-YYYY') AND COMPLAINT=9 AND SUB_COMPLAINT=9)R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE CSPARTCD=SECCD  " + esstatus + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "'");
						
//CIR_Estimates Sanctions
						
						resultSet = statement.executeQuery(
								"SELECT row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTED_LOAD,R.TURNKEY,R.APP_DATE,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.USCNO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM"
										+ " (SELECT NCPARTCD,CONSUMER_NAME,REG_NO,GRPAPPNUM,VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,CONTRACTED_LOAD,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY,APP_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " TO_CHAR(MIN_TRANDT,'DD-MM-YYYY')DEMAND_ISSUED,MIN_TRANDT+1 DATE_OF_SMS,DEM_NOOFDAYS,USCNO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY  FROM REP_FINAL"
										+ " WHERE NVL(TOTAMT,0) > 50 " + cattype
										+ " AND NVL(ESTSTATUS,'03')='02' AND TRUNC(MIN_TRANDT) IS NOT NULL AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(MIN_TRANDT) BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
										+ "','DD-MM-YYYY'))R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE NCPARTCD=SECCD  " + esstatus + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "'" + " UNION"
										+ " SELECT row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,'','',R.CATEGORY,R.CONTRACTED_LOAD,R.TURNKEY,R.APP_DATE,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.USCNO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM"
										+ " (SELECT CSPARTCD,CUSTOMER_NAME CONSUMER_NAME,REG_NO,'','',SUBSTR(PRESENT_CATEGORY,1,1)||'-'||SUBSTR(PRESENT_CATEGORY,2)CATEGORY,CONTRACTLOAD CONTRACTED_LOAD,(CASE WHEN(EXECUTION_TYPE='Turnkey') THEN 'YES' ELSE 'NO' END)TURNKEY,APP_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS,"
										+ " TO_CHAR(FIRSTDEM_DATE,'DD-MM-YYYY')DEMAND_ISSUED,FIRSTDEM_DATE+1 DATE_OF_SMS,DEM_NOOFDAYS,SERVICE_CONNECTION_NO USCNO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY  FROM NEWCOMP_TAB"
										+ " WHERE NVL(COLL,0) > 50  " + loadcattype
										+ " AND NVL(ESTSTATUS,'03')='02' AND TRUNC(FIRSTDEM_DATE) IS NOT NULL AND NVL(REJECTED,'Y') <> 'X' AND TRUNC(FIRSTDEM_DATE) BETWEEN to_date('"
										+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
										+ "','DD-MM-YYYY') AND COMPLAINT=9 AND SUB_COMPLAINT=9)R,"
										+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
										+ " WHERE CSPARTCD=SECCD  " + esstatus + "  " + " AND S.CIRNAME='"
										+ cscvo.getCircle() + "'");
						System.out.println("CIRCLE_EstimatesSanctions gouse:" + resultSet);

					}
				}
//end of estimates Sanctions
				
				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(2));
						vo.setDivision(resultSet.getString(3));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(4));
						vo.setSec(resultSet.getString(5));
						vo.setCunsu_name(resultSet.getString(6));
						vo.setReg_no(resultSet.getString(7));
						vo.setS_group(resultSet.getString(8));
						vo.setLoad(resultSet.getString(9));
						vo.setCat(resultSet.getString(10));
						vo.setContractLoad(resultSet.getString(11));
						//vo.setLoad_Type(resultSet.getString(12));
						vo.setTurnKey(resultSet.getString(12));
						vo.setRegDate(resultSet.getString(13));
						vo.setPhono(resultSet.getString(14));
						vo.setEstatus(resultSet.getString(15));
						vo.setPaid_date(resultSet.getString(16));
						vo.setRel_date(resultSet.getString(17));

						vo.setRelNoOfDays(resultSet.getInt(18));
						vo.setUscno(resultSet.getString(19));

						vo.setRelSopDays(resultSet.getInt(20));
						vo.setRelDelayDays(resultSet.getInt(21));
						vo.setExe_type(resultSet.getString(22));
						vo.setRelPenality(resultSet.getInt(23));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}
	//end of AutomaticCompensationServlet

	public List<Map<String, String>> getabstractfocdetails(String type, String fromdate, String todate, String cirname,
			String divname, String subname, String secname) throws Exception {
		List<Map<String, String>> data = new LinkedList<Map<String, String>>();

		Connection con = DBConnectionManager.getInstance().getConnection("ccc");
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			String query = " SELECT COMPLAINT_ID,COMPLAINANT_NAME,PHONE,SCNO,COMPLAINT_TYPE_DESC, "
					+ " COMPLAINT_SUB_TYPE_DESC,CIRNAME,DIVNAME,SUBNAME,SECNAME,ZONE,CREATED_DT,c.ETR as ETR,"
					+ "timestampadd(SECOND,3,CREATED_DT)SMS_DT,TO_BE_RECTIFIED_TIME as TO_BERECTIFIED,"
					+ "timestampDIFF(HOUR,CREATED_DT,timestampadd(HOUR,c.ETR,CREATED_DT)) HOURSE_TOBETAKEN,timestampDIFF(HOUR,CREATED_DT,completed_dt) HOURS_TAKEN, "
					+ " COMPLETED_DT,(case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )RESOLUTION,case when (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='BRT' then (CASE WHEN COMPLAINT_SUB_TYPE IN (4,5) THEN 100 ELSE 50 END) else 0 end PENALTY,"
					+ "(case when trim(ifnull(CALL_STATUS,''))!='Answered' then '' else ifnull(FEEDBACK_STATUS,'')end)FEEDBACK_STATUS  "
					+ " FROM CM_COMPLAINT C "
					+ " left join CM_COMPLAINT_TYPE on COMPLAINT_SUB_TYPE=COMPLAINT_SUB_TYPE_CD "
					+ " left join SPDCLMASTER S on C.SECCD=S.SECCD  "
					+ " left join COMPLAINTS on DOCKET_NO=COMPLAINT_ID "
					+ " WHERE  ifnull(c.COMPLAINT_TYPE,'')='SUP' and substr(c.seccd,1,1) not in (1,4,6,9) and  DATE(CREATED_DT) BETWEEN STR_TO_DATE('"
					+ fromdate + "','%d-%m-%Y') and STR_TO_DATE('" + todate + "','%d-%m-%Y')  ";
			if (type != null && type.equals("BRT")) {
				query = query + " AND (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='BRT' ";
			} else if (type != null && type.equals("WRT")) {
				query = query + " AND (case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )='WRT' ";
			}

			if (cirname != null && !cirname.trim().equals("") && !cirname.trim().equals("null")) {
				query = query + " AND CIRNAME='" + cirname + "' ";
			}
			if (divname != null && !divname.trim().equals("") && !divname.trim().equals("null")) {
				query = query + " AND DIVNAME='" + divname + "' ";
			}
			if (subname != null && !subname.trim().equals("") && !subname.trim().equals("null")) {
				query = query + " AND SUBNAME='" + subname + "' ";
			}
			if (secname != null && !secname.trim().equals("") && !secname.trim().equals("null")) {
				query = query + " AND SECNAME='" + secname + "' ";
			}

			System.out.println(query);
			statement = con.prepareStatement(query);

			rs = statement.executeQuery();
			while (rs.next()) {
				Map<String, String> vo = new HashMap<String, String>();
				vo.put("SMS_DT", rs.getString("SMS_DT"));
				vo.put("HOURSE_TOBETAKEN", rs.getString("HOURSE_TOBETAKEN"));
				vo.put("TO_BERECTIFIED", rs.getString("TO_BERECTIFIED"));
				vo.put("HOURS_TAKEN", rs.getString("HOURS_TAKEN"));
				vo.put("COMPLAINT_ID", rs.getString("COMPLAINT_ID"));
				vo.put("COMPLAINANT_NAME", rs.getString("COMPLAINANT_NAME"));
				vo.put("PHONE", rs.getString("PHONE"));
				vo.put("SCNO", rs.getString("SCNO"));
				vo.put("COMPLAINT_TYPE_DESC", rs.getString("COMPLAINT_TYPE_DESC"));
				vo.put("COMPLAINT_SUB_TYPE_DESC", rs.getString("COMPLAINT_SUB_TYPE_DESC"));
				vo.put("CIRNAME", rs.getString("CIRNAME"));
				vo.put("DIVNAME", rs.getString("DIVNAME"));
				vo.put("SUBNAME", rs.getString("SUBNAME"));
				vo.put("SECNAME", rs.getString("SECNAME"));
				vo.put("ZONE", rs.getString("ZONE"));
				vo.put("CREATED_DT", rs.getString("CREATED_DT"));
				vo.put("ETR", rs.getString("ETR"));
				vo.put("COMPLETED_DT", rs.getString("COMPLETED_DT"));
				vo.put("RESOLUTION", rs.getString("RESOLUTION"));
				vo.put("PENALTY", rs.getString("PENALTY"));
				vo.put("FEEDBACK_STATUS", rs.getString("FEEDBACK_STATUS"));
				data.add(vo);
			}
		} finally {
			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (rs != null) {
				rs.close();
			}
		}
		return data;
	}

	public Map<String, String> getfocdetails(String complaintid) throws Exception {
		Map<String, String> data = new HashMap<String, String>();
		Connection con = DBConnectionManager.getInstance().getConnection("ccc");
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			String query = " SELECT COMPLAINT_ID,COMPLAINANT_NAME,PHONE,SCNO,COMPLAINT_TYPE_DESC, "
					+ " COMPLAINT_SUB_TYPE_DESC,CIRNAME,DIVNAME,SUBNAME,SECNAME,ZONE,CREATED_DT,c.ETR as ETR,"
					+ "timestampadd(SECOND,3,CREATED_DT)SMS_DT,TO_BE_RECTIFIED_TIME as TO_BERECTIFIED,"
					+ "timestampDIFF(HOUR,CREATED_DT,timestampadd(HOUR,(case when zone='Rural' then 12 else 6 end),CREATED_DT)) HOURSE_TOBETAKEN,timestampDIFF(HOUR,CREATED_DT,completed_dt) HOURS_TAKEN, "
					+ " COMPLETED_DT,(case when TO_BE_RECTIFIED_TIME< (case when (status in ('CLOSED','COMPLATED') OR COMPLAINT_STATUS IN ('CLS','COM')) THEN COMPLETED_DT ELSE sysdate() END) then 'BRT' else 'WRT' end )RESOLUTION,SUM(CASE WHEN COMPLAINT_SUB_TYPE IN (4,5) THEN 100 ELSE 50 END) PENALTY,(case when trim(ifnull(CALL_STATUS,''))!='Answered' then '' else ifnull(FEEDBACK_STATUS,'')end)FEEDBACK_STATUS  "
					+ " FROM CM_COMPLAINT C "
					+ " left join CM_COMPLAINT_TYPE on COMPLAINT_SUB_TYPE=COMPLAINT_SUB_TYPE_CD "
					+ " left join SPDCLMASTER S on C.SECCD=S.SECCD  "
					+ " left join COMPLAINTS on DOCKET_NO=COMPLAINT_ID " + " WHERE RESOLUTION='BRT' AND COMPLAINT_ID=?";
			statement = con.prepareStatement(query);
			statement.setString(1, complaintid);
			rs = statement.executeQuery();
			if (rs.next()) {
				data.put("SMS_DT", rs.getString("SMS_DT"));
				data.put("HOURSE_TOBETAKEN", rs.getString("HOURSE_TOBETAKEN"));
				data.put("TO_BERECTIFIED", rs.getString("TO_BERECTIFIED"));
				data.put("HOURS_TAKEN", rs.getString("HOURS_TAKEN"));
				data.put("COMPLAINT_ID", rs.getString("COMPLAINT_ID"));
				data.put("COMPLAINANT_NAME", rs.getString("COMPLAINANT_NAME"));
				data.put("PHONE", rs.getString("PHONE"));
				data.put("SCNO", rs.getString("SCNO"));
				data.put("COMPLAINT_TYPE_DESC", rs.getString("COMPLAINT_TYPE_DESC"));
				data.put("COMPLAINT_SUB_TYPE_DESC", rs.getString("COMPLAINT_SUB_TYPE_DESC"));
				data.put("CIRNAME", rs.getString("CIRNAME"));
				data.put("DIVNAME", rs.getString("DIVNAME"));
				data.put("SUBNAME", rs.getString("SUBNAME"));
				data.put("SECNAME", rs.getString("SECNAME"));
				data.put("ZONE", rs.getString("ZONE"));
				data.put("CREATED_DT", rs.getString("CREATED_DT"));
				data.put("ETR", rs.getString("ETR"));
				data.put("COMPLETED_DT", rs.getString("COMPLETED_DT"));
				data.put("RESOLUTION", rs.getString("RESOLUTION"));
				data.put("PENALTY", rs.getString("PENALTY"));
				data.put("FEEDBACK_STATUS", rs.getString("FEEDBACK_STATUS"));
			}
		} finally {
			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (rs != null) {
				rs.close();
			}
		}
		return data;
	}

	// Remrks Add Allcounter report

	@SuppressWarnings("unused")
	public void exportAllcounterLt3HtScsDetailsTWO(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
			throws Exception {
		

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String consumer_val= "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

	if ("HT".equalsIgnoreCase(cscvo.getType())) {
					
					if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release') and upper(REG_NO) like '%H%' ";
					}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
						status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release') and upper(REG_NO) like '%H%' ";
					}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' and upper(REG_NO) like '%H%' ";
					
				}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer' and upper(REG_NO) like '%H%' ";
				
				}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'  and upper(REG_NO) like '%H%' ";
				
					
				}
				else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
							"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) like '%H%'";
				}
				
				else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) like '%H%'";
				}
				else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRT'  and upper(REG_NO) like '%H%'";
				}
					
				else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRT' and upper(REG_NO) like '%H%'";
				}
				else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRTTKEY%' and upper(REG_NO) like '%H%'";
				}
				else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRTTKEY%' and upper(REG_NO) like '%H%'";
				}
				else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) like '%H%'";
				}
				else  {
					status = "";
				}
					
				}else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					
					 if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
						status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					
				}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				
				}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				
					
				}
				else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
							"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				
				else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRT'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
					
				else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRT' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRTTKEY%' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRTTKEY%' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else  {
					status = " ";
				}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {


					if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) not   like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release') and upper(REG_NO) not   like '%H%' ";
					}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
						status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release') and upper(REG_NO) not   like '%H%' ";
					}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' and upper(REG_NO) not   like '%H%' ";
					
				}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer' and upper(REG_NO) not   like '%H%' ";
				
				}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'  and upper(REG_NO) not   like '%H%' ";
				
					
				}
				else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
							"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not   like '%H%'";
				}
				
				else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not   like '%H%'";
				}
				else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRT'  and upper(REG_NO) not   like '%H%'";
				}
					
				else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRT' and upper(REG_NO) not   like '%H%'";
				}
				else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRTTKEY%' and upper(REG_NO) not   like '%H%'";
				}
				else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRTTKEY%' and upper(REG_NO) not   like '%H%'";
				}
				else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) not   like '%H%'";
				}
				else  {
					status = "";
				}
				
					
				}else{
					

					if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'   ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release')  ";
					}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
						status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release')  ";
					}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction'  ";
					
				}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer'  ";
				
				}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'   ";
				
					
				}
				else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
							"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') ";
				}
				
				else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') ";
				}
				else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRT'  ";
				}
					
				else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRT' ";
				}
				else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRTTKEY%' ";
				}
				else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRTTKEY%' ";
				}
				else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') ";
				}
				else  {
					status = "";
				}
				}
	
	if ("ALL".equalsIgnoreCase(cscvo.getType())){
		
		consumer_val="and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')";
		
	}else
	
	if ("HT".equalsIgnoreCase(cscvo.getType())){
		
		consumer_val="and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')";
		
	}else if ("LT".equalsIgnoreCase(cscvo.getType()) && "5A".equalsIgnoreCase(cscvo.getCategory())){
		
		consumer_val=" and nvl(consumer_status_val,'NA')='YSR JALAKALA'";
		
	
    }
	
	
	else if ("LT".equalsIgnoreCase(cscvo.getType()) && "5B".equalsIgnoreCase(cscvo.getCategory())){
	
	consumer_val=" ";
	
    }else if ("LT".equalsIgnoreCase(cscvo.getType())){
		consumer_val="and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')";
		
	}
    else{
		consumer_val="";
	}
	
	
	
    System.out.println("type:"+cscvo.getType());
	System.out.println("ctype:"+cscvo.getCtype());
	System.out.println("status:"+status);
	System.out.println("consumer_val:"+consumer_val);
		

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");
				
                       if ("DIV".equals(cscvo.getFlag())) {

                    	   if (!"ZTOTAL".equalsIgnoreCase(cscvo.getDivision())){

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
							"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
							"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
							"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
							"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
							"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
							" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
							"");
					
                    	   }else{
                    		   
                    		   resultSet = statement.executeQuery(
           							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
           							"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
           							"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
           							"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
           							"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
           							"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
           							" "+status+"  and cirname='"+ cscvo.getCircle() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
           							""); 
                    	   }
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					 if (!"ZTOTAL".equalsIgnoreCase(cscvo.getSubDiv())){

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
							"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
							"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
							"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
							"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
							"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
							" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"+ cscvo.getSubDiv() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
							"");
					 }else{
						 
						 resultSet = statement.executeQuery(
									" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
									"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
									"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
									"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
									"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
									"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
									" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
									"");
					 }
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getSec())){
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
							"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
							"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
							"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
							"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
							"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
							" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"+ cscvo.getSubDiv() + "' and secname='" + cscvo.getSec() + "' "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
							"");
					}else{
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
								"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
								"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
								"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
								"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
								"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
								" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"+ cscvo.getSubDiv() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
								"");
						
					}

				} else {

					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getCircle())){

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
							"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
							"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
							"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
							"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
							"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
							" "+status+"  and cirname='"+ cscvo.getCircle() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
							"");

					}else{
						
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
								"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
								"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
								"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
								"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
								"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
								" "+status+"  and cirname IN ('KADAPA','NELLORE','TIRUPATI','ANANTHAPUR','KURNOOL')   "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
								"");
						
					}
					/*System.out.println("exportall2"+query);*/
				}

				

								//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	
		
	}
		public void exportAllcounterLt3HtScsDetails(CSCpayDAO catdao, HttpServletResponse response, CscpayVO cscvo)
				throws Exception {
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) like '%H%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO) like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'  and upper(REG_NO) like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'  and upper(REG_NO) like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  and upper(REPSTAT) like '%TKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%' ";
						 */
						status = "  and upper(REPSTAT) like '%WRTTKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  AND upper(REPSTAT) like   '%WRT%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%' ";
						 */
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						/*
						 * status =
						 * "  AND upper(REPSTAT) like  '%BRT%'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
						 * + cscvo.getCategory() + "%'   ";
						 */
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%'   ";
					} else {
						status = "";
					}
				} else {
					/*
					 * if ("TURNKEY".equalsIgnoreCase(cscvo.getCtype())) {
					 * status = "  and upper(REPSTAT) like '%TKEY%' "; }
					 */
					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'   ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' ";
						status = "  AND upper(REPSTAT) like   '%WRT' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%'";
						status = "  AND upper(REPSTAT) like  '%BRT'";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  )  ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,S.cirname Circle,S.divname Division,S.subname SubDivision,S.secname  Section,"
									+ " R.HTLT,R.reg_no, R.reg_date,R.consumer_name ,R.ADDRESS,R.PHONE_NO, "
									+ " R.Social_group,R.category_supply , R.LOAD,R.purpose,"
									+ " R.Demand,R.Paid ,R.GRP_DEMAND,R.GRP_COLL , R.paid_date,"
									+ " R.RELEASE_DATE ,R.uscno,R.meseva_ref,R.PENDING_STAT,R.SLADESC,R.EXECUTION_TYPE,R.eststatus,P.REASONS||'-'||REMARKS FROM"
									+ " (select row_number() over (partition by null order by null) sno,"
									+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, "
									+ " decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply , contracted_load Load,purpose,"
									+ " nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,"
									+ " nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,nvl(uscno,'-') USCNO,meseva_ref  ,PENDING_STAT,SLADESC,EXECUTION_TYPE,"
									+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus,NCPARTCD FROM REP_FINAL WHERE CIRCLE_CODE NOT IN ('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') "
									// + " AND upper(REPSTAT) like '%WRT' and
									// upper(REG_NO) not like '%H%' AND
									// CATEGORY_SUPPLY like '3%' )R,"
									+ " " + status + "  )R,"
									+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
									+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD and cirname='"
									+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,S.cirname Circle,S.divname Division,S.subname SubDivision,S.secname  Section,"
									+ " R.HTLT,R.reg_no, R.reg_date,R.consumer_name ,R.ADDRESS,R.PHONE_NO, "
									+ " R.Social_group,R.category_supply , R.LOAD,R.purpose,"
									+ " R.Demand,R.Paid ,R.GRP_DEMAND,R.GRP_COLL , R.paid_date,"
									+ " R.RELEASE_DATE ,R.uscno,R.meseva_ref,R.PENDING_STAT,R.SLADESC,R.EXECUTION_TYPE,R.eststatus,P.REASONS||'-'||REMARKS FROM"
									+ " (select row_number() over (partition by null order by null) sno,"
									+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, "
									+ " decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply , contracted_load Load,purpose,"
									+ " nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,"
									+ " nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,nvl(uscno,'-') USCNO,meseva_ref  ,PENDING_STAT,SLADESC,EXECUTION_TYPE,"
									+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus,NCPARTCD FROM REP_FINAL WHERE CIRCLE_CODE NOT IN ('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') "
									// + " AND upper(REPSTAT) like '%WRT' and
									// upper(REG_NO) not like '%H%' AND
									// CATEGORY_SUPPLY like '3%' )R,"
									+ " " + status + "  )R,"
									+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
									+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD and cirname='"
									+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"
									+ cscvo.getSubDiv() + "'");

					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,S.cirname Circle,S.divname Division,S.subname SubDivision,S.secname  Section,"
									+ " R.HTLT,R.reg_no, R.reg_date,R.consumer_name ,R.ADDRESS,R.PHONE_NO, "
									+ " R.Social_group,R.category_supply , R.LOAD,R.purpose,"
									+ " R.Demand,R.Paid ,R.GRP_DEMAND,R.GRP_COLL , R.paid_date,"
									+ " R.RELEASE_DATE ,R.uscno,R.meseva_ref,R.PENDING_STAT,R.SLADESC,R.EXECUTION_TYPE,R.eststatus,P.REASONS||'-'||REMARKS FROM"
									+ " (select row_number() over (partition by null order by null) sno,"
									+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, "
									+ " decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply , contracted_load Load,purpose,"
									+ " nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,"
									+ " nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,nvl(uscno,'-') USCNO,meseva_ref  ,PENDING_STAT,SLADESC,EXECUTION_TYPE,"
									+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus,NCPARTCD FROM REP_FINAL WHERE CIRCLE_CODE NOT IN ('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') "
									// + " AND upper(REPSTAT) like '%WRT' and
									// upper(REG_NO) not like '%H%' AND
									// CATEGORY_SUPPLY like '3%' )R,"
									+ " " + status + "  )R,"
									+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
									+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD and cirname='"
									+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"
									+ cscvo.getSubDiv() + "' and secname='" + cscvo.getSec() + "'");
				} else {

					String query = " select row_number() over (partition by null order by null) sno,S.cirname Circle,S.divname Division,S.subname SubDivision,S.secname  Section,"
							+ " R.HTLT,R.reg_no, R.reg_date,R.consumer_name ,R.ADDRESS,R.PHONE_NO, "
							+ " R.Social_group,R.category_supply , R.LOAD,R.purpose,"
							+ " R.Demand,R.Paid ,R.GRP_DEMAND,R.GRP_COLL , R.paid_date,"
							+ " R.RELEASE_DATE ,R.uscno,R.meseva_ref,R.PENDING_STAT,R.SLADESC,R.EXECUTION_TYPE,R.eststatus,P.REASONS||'-'||REMARKS FROM"
							+ " (select row_number() over (partition by null order by null) sno,"
							+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, "
							+ " decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply , contracted_load Load,purpose,"
							+ " nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,"
							+ " nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,nvl(uscno,'-') USCNO,meseva_ref  ,PENDING_STAT,SLADESC,EXECUTION_TYPE,"
							+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus,NCPARTCD FROM REP_FINAL WHERE CIRCLE_CODE NOT IN ('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') "
							// + " AND upper(REPSTAT) like '%WRT' and
							// upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY
							// like '3%' )R,"
							+ " " + status + "  )R," + " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
							+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
							+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD and cirname='"
							+ cscvo.getCircle() + "'";
					//System.out.println("testing_1:"+query);
					

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,S.cirname Circle,S.divname Division,S.subname SubDivision,S.secname  Section,"
									+ " R.HTLT,R.reg_no, R.reg_date,R.consumer_name ,R.ADDRESS,R.PHONE_NO, "
									+ " R.Social_group,R.category_supply , R.LOAD,R.purpose,"
									+ " R.Demand,R.Paid ,R.GRP_DEMAND,R.GRP_COLL , R.paid_date,"
									+ " R.RELEASE_DATE ,R.uscno,R.meseva_ref,R.PENDING_STAT,R.SLADESC,R.EXECUTION_TYPE,R.eststatus,P.REASONS||'-'||REMARKS FROM"
									+ " (select row_number() over (partition by null order by null) sno,"
									+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, "
									+ " decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply , contracted_load Load,purpose,"
									+ " nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,"
									+ " nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,nvl(uscno,'-') USCNO,meseva_ref  ,PENDING_STAT,SLADESC,EXECUTION_TYPE,"
									+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus,NCPARTCD FROM REP_FINAL WHERE CIRCLE_CODE NOT IN ('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') "
									// + " AND upper(REPSTAT) like '%WRT' and
									// upper(REG_NO) not like '%H%' AND
									// CATEGORY_SUPPLY like '3%' )R,"
									+ " " + status + "  )R,"
									+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
									+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD and cirname='"
									+ cscvo.getCircle() + "'");

				}
				//// System.out.println.println(resultSet);
				//// System.out.println.println(monthYear);

				response.setContentType("application/download");
				/*
				 * response.setHeader("Content-Disposition",
				 * "attachment; filename=CounterName:" + cscvo.getCounterName()
				 * + "_ComplaintType:" + cscvo.getComplaintType() + ".xlsx");
				 */
				response.setHeader("Content-Disposition", "attachment; filename=New Services Registered_in AllCounters "
						+ cscvo.getCtype() + " Type:" + cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				SXSSFRow row = (SXSSFRow) spreadsheet.createRow(0);
				SXSSFCell cell;
				int cc = resultSet.getMetaData().getColumnCount();
				for (int i = 1; i <= cc; i++) {
					String headerVal = resultSet.getMetaData().getColumnName(i);
					headerValues.add(headerVal);
					cell = (SXSSFCell) row.createCell(i - 1);
					cell.setCellValue(resultSet.getMetaData().getColumnName(i));
				}
				// //System.out.println.println(headerValues);

				int i = 1, count = 0;
				while (resultSet.next()) {

					SXSSFRow row1 = (SXSSFRow) spreadsheet.createRow((int) i);
					for (int p = 0; p < headerValues.size(); p++) {
						if (resultSet.getString(headerValues.get(p)) != null) {
							row1.createCell((int) p).setCellValue(resultSet.getString(headerValues.get(p)));
						}

					}
					i++;
					count++;
					if (count == 100) {
						spreadsheet.flushRows();
						count = 0;
					}
					// //System.out.println.println(i);
				}

				// response.setHeader("Content-Length", "" +
				// Integer.toString(binaryData.length));
				response.setContentType("application/ms-excel");
				// response.setHeader("Content-Disposition", "attachment;
				// filename=Type:" + cscvo.getType()+" Category:"
				// +cscvo.getCategory()+".xlsx");
				response.setHeader("Content-Disposition",
						"attachment; filename=New Services Registered_in AllCounters " + cscvo.getCtype() + "  Type:"
								+ cscvo.getType() + " Category:" + cscvo.getCategory() + ".xlsx");

				// XLS file is downloaded but it is in binary. Not human
				// readable
				OutputStream outputStream = response.getOutputStream();
				workbook.write(outputStream);
				outputStream.flush();
				workbook.dispose();
				// logger.info("END : DcbReportsDAO - generateExcel() ");
			} else {
				// logger.error(
				// "Exception: DcbReportsDAO - Database Server Problem.Sorry for
				// Inconvenience.Please try after some time.");
				// throw new Exception();
				// throw new DatabaseFailureException(
				// "Database Server Problem.Sorry for Inconvenience.Please try
				// after some time.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}

	}

	// Remale Show
	// Get Ht Additional Load Report Deatisal amount Paid
	public CscpayVO getAllCountersLt3HtReportScsDetailsTWO(CscpayVO cscvo) throws Exception {
		


		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";
		String consumer_val= "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {
					
					if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release') and upper(REG_NO) like '%H%' ";
					}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
						status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release') and upper(REG_NO) like '%H%' ";
					}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' and upper(REG_NO) like '%H%' ";
					
				}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer' and upper(REG_NO) like '%H%' ";
				
				}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'  and upper(REG_NO) like '%H%' ";
				
					
				}
				else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
							"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) like '%H%'";
				}
				
				else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) like '%H%'";
				}
				else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRT'  and upper(REG_NO) like '%H%'";
				}
					
				else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRT' and upper(REG_NO) like '%H%'";
				}
				else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRTTKEY%' and upper(REG_NO) like '%H%'";
				}
				else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRTTKEY%' and upper(REG_NO) like '%H%'";
				}
				else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) like '%H%'";
				}
				else  {
					status = "";
				}
					
				}else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {
					
					 if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
						status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
					
				}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				
				}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				
					
				}
				else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
							"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				
				else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRT'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
					
				else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRT' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRTTKEY%' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRTTKEY%' and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '" + cscvo.getCategory() + "%' " ;
				}
				else  {
					status = " ";
				}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {


					if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) not   like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release') and upper(REG_NO) not   like '%H%' ";
					}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
						status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release') and upper(REG_NO) not   like '%H%' ";
					}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction' and upper(REG_NO) not   like '%H%' ";
					
				}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer' and upper(REG_NO) not   like '%H%' ";
				
				}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'  and upper(REG_NO) not   like '%H%' ";
				
					
				}
				else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
							"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not   like '%H%'";
				}
				
				else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') and upper(REG_NO) not   like '%H%'";
				}
				else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRT'  and upper(REG_NO) not   like '%H%'";
				}
					
				else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRT' and upper(REG_NO) not   like '%H%'";
				}
				else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRTTKEY%' and upper(REG_NO) not   like '%H%'";
				}
				else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRTTKEY%' and upper(REG_NO) not   like '%H%'";
				}
				else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') and upper(REG_NO) not   like '%H%'";
				}
				else  {
					status = "";
				}
				
					
				}else{
					

					if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'   ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and (upper(REPSTAT) like '%REG%' AND repstat NOT IN ('REG') OR upper(repstat) not like '%OB%' AND  REPSTAT not like '%REG%'  AND  sladesc ='Pending for service release')  ";
					}else if("TOT_REG".equalsIgnoreCase(cscvo.getCtype())){
						status="and (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%'  OR  upper(repstat) not like '%OB%' AND REPSTAT not like '%REG%' AND  sladesc ='Pending for service release')  ";
					}else if ("Est_tobe_san".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%' ) AND SLADESC='Pending for estimate sanction'  ";
					
				}else if ("Payment_Pending".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND SLADESC='Pending for payment by consumer'  ";
				
				}else if ("REJECTED".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (REPSTAT LIKE '%OB%' OR REPSTAT LIKE '%REG%') AND  SLADESC='Rejected'   ";
				
					
				}
				else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
					status = " and  (upper(REPSTAT) like '%REL%'  or upper(REPSTAT)  like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%TKEY%'  AND SLADESC IN ('Service released','Pending for service release') OR\r\n" + 
							"upper(REPSTAT) ='OB' AND SLADESC = 'Service released') ";
				}
				
				else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper (REPSTAT) like '%REL%' OR upper(REPSTAT) ='OB' AND SLADESC = 'Service released') ";
				}
				else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRT'  ";
				}
					
				else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRT' ";
				}
				else if ("TWRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%WRTTKEY%' ";
				}
				else if ("TBRT".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and upper (REPSTAT) like '%BRTTKEY%' ";
				}
				else if ("BALANCE".equalsIgnoreCase(cscvo.getCtype())) {
					status = "and (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%') ";
				}
				else  {
					status = "";
				}
				}
				
				
                  if ("ALL".equalsIgnoreCase(cscvo.getType())){
					
					consumer_val="and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')";
					
				}else
				
				if ("HT".equalsIgnoreCase(cscvo.getType())){
					
					consumer_val="and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')";
					
				}else if ("LT".equalsIgnoreCase(cscvo.getType()) && "5A".equalsIgnoreCase(cscvo.getCategory())){
					
					consumer_val=" and nvl(consumer_status_val,'NA')='YSR JALAKALA'";
					
				
			    }
				
				
				else if ("LT".equalsIgnoreCase(cscvo.getType()) && "5B".equalsIgnoreCase(cscvo.getCategory())){
				
				consumer_val=" ";
				
			    }else if ("LT".equalsIgnoreCase(cscvo.getType())){
					consumer_val="and nvl(consumer_status_val,'NA') NOT  IN ('APSFL01','APSFL02','APTIDCO','JCOLONY')";
					
				}
			    else{
					consumer_val="";
				}
				
				
				
			    System.out.println("type:"+cscvo.getType());
				System.out.println("ctype:"+cscvo.getCtype());
				System.out.println("status:"+status);
				System.out.println("consumer_val:"+consumer_val);
				
				
				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

                if ("DIV".equals(cscvo.getFlag())) {

                	if (!"ZTOTAL".equalsIgnoreCase(cscvo.getDivision())){

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
							"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
							"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
							"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
							"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
							"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
							" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
							"");
					// reportPStmt = con.prepareStatement(query);
                	}else{
                		
                		resultSet = statement.executeQuery(
    							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
    							"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
    							"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
    							"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
    							"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
    							"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
    							" "+status+"  and cirname='"+ cscvo.getCircle() + "'   "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
    							"");
                	}

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getSubDiv())){

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
							"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
							"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
							"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
							"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
							"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
							" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"+ cscvo.getSubDiv() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
							"");
					}else{
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
								"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
								"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
								"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
								"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
								"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
								" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
								"");
						
					}
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					if (!"ZTOTAL".equalsIgnoreCase(cscvo.getSec())){
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
							"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
							"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
							"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
							"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
							"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
							" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"+ cscvo.getSubDiv() + "' and secname='" + cscvo.getSec() + "' "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
							"");
					}else{
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
								"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
								"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
								"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
								"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
								"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
								" "+status+"  and cirname='"+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"+ cscvo.getSubDiv() + "' "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
								"");
						
					}

				} else {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle()))
					{

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
							"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
							"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
							"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
							"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
							"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
							" "+status+"  and cirname='"+ cscvo.getCircle() + "'  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
							"");
					
					

					}else{
						
						resultSet = statement.executeQuery(
								" select row_number() over (partition by null order by null) sno,cirname Circle,divname Division,subname SubDivision,secname Section,\r\n" + 
								"(case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, \r\n" + 
								"decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply CAT, contracted_load Load,purpose,\r\n" + 
								"nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,\r\n" + 
								"nvl(to_char(SUPPLY_RELEASE_DATE,'DD-MM-YYYY'),'-')  RELEASE_DATE ,a.uscno,meseva_ref reference_no ,PENDING_STAT,SLADESC,EXECUTION_TYPE,\r\n" + 
								"(case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus   from rep_final a, spdclmaster  b  where a.ncpartcd=b.seccd \r\n" + 
								" "+status+"  and cirname IN ('KADAPA','NELLORE','TIRUPATI','ANANTHAPUR','KURNOOL')  "+consumer_val+" AND seccd in (select seccd from  spdclmaster  where circd not in(1,4,6,9)) order by cirname,divname,subname,secname\r\n" + 
								"");
						
					}
					

					/*System.out.println("exportall2"+query);*/
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(2));
						vo.setDivision(resultSet.getString(3));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(4));
						vo.setSec(resultSet.getString(5));
						vo.setType(resultSet.getString(6));
						
						
						vo.setReg_no(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setCunsu_name(resultSet.getString(9));
						vo.setPhono(resultSet.getString(10));
						
						vo.setS_group(resultSet.getString(11));
						vo.setCat(resultSet.getString(12));
						vo.setPurpose(resultSet.getString(13));
						vo.setLoad(resultSet.getString(14));
						vo.setDemand(resultSet.getString(15));
						vo.setPaid(resultSet.getString(16));

						
						
						vo.setGroup_demand(resultSet.getString(17));
						vo.setGroup_coll(resultSet.getString(18));
						vo.setPaid_date(resultSet.getString(19));
						vo.setRel_date(resultSet.getString(20));

						
						
						
						vo.setUscno(resultSet.getString(21));
						vo.setRef_no(resultSet.getString(22));
						vo.setPen_simply_brt(resultSet.getString(23));
						vo.setSla_desc(resultSet.getString(24));

						vo.setExe_type(resultSet.getString(25));
						vo.setStatus(resultSet.getString(26));
						
						vo.setRemarks(resultSet.getString(27));
						// vo.setCategory(reportRst.getString(4));
						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	
		
	}
		public CscpayVO getAllCountersLt3HtReportDetails(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("HT".equalsIgnoreCase(cscvo.getType())) {

					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO)  like '%H%'  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'  and upper(REG_NO) like '%H%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO)  like '%H%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'  and upper(REG_NO) like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%')  and upper(REG_NO) like '%H%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'  and upper(REG_NO) like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'  and upper(REG_NO) like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'  and upper(REG_NO) like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'  and upper(REG_NO) like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) like '%H%' ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND (upper(REPSTAT) like '%WRT%' or
						// upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like
						// '%TKEY%' ) and upper(REG_NO) like '%H%' ";
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) like '%H%' ";
					} else {
						status = "";
					}
					//System.out.println("status:"+cscvo.getCtype());
				} else if ("LT".equalsIgnoreCase(cscvo.getType()) && cscvo.getCategory() != null) {

					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {

						status = "  and upper(REPSTAT) like '%WRTTKEY%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'  ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {

						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%'  AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {

						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					}

					else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND (upper(REPSTAT) like '%WRT%' or
						// upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like
						// '%TKEY%' ) and upper(REG_NO) not like '%H%' AND
						// CATEGORY_SUPPLY like '"
						// + cscvo.getCategory() + "%' ";
						status = "  AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%' AND CATEGORY_SUPPLY like '"
								+ cscvo.getCategory() + "%'   ";
					} else {
						status = "";
					}
				} else if ("LT".equalsIgnoreCase(cscvo.getType())) {

					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = " and upper(REPSTAT) like '%WRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%BRTTKEY%'  and upper(REG_NO) not like '%H%'  ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%'   and upper(REG_NO) not like '%H%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )   and upper(REG_NO) not like '%H%' ";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%'    and upper(REG_NO) not like '%H%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like   '%WRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  AND upper(REPSTAT) like  '%BRT'    and upper(REG_NO) not like '%H%' ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' ) and upper(REG_NO) not like '%H%'   ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND (upper(REPSTAT) like '%WRT%' or
						// upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like
						// '%TKEY%' ) and upper(REG_NO) not like '%H%' ";
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) and upper(REG_NO) not like '%H%' ";
					} else {
						status = "";
					}
				} else {

					if ("TURNKEY_WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%TKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  and upper(REPSTAT) like '%WRTTKEY%' ";
					} else if ("TURNKEY_BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " and upper(REPSTAT) like '%BRTTKEY%' and
						// upper(REG_NO) not like '%H%' ";
						status = "  and upper(REPSTAT) like '%BRTTKEY%' ";
					} else if ("OB".equalsIgnoreCase(cscvo.getCtype())) {
						status = " and upper(REPSTAT) like '%OB%' ";
					} else if ("REG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND upper(REPSTAT) like  '%REG%' ";
					} else if ("PAID".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' )";
					} else if ("DEL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%DEL%' ";
					} else if ("REL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and upper(REPSTAT) like '%REL%' ";
					} else if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%WRT%' ";
						status = "  AND upper(REPSTAT) like   '%WRT' ";
					} else if ("BRT".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND upper(REPSTAT) like '%BRT%'";
						status = "  AND upper(REPSTAT) like  '%BRT'";

					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' )  ";
					} else if ("TOTREG".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTCRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND (upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' )  ";
					} else if ("TOTBAL".equalsIgnoreCase(cscvo.getCtype())) {
						// status = " AND (upper(REPSTAT) like '%WRT%' or
						// upper(REPSTAT) like '%BRT%' or upper(REPSTAT) like
						// '%TKEY%' ) ";
						status = " AND (upper(REPSTAT) like '%WRT' or upper(REPSTAT) like '%BRT' or upper(REPSTAT) like '%WRTTKEY%' or upper(REPSTAT) like '%BRTTKEY%'  ) ";
					} else {
						status = "";
					}
				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,S.cirname Circle,S.divname Division,S.subname SubDivision,S.secname  Section,"
									+ " R.HTLT,R.reg_no, R.reg_date,R.consumer_name ,R.ADDRESS,R.PHONE_NO, "
									+ " R.Social_group,R.category_supply , R.LOAD,R.purpose,"
									+ " R.Demand,R.Paid ,R.GRP_DEMAND,R.GRP_COLL , R.paid_date,"
									+ " R.RELEASE_DATE ,R.uscno,R.meseva_ref,R.PENDING_STAT,R.SLADESC,R.EXECUTION_TYPE,R.eststatus,P.REASONS||'-'||REMARKS FROM"
									+ " (select row_number() over (partition by null order by null) sno,"
									+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, "
									+ " decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply , contracted_load Load,purpose,"
									+ " nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,"
									+ " nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,nvl(uscno,'-') USCNO,meseva_ref  ,PENDING_STAT,SLADESC,EXECUTION_TYPE,"
									+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus,NCPARTCD FROM REP_FINAL WHERE CIRCLE_CODE NOT IN ('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') "
									// + " AND upper(REPSTAT) like '%WRT' and
									// upper(REG_NO) not like '%H%' AND
									// CATEGORY_SUPPLY like '3%' )R,"
									+ " " + status + "  )R,"
									+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
									+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD and cirname='"
									+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "'");
					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,S.cirname Circle,S.divname Division,S.subname SubDivision,S.secname  Section,"
									+ " R.HTLT,R.reg_no, R.reg_date,R.consumer_name ,R.ADDRESS,R.PHONE_NO, "
									+ " R.Social_group,R.category_supply , R.LOAD,R.purpose,"
									+ " R.Demand,R.Paid ,R.GRP_DEMAND,R.GRP_COLL , R.paid_date,"
									+ " R.RELEASE_DATE ,R.uscno,R.meseva_ref,R.PENDING_STAT,R.SLADESC,R.EXECUTION_TYPE,R.eststatus,P.REASONS||'-'||REMARKS FROM"
									+ " (select row_number() over (partition by null order by null) sno,"
									+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, "
									+ " decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply , contracted_load Load,purpose,"
									+ " nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,"
									+ " nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,nvl(uscno,'-') USCNO,meseva_ref  ,PENDING_STAT,SLADESC,EXECUTION_TYPE,"
									+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus,NCPARTCD FROM REP_FINAL WHERE CIRCLE_CODE NOT IN ('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') "
									// + " AND upper(REPSTAT) like '%WRT' and
									// upper(REG_NO) not like '%H%' AND
									// CATEGORY_SUPPLY like '3%' )R,"
									+ " " + status + "  )R,"
									+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
									+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD and cirname='"
									+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"
									+ cscvo.getSubDiv() + "'");

					// reportPStmt = con.prepareStatement(query);
					// reportPStmt.setString(1, cscvo.getCounterName());

					// reportRst = reportPStmt.executeQuery();
				} else if ("SEC".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,S.cirname Circle,S.divname Division,S.subname SubDivision,S.secname  Section,"
									+ " R.HTLT,R.reg_no, R.reg_date,R.consumer_name ,R.ADDRESS,R.PHONE_NO, "
									+ " R.Social_group,R.category_supply , R.LOAD,R.purpose,"
									+ " R.Demand,R.Paid ,R.GRP_DEMAND,R.GRP_COLL , R.paid_date,"
									+ " R.RELEASE_DATE ,R.uscno,R.meseva_ref,R.PENDING_STAT,R.SLADESC,R.EXECUTION_TYPE,R.eststatus,P.REASONS||'-'||REMARKS FROM"
									+ " (select row_number() over (partition by null order by null) sno,"
									+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, "
									+ " decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply , contracted_load Load,purpose,"
									+ " nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,"
									+ " nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,nvl(uscno,'-') USCNO,meseva_ref  ,PENDING_STAT,SLADESC,EXECUTION_TYPE,"
									+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus,NCPARTCD FROM REP_FINAL WHERE CIRCLE_CODE NOT IN ('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') "
									// + " AND upper(REPSTAT) like '%WRT' and
									// upper(REG_NO) not like '%H%' AND
									// CATEGORY_SUPPLY like '3%' )R,"
									+ " " + status + "  )R,"
									+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
									+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD and cirname='"
									+ cscvo.getCircle() + "' and divname='" + cscvo.getDivision() + "' and subname='"
									+ cscvo.getSubDiv() + "' and secname='" + cscvo.getSec() + "'");
				} else {

					

					resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,S.cirname Circle,S.divname Division,S.subname SubDivision,S.secname  Section,"
									+ " R.HTLT,R.reg_no, R.reg_date,R.consumer_name ,R.ADDRESS,R.PHONE_NO, "
									+ " R.Social_group,R.category_supply , R.LOAD,R.purpose,"
									+ " R.Demand,R.Paid ,R.GRP_DEMAND,R.GRP_COLL , R.paid_date,"
									+ " R.RELEASE_DATE ,R.uscno,R.meseva_ref,R.PENDING_STAT,R.SLADESC,R.EXECUTION_TYPE,R.eststatus,P.REASONS||'-'||REMARKS FROM"
									+ " (select row_number() over (partition by null order by null) sno,"
									+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, "
									+ " decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply , contracted_load Load,purpose,"
									+ " nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,"
									+ " nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,nvl(uscno,'-') USCNO,meseva_ref  ,PENDING_STAT,SLADESC,EXECUTION_TYPE,"
									+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus,NCPARTCD FROM REP_FINAL WHERE CIRCLE_CODE NOT IN ('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') "
									// + " AND upper(REPSTAT) like '%WRT' and
									// upper(REG_NO) not like '%H%' AND
									// CATEGORY_SUPPLY like '3%' )R,"
									+ " " + status + "  )R,"
									+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
									+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD and cirname='"
									+ cscvo.getCircle() + "'");

					System.out.println("select row_number() over (partition by null order by null) sno,S.cirname Circle,S.divname Division,S.subname SubDivision,S.secname  Section,"
							+ " R.HTLT,R.reg_no, R.reg_date,R.consumer_name ,R.ADDRESS,R.PHONE_NO, "
							+ " R.Social_group,R.category_supply , R.LOAD,R.purpose,"
							+ " R.Demand,R.Paid ,R.GRP_DEMAND,R.GRP_COLL , R.paid_date,"
							+ " R.RELEASE_DATE ,R.uscno,R.meseva_ref,R.PENDING_STAT,R.SLADESC,R.EXECUTION_TYPE,R.eststatus,P.REASONS||'-'||REMARKS FROM"
							+ " (select row_number() over (partition by null order by null) sno,"
							+ " (case when reg_no like '%H%' then 'HT' else 'LT' end) HTLT,reg_no,nvl(to_char(reg_date,'MM-DD-YYYY'),'-') as reg_date,consumer_name ,ADDRESS,PHONE_NO, "
							+ " decode(social_group,'1','SC','2','ST','3','BC','4','OC','5','SC-1','6','ST-2','Others') Social_group,category_supply , contracted_load Load,purpose,"
							+ " nvl(sapdem,extdem) Demand,totamt Paid ,GRP_DEMAND,GRP_COLL ,to_char(greatest(nvl(grp_prdt,MAXPRDT),nvl(maxprdt,GRP_PRDT)),'DD-MM-YYYY') paid_date,"
							+ " nvl(to_char(SUPPLY_RELEASE_DATE,'MM-DD-YYYY'),'-')  RELEASE_DATE ,nvl(uscno,'-') USCNO,meseva_ref  ,PENDING_STAT,SLADESC,EXECUTION_TYPE,"
							+ " (case when eststatus='01' then 'Simplified' when  eststatus='02' then 'Extension' else 'Simplified' end) eststatus,NCPARTCD FROM REP_FINAL WHERE CIRCLE_CODE NOT IN ('1','4','6','9') AND NVL(consumer_status_val,'NA') NOT IN ('APSFL01','APSFL02','APTIDCO','YSR JALAKALA','JCOLONY') "
							// + " AND upper(REPSTAT) like '%WRT' and
							// upper(REG_NO) not like '%H%' AND
							// CATEGORY_SUPPLY like '3%' )R,"
							+ " " + status + "  )R,"
							+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
							+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
							+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD and cirname='"
							+ cscvo.getCircle() + "'");
					/*System.out.println("exportall2"+query);*/
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(2));
						vo.setDivision(resultSet.getString(3));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(4));
						vo.setSec(resultSet.getString(5));
						vo.setType(resultSet.getString(6));
						vo.setReg_no(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setCunsu_name(resultSet.getString(9));

						vo.setAddress(resultSet.getString(10));
						vo.setPhono(resultSet.getString(11));
						vo.setS_group(resultSet.getString(12));

						vo.setCat(resultSet.getString(13));
						vo.setLoad(resultSet.getString(14));
						vo.setPurpose(resultSet.getString(15));
						vo.setDemand(resultSet.getString(16));
						vo.setPaid(resultSet.getString(17));

						vo.setGroup_demand(resultSet.getString(18));
						vo.setGroup_coll(resultSet.getString(19));

						vo.setPaid_date(resultSet.getString(20));
						vo.setRel_date(resultSet.getString(21));

						vo.setUscno(resultSet.getString(22));
						vo.setRef_no(resultSet.getString(23));

						vo.setPen_simply_brt(resultSet.getString(24));
						vo.setSla_desc(resultSet.getString(25));

						vo.setExe_type(resultSet.getString(26));
						vo.setStatus(resultSet.getString(27));
						vo.setRemarks(resultSet.getString(28));
						// vo.setCategory(reportRst.getString(4));
						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}

	// REPORT4 -Simplified
	public CscpayVO getDeletedScsTobeRelForPaidCasesDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(R.WRT)+COUNT(R.BRT) TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE NVL(ESTSTATUS,'03')='01' AND sladesc='Pending for Service release'   AND USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' and NVL(TOTAMT,0)>100) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER )S"
							+ " WHERE R.REG_NO=A.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)"
							+ " AND R.REG_NO=D.REG_NO(+)" + " AND R.REG_NO=E.REG_NO(+)" + " AND R.REG_NO=F.REG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD and s.cirname=? "
							+ " GROUP BY ROLLUP(S.divname) ORDER BY S.divname";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(R.WRT)+COUNT(R.BRT) TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE NVL(ESTSTATUS,'03')='01' AND sladesc='Pending for Service release'    AND USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' and NVL(TOTAMT,0)>100) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER )S"
							+ " WHERE R.REG_NO=A.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)"
							+ " AND R.REG_NO=D.REG_NO(+)" + " AND R.REG_NO=E.REG_NO(+)" + " AND R.REG_NO=F.REG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD and s.cirname=? and s.divname=? "
							+ " GROUP BY ROLLUP(S.subname) ORDER BY S.subname";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(R.WRT)+COUNT(R.BRT) TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE NVL(ESTSTATUS,'03')='01' AND sladesc='Pending for Service release'    AND USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' and NVL(TOTAMT,0)>100) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER )S"
							+ " WHERE R.REG_NO=A.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)"
							+ " AND R.REG_NO=D.REG_NO(+)" + " AND R.REG_NO=E.REG_NO(+)" + " AND R.REG_NO=F.REG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD and s.cirname=? and s.divname=? and s.subname=? "
							+ " GROUP BY ROLLUP(S.secname) ORDER BY S.secname";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(R.WRT)+COUNT(R.BRT) TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE NVL(ESTSTATUS,'03')='01' AND sladesc='Pending for Service release'    AND USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' and NVL(TOTAMT,0)>100) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S" + " WHERE R.REG_NO=A.REG_NO(+)"
							+ " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)" + " AND R.REG_NO=D.REG_NO(+)"
							+ " AND R.REG_NO=E.REG_NO(+)" + " AND R.REG_NO=F.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD"
							+ " GROUP BY ROLLUP(S.CIRNAME) ORDER BY S.CIRNAME";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("Simplified:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
							dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
							dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

							dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
							dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
							dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

							dmapobj.setWrt(reportRst.getString(8));
							dmapobj.setBeyondReleased(reportRst.getString(9));
							dmapobj.setTot_pen(reportRst.getString(10));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
							dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
							dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

							dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
							dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
							dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

							dmapobj.setWrt(reportRst.getString(8));
							dmapobj.setBeyondReleased(reportRst.getString(9));
							dmapobj.setTot_pen(reportRst.getString(10));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	
	//Report 2 EstimatesPendingForApproval
	public CscpayVO getEstimatesPendingForApprovalDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {
		
     
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";
		String scsType = "";
		String TYPE = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		if ("WRT".equalsIgnoreCase(cscvo.getType())) {
			TYPE="AND R.WRT_BRT='WRT'";	
		}
		if ("BRT".equalsIgnoreCase(cscvo.getType())) {
			
			TYPE="AND R.WRT_BRT='BRT'";
		}
         if ("ALL".equalsIgnoreCase(cscvo.getType())) {
			
			TYPE="";
		}
		
	

		

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					 
					String query="SELECT NVL(S.DIVNAME,'TOTAL'),COUNT(DISTINCT A.SAPWBSNO)AEWBS,COUNT(DISTINCT A.REG_NO)AEREG,COUNT(DISTINCT B.SAPWBSNO)ADEWBS,COUNT(DISTINCT B.REG_NO)ADEREG,COUNT(DISTINCT C.SAPWBSNO)DEWBS,COUNT(DISTINCT C.REG_NO)DEREG,COUNT(DISTINCT D.SAPWBSNO)SEWBS,COUNT(DISTINCT D.REG_NO)SEREG,COUNT(DISTINCT E.SAPWBSNO)CORPWBS,COUNT(DISTINCT E.REG_NO)CORPREG \r\n" + 
							",COUNT(DISTINCT A.SAPWBSNO)+COUNT(DISTINCT B.SAPWBSNO)+COUNT(DISTINCT C.SAPWBSNO)+COUNT(DISTINCT D.SAPWBSNO)+COUNT(DISTINCT E.SAPWBSNO) TOT_WBS,COUNT(DISTINCT A.REG_NO)+COUNT(DISTINCT B.REG_NO)+COUNT(DISTINCT C.REG_NO)+COUNT(DISTINCT D.REG_NO)+COUNT(DISTINCT E.REG_NO) TOT_REG FROM\r\n" + 
							"(SELECT REG_NO,NCPARTCD,WRT_BRT FROM N_SAP_EVENTS WHERE EVENT_BY <> 'RJTD')R,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='AEE' )A,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='ADE' )B,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='DE' )C,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS) IN ('SE','DET') )D,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='CORPORATE' )E,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD\r\n" + 
							"AND R.REG_NO=A.REG_NO(+)\r\n" + 
							"AND R.REG_NO=B.REG_NO(+)\r\n" + 
							"AND R.REG_NO=C.REG_NO(+)\r\n" + 
							"AND R.REG_NO=D.REG_NO(+)\r\n" + 
							"AND R.REG_NO=E.REG_NO(+)\r\n" + 
							"" +TYPE+ ""+ "AND S.CIRNAME=?"+ 
							"GROUP BY rollup(S.DIVNAME) ORDER BY S.DIVNAME";
                    
                    System.out.println("Div_REPORT2:24062022:" + query);
                    reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query="SELECT NVL(S.SUBNAME,'TOTAL'),COUNT(DISTINCT A.SAPWBSNO)AEWBS,COUNT(DISTINCT A.REG_NO)AEREG,COUNT(DISTINCT B.SAPWBSNO)ADEWBS,COUNT(DISTINCT B.REG_NO)ADEREG,COUNT(DISTINCT C.SAPWBSNO)DEWBS,COUNT(DISTINCT C.REG_NO)DEREG,COUNT(DISTINCT D.SAPWBSNO)SEWBS,COUNT(DISTINCT D.REG_NO)SEREG,COUNT(DISTINCT E.SAPWBSNO)CORPWBS,COUNT(DISTINCT E.REG_NO)CORPREG \r\n" + 
							",COUNT(DISTINCT A.SAPWBSNO)+COUNT(DISTINCT B.SAPWBSNO)+COUNT(DISTINCT C.SAPWBSNO)+COUNT(DISTINCT D.SAPWBSNO)+COUNT(DISTINCT E.SAPWBSNO) TOT_WBS,COUNT(DISTINCT A.REG_NO)+COUNT(DISTINCT B.REG_NO)+COUNT(DISTINCT C.REG_NO)+COUNT(DISTINCT D.REG_NO)+COUNT(DISTINCT E.REG_NO) TOT_REG FROM\r\n" + 
							"(SELECT REG_NO,NCPARTCD,WRT_BRT FROM N_SAP_EVENTS WHERE EVENT_BY <> 'RJTD')R,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='AEE' )A,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='ADE' )B,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='DE' )C,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS) IN ('SE','DET') )D,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='CORPORATE' )E,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD\r\n" + 
							"AND R.REG_NO=A.REG_NO(+)\r\n" + 
							"AND R.REG_NO=B.REG_NO(+)\r\n" + 
							"AND R.REG_NO=C.REG_NO(+)\r\n" + 
							"AND R.REG_NO=D.REG_NO(+)\r\n" + 
							"AND R.REG_NO=E.REG_NO(+)\r\n" + 
							"" +TYPE+ ""+ "AND S.CIRNAME=? AND S.DIVNAME=?"+ 
							"GROUP BY rollup(S.SUBNAME) ORDER BY S.SUBNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("sub_REPORT2:24062022:" + query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {
					 
					String query="SELECT NVL(S.SECNAME,'TOTAL'),COUNT(DISTINCT A.SAPWBSNO)AEWBS,COUNT(DISTINCT A.REG_NO)AEREG,COUNT(DISTINCT B.SAPWBSNO)ADEWBS,COUNT(DISTINCT B.REG_NO)ADEREG,COUNT(DISTINCT C.SAPWBSNO)DEWBS,COUNT(DISTINCT C.REG_NO)DEREG,COUNT(DISTINCT D.SAPWBSNO)SEWBS,COUNT(DISTINCT D.REG_NO)SEREG,COUNT(DISTINCT E.SAPWBSNO)CORPWBS,COUNT(DISTINCT E.REG_NO)CORPREG \r\n" + 
							",COUNT(DISTINCT A.SAPWBSNO)+COUNT(DISTINCT B.SAPWBSNO)+COUNT(DISTINCT C.SAPWBSNO)+COUNT(DISTINCT D.SAPWBSNO)+COUNT(DISTINCT E.SAPWBSNO) TOT_WBS,COUNT(DISTINCT A.REG_NO)+COUNT(DISTINCT B.REG_NO)+COUNT(DISTINCT C.REG_NO)+COUNT(DISTINCT D.REG_NO)+COUNT(DISTINCT E.REG_NO) TOT_REG FROM\r\n" + 
							"(SELECT REG_NO,NCPARTCD,WRT_BRT FROM N_SAP_EVENTS WHERE EVENT_BY <> 'RJTD')R,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='AEE' )A,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='ADE' )B,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='DE' )C,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS) IN ('SE','DET') )D,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='CORPORATE' )E,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD\r\n" + 
							"AND R.REG_NO=A.REG_NO(+)\r\n" + 
							"AND R.REG_NO=B.REG_NO(+)\r\n" + 
							"AND R.REG_NO=C.REG_NO(+)\r\n" + 
							"AND R.REG_NO=D.REG_NO(+)\r\n" + 
							"AND R.REG_NO=E.REG_NO(+)\r\n" + 
							"" +TYPE+ ""+ "AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?  "+ 
							"GROUP BY rollup(S.SECNAME) ORDER BY S.SECNAME";
					
					
					
					 reportPStmt = con.prepareStatement(query);
                    System.out.println("sec_REPORT2:24062022:" + query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();
					//System.out.println("sec_Extension:"+query);

				} else {
					
					//new_24062022
					String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(DISTINCT A.SAPWBSNO)AEWBS,COUNT(DISTINCT A.REG_NO)AEREG,COUNT(DISTINCT B.SAPWBSNO)ADEWBS,COUNT(DISTINCT B.REG_NO)ADEREG,COUNT(DISTINCT C.SAPWBSNO)DEWBS,COUNT(DISTINCT C.REG_NO)DEREG,COUNT(DISTINCT D.SAPWBSNO)SEWBS,COUNT(DISTINCT D.REG_NO)SEREG,COUNT(DISTINCT E.SAPWBSNO)CORPWBS,COUNT(DISTINCT E.REG_NO)CORPREG \r\n" + 
							",COUNT(DISTINCT A.SAPWBSNO)+COUNT(DISTINCT B.SAPWBSNO)+COUNT(DISTINCT C.SAPWBSNO)+COUNT(DISTINCT D.SAPWBSNO)+COUNT(DISTINCT E.SAPWBSNO) TOT_WBS,COUNT(DISTINCT A.REG_NO)+COUNT(DISTINCT B.REG_NO)+COUNT(DISTINCT C.REG_NO)+COUNT(DISTINCT D.REG_NO)+COUNT(DISTINCT E.REG_NO) TOT_REG FROM\r\n" + 
							"(SELECT REG_NO,NCPARTCD,WRT_BRT FROM N_SAP_EVENTS WHERE EVENT_BY <> 'RJTD')R,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='AEE' )A,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='ADE' )B,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='DE' )C,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS) IN ('SE','DET') )D,\r\n" + 
							"(SELECT WRT_BRT,SAPWBSNO,REG_NO FROM N_SAP_EVENTS WHERE TRIM(REMARKS)='CORPORATE' )E,\r\n" + 
							"(SELECT CIRNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD\r\n" + 
							"AND R.REG_NO=A.REG_NO(+)\r\n" + 
							"AND R.REG_NO=B.REG_NO(+)\r\n" + 
							"AND R.REG_NO=C.REG_NO(+)\r\n" + 
							"AND R.REG_NO=D.REG_NO(+)\r\n" + 
							"AND R.REG_NO=E.REG_NO(+)\r\n" + 
							"" +TYPE+ ""+  
							"GROUP BY rollup(S.CIRNAME) ORDER BY S.CIRNAME";
					 
					

					reportPStmt = con.prepareStatement(query);
					System.out.println("All_REPORT2:24062022:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAE_WBS(reportRst.getString(2));
							dmapobj.setAE_REG(reportRst.getString(3));
							dmapobj.setADE_WBS(reportRst.getString(4));

							dmapobj.setADE_REG(reportRst.getString(5));
							dmapobj.setDE_WBS(reportRst.getString(6));
							 dmapobj.setDE_REG(reportRst.getString(7));

							 dmapobj.setSE_WBS(reportRst.getString(8));
							 dmapobj.setSE_REG(reportRst.getString(9));
							 dmapobj.setCORP_WBS(reportRst.getString(10));
							 dmapobj.setCORP_REG(reportRst.getString(11));
							 dmapobj.setTOT_WBS(reportRst.getString(12));
							 dmapobj.setTOT_REG(reportRst.getString(13));
							//dmapobj.setTot_pen(reportRst.getString(7));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAE_WBS(reportRst.getString(2));
							dmapobj.setAE_REG(reportRst.getString(3));
							dmapobj.setADE_WBS(reportRst.getString(4));
							dmapobj.setADE_REG(reportRst.getString(5));
							dmapobj.setDE_WBS(reportRst.getString(6));
							dmapobj.setDE_REG(reportRst.getString(7));
							dmapobj.setSE_WBS(reportRst.getString(8));
							dmapobj.setSE_REG(reportRst.getString(9));
							dmapobj.setCORP_WBS(reportRst.getString(10));
							dmapobj.setCORP_REG(reportRst.getString(11));
							dmapobj.setTOT_WBS(reportRst.getString(12));
							dmapobj.setTOT_REG(reportRst.getString(13));
							
							
							//dmapobj.setTot_pen(reportRst.getString(7));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
		
	}
	
	//Report 3 getApplicationsCoveredUnderBrtDetails
	public CscpayVO getApplicationsCoveredUnderBrtDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					 
					String query="SELECT NVL(S.DIVNAME,'TOTAL'),COUNT(DISTINCT A.REG_NO)GRA15,COUNT(DISTINCT B.REG_NO)GRA30,COUNT(DISTINCT C.REG_NO)GRA45,COUNT(DISTINCT D.REG_NO)GRA65,COUNT(DISTINCT E.REG_NO)GRA90,COUNT(DISTINCT A.REG_NO)+COUNT(DISTINCT B.REG_NO)+COUNT(DISTINCT C.REG_NO)+COUNT(DISTINCT D.REG_NO)+COUNT(DISTINCT E.REG_NO) TOTAL FROM\r\n" + 
							"(SELECT REG_NO,NCPARTCD FROM N_SAP_EVENTS WHERE  EVENT_BY NOT IN ('RSUB', 'RJTD') AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') )R,\r\n" + 
							"(SELECT REG_NO FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE)  > 15 AND   CEIL(SYSDATE-REG_DATE) < =30 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))A,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE)  > 30 AND  CEIL(SYSDATE-REG_DATE) <=45 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))B,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE) > 45 AND CEIL(SYSDATE-REG_DATE) <=60 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))C,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE)  > 60 AND CEIL(SYSDATE-REG_DATE) <=90 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))D,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE) > 90 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))E,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD\r\n" + 
							"AND R.REG_NO=A.REG_NO(+)\r\n" + 
							"AND R.REG_NO=B.REG_NO(+)\r\n" + 
							"AND R.REG_NO=C.REG_NO(+)\r\n" + 
							"AND R.REG_NO=D.REG_NO(+)\r\n" + 
							"AND R.REG_NO=E.REG_NO(+)\r\n" +
							"AND S.CIRNAME=?" +
							"GROUP BY ROLLUP(S.DIVNAME) ORDER BY DIVNAME";
                                    
                          
                    
					
                    //System.out.println("Div_REPORT3:23062022:" + query);
                    reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					String query="SELECT NVL(S.SUBNAME,'TOTAL'),COUNT(DISTINCT A.REG_NO)GRA15,COUNT(DISTINCT B.REG_NO)GRA30,COUNT(DISTINCT C.REG_NO)GRA45,COUNT(DISTINCT D.REG_NO)GRA65,COUNT(DISTINCT E.REG_NO)GRA90,COUNT(DISTINCT A.REG_NO)+COUNT(DISTINCT B.REG_NO)+COUNT(DISTINCT C.REG_NO)+COUNT(DISTINCT D.REG_NO)+COUNT(DISTINCT E.REG_NO) TOTAL FROM\r\n" + 
							"(SELECT REG_NO,NCPARTCD FROM N_SAP_EVENTS WHERE  EVENT_BY NOT IN ('RSUB', 'RJTD') AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') )R,\r\n" + 
							"(SELECT REG_NO FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE)  > 15 AND   CEIL(SYSDATE-REG_DATE) < =30 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))A,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE)  > 30 AND  CEIL(SYSDATE-REG_DATE) <=45 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))B,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE) > 45 AND CEIL(SYSDATE-REG_DATE) <=60 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))C,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE)  > 60 AND CEIL(SYSDATE-REG_DATE) <=90 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))D,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE) > 90 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))E,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD\r\n" + 
							"AND R.REG_NO=A.REG_NO(+)\r\n" + 
							"AND R.REG_NO=B.REG_NO(+)\r\n" + 
							"AND R.REG_NO=C.REG_NO(+)\r\n" + 
							"AND R.REG_NO=D.REG_NO(+)\r\n" + 
							"AND R.REG_NO=E.REG_NO(+)\r\n" +
							"AND S.CIRNAME=? AND S.DIVNAME=?" +
							"GROUP BY ROLLUP(S.SUBNAME) ORDER BY SUBNAME";
					reportPStmt = con.prepareStatement(query);
					//System.out.println("sub_REPORT3:23062022:" + query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {
					 
					String query="SELECT NVL(S.SECNAME,'TOTAL'),COUNT(DISTINCT A.REG_NO)GRA15,COUNT(DISTINCT B.REG_NO)GRA30,COUNT(DISTINCT C.REG_NO)GRA45,COUNT(DISTINCT D.REG_NO)GRA65,COUNT(DISTINCT E.REG_NO)GRA90,COUNT(DISTINCT A.REG_NO)+COUNT(DISTINCT B.REG_NO)+COUNT(DISTINCT C.REG_NO)+COUNT(DISTINCT D.REG_NO)+COUNT(DISTINCT E.REG_NO) TOTAL FROM\r\n" + 
							"(SELECT REG_NO,NCPARTCD FROM N_SAP_EVENTS WHERE  EVENT_BY NOT IN ('RSUB', 'RJTD') AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') )R,\r\n" + 
							"(SELECT REG_NO FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE)  > 15 AND   CEIL(SYSDATE-REG_DATE) < =30 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))A,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE)  > 30 AND  CEIL(SYSDATE-REG_DATE) <=45 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))B,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE) > 45 AND CEIL(SYSDATE-REG_DATE) <=60 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))C,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE)  > 60 AND CEIL(SYSDATE-REG_DATE) <=90 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))D,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE) > 90 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))E,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD\r\n" + 
							"AND R.REG_NO=A.REG_NO(+)\r\n" + 
							"AND R.REG_NO=B.REG_NO(+)\r\n" + 
							"AND R.REG_NO=C.REG_NO(+)\r\n" + 
							"AND R.REG_NO=D.REG_NO(+)\r\n" + 
							"AND R.REG_NO=E.REG_NO(+)\r\n" +
							"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SECNAME=?" +
							"GROUP BY ROLLUP(S.SECNAME) ORDER BY SECNAME";
					
					
					
					 reportPStmt = con.prepareStatement(query);
                    // System.out.println("sec_REPORT3:23062022:" + query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();
					//System.out.println("sec_Extension:"+query);

				} else {
					
					//new_23062022
					String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(DISTINCT A.REG_NO)GRA15,COUNT(DISTINCT B.REG_NO)GRA30,COUNT(DISTINCT C.REG_NO)GRA45,COUNT(DISTINCT D.REG_NO)GRA65,COUNT(DISTINCT E.REG_NO)GRA90,COUNT(DISTINCT A.REG_NO)+COUNT(DISTINCT B.REG_NO)+COUNT(DISTINCT C.REG_NO)+COUNT(DISTINCT D.REG_NO)+COUNT(DISTINCT E.REG_NO) TOTAL FROM\r\n" + 
							"(SELECT REG_NO,NCPARTCD FROM N_SAP_EVENTS WHERE  EVENT_BY NOT IN ('RSUB', 'RJTD') AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') )R,\r\n" + 
							"(SELECT REG_NO FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE)  > 15 AND   CEIL(SYSDATE-REG_DATE) < =30 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))A,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE)  > 30 AND  CEIL(SYSDATE-REG_DATE) <=45 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))B,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE) > 45 AND CEIL(SYSDATE-REG_DATE) <=60 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))C,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE)  > 60 AND CEIL(SYSDATE-REG_DATE) <=90 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))D,\r\n" + 
							"(SELECT REG_NO  FROM N_SAP_EVENTS WHERE CEIL(SYSDATE-REG_DATE) > 90 AND REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X'))E,\r\n" + 
							"(SELECT CIRNAME,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD\r\n" + 
							"AND R.REG_NO=A.REG_NO(+)\r\n" + 
							"AND R.REG_NO=B.REG_NO(+)\r\n" + 
							"AND R.REG_NO=C.REG_NO(+)\r\n" + 
							"AND R.REG_NO=D.REG_NO(+)\r\n" + 
							"AND R.REG_NO=E.REG_NO(+)\r\n" + 
							"GROUP BY ROLLUP(S.CIRNAME) ORDER BY CIRNAME";
					 
					

					reportPStmt = con.prepareStatement(query);
					System.out.println("All_REPORT3:23062022:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
							dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
							dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

							dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
							dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
							// dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

							// dmapobj.setWrt(reportRst.getString(8));
							// dmapobj.setBeyondReleased(reportRst.getString(9));
							dmapobj.setTot_pen(reportRst.getString(7));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
							dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
							dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

							dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
							dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
							// dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

							// dmapobj.setWrt(reportRst.getString(8));
							// dmapobj.setBeyondReleased(reportRst.getString(9));
							dmapobj.setTot_pen(reportRst.getString(7));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
		
	}
	
	//Report 2  getEstimatesPendingForApprovalScsDetails
	public CscpayVO getEstimatesPendingForApprovalScsDetails(CscpayVO cscvo) throws Exception {



		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";
		String TYPE = "";
		String Estimate = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {
				
				if ("WRT".equalsIgnoreCase(cscvo.getType())) {
					TYPE="AND G.WRT_BRT='WRT'";	
					
				}
				
				
				if ("BRT".equalsIgnoreCase(cscvo.getType())) {
					
					TYPE="AND G.WRT_BRT='BRT'";
					
				
				}
				
				
		         if ("ALL".equalsIgnoreCase(cscvo.getType())) {
					
					TYPE="";
					
				}
		         if ("getAE_WBS".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='AEE'";
					}
					if ("getAE_REG".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='AEE'";
					}
					
					if ("getADE_WBS".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='ADE'";
					}
					if ("getADE_REG".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='ADE'";
					}
					
					if ("getDE_WBS".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='DE'";
					}
					if ("getDE_REG".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='DE'";
					}
					
					if ("getSE_WBS".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='SE'";
					}
					if ("getSE_REG".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='SE'";
					}
					if ("getCORP_WBS".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='CORPORATE'";
					}
					if ("getCORP_REG".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "AND G.REMARKS='CORPORATE'";
					}
					
					if ("getTOT_WBS".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "";
					}
					if ("getTOT_REG".equalsIgnoreCase(cscvo.getExe_type())) {
						Estimate = "";
					}
				
				
				

				

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					
					String qry="select DISTINCT S.cirNAME,S.divnAME,S.subname,S.secname ,R.reg_no,R.category_supply,R.consumer_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,REP_FINAL R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') AND R.REG_NO=G.REG_NO AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='" + cscvo.getDivision() + "' "+Estimate+" "+TYPE+" AND EVENT_BY <> 'RJTD'\r\n" + 
							"UNION\r\n" + 
							"select DISTINCT S.cirNAME,S.divnAME,S.subname,S.secname ,R.reg_no,R.category_supply,R.consumer_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,REP_FINAL R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT GRPAPPNUM FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') AND R.GRPAPPNUM=G.REG_NO "+Estimate+" "+TYPE+" AND EVENT_BY <> 'RJTD'\r\n" + 
							"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='" + cscvo.getDivision() + "'" +
							"UNION\r\n" + 
							"select DISTINCT S.cirNAME,S.divnAME,S.subname,S.secname ,R.reg_no,R.PRESENT_category,R.CUSTOMER_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN ,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,NEWCOMP_TAB R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT REG_NO FROM NEWCOMP_TAB WHERE NVL(REJECTED,'Y') <> 'X') AND R.REG_NO=G.REG_NO "+Estimate+" "+TYPE+" AND EVENT_BY <> 'RJTD'\r\n" + 
							"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='" + cscvo.getDivision() + "'";
						
						System.out.println("export:2:DIV:15072022"+qry);
					resultSet = statement.executeQuery(qry);

					
					
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String qry="select DISTINCT S.cirNAME,S.divnAME,S.subname,S.secname ,R.reg_no,R.category_supply,R.consumer_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,REP_FINAL R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') AND R.REG_NO=G.REG_NO AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='" + cscvo.getDivision() + "' AND S.SUBNAME='" + cscvo.getSubDiv() + "' "+Estimate+" "+TYPE+" AND EVENT_BY <> 'RJTD'\r\n" + 
							"UNION\r\n" + 
							"select DISTINCT S.cirNAME,S.divnAME,S.subname,S.secname ,R.reg_no,R.category_supply,R.consumer_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,REP_FINAL R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT GRPAPPNUM FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') AND R.GRPAPPNUM=G.REG_NO "+Estimate+" "+TYPE+" AND EVENT_BY <> 'RJTD'\r\n" + 
							"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='" + cscvo.getDivision() + "' AND S.SUBNAME='" + cscvo.getSubDiv() + "'" +
							"UNION\r\n" + 
							"select DISTINCT S.cirNAME,S.divnAME,S.subname,S.secname ,R.reg_no,R.PRESENT_category,R.CUSTOMER_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN ,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,NEWCOMP_TAB R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT REG_NO FROM NEWCOMP_TAB WHERE NVL(REJECTED,'Y') <> 'X') AND R.REG_NO=G.REG_NO "+Estimate+" "+TYPE+" AND EVENT_BY <> 'RJTD'\r\n" + 
							"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='" + cscvo.getDivision() + "' AND S.SUBNAME='" + cscvo.getSubDiv() + "'";
						
						System.out.println("export:2:SUB_DIV:15072022"+qry);
				
					resultSet = statement.executeQuery(qry);						

				} else if ("SEC".equals(cscvo.getFlag())) {

					String qry="select DISTINCT S.cirNAME,S.divnAME,S.subname,S.secname ,R.reg_no,R.category_supply,R.consumer_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,REP_FINAL R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') AND R.REG_NO=G.REG_NO AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='" + cscvo.getDivision() + "' AND S.SUBNAME='" + cscvo.getSubDiv() + "' AND S.SECNAME='" + cscvo.getSec() + "' "+Estimate+" "+TYPE+" AND EVENT_BY <> 'RJTD'\r\n" + 
							"UNION\r\n" + 
							"select DISTINCT S.cirNAME,S.divnAME,S.subname,S.secname ,R.reg_no,R.category_supply,R.consumer_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,REP_FINAL R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT GRPAPPNUM FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') AND R.GRPAPPNUM=G.REG_NO "+Estimate+" "+TYPE+" AND EVENT_BY <> 'RJTD'\r\n" + 
							"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='" + cscvo.getDivision() + "' AND S.SUBNAME='" + cscvo.getSubDiv() + "' AND S.SECNAME='" + cscvo.getSec() + "'" +
							"UNION\r\n" + 
							"select DISTINCT S.cirNAME,S.divnAME,S.subname,S.secname ,R.reg_no,R.PRESENT_category,R.CUSTOMER_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN ,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,NEWCOMP_TAB R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT REG_NO FROM NEWCOMP_TAB WHERE NVL(REJECTED,'Y') <> 'X') AND R.REG_NO=G.REG_NO "+Estimate+" "+TYPE+" AND EVENT_BY <> 'RJTD'\r\n" + 
							"AND S.CIRNAME='" + cscvo.getCircle() + "' AND S.DIVNAME='" + cscvo.getDivision() + "' AND S.SUBNAME='" + cscvo.getSubDiv() + "' AND S.SECNAME='" + cscvo.getSec() + "'";
						
					
					System.out.println("export:2:SEC:15072022"+qry);
				
					resultSet = statement.executeQuery(qry);
					
				} else {
					
					String qry="select DISTINCT S.cirNAME,S.divnAME,S.subname,S.secname ,R.reg_no,R.category_supply,R.consumer_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,REP_FINAL R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') AND R.REG_NO=G.REG_NO AND S.CIRNAME='" + cscvo.getCircle() + "' "+Estimate+" "+TYPE+" AND EVENT_BY <> 'RJTD'\r\n" + 
							"UNION\r\n" + 
							"select DISTINCT S.cirNAME,S.divnAME,S.subname,S.secname ,R.reg_no,R.category_supply,R.consumer_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,REP_FINAL R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT GRPAPPNUM FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') AND R.GRPAPPNUM=G.REG_NO "+Estimate+" "+TYPE+" AND EVENT_BY <> 'RJTD'\r\n" + 
							"AND S.CIRNAME='" + cscvo.getCircle() + "'" + 
							"UNION\r\n" + 
							"select DISTINCT S.cirNAME,S.divnAME,S.subname,S.secname ,R.reg_no,R.PRESENT_category,R.CUSTOMER_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN ,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,NEWCOMP_TAB R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT REG_NO FROM NEWCOMP_TAB WHERE NVL(REJECTED,'Y') <> 'X') AND R.REG_NO=G.REG_NO "+Estimate+" "+TYPE+" AND EVENT_BY <> 'RJTD'\r\n" + 
							"AND S.CIRNAME='" + cscvo.getCircle() + "'";
					
					/*String qry="select S.CIRNAME,S.DIVNAME,S.subname,S.secname ,R.reg_no,R.category_supply,R.consumer_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,REP_FINAL R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') AND R.REG_NO=G.REG_NO AND S.CIRNAME='" + cscvo.getCircle() + "'  "+Estimate+" "+TYPE+"\r\n" + 
							"UNION\r\n" + 
							"select S.CIRNAME,S.DIVNAME,S.subname,S.secname ,R.reg_no,R.category_supply,R.consumer_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,REP_FINAL R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT GRPAPPNUM FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') AND R.GRPAPPNUM=G.REG_NO "+Estimate+" "+TYPE+"\r\n" + 
							"AND S.CIRNAME='" + cscvo.getCircle() + "'\r\n" + 
							"UNION\r\n" + 
							"select S.CIRNAME,S.DIVNAME,S.subname,S.secname ,R.reg_no,R.PRESENT_category,R.CUSTOMER_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN ,WRT_BRT from\r\n" + 
							"N_SAP_EVENTS G,SPDCLMASTER S,NEWCOMP_TAB R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT REG_NO FROM NEWCOMP_TAB WHERE NVL(REJECTED,'Y') <> 'X') AND R.REG_NO=G.REG_NO "+Estimate+" "+TYPE+"\r\n" + 
							"AND S.CIRNAME='" + cscvo.getCircle() + "'";
					*/
					System.out.println("export:2:cir:15072022"+qry);
				
					resultSet = statement.executeQuery(qry);
					
				
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();
//mehtod names are different but funtionality is same
						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCat(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setRel_date(resultSet.getString(9));
						vo.setSapSno(resultSet.getString(10));
						vo.setStatus(resultSet.getString(11));
						vo.setEstatus(resultSet.getString(12));
						vo.setEstwrtbrt(resultSet.getString(13));
						

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	
	
		
	}
	
	
	//Report 3 getApplicationsCoveredUnderBrtScsDetails
	public CscpayVO getApplicationsCoveredUnderBrtScsDetails(CscpayVO cscvo) throws Exception {


		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("gtr15days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = "AND CEIL(SYSDATE-G.REG_DATE)  > 15 AND  CEIL(SYSDATE-G.REG_DATE) <=30  ";
				} else if ("gtr30days".equalsIgnoreCase(cscvo.getExe_type())) {
					
					daystatus = "AND CEIL(SYSDATE-G.REG_DATE)  > 30 AND  CEIL(SYSDATE-G.REG_DATE) <=45  ";
				} else if ("gtr45days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-G.REG_DATE)  > 45 AND  CEIL(SYSDATE-G.REG_DATE) <=60   ";
				} else if ("gtr60days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = "AND CEIL(SYSDATE-G.REG_DATE)  > 60 AND  CEIL(SYSDATE-G.REG_DATE) <=90 ";
				}  else if ("gtr90days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = "AND CEIL(SYSDATE-G.REG_DATE) > 90  ";
				} else if ("TotalDays".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = "AND (CEIL(SYSDATE-G.REG_DATE)  > 15 AND  CEIL(SYSDATE-G.REG_DATE) <=30) OR  (CEIL(SYSDATE-G.REG_DATE)  > 30 AND  CEIL(SYSDATE-G.REG_DATE) <=45) OR (CEIL(SYSDATE-G.REG_DATE)  > 45 AND  CEIL(SYSDATE-G.REG_DATE) <=60)  OR (CEIL(SYSDATE-G.REG_DATE)  > 60 AND  CEIL(SYSDATE-G.REG_DATE) <=90) OR (CEIL(SYSDATE-G.REG_DATE) > 90) ";	
				}


				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					
					String qry="select DISTINCT S.CIRNAME,S.DIVNAME,S.subname,S.secname ,R.reg_no,R.category_supply,R.consumer_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN from \r\n" + 
							" N_SAP_EVENTS G,SPDCLMASTER S,REP_FINAL R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') AND R.REG_NO=G.REG_NO AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' \r\n" + 
							" AND G.EVENT_BY NOT IN ('RSUB', 'RJTD') "+daystatus+"   ";
					
					System.out.println("export:3:DIV:23"+qry);
				
					resultSet = statement.executeQuery(qry);

					
					
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String qry="select DISTINCT S.CIRNAME,S.DIVNAME,S.subname,S.secname ,R.reg_no,R.category_supply,R.consumer_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN from \r\n" + 
							" N_SAP_EVENTS G,SPDCLMASTER S,REP_FINAL R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') AND R.REG_NO=G.REG_NO AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' and S.subname='" + cscvo.getSubDiv() + "' \r\n" + 
							" AND G.EVENT_BY NOT IN ('RSUB', 'RJTD') "+daystatus+"   ";
					
					System.out.println("export:3:SUB_DIV:23"+qry);
				
					resultSet = statement.executeQuery(qry);						

				} else if ("SEC".equals(cscvo.getFlag())) {

					String qry="select DISTINCT S.CIRNAME,S.DIVNAME,S.subname,S.secname ,R.reg_no,R.category_supply,R.consumer_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN from \r\n" + 
							" N_SAP_EVENTS G,SPDCLMASTER S,REP_FINAL R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') AND R.REG_NO=G.REG_NO AND S.CIRNAME='"+cscvo.getCircle()+"' AND S.DIVNAME='"+cscvo.getDivision()+"' and S.subname='" + cscvo.getSubDiv() + "' and S.secname='" + cscvo.getSec() + "' \r\n" + 
							" AND G.EVENT_BY NOT IN ('RSUB', 'RJTD') "+daystatus+"   ";
					
					System.out.println("export:3:SEC:23"+qry);
				
					resultSet = statement.executeQuery(qry);
					
				} else {
					String qry="select DISTINCT S.CIRNAME,S.DIVNAME,S.subname,S.secname ,R.reg_no,R.category_supply,R.consumer_name,R.reg_date,ceil(sysdate-R.reg_date)PENDING_DAYS_REG,G.sapwbsno,G.remarks,ceil(sysdate-G.EVENT_DATE)PENDING_AT_LOGIN from \r\n" + 
							" N_SAP_EVENTS G,SPDCLMASTER S,REP_FINAL R WHERE G.NCPARTCD=SECCD AND G.REG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE NVL(REJECTED,'Y') <> 'X') AND R.REG_NO=G.REG_NO AND S.CIRNAME='"+cscvo.getCircle()+"' \r\n" + 
							" AND G.EVENT_BY NOT IN ('RSUB', 'RJTD') "+daystatus+"   ";
					
					System.out.println("export:3:cir:23"+qry);
				
					resultSet = statement.executeQuery(qry);
					
				
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCat(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setRel_date(resultSet.getString(9));
						vo.setSapSno(resultSet.getString(10));
						vo.setStatus(resultSet.getString(11));
						vo.setEstatus(resultSet.getString(12));
						

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	
	}
	
	
	
	// REPORT1 
	public CscpayVO getEstimatesPreparedForExtensionDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		/*
		 * if ("Simplified".equalsIgnoreCase(cscvo.getType())) {
		 * 
		 * scsType =
		 * "NVL(ESTSTATUS,'03')='01' AND sladesc='Pending for Service release'  AND USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'"
		 * ; } if ("Deletion".equalsIgnoreCase(cscvo.getType())) { scsType =
		 * " SLADESC='Rejected' AND  NVL(EXTDEM,SAPDEM)=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 "
		 * ; }
		 */

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					
                                    
                            String query="SELECT  NVL(S.DIVNAME,'TOTAL'),COUNT(A.REG_NO)LESS_3,COUNT(B.REG_NO) LESS_7,"
                    		+ " COUNT(C.REG_NO)LESS_15,COUNT(D.REG_NO)LESS_30,COUNT(E.REG_NO)GRA_30,"
                    		+ " COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO) TOTAL "
                    		+ " FROM (SELECT REG_NO,NCPARTCD FROM REP_FINAL"
                    		+ "  WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND "
                    		+ " USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) > '01-JAN-20' AND "
                    		+ " NVL(SAPDEM,0)=0 AND NVL(COLL_APPFEE,0) > 0) R,"
                    		+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <3)A, "
                    		+ "(SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >4 AND CEIL "
                    		+ "(SYSDATE-MAXPRDT) <7)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 "
                    		+ " AND CEIL(SYSDATE-MAXPRDT) <15)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL"
                    		+ " WHERE CEIL(SYSDATE-MAXPRDT) >16 AND CEIL(SYSDATE-MAXPRDT) <30)D, "
                    		+ "(SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 )E,"
                    		+ " (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND"
                    		+ " R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND"
                    		+ " R.NCPARTCD=S.SECCD AND S.CIRNAME=?  GROUP BY ROLLUP(S.DIVNAME) ORDER BY DIVNAME";
                            
                            /*String query="SELECT  NVL(S.DIVNAME,'TOTAL'),COUNT(A.REG_NO)LESS_3,COUNT(B.REG_NO) LESS_7,"
                            		+ " COUNT(C.REG_NO)LESS_15,COUNT(D.REG_NO)LESS_30,COUNT(E.REG_NO)GRA_30,"
                            		+ " COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO) TOTAL "
                            		+ " FROM (SELECT REG_NO,NCPARTCD FROM REP_FINAL"
                            		+ "  WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND "
                            		+ " USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >= '01-JAN-20' AND "
                            		+ " NVL(SAPDEM,0)=0 AND NVL(COLL_APPFEE,0) > 0) R,"
                            		+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <3)A, "
                            		+ "(SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  CEIL "
                            		+ "(SYSDATE-MAXPRDT) <7)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  "
                            		+ "  CEIL(SYSDATE-MAXPRDT) <15)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL"
                            		+ " WHERE  CEIL(SYSDATE-MAXPRDT) <30)D, "
                            		+ "(SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >30 )E,"
                            		+ " (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND"
                            		+ " R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND"
                            		+ " R.NCPARTCD=S.SECCD AND S.CIRNAME=?  GROUP BY ROLLUP(S.DIVNAME) ORDER BY DIVNAME";
                 */
                    
                    
					
                    //System.out.println("div_Extension:"+query);
                    		reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
					
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					 String query="SELECT  NVL(S.SUBNAME,'TOTAL'),COUNT(A.REG_NO)LESS_3,COUNT(B.REG_NO) LESS_7,"
	                    		+ " COUNT(C.REG_NO)LESS_15,COUNT(D.REG_NO)LESS_30,COUNT(E.REG_NO)GRA_30,"
	                    		+ " COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO) TOTAL "
	                    		+ " FROM (SELECT REG_NO,NCPARTCD FROM REP_FINAL"
	                    		+ "  WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND "
	                    		+ " USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) > '01-JAN-20' AND "
	                    		+ " NVL(SAPDEM,0)=0 AND NVL(COLL_APPFEE,0) > 0) R,"
	                    		+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <3)A, "
	                    		+ "(SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >4 AND CEIL "
	                    		+ "(SYSDATE-MAXPRDT) <7)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 "
	                    		+ " AND CEIL(SYSDATE-MAXPRDT) <15)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL"
	                    		+ " WHERE CEIL(SYSDATE-MAXPRDT) >16 AND CEIL(SYSDATE-MAXPRDT) <30)D, "
	                    		+ "(SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 )E,"
	                    		+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND"
	                    		+ " R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND"
	                    		+ " R.NCPARTCD=S.SECCD AND S.CIRNAME=? AND S.DIVNAME=?  GROUP BY ROLLUP(S.SUBNAME) ORDER BY SUBNAME";
	
					/*String query ="SELECT  NVL(S.SUBNAME,'TOTAL'),COUNT(A.REG_NO)LESS_3,COUNT(B.REG_NO) LESS_7,COUNT(C.REG_NO)LESS_15,COUNT(D.REG_NO)LESS_30,COUNT(E.REG_NO)GRA_30,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO) TOTAL FROM (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >= '01-JAN-20' AND NVL(SAPDEM,0)=0 AND NVL(COLL_APPFEE,0) > 0) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <3)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  CEIL(SYSDATE-MAXPRDT) <7)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  CEIL(SYSDATE-MAXPRDT) <15)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  CEIL(SYSDATE-MAXPRDT) <30)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >30 )E, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.NCPARTCD=S.SECCD AND S.CIRNAME=? AND DIVNAME=? " + " GROUP BY ROLLUP(S.SUBNAME) ORDER BY SUBNAME";
*/					
					
					/*String query = "SELECT NVL(S.SUBNAME,'TOTAL'),COUNT(A.REG_NO)LESS_3,COUNT(B.REG_NO) LESS_7,COUNT(C.REG_NO)LESS_15,COUNT(D.REG_NO)LESS_30,COUNT(E.REG_NO)GRA_30,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO) TOTAL FROM"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >'01-JAN-20'"
							+ " AND REG_NO NOT IN (SELECT REG_NO FROM SAPESTDEMAND ) AND NVL(COLL_APPFEE,0) > 0) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) <=3)A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) >4 AND CEIL(SYSDATE-REG_DATE) <=7)B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) >8 AND CEIL(SYSDATE-REG_DATE) <=15)C,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) >16 AND CEIL(SYSDATE-REG_DATE) <=30)D,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) >31 )E,"
							+ " (SELECT CIRNAME,DIVNAME, SUBNAME,SECCD FROM SPDCLMASTER )S,"
							+ " (SELECT CSCREG_NO,GRPAPPNUM FROM SAPGROUPS WHERE GRPAPPNUM NOT IN (SELECT REG_NO FROM SAPESTDEMAND WHERE SUBSTR(REG_NO,6,1)='G') AND CSCREG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >'01-JAN-20'))G"
							+ " WHERE R.REG_NO=A.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)"
							+ " AND R.REG_NO=D.REG_NO(+)" + " AND R.REG_NO=E.REG_NO(+)" + " AND R.REG_NO=G.CSCREG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD AND S.CIRNAME=? AND DIVNAME=? " + " GROUP BY ROLLUP(S.SUBNAME)";
					*/
					reportPStmt = con.prepareStatement(query);
					//System.out.println("sub_div_Extension:"+query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {
					 
					String query="SELECT  NVL(S.SECNAME,'TOTAL'),COUNT(A.REG_NO)LESS_3,COUNT(B.REG_NO) LESS_7,"
                    		+ " COUNT(C.REG_NO)LESS_15,COUNT(D.REG_NO)LESS_30,COUNT(E.REG_NO)GRA_30,"
                    		+ " COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO) TOTAL "
                    		+ " FROM (SELECT REG_NO,NCPARTCD FROM REP_FINAL"
                    		+ "  WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND "
                    		+ " USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >= '01-JAN-20' AND "
                    		+ " NVL(SAPDEM,0)=0 AND NVL(COLL_APPFEE,0) > 0) R,"
                    		+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <3)A, "
                    		+ "(SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >4 AND CEIL "
                    		+ "(SYSDATE-MAXPRDT) <7)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 "
                    		+ " AND CEIL(SYSDATE-MAXPRDT) <15)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL"
                    		+ " WHERE CEIL(SYSDATE-MAXPRDT) >16 AND CEIL(SYSDATE-MAXPRDT) <30)D, "
                    		+ "(SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 )E,"
                    		+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND"
                    		+ " R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND"
                    		+ " R.NCPARTCD=S.SECCD AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=? GROUP BY ROLLUP(S.SECNAME) ORDER BY SECNAME";
					
					/*String query="SELECT  NVL(S.SECNAME,'TOTAL'),COUNT(A.REG_NO)LESS_3,COUNT(B.REG_NO) LESS_7,COUNT(C.REG_NO)LESS_15,COUNT(D.REG_NO)LESS_30,COUNT(E.REG_NO)GRA_30,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO) TOTAL FROM (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >= '01-JAN-20' AND NVL(SAPDEM,0)=0 AND NVL(COLL_APPFEE,0) > 0) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <3)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  CEIL(SYSDATE-MAXPRDT) <7)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  CEIL(SYSDATE-MAXPRDT) <15)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  CEIL(SYSDATE-MAXPRDT) <30)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >30 )E, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.NCPARTCD=S.SECCD AND S.CIRNAME=? AND DIVNAME=? AND SUBNAME=?  " + " GROUP BY ROLLUP(S.SECNAME) ORDER BY SECNAME";*/
					
					/*String query = "SELECT NVL(S.SECNAME,'TOTAL'),COUNT(A.REG_NO)LESS_3,COUNT(B.REG_NO) LESS_7,COUNT(C.REG_NO)LESS_15,COUNT(D.REG_NO)LESS_30,COUNT(E.REG_NO)GRA_30,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO) TOTAL FROM"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >'01-JAN-20'"
							+ " AND REG_NO NOT IN (SELECT REG_NO FROM SAPESTDEMAND ) AND NVL(COLL_APPFEE,0) > 0) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) <=3)A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) >4 AND CEIL(SYSDATE-REG_DATE) <=7)B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) >8 AND CEIL(SYSDATE-REG_DATE) <=15)C,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) >16 AND CEIL(SYSDATE-REG_DATE) <=30)D,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) >31 )E,"
							+ " (SELECT CIRNAME,DIVNAME,SUBNAME, SECNAME,SECCD FROM SPDCLMASTER )S,"
							+ " (SELECT CSCREG_NO,GRPAPPNUM FROM SAPGROUPS WHERE GRPAPPNUM NOT IN (SELECT REG_NO FROM SAPESTDEMAND WHERE SUBSTR(REG_NO,6,1)='G') AND CSCREG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >'01-JAN-20'))G"
							+ " WHERE R.REG_NO=A.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)"
							+ " AND R.REG_NO=D.REG_NO(+)" + " AND R.REG_NO=E.REG_NO(+)" + " AND R.REG_NO=G.CSCREG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD AND S.CIRNAME=? AND DIVNAME=? AND  SUBNAME=?  "
							+ " GROUP BY ROLLUP(S.SECNAME)";
*/					
					 reportPStmt = con.prepareStatement(query);
                    // System.out.println("sec_Extension:"+query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();
					//System.out.println("sec_Extension:"+query);

				} else {
					String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)LESS_3,COUNT(B.REG_NO) LESS_7,COUNT(C.REG_NO)LESS_15,COUNT(D.REG_NO)LESS_30,COUNT(E.REG_NO)GRA_30,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO) TOTAL FROM (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) > '01-JAN-20' AND NVL(SAPDEM,0)=0 AND NVL(COLL_APPFEE,0) > 0) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <3)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >4 AND CEIL(SYSDATE-MAXPRDT) <7)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <15)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >16 AND CEIL(SYSDATE-MAXPRDT) <30)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 )E, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.NCPARTCD=S.SECCD GROUP BY ROLLUP(S.CIRNAME) ORDER BY CIRNAME";

					 
					/*String query = "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)LESS_3,COUNT(B.REG_NO) LESS_7,COUNT(C.REG_NO)LESS_15,COUNT(D.REG_NO)LESS_30,COUNT(E.REG_NO)GRA_30,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO) TOTAL FROM"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >'01-JAN-20'"
							+ " AND REG_NO NOT IN (SELECT REG_NO FROM SAPESTDEMAND ) AND NVL(COLL_APPFEE,0) > 0) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) <=3)A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) >4 AND CEIL(SYSDATE-REG_DATE) <=7)B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) >8 AND CEIL(SYSDATE-REG_DATE) <=15)C,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) >16 AND CEIL(SYSDATE-REG_DATE) <=30)D,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-REG_DATE) >31 )E,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S,"
							+ " (SELECT CSCREG_NO,GRPAPPNUM FROM SAPGROUPS WHERE GRPAPPNUM NOT IN (SELECT REG_NO FROM SAPESTDEMAND WHERE SUBSTR(REG_NO,6,1)='G') AND CSCREG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >'01-JAN-20'))G"
							+ " WHERE R.REG_NO=A.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)"
							+ " AND R.REG_NO=D.REG_NO(+)" + " AND R.REG_NO=E.REG_NO(+)" + " AND R.REG_NO=G.CSCREG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD" + " GROUP BY ROLLUP(S.CIRNAME)";*/
					
					
					/*String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)LESS_3,COUNT(B.REG_NO) LESS_7,COUNT(C.REG_NO)LESS_15,COUNT(D.REG_NO)LESS_30,COUNT(E.REG_NO)GRA_30,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO) TOTAL FROM (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >= '01-JAN-20' AND NVL(SAPDEM,0)=0 AND NVL(COLL_APPFEE,0) > 0) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=3)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  CEIL(SYSDATE-MAXPRDT) >=4 AND CEIL(SYSDATE-MAXPRDT) <=7)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=15)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  CEIL(SYSDATE-MAXPRDT) >=16 AND CEIL(SYSDATE-MAXPRDT) <=30)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 )E, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S (SELECT CSCREG_NO,GRPAPPNUM FROM SAPGROUPS WHERE GRPAPPNUM NOT IN (SELECT REG_NO FROM SAPESTDEMAND WHERE SUBSTR(REG_NO,6,1)='G') AND CSCREG_NO IN (SELECT REG_NO FROM REP_FINAL WHERE CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >='01-JAN-20'))G WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=G.CSCREG_NO(+) AND R.NCPARTCD=S.SECCD GROUP BY S.CIRNAME ORDER BY CIRNAME";
*/					

					reportPStmt = con.prepareStatement(query);
					//System.out.println("All_REPORT1:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
							dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
							dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

							dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
							dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
							// dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

							// dmapobj.setWrt(reportRst.getString(8));
							// dmapobj.setBeyondReleased(reportRst.getString(9));
							dmapobj.setTot_pen(reportRst.getString(7));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
							dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
							dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

							dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
							dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
							// dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

							// dmapobj.setWrt(reportRst.getString(8));
							// dmapobj.setBeyondReleased(reportRst.getString(9));
							dmapobj.setTot_pen(reportRst.getString(7));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	
	
	//REPORT 4 NEW
	public CscpayVO getServicesTobeRelForPaidCasesDetails_Simplified_Del(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException{
				PreparedStatement reportPStmt = null;
				ResultSet reportRst = null;
				String ltcat = "";
				String scsType = "";

				Calendar c = Calendar.getInstance();
				int curr_year = c.get(Calendar.YEAR);
				int curr_month = c.get(Calendar.MONTH) + 1;

				List<CscpayVO> dashList = new ArrayList<CscpayVO>();
				
				Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

				Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
				try {
					if (con != null) {

						if ("DIV".equals(cscvo.getFlag())) {
							
							String query="SELECT NVL(S.DIVNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) > 7 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') AND S.CIRNAME=?  GROUP BY ROLLUP(S.DIVNAME) ORDER BY DIVNAME";
							//String query="SELECT  NVL(S.DIVNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') AND S.CIRNAME=?  GROUP BY ROLLUP(S.DIVNAME) ORDER BY DIVNAME";
							
							reportPStmt = con.prepareStatement(query);

							reportPStmt.setString(1, cscvo.getCircle());
							// reportPStmt.setString(2, chkVO.getCirname());

							reportRst = reportPStmt.executeQuery();
						} else if ("SUB_DIV".equals(cscvo.getFlag())) {
							
							String query="SELECT NVL(S.SUBNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) > 7 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') AND S.CIRNAME=? AND S.DIVNAME=?  GROUP BY ROLLUP(S.SUBNAME) ORDER BY SUBNAME";

							//String query="SELECT  NVL(S.SUBNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') AND S.CIRNAME=? AND S.DIVNAME=?  GROUP BY ROLLUP(S.SUBNAME) ORDER BY SUBNAME";
							reportPStmt = con.prepareStatement(query);

								reportPStmt.setString(1, cscvo.getCircle());
							reportPStmt.setString(2, cscvo.getDivision());

							reportRst = reportPStmt.executeQuery();
							// //System.out.println.println("sub");
						} else if ("SEC".equals(cscvo.getFlag())) {
							String query="SELECT NVL(S.SECNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) > 7 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?  GROUP BY ROLLUP(S.SECNAME) ORDER BY SECNAME";

							//String query="SELECT  NVL(S.SECNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?  GROUP BY ROLLUP(S.SECNAME) ORDER BY SECNAME";
							reportPStmt = con.prepareStatement(query);

							reportPStmt.setString(1, cscvo.getCircle());
							reportPStmt.setString(2, cscvo.getDivision());
							reportPStmt.setString(3, cscvo.getSubDiv());

							reportRst = reportPStmt.executeQuery();

						} else {
							
							String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) > 7 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY ROLLUP(S.CIRNAME) ORDER BY CIRNAME";
							//String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY ROLLUP(S.CIRNAME) ORDER BY CIRNAME";
								

							reportPStmt = con.prepareStatement(query);
							reportRst = reportPStmt.executeQuery();
							//System.out.println("simplified_Del:"+query);
						}
						if (reportRst != null) {
							while (reportRst.next()) {

								if (cscmap.containsKey(reportRst.getString(1))) {
									CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

									dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
									dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
									dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

									dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
									dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
									dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

									dmapobj.setWrt(reportRst.getString(8));
									dmapobj.setBeyondReleased(reportRst.getString(9));
									dmapobj.setTot_pen(reportRst.getString(10));

								} else {
									CscpayVO dmapobj = new CscpayVO();

									dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
									dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
									dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

									dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
									dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
									dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

									dmapobj.setWrt(reportRst.getString(8));
									dmapobj.setBeyondReleased(reportRst.getString(9));
									dmapobj.setTot_pen(reportRst.getString(10));
									cscmap.put(reportRst.getString(1), dmapobj);
								}
							}
							cscvo.setCscpaymap(cscmap);

						}

					} else {
						throw new DatabaseFailureException(
								"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
					}
				} finally {
					try {
						if (con != null) {

							DBConnectionManager.getInstance().freeConnection(con);
							con.close();
						}
						if (reportPStmt != null)
							reportPStmt.close();
						if (reportRst != null)
							reportRst.close();
					} catch (Exception ex) {
						ex.printStackTrace();
					}
				}
				return cscvo;
				}

	
	public CscpayVO getServicesTobeRelForPaidCasesDetails_Simplified_Live(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException{
				PreparedStatement reportPStmt = null;
				ResultSet reportRst = null;
				String ltcat = "";
				String scsType = "";

				Calendar c = Calendar.getInstance();
				int curr_year = c.get(Calendar.YEAR);
				int curr_month = c.get(Calendar.MONTH) + 1;

				List<CscpayVO> dashList = new ArrayList<CscpayVO>();
				
				Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

				Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
				try {
					if (con != null) {

						if ("DIV".equals(cscvo.getFlag())) {
							String query="SELECT NVL(S.DIVNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >7 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') AND S.CIRNAME=?  GROUP BY ROLLUP(S.DIVNAME) ORDER BY DIVNAME";
							//String query="SELECT  NVL(S.DIVNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') AND S.CIRNAME=?  GROUP BY ROLLUP(S.DIVNAME) ORDER BY DIVNAME";
							
							reportPStmt = con.prepareStatement(query);

							reportPStmt.setString(1, cscvo.getCircle());
							// reportPStmt.setString(2, chkVO.getCirname());

							reportRst = reportPStmt.executeQuery();
						} else if ("SUB_DIV".equals(cscvo.getFlag())) {
							String query="SELECT NVL(S.SUBNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >7 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') AND S.CIRNAME=? AND S.DIVNAME=?  GROUP BY ROLLUP(S.SUBNAME) ORDER BY SUBNAME";
							//String query="SELECT  NVL(S.SUBNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') AND S.CIRNAME=? AND S.DIVNAME=?  GROUP BY ROLLUP(S.SUBNAME) ORDER BY SUBNAME";
							reportPStmt = con.prepareStatement(query);

							reportPStmt.setString(1, cscvo.getCircle());
							reportPStmt.setString(2, cscvo.getDivision());

							reportRst = reportPStmt.executeQuery();
							// //System.out.println.println("sub");
						} else if ("SEC".equals(cscvo.getFlag())) {
							String query="SELECT NVL(S.SECNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >7 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?  GROUP BY ROLLUP(S.SECNAME) ORDER BY SECNAME";
							//String query="SELECT  NVL(S.SECNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?  GROUP BY ROLLUP(S.SECNAME) ORDER BY SECNAME";
							reportPStmt = con.prepareStatement(query);

							reportPStmt.setString(1, cscvo.getCircle());
							reportPStmt.setString(2, cscvo.getDivision());
							reportPStmt.setString(3, cscvo.getSubDiv());

							reportRst = reportPStmt.executeQuery();

						} else {
							String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >7 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY ROLLUP(S.CIRNAME) ORDER BY CIRNAME";
							//String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY ROLLUP(S.CIRNAME) ORDER BY CIRNAME";
							

							reportPStmt = con.prepareStatement(query);
							reportRst = reportPStmt.executeQuery();
							//System.out.println("simplified_live:"+query);
						}
						if (reportRst != null) {
							while (reportRst.next()) {

								if (cscmap.containsKey(reportRst.getString(1))) {
									CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

									dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
									dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
									dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

									dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
									dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
									dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

									dmapobj.setWrt(reportRst.getString(8));
									dmapobj.setBeyondReleased(reportRst.getString(9));
									dmapobj.setTot_pen(reportRst.getString(10));

								} else {
									CscpayVO dmapobj = new CscpayVO();

									dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
									dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
									dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

									dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
									dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
									dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

									dmapobj.setWrt(reportRst.getString(8));
									dmapobj.setBeyondReleased(reportRst.getString(9));
									dmapobj.setTot_pen(reportRst.getString(10));
									cscmap.put(reportRst.getString(1), dmapobj);
								}
							}
							cscvo.setCscpaymap(cscmap);

						}

					} else {
						throw new DatabaseFailureException(
								"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
					}
				} finally {
					try {
						if (con != null) {

							DBConnectionManager.getInstance().freeConnection(con);
							con.close();
						}
						if (reportPStmt != null)
							reportPStmt.close();
						if (reportRst != null)
							reportRst.close();
					} catch (Exception ex) {
						ex.printStackTrace();
					}
				}
				return cscvo;
				}

	public CscpayVO getServicesTobeRelForPaidCasesDetails_Simplified_All(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException{
				PreparedStatement reportPStmt = null;
				ResultSet reportRst = null;
				String ltcat = "";
				String scsType = "";

				Calendar c = Calendar.getInstance();
				int curr_year = c.get(Calendar.YEAR);
				int curr_month = c.get(Calendar.MONTH) + 1;

				List<CscpayVO> dashList = new ArrayList<CscpayVO>();
				
				Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

				Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
				try {
					if (con != null) {

						if ("DIV".equals(cscvo.getFlag())) {
							String query="SELECT  NVL(DIVNAME,'TOTAL'),SUM(LESS_7) LESS_7,SUM(LESS_30) LESS_30,SUM(GRA_30)GRA_30,SUM(GRA_45)GRA_45,SUM(GRA_60) GRA_60,SUM(GRA_90)GRA_90,SUM(WRT) WRT,SUM(BRT) BRT,SUM(LESS_7+LESS_30+GRA_30+GRA_45+GRA_60+GRA_90+WRT+BRT) TOTAL FROM (SELECT S.CIRNAME,COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY S.CIRNAME UNION SELECT S.CIRNAME,COUNT(F.REG_NO)LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <=89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7 )F, (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=?  GROUP BY S.DIVNAME) GROUP BY ROLLUP(DIVNAME) ORDER BY DIVNAME";
							
							reportPStmt = con.prepareStatement(query);

							reportPStmt.setString(1, cscvo.getCircle());
							// reportPStmt.setString(2, chkVO.getCirname());

							reportRst = reportPStmt.executeQuery();
						} else if ("SUB_DIV".equals(cscvo.getFlag())) {
							String query="SELECT  NVL(SUBNAME,'TOTAL'),SUM(LESS_7) LESS_7,SUM(LESS_30) LESS_30,SUM(GRA_30)GRA_30,SUM(GRA_45)GRA_45,SUM(GRA_60) GRA_60,SUM(GRA_90)GRA_90,SUM(WRT) WRT,SUM(BRT) BRT,SUM(LESS_7+LESS_30+GRA_30+GRA_45+GRA_60+GRA_90+WRT+BRT) TOTAL FROM (SELECT S.CIRNAME,COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY S.CIRNAME UNION SELECT S.CIRNAME,COUNT(F.REG_NO)LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=? AND S.DIVNAME=?  GROUP BY S.SUBNAME) GROUP BY ROLLUP(SUBNAME) ORDER BY SUBNAME";
							
							reportPStmt = con.prepareStatement(query);

							
							reportPStmt.setString(1, cscvo.getCircle());
							reportPStmt.setString(2, cscvo.getDivision());

							reportRst = reportPStmt.executeQuery();
							// //System.out.println.println("sub");
						} else if ("SEC".equals(cscvo.getFlag())) {
							String query="SELECT  NVL(SECNAME,'TOTAL'),SUM(LESS_7) LESS_7,SUM(LESS_30) LESS_30,SUM(GRA_30)GRA_30,SUM(GRA_45)GRA_45,SUM(GRA_60) GRA_60,SUM(GRA_90)GRA_90,SUM(WRT) WRT,SUM(BRT) BRT,SUM(LESS_7+LESS_30+GRA_30+GRA_45+GRA_60+GRA_90+WRT+BRT) TOTAL FROM (SELECT S.CIRNAME,COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY S.CIRNAME UNION SELECT S.CIRNAME,COUNT(F.REG_NO)LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?  GROUP BY S.SECNAME) GROUP BY ROLLUP(SECNAME) ORDER BY SECNAME";
							reportPStmt = con.prepareStatement(query);

							reportPStmt.setString(1, cscvo.getCircle());
							reportPStmt.setString(2, cscvo.getDivision());
							reportPStmt.setString(3, cscvo.getSubDiv());

							reportRst = reportPStmt.executeQuery();

						} else {
							
							String query="SELECT  NVL(CIRNAME,'TOTAL'),SUM(LESS_7) LESS_7,SUM(LESS_30) LESS_30,SUM(GRA_30)GRA_30,SUM(GRA_45)GRA_45,SUM(GRA_60) GRA_60,SUM(GRA_90)GRA_90,SUM(WRT) WRT,SUM(BRT) BRT,SUM(LESS_7+LESS_30+GRA_30+GRA_45+GRA_60+GRA_90+WRT+BRT) TOTAL FROM (SELECT S.CIRNAME,COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY S.CIRNAME UNION SELECT S.CIRNAME,COUNT(F.REG_NO)LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') GROUP BY S.CIRNAME) GROUP BY ROLLUP(CIRNAME) ORDER BY CIRNAME";
							
							reportPStmt = con.prepareStatement(query);
							reportRst = reportPStmt.executeQuery();
							//System.out.println("simplified_All:"+query);
						}
						if (reportRst != null) {
							while (reportRst.next()) {

								if (cscmap.containsKey(reportRst.getString(1))) {
									CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

									dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
									dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
									dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

									dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
									dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
									dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

									dmapobj.setWrt(reportRst.getString(8));
									dmapobj.setBeyondReleased(reportRst.getString(9));
									dmapobj.setTot_pen(reportRst.getString(10));

								} else {
									CscpayVO dmapobj = new CscpayVO();

									dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
									dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
									dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

									dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
									dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
									dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

									dmapobj.setWrt(reportRst.getString(8));
									dmapobj.setBeyondReleased(reportRst.getString(9));
									dmapobj.setTot_pen(reportRst.getString(10));
									cscmap.put(reportRst.getString(1), dmapobj);
								}
							}
							cscvo.setCscpaymap(cscmap);

						}

					} else {
						throw new DatabaseFailureException(
								"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
					}
				} finally {
					try {
						if (con != null) {

							DBConnectionManager.getInstance().freeConnection(con);
							con.close();
						}
						if (reportPStmt != null)
							reportPStmt.close();
						if (reportRst != null)
							reportRst.close();
					} catch (Exception ex) {
						ex.printStackTrace();
					}
				}
				return cscvo;
				}

	
	public CscpayVO getServicesTobeRelForPaidCasesDetails_Extension_Del(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException{
	PreparedStatement reportPStmt = null;
	ResultSet reportRst = null;
	String ltcat = "";
	String scsType = "";

	Calendar c = Calendar.getInstance();
	int curr_year = c.get(Calendar.YEAR);
	int curr_month = c.get(Calendar.MONTH) + 1;

	List<CscpayVO> dashList = new ArrayList<CscpayVO>();
	
	Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

	Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
	try {
		if (con != null) {

			if ("DIV".equals(cscvo.getFlag())) {
				
				String query="SELECT NVL(S.DIVNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=?  GROUP BY ROLLUP(S.DIVNAME) ORDER BY DIVNAME";
				
				//String query="SELECT NVL(S.DIVNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=?  GROUP BY ROLLUP(S.DIVNAME) ORDER BY DIVNAME";
				
				
				reportPStmt = con.prepareStatement(query);

				reportPStmt.setString(1, cscvo.getCircle());
				// reportPStmt.setString(2, chkVO.getCirname());

				reportRst = reportPStmt.executeQuery();
			} else if ("SUB_DIV".equals(cscvo.getFlag())) {
				
				String query="SELECT NVL(S.SUBNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=? AND S.DIVNAME=?  GROUP BY ROLLUP(S.SUBNAME) ORDER BY SUBNAME";
				//String query="SELECT NVL(S.SUBNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=? AND S.DIVNAME=?  GROUP BY ROLLUP(S.SUBNAME) ORDER BY SUBNAME";
				reportPStmt = con.prepareStatement(query);

				// reportPStmt.setString(1, month + "-" +
				// String.valueOf(curr_year));
				// reportPStmt.setString(2, chkVO.getCirname());
				// reportPStmt.setString(3, chkVO.getDivname());
				reportPStmt.setString(1, cscvo.getCircle());
				reportPStmt.setString(2, cscvo.getDivision());

				reportRst = reportPStmt.executeQuery();
				// //System.out.println.println("sub");
			} else if ("SEC".equals(cscvo.getFlag())) {
				
				String query="SELECT NVL(S.SECNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?  GROUP BY ROLLUP(S.SECNAME) ORDER BY SECNAME";
				//String query="SELECT NVL(S.SECNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?  GROUP BY ROLLUP(S.SECNAME) ORDER BY SECNAME";
				reportPStmt = con.prepareStatement(query);

				reportPStmt.setString(1, cscvo.getCircle());
				reportPStmt.setString(2, cscvo.getDivision());
				reportPStmt.setString(3, cscvo.getSubDiv());

				reportRst = reportPStmt.executeQuery();

			} else {

				String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') GROUP BY  ROLLUP(S.CIRNAME) ORDER BY CIRNAME";
				//String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') GROUP BY ROLLUP(S.CIRNAME) ORDER BY CIRNAME";
				

				reportPStmt = con.prepareStatement(query);
				//System.out.println("Extension_Deleted:"+query);
				reportRst = reportPStmt.executeQuery();
			}
			if (reportRst != null) {
				while (reportRst.next()) {

					if (cscmap.containsKey(reportRst.getString(1))) {
						CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

						dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
						dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
						dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

						dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
						dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
						dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

						dmapobj.setWrt(reportRst.getString(8));
						dmapobj.setBeyondReleased(reportRst.getString(9));
						dmapobj.setTot_pen(reportRst.getString(10));

					} else {
						CscpayVO dmapobj = new CscpayVO();

						dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
						dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
						dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

						dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
						dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
						dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

						dmapobj.setWrt(reportRst.getString(8));
						dmapobj.setBeyondReleased(reportRst.getString(9));
						dmapobj.setTot_pen(reportRst.getString(10));
						cscmap.put(reportRst.getString(1), dmapobj);
					}
				}
				cscvo.setCscpaymap(cscmap);

			}

		} else {
			throw new DatabaseFailureException(
					"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
		}
	} finally {
		try {
			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (reportPStmt != null)
				reportPStmt.close();
			if (reportRst != null)
				reportRst.close();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	return cscvo;
	}
	

	public CscpayVO getServicesTobeRelForPaidCasesDetails_Extension_Live(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException{
	PreparedStatement reportPStmt = null;
	ResultSet reportRst = null;
	String ltcat = "";
	String scsType = "";

	Calendar c = Calendar.getInstance();
	int curr_year = c.get(Calendar.YEAR);
	int curr_month = c.get(Calendar.MONTH) + 1;

	List<CscpayVO> dashList = new ArrayList<CscpayVO>();
	
	Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

	Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
	try {
		if (con != null) {

			if ("DIV".equals(cscvo.getFlag())) {
				
				String query="SELECT NVL(S.DIVNAME,'TOTAL'),COUNT(F.REG_NO) LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 )F, (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=?  GROUP BY ROLLUP(S.DIVNAME) ORDER BY DIVNAME";
				//String query="SELECT NVL(S.DIVNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=?  GROUP BY ROLLUP(S.DIVNAME) ORDER BY DIVNAME";
				
				reportPStmt = con.prepareStatement(query);

				reportPStmt.setString(1, cscvo.getCircle());
				// reportPStmt.setString(2, chkVO.getCirname());

				reportRst = reportPStmt.executeQuery();
			} else if ("SUB_DIV".equals(cscvo.getFlag())) {
				
				String query="SELECT NVL(S.SUBNAME,'TOTAL'),COUNT(F.REG_NO) LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=? AND S.DIVNAME=?  GROUP BY ROLLUP(S.SUBNAME) ORDER BY SUBNAME";
				
				//String query="SELECT NVL(S.SUBNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=? AND S.DIVNAME=?  GROUP BY ROLLUP(S.SUBNAME) ORDER BY SUBNAME";
				
				reportPStmt = con.prepareStatement(query);

				// reportPStmt.setString(1, month + "-" +
				// String.valueOf(curr_year));
				// reportPStmt.setString(2, chkVO.getCirname());
				// reportPStmt.setString(3, chkVO.getDivname());
				reportPStmt.setString(1, cscvo.getCircle());
				reportPStmt.setString(2, cscvo.getDivision());

				reportRst = reportPStmt.executeQuery();
				// //System.out.println.println("sub");
			} else if ("SEC".equals(cscvo.getFlag())) {
				 
				String query="SELECT NVL(S.SECNAME,'TOTAL'),COUNT(F.REG_NO) LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?  GROUP BY ROLLUP(S.SECNAME) ORDER BY SECNAME";
				//String query="SELECT NVL(S.SECNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?  GROUP BY ROLLUP(S.SECNAME) ORDER BY SECNAME";
				reportPStmt = con.prepareStatement(query);

				reportPStmt.setString(1, cscvo.getCircle());
				reportPStmt.setString(2, cscvo.getDivision());
				reportPStmt.setString(3, cscvo.getSubDiv());

				reportRst = reportPStmt.executeQuery();

			} else {
				String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(F.REG_NO) LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') GROUP BY ROLLUP(S.CIRNAME) ORDER BY CIRNAME";
				
				//String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') GROUP BY ROLLUP(S.CIRNAME) ORDER BY CIRNAME";
				
				reportPStmt = con.prepareStatement(query);
				reportRst = reportPStmt.executeQuery();
				//System.out.println("Extension_Live:"+query);
			}
			if (reportRst != null) {
				while (reportRst.next()) {

					if (cscmap.containsKey(reportRst.getString(1))) {
						CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

						dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
						dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
						dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

						dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
						dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
						dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

						dmapobj.setWrt(reportRst.getString(8));
						dmapobj.setBeyondReleased(reportRst.getString(9));
						dmapobj.setTot_pen(reportRst.getString(10));

					} else {
						CscpayVO dmapobj = new CscpayVO();

						dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
						dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
						dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

						dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
						dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
						dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

						dmapobj.setWrt(reportRst.getString(8));
						dmapobj.setBeyondReleased(reportRst.getString(9));
						dmapobj.setTot_pen(reportRst.getString(10));
						cscmap.put(reportRst.getString(1), dmapobj);
					}
				}
				cscvo.setCscpaymap(cscmap);

			}

		} else {
			throw new DatabaseFailureException(
					"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
		}
	} finally {
		try {
			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (reportPStmt != null)
				reportPStmt.close();
			if (reportRst != null)
				reportRst.close();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	return cscvo;
	}

	
	public CscpayVO getServicesTobeRelForPaidCasesDetails_Extension_All(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException{
	PreparedStatement reportPStmt = null;
	ResultSet reportRst = null;
	String ltcat = "";
	String scsType = "";

	Calendar c = Calendar.getInstance();
	int curr_year = c.get(Calendar.YEAR);
	int curr_month = c.get(Calendar.MONTH) + 1;

	List<CscpayVO> dashList = new ArrayList<CscpayVO>();
	
	Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

	Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
	try {
		if (con != null) {

			if ("DIV".equals(cscvo.getFlag())) {
				
				String query="SELECT NVL(DIVNAME,'TOTAL'),SUM(LESS_7) LESS_7,SUM(LESS_30) LESS_30,SUM(GRA_30)GRA_30,SUM(GRA_45)GRA_45,SUM(GRA_60) GRA_60,SUM(GRA_90)GRA_90,SUM(WRT) WRT,SUM(BRT) BRT,SUM(LESS_7+LESS_30+GRA_30+GRA_45+GRA_60+GRA_90+WRT+BRT) TOTAL FROM (SELECT S.CIRNAME,COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY S.CIRNAME UNION SELECT S.CIRNAME,COUNT(F.REG_NO)LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7 )F, (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=?  GROUP BY S.DIVNAME) GROUP BY ROLLUP(DIVNAME) ORDER BY DIVNAME";

				
				reportPStmt = con.prepareStatement(query);

				reportPStmt.setString(1, cscvo.getCircle());
				// reportPStmt.setString(2, chkVO.getCirname());

				reportRst = reportPStmt.executeQuery();
			} else if ("SUB_DIV".equals(cscvo.getFlag())) {
				
				String query="SELECT NVL(SUBNAME,'TOTAL'),SUM(LESS_7) LESS_7,SUM(LESS_30) LESS_30,SUM(GRA_30)GRA_30,SUM(GRA_45)GRA_45,SUM(GRA_60) GRA_60,SUM(GRA_90)GRA_90,SUM(WRT) WRT,SUM(BRT) BRT,SUM(LESS_7+LESS_30+GRA_30+GRA_45+GRA_60+GRA_90+WRT+BRT) TOTAL FROM (SELECT S.CIRNAME,COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY S.CIRNAME UNION SELECT S.CIRNAME,COUNT(F.REG_NO)LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=? AND S.DIVNAME=?  GROUP BY S.SUBNAME) GROUP BY ROLLUP(SUBNAME) ORDER BY SUBNAME";
				reportPStmt = con.prepareStatement(query);

				// reportPStmt.setString(1, month + "-" +
				// String.valueOf(curr_year));
				// reportPStmt.setString(2, chkVO.getCirname());
				// reportPStmt.setString(3, chkVO.getDivname());
				reportPStmt.setString(1, cscvo.getCircle());
				reportPStmt.setString(2, cscvo.getDivision());

				reportRst = reportPStmt.executeQuery();
				// //System.out.println.println("sub");
			} else if ("SEC".equals(cscvo.getFlag())) {
				
				String query="SELECT NVL(SECNAME,'TOTAL'),SUM(LESS_7) LESS_7,SUM(LESS_30) LESS_30,SUM(GRA_30)GRA_30,SUM(GRA_45)GRA_45,SUM(GRA_60) GRA_60,SUM(GRA_90)GRA_90,SUM(WRT) WRT,SUM(BRT) BRT,SUM(LESS_7+LESS_30+GRA_30+GRA_45+GRA_60+GRA_90+WRT+BRT) TOTAL FROM (SELECT S.CIRNAME,COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY S.CIRNAME UNION SELECT S.CIRNAME,COUNT(F.REG_NO)LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?  GROUP BY S.SUBNAME) GROUP BY ROLLUP(SECNAME) ORDER BY SECNAME";
				reportPStmt = con.prepareStatement(query);

				reportPStmt.setString(1, cscvo.getCircle());
				reportPStmt.setString(2, cscvo.getDivision());
				reportPStmt.setString(3, cscvo.getSubDiv());

				reportRst = reportPStmt.executeQuery();

			} else {
				
				String query="SELECT NVL(CIRNAME,'TOTAL'),SUM(LESS_7) LESS_7,SUM(LESS_30) LESS_30,SUM(GRA_30)GRA_30,SUM(GRA_45)GRA_45,SUM(GRA_60) GRA_60,SUM(GRA_90)GRA_90,SUM(WRT) WRT,SUM(BRT) BRT,SUM(LESS_7+LESS_30+GRA_30+GRA_45+GRA_60+GRA_90+WRT+BRT) TOTAL FROM (SELECT S.CIRNAME,COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY S.CIRNAME UNION SELECT S.CIRNAME,COUNT(F.REG_NO)LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') GROUP BY S.CIRNAME) GROUP BY ROLLUP(CIRNAME) ORDER BY CIRNAME";
				
				reportPStmt = con.prepareStatement(query);
				//System.out.println("Extension_All:"+query);
				reportRst = reportPStmt.executeQuery();
			}
			if (reportRst != null) {
				while (reportRst.next()) {

					if (cscmap.containsKey(reportRst.getString(1))) {
						CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

						dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
						dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
						dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

						dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
						dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
						dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

						dmapobj.setWrt(reportRst.getString(8));
						dmapobj.setBeyondReleased(reportRst.getString(9));
						dmapobj.setTot_pen(reportRst.getString(10));

					} else {
						CscpayVO dmapobj = new CscpayVO();

						dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
						dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
						dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

						dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
						dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
						dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

						dmapobj.setWrt(reportRst.getString(8));
						dmapobj.setBeyondReleased(reportRst.getString(9));
						dmapobj.setTot_pen(reportRst.getString(10));
						cscmap.put(reportRst.getString(1), dmapobj);
					}
				}
				cscvo.setCscpaymap(cscmap);

			}

		} else {
			throw new DatabaseFailureException(
					"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
		}
	} finally {
		try {
			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (reportPStmt != null)
				reportPStmt.close();
			if (reportRst != null)
				reportRst.close();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	return cscvo;
	}

	//report_4 live_all
	public CscpayVO getServicesTobeRelForPaidCasesDetails_Live_All(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException{
	PreparedStatement reportPStmt = null;
	ResultSet reportRst = null;
	String ltcat = "";
	String scsType = "";

	Calendar c = Calendar.getInstance();
	int curr_year = c.get(Calendar.YEAR);
	int curr_month = c.get(Calendar.MONTH) + 1;

	List<CscpayVO> dashList = new ArrayList<CscpayVO>();
	
	Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

	Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
	try {
		if (con != null) {

			if ("DIV".equals(cscvo.getFlag())) {
				
				String query="SELECT NVL(S.DIVNAME,'TOTAL'),COUNT(A.REG_NO)+COUNT(L.REG_NO) LESS_7,COUNT(B.REG_NO)+COUNT(G.REG_NO)LESS_30,COUNT(C.REG_NO)+COUNT(H.REG_NO) GRA_30,COUNT(D.REG_NO)+COUNT(I.REG_NO)GRA_45,COUNT(E.REG_NO)+COUNT(J.REG_NO)GRA_60,COUNT(F.REG_NO)+COUNT(K.REG_NO)GRA_90, COUNT(R.SWRT)+COUNT(R.EWRT) WRT,COUNT(R.SBRT)+COUNT(R.EBRT) BRT,COUNT(R.SWRT)+COUNT(R.EWRT)+COUNT(R.SBRT)+COUNT(R.EBRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 AND ESTSTATUS='01' THEN 'WRT' ELSE '' END) SWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >7  AND ESTSTATUS='01' THEN 'BRT' ELSE '' END) SBRT,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 AND ESTSTATUS='02' THEN 'WRT' ELSE '' END) EWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30  AND ESTSTATUS='02' THEN 'BRT' ELSE '' END) EBRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='01')A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='01')B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='01')C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='01')D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND ESTSTATUS='01')E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='01')F, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='02')L, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='02')G, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='02')H, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='02')I, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND  ESTSTATUS='02')J, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='02')K, (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.REG_NO=G.REG_NO(+) AND R.REG_NO=H.REG_NO(+) AND R.REG_NO=I.REG_NO(+) AND R.REG_NO=J.REG_NO(+) AND R.REG_NO=K.REG_NO(+) AND R.REG_NO=L.REG_NO(+) AND R.NCPARTCD=S.SECCD AND S.CIRNAME=?  GROUP BY ROLLUP(S.DIVNAME) ORDER BY S.DIVNAME";
				
				//String query="SELECT NVL(DIVNAME,'TOTAL'),SUM(LESS_7) LESS_7,SUM(LESS_30) LESS_30,SUM(GRA_30)GRA_30,SUM(GRA_45)GRA_45,SUM(GRA_60) GRA_60,SUM(GRA_90)GRA_90,SUM(WRT) WRT,SUM(BRT) BRT,SUM(LESS_7+LESS_30+GRA_30+GRA_45+GRA_60+GRA_90+WRT+BRT) TOTAL FROM (SELECT S.CIRNAME,COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY S.CIRNAME UNION SELECT S.CIRNAME,COUNT(F.REG_NO)LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7 )F, (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=?  GROUP BY S.DIVNAME) GROUP BY ROLLUP(DIVNAME) ORDER BY DIVNAME";

				
				reportPStmt = con.prepareStatement(query);

				reportPStmt.setString(1, cscvo.getCircle());
				// reportPStmt.setString(2, chkVO.getCirname());

				reportRst = reportPStmt.executeQuery();
			} else if ("SUB_DIV".equals(cscvo.getFlag())) {
				
				String query="SELECT NVL(S.SUBNAME,'TOTAL'),COUNT(A.REG_NO)+COUNT(L.REG_NO) LESS_7,COUNT(B.REG_NO)+COUNT(G.REG_NO)LESS_30,COUNT(C.REG_NO)+COUNT(H.REG_NO) GRA_30,COUNT(D.REG_NO)+COUNT(I.REG_NO)GRA_45,COUNT(E.REG_NO)+COUNT(J.REG_NO)GRA_60,COUNT(F.REG_NO)+COUNT(K.REG_NO)GRA_90, COUNT(R.SWRT)+COUNT(R.EWRT) WRT,COUNT(R.SBRT)+COUNT(R.EBRT) BRT,COUNT(R.SWRT)+COUNT(R.EWRT)+COUNT(R.SBRT)+COUNT(R.EBRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 AND ESTSTATUS='01' THEN 'WRT' ELSE '' END) SWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >7  AND ESTSTATUS='01' THEN 'BRT' ELSE '' END) SBRT,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 AND ESTSTATUS='02' THEN 'WRT' ELSE '' END) EWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30  AND ESTSTATUS='02' THEN 'BRT' ELSE '' END) EBRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='01')A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='01')B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='01')C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='01')D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND ESTSTATUS='01')E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='01')F, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='02')L, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='02')G, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='02')H, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='02')I, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND  ESTSTATUS='02')J, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='02')K, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.REG_NO=G.REG_NO(+) AND R.REG_NO=H.REG_NO(+) AND R.REG_NO=I.REG_NO(+) AND R.REG_NO=J.REG_NO(+) AND R.REG_NO=K.REG_NO(+) AND R.REG_NO=L.REG_NO(+) AND R.NCPARTCD=S.SECCD AND S.CIRNAME=? AND S.DIVNAME=?  GROUP BY ROLLUP(S.SUBNAME) ORDER BY S.SUBNAME";
				//String query="SELECT NVL(SUBNAME,'TOTAL'),SUM(LESS_7) LESS_7,SUM(LESS_30) LESS_30,SUM(GRA_30)GRA_30,SUM(GRA_45)GRA_45,SUM(GRA_60) GRA_60,SUM(GRA_90)GRA_90,SUM(WRT) WRT,SUM(BRT) BRT,SUM(LESS_7+LESS_30+GRA_30+GRA_45+GRA_60+GRA_90+WRT+BRT) TOTAL FROM (SELECT S.CIRNAME,COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY S.CIRNAME UNION SELECT S.CIRNAME,COUNT(F.REG_NO)LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=? AND S.DIVNAME=?  GROUP BY S.SUBNAME) GROUP BY ROLLUP(SUBNAME) ORDER BY SUBNAME";
				reportPStmt = con.prepareStatement(query);

				// reportPStmt.setString(1, month + "-" +
				// String.valueOf(curr_year));
				// reportPStmt.setString(2, chkVO.getCirname());
				// reportPStmt.setString(3, chkVO.getDivname());
				reportPStmt.setString(1, cscvo.getCircle());
				reportPStmt.setString(2, cscvo.getDivision());

				reportRst = reportPStmt.executeQuery();
				// //System.out.println.println("sub");
			} else if ("SEC".equals(cscvo.getFlag())) {
				
				String query="SELECT NVL(S.SECNAME,'TOTAL'),COUNT(A.REG_NO)+COUNT(L.REG_NO) LESS_7,COUNT(B.REG_NO)+COUNT(G.REG_NO)LESS_30,COUNT(C.REG_NO)+COUNT(H.REG_NO) GRA_30,COUNT(D.REG_NO)+COUNT(I.REG_NO)GRA_45,COUNT(E.REG_NO)+COUNT(J.REG_NO)GRA_60,COUNT(F.REG_NO)+COUNT(K.REG_NO)GRA_90, COUNT(R.SWRT)+COUNT(R.EWRT) WRT,COUNT(R.SBRT)+COUNT(R.EBRT) BRT,COUNT(R.SWRT)+COUNT(R.EWRT)+COUNT(R.SBRT)+COUNT(R.EBRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 AND ESTSTATUS='01' THEN 'WRT' ELSE '' END) SWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >7  AND ESTSTATUS='01' THEN 'BRT' ELSE '' END) SBRT,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 AND ESTSTATUS='02' THEN 'WRT' ELSE '' END) EWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30  AND ESTSTATUS='02' THEN 'BRT' ELSE '' END) EBRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='01')A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='01')B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='01')C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='01')D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND ESTSTATUS='01')E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='01')F, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='02')L, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='02')G, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='02')H, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='02')I, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND  ESTSTATUS='02')J, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='02')K, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.REG_NO=G.REG_NO(+) AND R.REG_NO=H.REG_NO(+) AND R.REG_NO=I.REG_NO(+) AND R.REG_NO=J.REG_NO(+) AND R.REG_NO=K.REG_NO(+) AND R.REG_NO=L.REG_NO(+) AND R.NCPARTCD=S.SECCD AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?  GROUP BY ROLLUP(S.SECNAME) ORDER BY S.SECNAME";
				
				//String query="SELECT NVL(SECNAME,'TOTAL'),SUM(LESS_7) LESS_7,SUM(LESS_30) LESS_30,SUM(GRA_30)GRA_30,SUM(GRA_45)GRA_45,SUM(GRA_60) GRA_60,SUM(GRA_90)GRA_90,SUM(WRT) WRT,SUM(BRT) BRT,SUM(LESS_7+LESS_30+GRA_30+GRA_45+GRA_60+GRA_90+WRT+BRT) TOTAL FROM (SELECT S.CIRNAME,COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY S.CIRNAME UNION SELECT S.CIRNAME,COUNT(F.REG_NO)LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?  GROUP BY S.SUBNAME) GROUP BY ROLLUP(SECNAME) ORDER BY SECNAME";
				reportPStmt = con.prepareStatement(query);

				reportPStmt.setString(1, cscvo.getCircle());
				reportPStmt.setString(2, cscvo.getDivision());
				reportPStmt.setString(3, cscvo.getSubDiv());

				reportRst = reportPStmt.executeQuery();

			} else {
				
				String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)+COUNT(L.REG_NO) LESS_7,COUNT(B.REG_NO)+COUNT(G.REG_NO)LESS_30,COUNT(C.REG_NO)+COUNT(H.REG_NO) GRA_30,COUNT(D.REG_NO)+COUNT(I.REG_NO)GRA_45,COUNT(E.REG_NO)+COUNT(J.REG_NO)GRA_60,COUNT(F.REG_NO)+COUNT(K.REG_NO)GRA_90, COUNT(R.SWRT)+COUNT(R.EWRT) WRT,COUNT(R.SBRT)+COUNT(R.EBRT) BRT,COUNT(R.SWRT)+COUNT(R.EWRT)+COUNT(R.SBRT)+COUNT(R.EBRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 AND ESTSTATUS='01' THEN 'WRT' ELSE '' END) SWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >7  AND ESTSTATUS='01' THEN 'BRT' ELSE '' END) SBRT,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 AND ESTSTATUS='02' THEN 'WRT' ELSE '' END) EWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30  AND ESTSTATUS='02' THEN 'BRT' ELSE '' END) EBRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='01')A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='01')B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='01')C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='01')D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND ESTSTATUS='01')E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='01')F, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='02')L, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='02')G, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='02')H, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='02')I, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND  ESTSTATUS='02')J, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='02')K, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.REG_NO=G.REG_NO(+) AND R.REG_NO=H.REG_NO(+) AND R.REG_NO=I.REG_NO(+) AND R.REG_NO=J.REG_NO(+) AND R.REG_NO=K.REG_NO(+) AND R.REG_NO=L.REG_NO(+) AND R.NCPARTCD=S.SECCD GROUP BY ROLLUP(S.CIRNAME) ORDER BY S.CIRNAME";
				
				//String query="SELECT NVL(CIRNAME,'TOTAL'),SUM(LESS_7) LESS_7,SUM(LESS_30) LESS_30,SUM(GRA_30)GRA_30,SUM(GRA_45)GRA_45,SUM(GRA_60) GRA_60,SUM(GRA_90)GRA_90,SUM(WRT) WRT,SUM(BRT) BRT,SUM(LESS_7+LESS_30+GRA_30+GRA_45+GRA_60+GRA_90+WRT+BRT) TOTAL FROM (SELECT S.CIRNAME,COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' ) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01') GROUP BY S.CIRNAME UNION SELECT S.CIRNAME,COUNT(F.REG_NO)LESS_7,COUNT(A.REG_NO)LESS_30,COUNT(B.REG_NO) GRA_30,COUNT(C.REG_NO)GRA_45,COUNT(D.REG_NO)GRA_60,COUNT(E.REG_NO)GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release') R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('02') GROUP BY S.CIRNAME) GROUP BY ROLLUP(CIRNAME) ORDER BY CIRNAME";
				
				reportPStmt = con.prepareStatement(query);
				//System.out.println("Live_All:"+query);
				reportRst = reportPStmt.executeQuery();
			}
			if (reportRst != null) {
				while (reportRst.next()) {

					if (cscmap.containsKey(reportRst.getString(1))) {
						CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

						dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
						dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
						dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

						dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
						dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
						dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

						dmapobj.setWrt(reportRst.getString(8));
						dmapobj.setBeyondReleased(reportRst.getString(9));
						dmapobj.setTot_pen(reportRst.getString(10));

					} else {
						CscpayVO dmapobj = new CscpayVO();

						dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
						dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
						dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

						dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
						dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
						dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

						dmapobj.setWrt(reportRst.getString(8));
						dmapobj.setBeyondReleased(reportRst.getString(9));
						dmapobj.setTot_pen(reportRst.getString(10));
						cscmap.put(reportRst.getString(1), dmapobj);
					}
				}
				cscvo.setCscpaymap(cscmap);

			}

		} else {
			throw new DatabaseFailureException(
					"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
		}
	} finally {
		try {
			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (reportPStmt != null)
				reportPStmt.close();
			if (reportRst != null)
				reportRst.close();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	return cscvo;
	}

	
	
	
	public CscpayVO getServicesTobeRelForPaidCasesDetails_All_Deleted(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException{
				PreparedStatement reportPStmt = null;
				ResultSet reportRst = null;
				String ltcat = "";
				String scsType = "";

				Calendar c = Calendar.getInstance();
				int curr_year = c.get(Calendar.YEAR);
				int curr_month = c.get(Calendar.MONTH) + 1;

				List<CscpayVO> dashList = new ArrayList<CscpayVO>();
				
				Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

				Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
				try {
					if (con != null) {

						if ("DIV".equals(cscvo.getFlag())) {
							
							String query="SELECT NVL(S.DIVNAME,'TOTAL'),COUNT(A.REG_NO)+COUNT(L.REG_NO) LESS_7,COUNT(B.REG_NO)+COUNT(G.REG_NO)LESS_30,COUNT(C.REG_NO)+COUNT(H.REG_NO) GRA_30,COUNT(D.REG_NO)+COUNT(I.REG_NO)GRA_45,COUNT(E.REG_NO)+COUNT(J.REG_NO)GRA_60,COUNT(F.REG_NO)+COUNT(K.REG_NO)GRA_90, COUNT(R.SWRT)+COUNT(R.EWRT) WRT,COUNT(R.SBRT)+COUNT(R.EBRT) BRT,COUNT(R.SWRT)+COUNT(R.EWRT)+COUNT(R.SBRT)+COUNT(R.EBRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 AND ESTSTATUS='01' THEN 'WRT' ELSE '' END) SWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >7  AND ESTSTATUS='01' THEN 'BRT' ELSE '' END) SBRT,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 AND ESTSTATUS='02' THEN 'WRT' ELSE '' END) EWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30  AND ESTSTATUS='02' THEN 'BRT' ELSE '' END) EBRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='01')A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='01')B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='01')C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='01')D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND ESTSTATUS='01')E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='01')F, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='02')L, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='02')G, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='02')H, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='02')I, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND  ESTSTATUS='02')J, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='02')K, (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.REG_NO=G.REG_NO(+) AND R.REG_NO=H.REG_NO(+) AND R.REG_NO=I.REG_NO(+) AND R.REG_NO=J.REG_NO(+) AND R.REG_NO=K.REG_NO(+) AND R.REG_NO=L.REG_NO(+) AND R.NCPARTCD=S.SECCD AND S.CIRNAME=? GROUP BY ROLLUP(S.DIVNAME) ORDER BY S.DIVNAME";
							//String query="SELECT NVL(S.DIVNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM) >=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,DIVNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01','02') AND S.CIRNAME=?  GROUP BY ROLLUP(S.DIVNAME) ORDER BY DIVNAME";
							
							reportPStmt = con.prepareStatement(query);

							reportPStmt.setString(1, cscvo.getCircle());
							// reportPStmt.setString(2, chkVO.getCirname());

							reportRst = reportPStmt.executeQuery();
						} else if ("SUB_DIV".equals(cscvo.getFlag())) {
							
							String query="SELECT NVL(S.SUBNAME,'TOTAL'),COUNT(A.REG_NO)+COUNT(L.REG_NO) LESS_7,COUNT(B.REG_NO)+COUNT(G.REG_NO)LESS_30,COUNT(C.REG_NO)+COUNT(H.REG_NO) GRA_30,COUNT(D.REG_NO)+COUNT(I.REG_NO)GRA_45,COUNT(E.REG_NO)+COUNT(J.REG_NO)GRA_60,COUNT(F.REG_NO)+COUNT(K.REG_NO)GRA_90, COUNT(R.SWRT)+COUNT(R.EWRT) WRT,COUNT(R.SBRT)+COUNT(R.EBRT) BRT,COUNT(R.SWRT)+COUNT(R.EWRT)+COUNT(R.SBRT)+COUNT(R.EBRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 AND ESTSTATUS='01' THEN 'WRT' ELSE '' END) SWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >7  AND ESTSTATUS='01' THEN 'BRT' ELSE '' END) SBRT,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 AND ESTSTATUS='02' THEN 'WRT' ELSE '' END) EWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30  AND ESTSTATUS='02' THEN 'BRT' ELSE '' END) EBRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='01')A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='01')B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='01')C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='01')D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND ESTSTATUS='01')E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='01')F, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='02')L, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='02')G, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='02')H, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='02')I, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND  ESTSTATUS='02')J, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='02')K, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.REG_NO=G.REG_NO(+) AND R.REG_NO=H.REG_NO(+) AND R.REG_NO=I.REG_NO(+) AND R.REG_NO=J.REG_NO(+) AND R.REG_NO=K.REG_NO(+) AND R.REG_NO=L.REG_NO(+) AND R.NCPARTCD=S.SECCD AND S.CIRNAME=? AND S.DIVNAME=?  GROUP BY ROLLUP(S.SUBNAME) ORDER BY S.SUBNAME";
							
							//String query="SELECT NVL(S.SUBNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM) >=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01','02') AND S.CIRNAME=? AND S.DIVNAME=?   GROUP BY ROLLUP(S.SUBNAME) ORDER BY SUBNAME";
							reportPStmt = con.prepareStatement(query);

							reportPStmt.setString(1, cscvo.getCircle());
							reportPStmt.setString(2, cscvo.getDivision());

							reportRst = reportPStmt.executeQuery();
							// //System.out.println.println("sub");
						} else if ("SEC".equals(cscvo.getFlag())) {
							
							String query="SELECT NVL(S.SECNAME,'TOTAL'),COUNT(A.REG_NO)+COUNT(L.REG_NO) LESS_7,COUNT(B.REG_NO)+COUNT(G.REG_NO)LESS_30,COUNT(C.REG_NO)+COUNT(H.REG_NO) GRA_30,COUNT(D.REG_NO)+COUNT(I.REG_NO)GRA_45,COUNT(E.REG_NO)+COUNT(J.REG_NO)GRA_60,COUNT(F.REG_NO)+COUNT(K.REG_NO)GRA_90, COUNT(R.SWRT)+COUNT(R.EWRT) WRT,COUNT(R.SBRT)+COUNT(R.EBRT) BRT,COUNT(R.SWRT)+COUNT(R.EWRT)+COUNT(R.SBRT)+COUNT(R.EBRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 AND ESTSTATUS='01' THEN 'WRT' ELSE '' END) SWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >7  AND ESTSTATUS='01' THEN 'BRT' ELSE '' END) SBRT,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 AND ESTSTATUS='02' THEN 'WRT' ELSE '' END) EWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30  AND ESTSTATUS='02' THEN 'BRT' ELSE '' END) EBRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='01')A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='01')B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='01')C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='01')D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND ESTSTATUS='01')E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='01')F, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='02')L, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='02')G, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='02')H, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='02')I, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND  ESTSTATUS='02')J, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='02')K, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.REG_NO=G.REG_NO(+) AND R.REG_NO=H.REG_NO(+) AND R.REG_NO=I.REG_NO(+) AND R.REG_NO=J.REG_NO(+) AND R.REG_NO=K.REG_NO(+) AND R.REG_NO=L.REG_NO(+) AND R.NCPARTCD=S.SECCD AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?  GROUP BY ROLLUP(S.SECNAME) ORDER BY S.SECNAME";
							
							//String query="SELECT NVL(S.SECNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM) >=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01','02') AND S.CIRNAME=? AND S.DIVNAME=?  AND S.SUBNAME=?   GROUP BY ROLLUP(S.SECNAME) ORDER BY SECNAME";
							reportPStmt = con.prepareStatement(query);

							reportPStmt.setString(1, cscvo.getCircle());
							reportPStmt.setString(2, cscvo.getDivision());
							reportPStmt.setString(3, cscvo.getSubDiv());

							reportRst = reportPStmt.executeQuery();

						} else {
							
							String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)+COUNT(L.REG_NO) LESS_7,COUNT(B.REG_NO)+COUNT(G.REG_NO)LESS_30,COUNT(C.REG_NO)+COUNT(H.REG_NO) GRA_30,COUNT(D.REG_NO)+COUNT(I.REG_NO)GRA_45,COUNT(E.REG_NO)+COUNT(J.REG_NO)GRA_60,COUNT(F.REG_NO)+COUNT(K.REG_NO)GRA_90, COUNT(R.SWRT)+COUNT(R.EWRT) WRT,COUNT(R.SBRT)+COUNT(R.EBRT) BRT,COUNT(R.SWRT)+COUNT(R.EWRT)+COUNT(R.SBRT)+COUNT(R.EBRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 AND ESTSTATUS='01' THEN 'WRT' ELSE '' END) SWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >7  AND ESTSTATUS='01' THEN 'BRT' ELSE '' END) SBRT,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 AND ESTSTATUS='02' THEN 'WRT' ELSE '' END) EWRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >30  AND ESTSTATUS='02' THEN 'BRT' ELSE '' END) EBRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='01')A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='01')B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='01')C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='01')D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND ESTSTATUS='01')E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='01')F, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7 AND  ESTSTATUS='02')L, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30 AND  ESTSTATUS='02')G, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44 AND  ESTSTATUS='02')H, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 AND  ESTSTATUS='02')I, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 AND  ESTSTATUS='02')J, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 AND  ESTSTATUS='02')K, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.REG_NO=G.REG_NO(+) AND R.REG_NO=H.REG_NO(+) AND R.REG_NO=I.REG_NO(+) AND R.REG_NO=J.REG_NO(+) AND R.REG_NO=K.REG_NO(+) AND R.REG_NO=L.REG_NO(+) AND R.NCPARTCD=S.SECCD GROUP BY ROLLUP(S.CIRNAME) ORDER BY S.CIRNAME";
							//String query="SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(D.REG_NO)+COUNT(E.REG_NO)+COUNT(F.REG_NO)+COUNT(WRT)+COUNT(BRT) TOTAL FROM (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM) >=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100) R, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <7)A, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30)B, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44)C, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59)D, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89)E, (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >90 )F, (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S WHERE R.REG_NO=A.REG_NO(+) AND R.REG_NO=B.REG_NO(+) AND R.REG_NO=C.REG_NO(+) AND R.REG_NO=D.REG_NO(+) AND R.REG_NO=E.REG_NO(+) AND R.REG_NO=F.REG_NO(+) AND R.NCPARTCD=S.SECCD AND R.ESTSTATUS IN ('01','02') GROUP BY ROLLUP(S.CIRNAME) ORDER BY CIRNAME";
							
							reportPStmt = con.prepareStatement(query);
							reportRst = reportPStmt.executeQuery();
							System.out.println("All_Deleted:"+query);
						}
						if (reportRst != null) {
							while (reportRst.next()) {

								if (cscmap.containsKey(reportRst.getString(1))) {
									CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

									dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
									dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
									dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

									dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
									dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
									dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

									dmapobj.setWrt(reportRst.getString(8));
									dmapobj.setBeyondReleased(reportRst.getString(9));
									dmapobj.setTot_pen(reportRst.getString(10));

								} else {
									CscpayVO dmapobj = new CscpayVO();

									dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
									dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
									dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

									dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
									dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
									dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

									dmapobj.setWrt(reportRst.getString(8));
									dmapobj.setBeyondReleased(reportRst.getString(9));
									dmapobj.setTot_pen(reportRst.getString(10));
									cscmap.put(reportRst.getString(1), dmapobj);
								}
							}
							cscvo.setCscpaymap(cscmap);

						}

					} else {
						throw new DatabaseFailureException(
								"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
					}
				} finally {
					try {
						if (con != null) {

							DBConnectionManager.getInstance().freeConnection(con);
							con.close();
						}
						if (reportPStmt != null)
							reportPStmt.close();
						if (reportRst != null)
							reportRst.close();
					} catch (Exception ex) {
						ex.printStackTrace();
					}
				}
				return cscvo;
				}

	public CscpayVO getServicesTobeRelForPaidCasesScsDetails_Simple_Del(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("less7days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND  CEIL(SYSDATE-MAXPRDT) <=7 ";
				} else if ("less30days".equalsIgnoreCase(cscvo.getExe_type())) {
					// status = " AND NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0 ";
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30) ";
				} else if ("gtr30days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = "  AND (CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44) ";
				} else if ("gtr45days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59) ";
				} else if ("gtr60days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89) ";
				} else if ("gtr90days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >=90  ";
				} else if ("wrt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) <=7 ";
				} else if ("brt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >7 ";
				} else {
					daystatus = "  AND ((CEIL(SYSDATE-MAXPRDT) <=7) OR (CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30) OR (CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44) OR ( CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 ) OR ( CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 ) OR (CEIL(SYSDATE-MAXPRDT) >=90))  ";
				}


				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100 AND R.ESTSTATUS IN ('01')");				

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100 AND R.ESTSTATUS IN ('01')");
						

				} else if ("SEC".equals(cscvo.getFlag())) {


					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100 AND R.ESTSTATUS IN ('01')");
					
				} else {
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100 AND R.ESTSTATUS IN ('01')");	
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCat(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setRel_date(resultSet.getString(9));
						vo.setRelNoOfDays(resultSet.getInt(10));
						vo.setStatus(resultSet.getString(11));
						/*vo.setEstatus(resultSet.getString(12));*/
						

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}

	public CscpayVO getServicesTobeRelForPaidCasesScsDetails_Simple_Live(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("less7days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND  CEIL(SYSDATE-MAXPRDT) <=7 ";
				} else if ("less30days".equalsIgnoreCase(cscvo.getExe_type())) {
					// status = " AND NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0 ";
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30) ";
				} else if ("gtr30days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = "  AND (CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44) ";
				} else if ("gtr45days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59) ";
				} else if ("gtr60days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89) ";
				} else if ("gtr90days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >=90  ";
				} else if ("wrt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) <=7 ";
				} else if ("brt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >7 ";
				} else {
					daystatus = "  AND ((CEIL(SYSDATE-MAXPRDT) <=7) OR (CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30) OR (CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44) OR ( CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 ) OR ( CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 ) OR (CEIL(SYSDATE-MAXPRDT) >=90))  ";
				}

				

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release'");
					
					

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release'");
					
				} else if ("SEC".equals(cscvo.getFlag())) {


					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release'");
				} else {
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release'");
					}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCat(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setRel_date(resultSet.getString(9));
						vo.setRelNoOfDays(resultSet.getInt(10));
						vo.setStatus(resultSet.getString(11));
						/*vo.setEstatus(resultSet.getString(12));*/
						

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}

	
	public CscpayVO getServicesTobeRelForPaidCasesScsDetails_Simple_All(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("less7days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND  CEIL(SYSDATE-MAXPRDT) <7 ";
				} else if ("less30days".equalsIgnoreCase(cscvo.getExe_type())) {
					// status = " AND NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0 ";
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30) ";
				} else if ("gtr30days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = "  AND (CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44) ";
				} else if ("gtr45days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59) ";
				} else if ("gtr60days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89) ";
				} else if ("gtr90days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >90  ";
				} else if ("wrt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-REG_DATE) <7 ";
				} else if ("brt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-REG_DATE) >8 ";
				} else {
					daystatus = "  AND ((CEIL(SYSDATE-REG_DATE) <3) OR (CEIL(SYSDATE-REG_DATE) >4 AND CEIL(SYSDATE-REG_DATE) <7) OR(CEIL(SYSDATE-REG_DATE) >8 AND CEIL(SYSDATE-REG_DATE) <15) OR ( CEIL(SYSDATE-REG_DATE) >16 AND CEIL(SYSDATE-REG_DATE)<30 ) OR (CEIL(SYSDATE-REG_DATE) >31))  ";
				}

				/// cat ststus

				/*if ("Deletion".equalsIgnoreCase(cscvo.getType())) {
					if ("Extension".equalsIgnoreCase(cscvo.getStatus())) {
						scsType = " AND R.ESTSTATUS IN ('02')  ";
					} else if ("Simplified".equalsIgnoreCase(cscvo.getStatus())) {
						scsType = " AND R.ESTSTATUS IN ('01') ";
					} else {
						scsType = " AND R.ESTSTATUS IN ('01','02') ";
					}

				}*/

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release' UNION SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release'");
					

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release' UNION SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release'");
					

				} else if ("SEC".equals(cscvo.getFlag())) 
				{


					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release' UNION SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release'");
					
				} 
				else {
					
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release' UNION SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release'");	
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCat(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setRel_date(resultSet.getString(9));
						vo.setRelNoOfDays(resultSet.getInt(10));
						vo.setStatus(resultSet.getString(11));
						/*vo.setEstatus(resultSet.getString(12));*/
						

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}

	
	public CscpayVO getServicesTobeRelForPaidCasesScsDetails_Ext_Del(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("less7days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND  CEIL(SYSDATE-MAXPRDT) <=7 ";
				} else if ("less30days".equalsIgnoreCase(cscvo.getExe_type())) {
					// status = " AND NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0 ";
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30) ";
				} else if ("gtr30days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = "  AND (CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44) ";
				} else if ("gtr45days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59) ";
				} else if ("gtr60days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89) ";
				} else if ("gtr90days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >=90  ";
				} else if ("wrt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) <=30 ";
				} else if ("brt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >30 ";
				} else {
					daystatus = "  AND ((CEIL(SYSDATE-MAXPRDT) <=7) OR (CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30) OR (CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44) OR ( CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 ) OR ( CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 ) OR (CEIL(SYSDATE-MAXPRDT) >=90))  ";
				}
				
				/// cat ststus

				/*if ("Deletion".equalsIgnoreCase(cscvo.getType())) {
					if ("Extension".equalsIgnoreCase(cscvo.getStatus())) {
						scsType = " AND R.ESTSTATUS IN ('02')  ";
					} else if ("Simplified".equalsIgnoreCase(cscvo.getStatus())) {
						scsType = " AND R.ESTSTATUS IN ('01') ";
					} else {
						scsType = " AND R.ESTSTATUS IN ('01','02') ";
					}

				}*/

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100 AND R.ESTSTATUS IN ('02')");

					

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100 AND R.ESTSTATUS IN ('02')");
					

				} else if ("SEC".equals(cscvo.getFlag())) {


					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100 AND R.ESTSTATUS IN ('02'); ");
					
				} else {
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100 AND R.ESTSTATUS IN ('02')");	
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCat(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setRel_date(resultSet.getString(9));
						vo.setRelNoOfDays(resultSet.getInt(10));
						vo.setStatus(resultSet.getString(11));
						/*vo.setEstatus(resultSet.getString(12));*/
						

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}

	
	public CscpayVO getServicesTobeRelForPaidCasesScsDetails_Ext_Live(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("less7days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND  CEIL(SYSDATE-MAXPRDT) <=7 ";
				} else if ("less30days".equalsIgnoreCase(cscvo.getExe_type())) {
					// status = " AND NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0 ";
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30) ";
				} else if ("gtr30days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = "  AND (CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44) ";
				} else if ("gtr45days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59) ";
				} else if ("gtr60days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89) ";
				} else if ("gtr90days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >=90  ";
				} else if ("wrt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) <=30 ";
				} else if ("brt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >30 ";
				} else {
					daystatus = "  AND ((CEIL(SYSDATE-MAXPRDT) <=7) OR (CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30) OR (CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44) OR ( CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 ) OR ( CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 ) OR (CEIL(SYSDATE-MAXPRDT) >=90))  ";
				}

				/// cat ststus

				/*if ("Deletion".equalsIgnoreCase(cscvo.getType())) {
					if ("Extension".equalsIgnoreCase(cscvo.getStatus())) {
						scsType = " AND R.ESTSTATUS IN ('02')  ";
					} else if ("Simplified".equalsIgnoreCase(cscvo.getStatus())) {
						scsType = " AND R.ESTSTATUS IN ('01') ";
					} else {
						scsType = " AND R.ESTSTATUS IN ('01','02') ";
					}

				}*/

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release' ");
					

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {


					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release' ");

				} else if ("SEC".equals(cscvo.getFlag())) {


					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release' ");
					
				} else {
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release'");	
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCat(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setRel_date(resultSet.getString(9));
						vo.setRelNoOfDays(resultSet.getInt(10));
						vo.setStatus(resultSet.getString(11));
						/*vo.setEstatus(resultSet.getString(12));*/
						

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}


	public CscpayVO getServicesTobeRelForPaidCasesScsDetails_Ext_All(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("less7days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND  CEIL(SYSDATE-MAXPRDT) <=7 ";
				} else if ("less30days".equalsIgnoreCase(cscvo.getExe_type())) {
					// status = " AND NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0 ";
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30) ";
				} else if ("gtr30days".equalsIgnoreCase(cscvo.getType())) {
					daystatus = "  AND (CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44) ";
				} else if ("gtr45days".equalsIgnoreCase(cscvo.getType())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59) ";
				} else if ("gtr60days".equalsIgnoreCase(cscvo.getType())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89) ";
				} else if ("gtr90days".equalsIgnoreCase(cscvo.getType())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >=90  ";
				} else if ("wrt".equalsIgnoreCase(cscvo.getType())) {
					daystatus = " AND CEIL(SYSDATE-REG_DATE) >31 ";
				} else if ("brt".equalsIgnoreCase(cscvo.getType())) {
					daystatus = " AND CEIL(SYSDATE-REG_DATE) >31 ";
				} else {
					daystatus = "  AND ((CEIL(SYSDATE-REG_DATE) <=3) OR (CEIL(SYSDATE-REG_DATE) >4 AND CEIL(SYSDATE-REG_DATE) <=7) OR(CEIL(SYSDATE-REG_DATE) >8 AND CEIL(SYSDATE-REG_DATE) <=15) OR ( CEIL(SYSDATE-REG_DATE) >16 AND CEIL(SYSDATE-REG_DATE)<=30 ) OR (CEIL(SYSDATE-REG_DATE) >31))  ";
				}

				/// cat ststus

				/*if ("Deletion".equalsIgnoreCase(cscvo.getType())) {
					if ("Extension".equalsIgnoreCase(cscvo.getStatus())) {
						scsType = " AND R.ESTSTATUS IN ('02')  ";
					} else if ("Simplified".equalsIgnoreCase(cscvo.getStatus())) {
						scsType = " AND R.ESTSTATUS IN ('01') ";
					} else {
						scsType = " AND R.ESTSTATUS IN ('01','02') ";
					}

				}*/

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("");
					
				}
				else 
				if ("SUB_DIV".equals(cscvo.getFlag())) {


					resultSet = statement.executeQuery("");

				} else if ("SEC".equals(cscvo.getFlag())) {


					resultSet = statement.executeQuery("");
					
				} else {
					
					resultSet = statement.executeQuery("");
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCat(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setRel_date(resultSet.getString(9));
						vo.setRelNoOfDays(resultSet.getInt(10));
						vo.setStatus(resultSet.getString(11));
						/*vo.setEstatus(resultSet.getString(12));*/
						

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}

	public CscpayVO getServicesTobeRelForPaidCasesScsDetails_All_Del(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("less7days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND  CEIL(SYSDATE-MAXPRDT) <7 ";
				} else if ("less30days".equalsIgnoreCase(cscvo.getExe_type())) {
					// status = " AND NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0 ";
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30) ";
				} else if ("gtr30days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = "  AND (CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44) ";
				} else if ("gtr45days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT) <59) ";
				} else if ("gtr60days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89) ";
				} else if ("gtr90days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >90  ";
				} else if ("wrt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) <7 ";
				} else if ("brt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >8 ";
				} else {
					
					daystatus = "  AND ((CEIL(SYSDATE-MAXPRDT) <7) OR (CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <30) OR (CEIL(SYSDATE-MAXPRDT) >31 AND CEIL(SYSDATE-MAXPRDT) <44) OR (CEIL(SYSDATE-MAXPRDT) >45 AND CEIL(SYSDATE-MAXPRDT)<59) OR (CEIL(SYSDATE-MAXPRDT) >60 AND CEIL(SYSDATE-MAXPRDT) <89) OR (CEIL(SYSDATE-MAXPRDT) >90))  ";
				}

				

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100");
				

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {


					resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100");
				

				} else if ("SEC".equals(cscvo.getFlag())) {


					resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100");
				
					
				} else {
					resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100");
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCat(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setRel_date(resultSet.getString(9));
						vo.setRelNoOfDays(resultSet.getInt(10));
						vo.setStatus(resultSet.getString(11));
						vo.setEstatus(resultSet.getString(12));
						

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}
	//report_4_brt_delete_all
	public CscpayVO getServicesTobeRelForPaidCasesScsDetails_Brt_All_Del(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String daystatus2 = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {
				
				if ("brt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END)='BRT' ";
					daystatus2 = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END)='BRT'  ";
				}
			

				/*if ("less7days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) <=7   ";
				} else if ("less30days".equalsIgnoreCase(cscvo.getExe_type())) {
					// status = " AND NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0 ";
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=8 AND (CEIL(SYSDATE-MAXPRDT) <=30) ";
				} else if ("gtr30days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = "  AND (CEIL(SYSDATE-MAXPRDT) >=31 AND (CEIL(SYSDATE-MAXPRDT) <=44) ";
				} else if ("gtr45days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59) ";
				} else if ("gtr60days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89) ";
				} else if ("gtr90days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >=90  ";
				} else if ("wrt".equalsIgnoreCase(cscvo.getExe_type())) {
					
					daystatus = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END)='WRT'  ";
					daystatus2 = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END)='WRT'  ";
				} else if ("brt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END)='BRT' ";
					daystatus2 = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END)='BRT'  ";
				} else {
					daystatus = "  AND ((CEIL(SYSDATE-MAXPRDT) <=7) OR (CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30) OR (CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44) OR ( CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 ) OR ( CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 ) OR (CEIL(SYSDATE-MAXPRDT) >=90))  ";
				}*/

			

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')   AND NVL(ESTSTATUS,'03')='01'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(ESTSTATUS,'03')='02'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100");

					/*resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100");
				*/

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')   AND NVL(ESTSTATUS,'03')='01'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(ESTSTATUS,'03')='02'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100");
					
					

/*
					resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100");
				*/

				} else if ("SEC".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')   AND NVL(ESTSTATUS,'03')='01'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(ESTSTATUS,'03')='02'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100");

					/*resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100");
				*/
					
				} else {
					
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')   AND NVL(ESTSTATUS,'03')='01'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(ESTSTATUS,'03')='02'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100");
				
					/*resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100");
				*/
					
					System.out.println("resultSet:"+resultSet);
					System.out.println("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD \"+ \" \"+daystatus+\"  AND S.CIRNAME='\"+ cscvo.getCircle()+\"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')   AND NVL(ESTSTATUS,'03')='01'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD \"+ \" \"+daystatus2+\"  AND S.CIRNAME='\"+ cscvo.getCircle()+\"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(ESTSTATUS,'03')='02'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100\"");
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCat(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setRel_date(resultSet.getString(9));
						vo.setRelNoOfDays(resultSet.getInt(10));
						vo.setStatus(resultSet.getString(11));
						//vo.setEstatus(resultSet.getString(12));
						

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}

	public CscpayVO getServicesTobeRelForPaidCasesScsDetails_Wrt_All_Del(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String daystatus2 = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {
				
if ("wrt".equalsIgnoreCase(cscvo.getExe_type())) {
					
					daystatus = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END)='WRT'  ";
					daystatus2 = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END)='WRT'  ";
}

				/*if ("less7days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) <=7   ";
				} else if ("less30days".equalsIgnoreCase(cscvo.getExe_type())) {
					// status = " AND NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0 ";
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=8 AND (CEIL(SYSDATE-MAXPRDT) <=30) ";
				} else if ("gtr30days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = "  AND (CEIL(SYSDATE-MAXPRDT) >=31 AND (CEIL(SYSDATE-MAXPRDT) <=44) ";
				} else if ("gtr45days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59) ";
				} else if ("gtr60days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89) ";
				} else if ("gtr90days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >=90  ";
				} else if ("wrt".equalsIgnoreCase(cscvo.getExe_type())) {
					
					daystatus = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END)='WRT'  ";
					daystatus2 = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END)='WRT'  ";
				} else if ("brt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END)='BRT' ";
					daystatus2 = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END)='BRT'  ";
				} else {
					daystatus = "  AND ((CEIL(SYSDATE-MAXPRDT) <=7) OR (CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30) OR (CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44) OR ( CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 ) OR ( CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 ) OR (CEIL(SYSDATE-MAXPRDT) >=90))  ";
				}*/
			
				

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')   AND NVL(ESTSTATUS,'03')='01'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(ESTSTATUS,'03')='02'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100");
					
					/*resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100");
				*/

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')   AND NVL(ESTSTATUS,'03')='01'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(ESTSTATUS,'03')='02'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100");
					

/*
					resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100");
				*/

				} else if ("SEC".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')   AND NVL(ESTSTATUS,'03')='01'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(ESTSTATUS,'03')='02'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100");
					/*resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100");
				*/
					
				} else {
					
					String qry="SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')   AND NVL(ESTSTATUS,'03')='01'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(ESTSTATUS,'03')='02'  AND  SLADESC='Rejected' AND  NVL(SAPDEM,EXTDEM)>=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 ";
					resultSet = statement.executeQuery(qry);
					//System.out.println("resultSet_2022:"+qry);
					/*resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)>=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100");
				*/
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCat(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setRel_date(resultSet.getString(9));
						vo.setRelNoOfDays(resultSet.getInt(10));
						vo.setStatus(resultSet.getString(11));
						//vo.setEstatus(resultSet.getString(12));
						

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}


	public CscpayVO getServicesTobeRelForPaidCasesScsDetails_Wrt_All_Live(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String daystatus2 = "";
		
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {
				
				
 if ("wrt".equalsIgnoreCase(cscvo.getExe_type())) {
					
					daystatus = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END)='WRT'  ";
					daystatus2 = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END)='WRT'  ";
				}

				/*if ("less7days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) <=7   ";
				} else if ("less30days".equalsIgnoreCase(cscvo.getExe_type())) {
					// status = " AND NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0 ";
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=8 AND (CEIL(SYSDATE-MAXPRDT) <=30) ";
				} else if ("gtr30days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = "  AND (CEIL(SYSDATE-MAXPRDT) >=31 AND (CEIL(SYSDATE-MAXPRDT) <=44) ";
				} else if ("gtr45days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59) ";
				} else if ("gtr60days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89) ";
				} else if ("gtr90days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >=90  ";
				} else if ("wrt".equalsIgnoreCase(cscvo.getExe_type())) {
					
					daystatus = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END)='WRT'  ";
					daystatus2 = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END)='WRT'  ";
				} else if ("brt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END)='BRT' ";
					daystatus2 = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END)='BRT'  ";
				} else {
					daystatus = "  AND ((CEIL(SYSDATE-MAXPRDT) <=7) OR (CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30) OR (CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44) OR ( CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 ) OR ( CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 ) OR (CEIL(SYSDATE-MAXPRDT) >=90))  ";
				}*/

			

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release' union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release'");
					
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release' union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release'");



				} else if ("SEC".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release' union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release'");
					
					
				} else {
					
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release' union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release'");
					
					
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCat(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setRel_date(resultSet.getString(9));
						vo.setRelNoOfDays(resultSet.getInt(10));
						vo.setStatus(resultSet.getString(11));
						//vo.setEstatus(resultSet.getString(12));
						

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}
	
	public CscpayVO getServicesTobeRelForPaidCasesScsDetails_Brt_All_Live(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String daystatus2 = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {
				
				if ("brt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END)='BRT' ";
					daystatus2 = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END)='BRT'  ";
				}

				/*if ("less7days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) <=7   ";
				} else if ("less30days".equalsIgnoreCase(cscvo.getExe_type())) {
					// status = " AND NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0 ";
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=8 AND (CEIL(SYSDATE-MAXPRDT) <=30) ";
				} else if ("gtr30days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = "  AND (CEIL(SYSDATE-MAXPRDT) >=31 AND (CEIL(SYSDATE-MAXPRDT) <=44) ";
				} else if ("gtr45days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59) ";
				} else if ("gtr60days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89) ";
				} else if ("gtr90days".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >=90  ";
				} else if ("wrt".equalsIgnoreCase(cscvo.getExe_type())) {
					
					daystatus = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END)='WRT'  ";
					daystatus2 = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END)='WRT'  ";
				} else if ("brt".equalsIgnoreCase(cscvo.getExe_type())) {
					daystatus = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END)='BRT' ";
					daystatus2 = " AND (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 THEN 'WRT' ELSE 'BRT' END)='BRT'  ";
				} else {
					daystatus = "  AND ((CEIL(SYSDATE-MAXPRDT) <=7) OR (CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30) OR (CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44) OR ( CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59 ) OR ( CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89 ) OR (CEIL(SYSDATE-MAXPRDT) >=90))  ";
				}*/

				

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) 
				{
					
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release' union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release'");
					
					
					
				} 
				else if ("SUB_DIV".equals(cscvo.getFlag())) 
				{
					
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release' union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release'");



				}
				else if ("SEC".equals(cscvo.getFlag())) 
				{

					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release' union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND S.DIVNAME='"+ cscvo.getDivision()+"' AND S.SUBNAME='"+ cscvo.getSubDiv()+"' AND S.SECNAME='"+ cscvo.getSec()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release'");
					
					
				} else 
				{
					
					resultSet = statement.executeQuery("SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='01'  AND SLADESC='Pending for service release' union SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <30 THEN 'WRT' ELSE 'BRT' END) WRT_BRT FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "+ " "+daystatus2+"  AND S.CIRNAME='"+ cscvo.getCircle()+"' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02'  AND SLADESC='Pending for service release'");
					
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCat(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setRegDate(resultSet.getString(8));
						vo.setRel_date(resultSet.getString(9));
						vo.setRelNoOfDays(resultSet.getInt(10));
						vo.setStatus(resultSet.getString(11));
						//vo.setEstatus(resultSet.getString(12));
						

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}


		

	// REPORT4 -Simplified
	public CscpayVO getServicesTobeRelForPaidCasesDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		/*
		 * if ("Simplified".equalsIgnoreCase(cscvo.getType())) {
		 * 
		 * scsType =
		 * "NVL(ESTSTATUS,'03')='01' AND sladesc='Pending for Service release'  AND USCNO IS NULL AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(PENDING_STAT,'Y') <> 'DEL'"
		 * ; }
		 */
		if ("Deletion".equalsIgnoreCase(cscvo.getType())) {
			if ("Extension".equalsIgnoreCase(cscvo.getStatus())) {
				scsType = " AND R.ESTSTATUS IN ('02')  ";
			} else if ("Simplified".equalsIgnoreCase(cscvo.getStatus())) {
				scsType = " AND R.ESTSTATUS IN ('01') ";
			} else {
				scsType = " AND R.ESTSTATUS IN ('01','02') ";
			}

		}

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(R.WRT)+COUNT(R.BRT) TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE "
							+ " SLADESC='Rejected' AND  NVL(EXTDEM,SAPDEM)=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 ) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER )S"
							+ " WHERE R.REG_NO=A.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)"
							+ " AND R.REG_NO=D.REG_NO(+)" + " AND R.REG_NO=E.REG_NO(+)" + " AND R.REG_NO=F.REG_NO(+) "
							+ scsType + "" + " AND R.NCPARTCD=S.SECCD and s.cirname=? "
							+ " GROUP BY ROLLUP(S.divname) ORDER BY S.divname";
					reportPStmt = con.prepareStatement(query);
					System.out.println("Div_query_paid_cases"+query);
					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(R.WRT)+COUNT(R.BRT) TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  "
							// + scsType + ") R,"
							+ " SLADESC='Rejected' AND  NVL(EXTDEM,SAPDEM)=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 ) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER )S"
							+ " WHERE R.REG_NO=A.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)"
							+ " AND R.REG_NO=D.REG_NO(+)" + " AND R.REG_NO=E.REG_NO(+)" + " AND R.REG_NO=F.REG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD " + scsType + " and s.cirname=? and s.divname=? "
							+ " GROUP BY ROLLUP(S.subname) ORDER BY S.subname";
					reportPStmt = con.prepareStatement(query);
					System.out.println("subdiv_query_paid_cases"+query);
					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(R.WRT)+COUNT(R.BRT) TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  "
							// + scsType + ") R,"
							+ " SLADESC='Rejected' AND  NVL(EXTDEM,SAPDEM)=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 ) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER )S"
							+ " WHERE R.REG_NO=A.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)"
							+ " AND R.REG_NO=D.REG_NO(+)" + " AND R.REG_NO=E.REG_NO(+)" + " AND R.REG_NO=F.REG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD " + scsType + " and s.cirname=? and s.divname=? and s.subname=? "
							+ " GROUP BY ROLLUP(S.secname) ORDER BY S.secname";
					reportPStmt = con.prepareStatement(query);
					System.out.println("sec_query_paid_cases"+query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
						
					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(A.REG_NO)LESS_7,COUNT(B.REG_NO) LESS_30,COUNT(C.REG_NO)GRA_30,COUNT(D.REG_NO)GRA_45,COUNT(E.REG_NO)GRA_60,COUNT(F.REG_NO) GRA_90,COUNT(R.WRT) WRT,COUNT(R.BRT) BRT,COUNT(R.WRT)+COUNT(R.BRT) TOTAL FROM "
							+ " (SELECT REG_NO,NCPARTCD,ESTSTATUS,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE '' END) WRT, (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=8 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE  "
							// + scsType + ") R,"
							+ " SLADESC='Rejected' AND  NVL(EXTDEM,SAPDEM)=NVL(TOTAMT,0)    AND  CATEGORY_SUPPLY NOT IN ('5A1','5A2')  AND NVL(TOTAMT,0) >100 ) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) <=7)A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30)B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44)C,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59)D,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89)E,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE CEIL(SYSDATE-MAXPRDT) >=90 )F,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S" + " WHERE R.REG_NO=A.REG_NO(+)"
							+ " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)" + " AND R.REG_NO=D.REG_NO(+)"
							+ " AND R.REG_NO=E.REG_NO(+)" + " AND R.REG_NO=F.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD "
							+ scsType + " " + " GROUP BY ROLLUP(S.CIRNAME) ORDER BY S.CIRNAME";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("All_query_paid_cases"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
							dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
							dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

							dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
							dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
							dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

							dmapobj.setWrt(reportRst.getString(8));
							dmapobj.setBeyondReleased(reportRst.getString(9));
							dmapobj.setTot_pen(reportRst.getString(10));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setScs_rel_paid_less7(reportRst.getString(2));
							dmapobj.setScs_rel_paid_less30(reportRst.getString(3));
							dmapobj.setScs_rel_paid_gre30(reportRst.getString(4));

							dmapobj.setScs_rel_paid_gre45(reportRst.getString(5));
							dmapobj.setScs_rel_paid_gre60(reportRst.getString(6));
							dmapobj.setScs_rel_paid_gre90(reportRst.getString(7));

							dmapobj.setWrt(reportRst.getString(8));
							dmapobj.setBeyondReleased(reportRst.getString(9));
							dmapobj.setTot_pen(reportRst.getString(10));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	public CscpayVO getGGMPReportSCsDetails(CscpayVO cscvo) throws Exception{


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		
		
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		
		String qrypass1 = "";
		String qrypass2="";
		String daystatus = "";
		
		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {
//for categories
				if ("getLt1".equalsIgnoreCase(cscvo.getType())) {
					 qrypass1="AND SUBSTR(REG_NO,6,1) <> 'H'";
					daystatus = "AND R.CAT='1'  ";
					
				} else if ("getLt2".equalsIgnoreCase(cscvo.getType())) {
					
					 qrypass1="AND SUBSTR(REG_NO,6,1) <> 'H'";
					daystatus = " AND R.CAT='2' ";
				} else if ("getLt3".equalsIgnoreCase(cscvo.getType())) {
					qrypass1="AND SUBSTR(REG_NO,6,1) <> 'H'";
					daystatus = " AND R.CAT='3'  ";
				} else if ("getLt4".equalsIgnoreCase(cscvo.getType())) {
					qrypass1="AND SUBSTR(REG_NO,6,1) <> 'H'";
					daystatus = " AND R.CAT='4' ";
				} else if ("getLt5agl".equalsIgnoreCase(cscvo.getType())) {
					qrypass1="AND SUBSTR(REG_NO,6,1) <> 'H'";
					daystatus = " AND SUBSTR(CATEGORY_SUPPLY,1,3)   IN ('5A1','5A2') ";
				} 
				 else if ("getLt5other".equalsIgnoreCase(cscvo.getType())) {
					 qrypass1="AND SUBSTR(REG_NO,6,1) <> 'H'";
					daystatus = "AND (SUBSTR(R.CATEGORY_SUPPLY,1,3) IN ('5A3','5A4','5A5','5A6') OR  SUBSTR(CATEGORY_SUPPLY,1,2) IN ('5B','5D','5T'))  ";
				} else if ("getHT".equalsIgnoreCase(cscvo.getType())){
				     qrypass1="AND SUBSTR(REG_NO,6,1) = 'H'";
					daystatus = "";
				}
				
				
				
				System.out.println(cscvo.getType());

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						String query ="";
						
								reportPStmt = con.prepareStatement(query);
									reportPStmt.setString(1, cscvo.getFrom_date());
									reportPStmt.setString(2, cscvo.getTo_date());
									reportPStmt.setString(3, cscvo.getCircle());
									reportPStmt.setString(4, cscvo.getDivision());
									reportRst = reportPStmt.executeQuery();
						
						
						System.out.println("div_ser:"+query);
						
					}else{
						String query ="";
							
							reportPStmt = con.prepareStatement(query);
								reportPStmt.setString(1, cscvo.getFrom_date());
								reportPStmt.setString(2, cscvo.getTo_date());
								reportPStmt.setString(3, cscvo.getCircle());
								reportRst = reportPStmt.executeQuery();
					
					
					System.out.println("scs_test:"+query);
					}	
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						String query ="";
							reportPStmt = con.prepareStatement(query);
								reportPStmt.setString(1, cscvo.getFrom_date());
								reportPStmt.setString(2, cscvo.getTo_date());
								reportPStmt.setString(3, cscvo.getCircle());
								reportPStmt.setString(4, cscvo.getDivision());
								reportPStmt.setString(5, cscvo.getSubDiv());
								reportRst = reportPStmt.executeQuery();
					
					
					System.out.println("service_cir16082022_test:"+query);
					}
					else
					{
						String query ="";
								reportPStmt = con.prepareStatement(query);
									reportPStmt.setString(1, cscvo.getFrom_date());
									reportPStmt.setString(2, cscvo.getTo_date());
									reportPStmt.setString(3, cscvo.getCircle());
									reportPStmt.setString(4, cscvo.getDivision());
									reportRst = reportPStmt.executeQuery();
						
						
						System.out.println("test_div_ser:"+query);
					}
					} 
				else if ("SEC".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
					
						String query ="";
							
							reportPStmt = con.prepareStatement(query);
								reportPStmt.setString(1, cscvo.getFrom_date());
								reportPStmt.setString(2, cscvo.getTo_date());
								reportPStmt.setString(3, cscvo.getCircle());
								reportPStmt.setString(4, cscvo.getDivision());
								reportPStmt.setString(5, cscvo.getSubDiv());
								reportPStmt.setString(6, cscvo.getSec());
								reportRst = reportPStmt.executeQuery();
								System.out.println("service_cir16082022_test:"+query);
					
					
					}
					else
					{
						String query ="";
								reportPStmt = con.prepareStatement(query);
									reportPStmt.setString(1, cscvo.getFrom_date());
									reportPStmt.setString(2, cscvo.getTo_date());
									reportPStmt.setString(3, cscvo.getCircle());
									reportPStmt.setString(4, cscvo.getDivision());
									reportPStmt.setString(5, cscvo.getSubDiv());
									reportRst = reportPStmt.executeQuery();
						
						
						System.out.println("service_cir16082022_test:"+query);	
					}
				
					
				} else {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
					
						String query ="";
							reportPStmt = con.prepareStatement(query);
								reportPStmt.setString(1, cscvo.getFrom_date());
								reportPStmt.setString(2, cscvo.getTo_date());
								reportPStmt.setString(3, cscvo.getCircle());
								reportRst = reportPStmt.executeQuery();
					
					
					System.out.println("scs_test1:"+query);
				}else
				{

					String query ="";
							
							reportPStmt = con.prepareStatement(query);
								reportPStmt.setString(1, cscvo.getFrom_date());
								reportPStmt.setString(2, cscvo.getTo_date());
								
								reportRst = reportPStmt.executeQuery();
					
					
					System.out.println("scs_test2:"+query);
				}
				}	

				if (reportRst != null) {

					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(reportRst.getString(1));
						vo.setDivision(reportRst.getString(2));
						vo.setSubDiv(reportRst.getString(3));
						vo.setSec(reportRst.getString(4));
						vo.setReg_no(reportRst.getString(5));
						vo.setCunsu_name(reportRst.getString(6));
						vo.setRegDate(reportRst.getString(7));
						vo.setMeeseva_ref(reportRst.getString(8));
						vo.setNameofconsumer(reportRst.getString(9));
						vo.setContactno(reportRst.getString(10));
						vo.setPaidamount(reportRst.getString(11));
						vo.setPrdate(reportRst.getString(12));
						
						vo.setDateofpayment(reportRst.getString(13));
						vo.setNoofdayspayment(reportRst.getString(14));
						vo.setReason(reportRst.getString(15));
						
						vo.setAppdeleteon(reportRst.getString(16));

						dashList.add(vo);

					}
					
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	
	
	}
	public CscpayVO getPaidApplicationDeleteExportDetails(CscpayVO cscvo) throws Exception{

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		
		
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		
		String qrypass1 = "";
		String qrypass2="";
		String daystatus = "";
		
		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {
//for categories
				if ("getLt1".equalsIgnoreCase(cscvo.getType())) {
					 qrypass1="AND SUBSTR(REG_NO,6,1) <> 'H'";
					daystatus = "AND R.CAT='1'  ";
					
				} else if ("getLt2".equalsIgnoreCase(cscvo.getType())) {
					
					 qrypass1="AND SUBSTR(REG_NO,6,1) <> 'H'";
					daystatus = " AND R.CAT='2' ";
				} else if ("getLt3".equalsIgnoreCase(cscvo.getType())) {
					qrypass1="AND SUBSTR(REG_NO,6,1) <> 'H'";
					daystatus = " AND R.CAT='3'  ";
				} else if ("getLt4".equalsIgnoreCase(cscvo.getType())) {
					qrypass1="AND SUBSTR(REG_NO,6,1) <> 'H'";
					daystatus = " AND R.CAT='4' ";
				} else if ("getLt5agl".equalsIgnoreCase(cscvo.getType())) {
					qrypass1="AND SUBSTR(REG_NO,6,1) <> 'H'";
					daystatus = " AND SUBSTR(CATEGORY_SUPPLY,1,3)   IN ('5A1','5A2') ";
				} 
				 else if ("getLt5other".equalsIgnoreCase(cscvo.getType())) {
					 qrypass1="AND SUBSTR(REG_NO,6,1) <> 'H'";
					daystatus = "AND (SUBSTR(R.CATEGORY_SUPPLY,1,3) IN ('5A3','5A4','5A5','5A6') OR  SUBSTR(CATEGORY_SUPPLY,1,2) IN ('5B','5D','5T'))  ";
				} else if ("getHT".equalsIgnoreCase(cscvo.getType())){
				     qrypass1="AND SUBSTR(REG_NO,6,1) = 'H'";
					daystatus = "";
				}
				
				
				
				//System.out.println(cscvo.getType());

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						String query =" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.REG_DATE,R.CAT,R.LOAD,R.CONSUMER_NAME,R.PHONE_NO,R.PAID_AMOUNT,R.PRDATE,TRUNC(R.PRDATE-C.DELETED_ON) NO_OF_DAYS_PAYMENT,C.DELETED_ON,C.REASON,R.STATUS FROM\r\n" + 
								"(SELECT REG_NO,REG_DATE,NCPARTCD,CATEGORY_SUPPLY,SUBSTR(CATEGORY_SUPPLY,1,1) CAT,CONTRACTED_LOAD LOAD,CONSUMER_NAME,PHONE_NO,NVL(TOTAMT,GRP_COLL) PAID_AMOUNT,NVL(MAXPRDT,GRP_PRDT)PRDATE,\r\n" + 
								"(CASE WHEN (NVL(REJECTED,'Y')='X') THEN 'DELETED' ELSE 'LIVE' END) STATUS  FROM REP_FINAL\r\n" + 
								"WHERE  (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) AND NVL(TOTAMT,0)  > 500 AND USCNO IS NULL  "+qrypass1+")R,\r\n" + 
								"(SELECT REG_NO,SUBSTR(RESPONSE,1,50) REASON,RESPONSE_DATE DELETED_ON FROM CONNECTION_RESPONSES WHERE  TRUNC(RESPONSE_DATE) BETWEEN TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY') AND NVL(PENDING_AT,'0') IN ('4','20'))C,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME ,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD\r\n" + 
								"AND R.REG_NO=C.REG_NO AND S.CIRNAME=? AND S.DIVNAME=? "+ daystatus+"";
								
								reportPStmt = con.prepareStatement(query);
									reportPStmt.setString(1, cscvo.getFrom_date());
									reportPStmt.setString(2, cscvo.getTo_date());
									reportPStmt.setString(3, cscvo.getCircle());
									reportPStmt.setString(4, cscvo.getDivision());
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println("div_ser:"+query);
						
					}else{
					String query =" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.REG_DATE,R.CAT,R.LOAD,R.CONSUMER_NAME,R.PHONE_NO,R.PAID_AMOUNT,R.PRDATE,TRUNC(R.PRDATE-C.DELETED_ON) NO_OF_DAYS_PAYMENT,C.DELETED_ON,C.REASON,R.STATUS FROM\r\n" + 
							"(SELECT REG_NO,REG_DATE,NCPARTCD,CATEGORY_SUPPLY,SUBSTR(CATEGORY_SUPPLY,1,1) CAT,CONTRACTED_LOAD LOAD,CONSUMER_NAME,PHONE_NO,NVL(TOTAMT,GRP_COLL) PAID_AMOUNT,NVL(MAXPRDT,GRP_PRDT)PRDATE,\r\n" + 
							"(CASE WHEN (NVL(REJECTED,'Y')='X') THEN 'DELETED' ELSE 'LIVE' END) STATUS  FROM REP_FINAL\r\n" + 
							"WHERE  (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) AND NVL(TOTAMT,0)  > 500 AND USCNO IS NULL  "+qrypass1+")R,\r\n" + 
							"(SELECT REG_NO,SUBSTR(RESPONSE,1,50) REASON,RESPONSE_DATE DELETED_ON FROM CONNECTION_RESPONSES WHERE  TRUNC(RESPONSE_DATE) BETWEEN TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY') AND NVL(PENDING_AT,'0') IN ('4','20'))C,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME ,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD\r\n" + 
							"AND R.REG_NO=C.REG_NO AND S.CIRNAME=? \r\n" + daystatus+"";
							
							reportPStmt = con.prepareStatement(query);
								reportPStmt.setString(1, cscvo.getFrom_date());
								reportPStmt.setString(2, cscvo.getTo_date());
								reportPStmt.setString(3, cscvo.getCircle());
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println("scs_test:"+query);
					}	
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
					String query =" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.REG_DATE,R.CAT,R.LOAD,R.CONSUMER_NAME,R.PHONE_NO,R.PAID_AMOUNT,R.PRDATE,TRUNC(R.PRDATE-C.DELETED_ON) NO_OF_DAYS_PAYMENT,C.DELETED_ON,C.REASON,R.STATUS FROM\r\n" + 
							"(SELECT REG_NO,REG_DATE,NCPARTCD,CATEGORY_SUPPLY,SUBSTR(CATEGORY_SUPPLY,1,1) CAT,CONTRACTED_LOAD LOAD,CONSUMER_NAME,PHONE_NO,NVL(TOTAMT,GRP_COLL) PAID_AMOUNT,NVL(MAXPRDT,GRP_PRDT)PRDATE,\r\n" + 
							"(CASE WHEN (NVL(REJECTED,'Y')='X') THEN 'DELETED' ELSE 'LIVE' END) STATUS  FROM REP_FINAL\r\n" + 
							"WHERE  (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) AND NVL(TOTAMT,0)  > 500 AND USCNO IS NULL  "+qrypass1+")R,\r\n" + 
							"(SELECT REG_NO,SUBSTR(RESPONSE,1,50) REASON,RESPONSE_DATE DELETED_ON FROM CONNECTION_RESPONSES WHERE  TRUNC(RESPONSE_DATE) BETWEEN TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY') AND NVL(PENDING_AT,'0') IN ('4','20'))C,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME ,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD\r\n" + 
							"AND R.REG_NO=C.REG_NO\r\n" + 
							"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?\r\n" + 
							daystatus+"";
							
							reportPStmt = con.prepareStatement(query);
								reportPStmt.setString(1, cscvo.getFrom_date());
								reportPStmt.setString(2, cscvo.getTo_date());
								reportPStmt.setString(3, cscvo.getCircle());
								reportPStmt.setString(4, cscvo.getDivision());
								reportPStmt.setString(5, cscvo.getSubDiv());
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println("service_cir16082022_test:"+query);
					}
					else
					{
						String query =" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.REG_DATE,R.CAT,R.LOAD,R.CONSUMER_NAME,R.PHONE_NO,R.PAID_AMOUNT,R.PRDATE,TRUNC(R.PRDATE-C.DELETED_ON) NO_OF_DAYS_PAYMENT,C.DELETED_ON,C.REASON,R.STATUS FROM\r\n" + 
								"(SELECT REG_NO,REG_DATE,NCPARTCD,CATEGORY_SUPPLY,SUBSTR(CATEGORY_SUPPLY,1,1) CAT,CONTRACTED_LOAD LOAD,CONSUMER_NAME,PHONE_NO,NVL(TOTAMT,GRP_COLL) PAID_AMOUNT,NVL(MAXPRDT,GRP_PRDT)PRDATE,\r\n" + 
								"(CASE WHEN (NVL(REJECTED,'Y')='X') THEN 'DELETED' ELSE 'LIVE' END) STATUS  FROM REP_FINAL\r\n" + 
								"WHERE  (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) AND NVL(TOTAMT,0)  > 500 AND USCNO IS NULL  "+qrypass1+")R,\r\n" + 
								"(SELECT REG_NO,SUBSTR(RESPONSE,1,50) REASON,RESPONSE_DATE DELETED_ON FROM CONNECTION_RESPONSES WHERE  TRUNC(RESPONSE_DATE) BETWEEN TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY') AND NVL(PENDING_AT,'0') IN ('4','20'))C,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME ,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD\r\n" + 
								"AND R.REG_NO=C.REG_NO AND S.CIRNAME=? AND S.DIVNAME=?\r\n" + daystatus+"";
								
								reportPStmt = con.prepareStatement(query);
									reportPStmt.setString(1, cscvo.getFrom_date());
									reportPStmt.setString(2, cscvo.getTo_date());
									reportPStmt.setString(3, cscvo.getCircle());
									reportPStmt.setString(4, cscvo.getDivision());
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println("test_div_ser:"+query);
					}
					} 
				else if ("SEC".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
					
					String query =" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.REG_DATE,R.CAT,R.LOAD,R.CONSUMER_NAME,R.PHONE_NO,R.PAID_AMOUNT,R.PRDATE,TRUNC(R.PRDATE-C.DELETED_ON) NO_OF_DAYS_PAYMENT,C.DELETED_ON,C.REASON,R.STATUS FROM\r\n" + 
							"(SELECT REG_NO,REG_DATE,NCPARTCD,CATEGORY_SUPPLY,SUBSTR(CATEGORY_SUPPLY,1,1) CAT,CONTRACTED_LOAD LOAD,CONSUMER_NAME,PHONE_NO,NVL(TOTAMT,GRP_COLL) PAID_AMOUNT,NVL(MAXPRDT,GRP_PRDT)PRDATE,\r\n" + 
							"(CASE WHEN (NVL(REJECTED,'Y')='X') THEN 'DELETED' ELSE 'LIVE' END) STATUS  FROM REP_FINAL\r\n" + 
							"WHERE  (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) AND NVL(TOTAMT,0)  > 500 AND USCNO IS NULL  "+qrypass1+")R,\r\n" + 
							"(SELECT REG_NO,SUBSTR(RESPONSE,1,50) REASON,RESPONSE_DATE DELETED_ON FROM CONNECTION_RESPONSES WHERE  TRUNC(RESPONSE_DATE) BETWEEN TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY') AND NVL(PENDING_AT,'0') IN ('4','20'))C,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME ,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD\r\n" + 
							"AND R.REG_NO=C.REG_NO\r\n" + 
							"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=? AND S.SECNAME=?\r\n" + 
							daystatus+"";
							
							reportPStmt = con.prepareStatement(query);
								reportPStmt.setString(1, cscvo.getFrom_date());
								reportPStmt.setString(2, cscvo.getTo_date());
								reportPStmt.setString(3, cscvo.getCircle());
								reportPStmt.setString(4, cscvo.getDivision());
								reportPStmt.setString(5, cscvo.getSubDiv());
								reportPStmt.setString(6, cscvo.getSec());
								reportRst = reportPStmt.executeQuery();
								//System.out.println("service_cir16082022_test:"+query);
					
					
					}
					else
					{
						String query =" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.REG_DATE,R.CAT,R.LOAD,R.CONSUMER_NAME,R.PHONE_NO,R.PAID_AMOUNT,R.PRDATE,TRUNC(R.PRDATE-C.DELETED_ON) NO_OF_DAYS_PAYMENT,C.DELETED_ON,C.REASON,R.STATUS FROM\r\n" + 
								"(SELECT REG_NO,REG_DATE,NCPARTCD,CATEGORY_SUPPLY,SUBSTR(CATEGORY_SUPPLY,1,1) CAT,CONTRACTED_LOAD LOAD,CONSUMER_NAME,PHONE_NO,NVL(TOTAMT,GRP_COLL) PAID_AMOUNT,NVL(MAXPRDT,GRP_PRDT)PRDATE,\r\n" + 
								"(CASE WHEN (NVL(REJECTED,'Y')='X') THEN 'DELETED' ELSE 'LIVE' END) STATUS  FROM REP_FINAL\r\n" + 
								"WHERE  (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) AND NVL(TOTAMT,0)  > 500 AND USCNO IS NULL  "+qrypass1+")R,\r\n" + 
								"(SELECT REG_NO,SUBSTR(RESPONSE,1,50) REASON,RESPONSE_DATE DELETED_ON FROM CONNECTION_RESPONSES WHERE  TRUNC(RESPONSE_DATE) BETWEEN TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY') AND NVL(PENDING_AT,'0') IN ('4','20'))C,\r\n" + 
								"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME ,SECCD FROM SPDCLMASTER)S\r\n" + 
								"WHERE R.NCPARTCD=S.SECCD\r\n" + 
								"AND R.REG_NO=C.REG_NO AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?\r\n" +daystatus+"";
								
								reportPStmt = con.prepareStatement(query);
									reportPStmt.setString(1, cscvo.getFrom_date());
									reportPStmt.setString(2, cscvo.getTo_date());
									reportPStmt.setString(3, cscvo.getCircle());
									reportPStmt.setString(4, cscvo.getDivision());
									reportPStmt.setString(5, cscvo.getSubDiv());
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println("service_cir16082022_test:"+query);	
					}
				
					
				} else {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
					
					String query =" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.REG_DATE,R.CAT,R.LOAD,R.CONSUMER_NAME,R.PHONE_NO,R.PAID_AMOUNT,R.PRDATE,TRUNC(R.PRDATE-C.DELETED_ON) NO_OF_DAYS_PAYMENT,C.DELETED_ON,C.REASON,R.STATUS FROM\r\n" + 
							"(SELECT REG_NO,REG_DATE,NCPARTCD,CATEGORY_SUPPLY,SUBSTR(CATEGORY_SUPPLY,1,1) CAT,CONTRACTED_LOAD LOAD,CONSUMER_NAME,PHONE_NO,NVL(TOTAMT,GRP_COLL) PAID_AMOUNT,NVL(MAXPRDT,GRP_PRDT)PRDATE,\r\n" + 
							"(CASE WHEN (NVL(REJECTED,'Y')='X') THEN 'DELETED' ELSE 'LIVE' END) STATUS  FROM REP_FINAL\r\n" + 
							"WHERE  (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) AND NVL(TOTAMT,0)  > 500 AND USCNO IS NULL  "+qrypass1+")R,\r\n" + 
							"(SELECT REG_NO,SUBSTR(RESPONSE,1,50) REASON,RESPONSE_DATE DELETED_ON FROM CONNECTION_RESPONSES WHERE  TRUNC(RESPONSE_DATE) BETWEEN TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY') AND NVL(PENDING_AT,'0') IN ('4','20'))C,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME ,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD\r\n" + 
							"AND R.REG_NO=C.REG_NO\r\n" + 
							"AND S.CIRNAME=?\r\n" + 
							daystatus+"";
							
							reportPStmt = con.prepareStatement(query);
								reportPStmt.setString(1, cscvo.getFrom_date());
								reportPStmt.setString(2, cscvo.getTo_date());
								reportPStmt.setString(3, cscvo.getCircle());
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println("scs_test1:"+query);
				}else
				{

					String query =" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.REG_DATE,R.CAT,R.LOAD,R.CONSUMER_NAME,R.PHONE_NO,R.PAID_AMOUNT,R.PRDATE,TRUNC(R.PRDATE-C.DELETED_ON) NO_OF_DAYS_PAYMENT,C.DELETED_ON,C.REASON,R.STATUS FROM\r\n" + 
							"(SELECT REG_NO,REG_DATE,NCPARTCD,CATEGORY_SUPPLY,SUBSTR(CATEGORY_SUPPLY,1,1) CAT,CONTRACTED_LOAD LOAD,CONSUMER_NAME,PHONE_NO,NVL(TOTAMT,GRP_COLL) PAID_AMOUNT,NVL(MAXPRDT,GRP_PRDT)PRDATE,\r\n" + 
							"(CASE WHEN (NVL(REJECTED,'Y')='X') THEN 'DELETED' ELSE 'LIVE' END) STATUS  FROM REP_FINAL\r\n" + 
							"WHERE  (NVL(TOTAMT,0) >= NVL(GRP_DEMAND,SAPDEM) OR NVL(TOTAMT,0) >=NVL(EXTDEM,SAPDEM)) AND NVL(TOTAMT,0)  > 500 AND USCNO IS NULL  "+qrypass1+")R,\r\n" + 
							"(SELECT REG_NO,SUBSTR(RESPONSE,1,50) REASON,RESPONSE_DATE DELETED_ON FROM CONNECTION_RESPONSES WHERE  TRUNC(RESPONSE_DATE) BETWEEN TO_DATE(?,'DD-MM-YY') AND TO_DATE(?,'DD-MM-YY') AND NVL(PENDING_AT,'0') IN ('4','20'))C,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME ,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE R.NCPARTCD=S.SECCD\r\n" + 
							"AND R.REG_NO=C.REG_NO\r\n" + daystatus+"";
							
							reportPStmt = con.prepareStatement(query);
								reportPStmt.setString(1, cscvo.getFrom_date());
								reportPStmt.setString(2, cscvo.getTo_date());
								
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println("scs_test2:"+query);
				}
				}	

				if (reportRst != null) {

					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(reportRst.getString(1));
						vo.setDivision(reportRst.getString(2));
						vo.setSubDiv(reportRst.getString(3));
						vo.setSec(reportRst.getString(4));
						vo.setReg_no(reportRst.getString(5));
						vo.setCunsu_name(reportRst.getString(6));
						vo.setRegDate(reportRst.getString(7));
						vo.setMeeseva_ref(reportRst.getString(8));
						vo.setNameofconsumer(reportRst.getString(9));
						vo.setContactno(reportRst.getString(10));
						vo.setPaidamount(reportRst.getString(11));
						vo.setPrdate(reportRst.getString(12));
						
						vo.setDateofpayment(reportRst.getString(13));
						vo.setNoofdayspayment(reportRst.getString(14));
						vo.setReason(reportRst.getString(15));
						
						vo.setAppdeleteon(reportRst.getString(16));

						dashList.add(vo);

					}
					
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	
		
	}
	
//getGEOTAGCOORDINATESAbstractDetails
	public CscpayVO getGEOTAGCOORDINATESAbstractDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{
		



		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String status = "";
		String qrypass1 = "";
		
		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;
		
		/*if ("Extension".equalsIgnoreCase(cscvo.getType())) {
			
            qrypass1="AND NVL(ESTSTATUS,'03')='02' AND INTIMATE_DATE IS NOT NULL";
			status = "   NVL(ESTSTATUS,'03')='02' AND NVL(SAPDEM,0) > 0 ";
			
		} else if ("Simplified".equalsIgnoreCase(cscvo.getType())){
			
			 qrypass1=" AND NVL(ESTSTATUS,'03')='01' AND nvl(totamt,0) > 0";
			status = "    NVL(ESTSTATUS,'03')='01' AND NVL(EXTDEM,0) > 0  ";
			

		}*/

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					
					String query ="SELECT NVL(DIVNAME,'TOTAL'),\r\n" + 
							"  COUNT(DISTINCT reg_no)\r\n" + 
							"FROM DUPS_GEOTAGCOORDINATES,\r\n" + 
							"  spdclmaster\r\n" + 
							"WHERE geopartcd = seccd  AND CIRNAME=?\r\n" + 
							"GROUP BY ROLLUP(DIVNAME)\r\n" + 
							"ORDER BY DIVNAME";

					
					
					//System.out.println("fee_paid_DIV1"+query);
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
					//System.out.println("fee_paid_DIV"+query);
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query ="SELECT NVL(SUBNAME,'TOTAL'),\r\n" + 
							"  COUNT(DISTINCT reg_no)\r\n" + 
							"FROM DUPS_GEOTAGCOORDINATES,\r\n" + 
							"  spdclmaster\r\n" + 
							"WHERE geopartcd = seccd  AND CIRNAME=? AND DIVNAME=?\r\n" + 
							"GROUP BY ROLLUP(SUBNAME)\r\n" + 
							"ORDER BY SUBNAME";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query ="SELECT NVL(SECNAME,'TOTAL'),\r\n" + 
							"  COUNT(DISTINCT reg_no)\r\n" + 
							"FROM DUPS_GEOTAGCOORDINATES,\r\n" + 
							"  spdclmaster\r\n" + 
							"WHERE geopartcd = seccd  AND CIRNAME=? AND DIVNAME=? AND SUBNAME=?\r\n" + 
							"GROUP BY ROLLUP(SECNAME)\r\n" + 
							"ORDER BY SECNAME";
					
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();

				} else if ("CIR".equals(cscvo.getFlag())) {

					String query ="SELECT NVL(cirname,'TOTAL'),\r\n" + 
							"  COUNT(DISTINCT reg_no)\r\n" + 
							"FROM DUPS_GEOTAGCOORDINATES,\r\n" + 
							"  spdclmaster\r\n" + 
							"WHERE geopartcd = seccd\r\n" + 
							"GROUP BY ROLLUP(cirname)\r\n" + 
							"ORDER BY cirname";
					reportPStmt = con.prepareStatement(query);
					
					System.out.println("duplicate"+query);
					reportRst = reportPStmt.executeQuery();
				}else if("duplicate".equals(cscvo.getFlag())){
					
					String query="SELECT d.REG_NO,\r\n" + 
							"  d.ADDRESS,\r\n" + 
							"  d.trandt,\r\n" + 
							"  d.geopartcd,\r\n" + 
							"  d.longitude,\r\n" + 
							"  d.LATITUDE,\r\n" + 
							"  d.lmcode,\r\n" + 
							"  d.released\r\n" + 
							"FROM DUPS_GEOTAGCOORDINATES d,spdclmaster s\r\n" + 
							"WHERE geopartcd = seccd and secname=?";
					System.out.println(cscvo.getSec());
					System.out.println(query);
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getSec());
					reportRst = reportPStmt.executeQuery();
					System.out.println(query);
					
				}
				
				if (reportRst != null) {
					while (reportRst.next()) {
						
						CscpayVO dmapobj = new CscpayVO();
						
						if(cscvo.getFlag().equals("duplicate")){
							
							dmapobj.setGeo_adress(reportRst.getString(2));
							dmapobj.setGeo_trandt(reportRst.getString(3));
							dmapobj.setGeo_geopartcd(reportRst.getString(4));
							dmapobj.setGeo_longtitude(reportRst.getString(5));
							dmapobj.setGeo_lattitude(reportRst.getString(6));
							dmapobj.setGeo_lmcode(reportRst.getString(7));
							dmapobj.setGeo_released(reportRst.getString(8));
							
							cscmap.put(reportRst.getString(1), dmapobj);
						}
						else
						{
                            dmapobj.setDuplicategeocoorinates(reportRst.getString(2));
							
							
							

							cscmap.put(reportRst.getString(1), dmapobj);
							
						}
						
						/*if(cscvo.getFlag().equals("duplicate")){
							
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setGeo_regno(reportRst.getString(1));
							dmapobj.setGeo_adress(reportRst.getString(2));
							dmapobj.setGeo_trandt(reportRst.getString(3));
							dmapobj.setGeo_geopartcd(reportRst.getString(4));
							dmapobj.setGeo_longtitude(reportRst.getString(5));
							dmapobj.setGeo_lattitude(reportRst.getString(6));
							dmapobj.setGeo_lmcode(reportRst.getString(7));
							dmapobj.setGeo_released(reportRst.getString(8));
							
							
						}

						else if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setDuplicategeocoorinates(reportRst.getString(2));
							
							
							

														

						} */
						
						
						/*{
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setDuplicategeocoorinates(reportRst.getString(2));
							
							
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}*/
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
		
	}
	
	public CscpayVO getFeePaidApplicationReportAbstractDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{


		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String status = "";
		String qrypass1 = "";
		
		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;
		
		if ("Extension".equalsIgnoreCase(cscvo.getType())) {
			
            qrypass1="AND NVL(ESTSTATUS,'03')='02' AND INTIMATE_DATE IS NOT NULL";
			status = "   NVL(ESTSTATUS,'03')='02' AND NVL(SAPDEM,0) > 0 ";
			
		} else if ("Simplified".equalsIgnoreCase(cscvo.getType())){
			
			 qrypass1=" AND NVL(ESTSTATUS,'03')='01' AND nvl(totamt,0) > 0";
			status = "    NVL(ESTSTATUS,'03')='01' AND NVL(EXTDEM,0) > 0  ";
			

		}

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					
					String query = "SELECT NVL(S.DIVNAME,'TOTAL'),COUNT(B.REG_NO) between15_30,COUNT(C.REG_NO)GRA_THAN_31 FROM\r\n" + 
							"(SELECT REG_NO ,NCPARTCD from rep_final where nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 "+ qrypass1 +")A,\r\n" + 
							"(select REG_NO,CEIL(SYSDATE-APP_DATE) ,NCPARTCD from rep_final where nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 AND CEIL(SYSDATE-APP_DATE) between '15' and '30' \r\n" + 
							"AND "+ status +" )B,\r\n" + 
							"(select REG_NO,CEIL(SYSDATE-APP_DATE) ,NCPARTCD from rep_final where nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 AND CEIL(SYSDATE-APP_DATE) > 31 \r\n" + 
							"AND "+ status +" )C,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,CIRCD,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE A.NCPARTCD=S.SECCD \r\n" + 
							"AND A.REG_NO=B.REG_NO(+)\r\n" + 
							"AND A.REG_NO=C.REG_NO(+) AND S.CIRNAME=?\r\n" + 
							"GROUP BY ROLLUP(S.DIVNAME) ORDER BY S.DIVNAME";
					//System.out.println("fee_paid_DIV1"+query);
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
					//System.out.println("fee_paid_DIV"+query);
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.SUBNAME,'TOTAL'),COUNT(B.REG_NO) between15_30,COUNT(C.REG_NO)GRA_THAN_31 FROM\r\n" + 
							"(SELECT REG_NO ,NCPARTCD from rep_final where nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 "+ qrypass1 +")A,\r\n" + 
							"(select REG_NO,CEIL(SYSDATE-APP_DATE) ,NCPARTCD from rep_final where nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 AND CEIL(SYSDATE-APP_DATE) between '15' and '30' \r\n" + 
							"AND "+ status +" )B,\r\n" + 
							"(select REG_NO,CEIL(SYSDATE-APP_DATE) ,NCPARTCD from rep_final where nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 AND CEIL(SYSDATE-APP_DATE) > 31 \r\n" + 
							"AND "+ status +" )C,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,CIRCD,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE A.NCPARTCD=S.SECCD \r\n" + 
							"AND A.REG_NO=B.REG_NO(+)\r\n" + 
							"AND A.REG_NO=C.REG_NO(+) AND S.CIRNAME=? AND S.DIVNAME=?\r\n" + 
							"GROUP BY ROLLUP(S.SUBNAME) ORDER BY S.SUBNAME";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT NVL(S.SECNAME,'TOTAL'),COUNT(B.REG_NO) between15_30,COUNT(C.REG_NO)GRA_THAN_31 FROM\r\n" + 
							"(SELECT REG_NO ,NCPARTCD from rep_final where nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 "+ qrypass1 +")A,\r\n" + 
							"(select REG_NO,CEIL(SYSDATE-APP_DATE) ,NCPARTCD from rep_final where nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 AND CEIL(SYSDATE-APP_DATE) between '15' and '30' \r\n" + 
							"AND "+ status +" )B,\r\n" + 
							"(select REG_NO,CEIL(SYSDATE-APP_DATE) ,NCPARTCD from rep_final where nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 AND CEIL(SYSDATE-APP_DATE) > 31 \r\n" + 
							"AND "+ status +" )C,\r\n" + 
							"(SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,CIRCD,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE A.NCPARTCD=S.SECCD \r\n" + 
							"AND A.REG_NO=B.REG_NO(+)\r\n" + 
							"AND A.REG_NO=C.REG_NO(+) AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?\r\n" + 
							"GROUP BY ROLLUP(S.SECNAME) ORDER BY S.SECNAME";
					
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT NVL(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) between15_30,COUNT(C.REG_NO)GRA_THAN_31 FROM\r\n" + 
							"(SELECT REG_NO ,NCPARTCD from rep_final where nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 "+ qrypass1 +")A,\r\n" + 
							"(select REG_NO,CEIL(SYSDATE-APP_DATE) ,NCPARTCD from rep_final where nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 AND CEIL(SYSDATE-APP_DATE) between '15' and '30' \r\n" + 
							"AND "+ status +" )B,\r\n" + 
							"(select REG_NO,CEIL(SYSDATE-APP_DATE) ,NCPARTCD from rep_final where nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 AND CEIL(SYSDATE-APP_DATE) > 31 \r\n" + 
							"AND "+ status +" )C,\r\n" + 
							"(SELECT CIRNAME,CIRCD,SECCD FROM SPDCLMASTER)S\r\n" + 
							"WHERE A.NCPARTCD=S.SECCD \r\n" + 
							"AND A.REG_NO=B.REG_NO(+)\r\n" + 
							"AND A.REG_NO=C.REG_NO(+)\r\n" + 
							"GROUP BY ROLLUP(S.CIRNAME) ORDER BY S.CIRNAME";
					
					reportPStmt = con.prepareStatement(query);
					
					//System.out.println("fee_paid"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setFeepaidbetween15to30(reportRst.getString(2));
							dmapobj.setFeepaidgtr31(reportRst.getString(3));
							
							

														

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setFeepaidbetween15to30(reportRst.getString(2));
							dmapobj.setFeepaidgtr31(reportRst.getString(3));
							
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
		
	
		
	}
	
	public CscpayVO getAPTIDCOReportAbstractDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{
		
		


		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {
				
                if ("DIV".equals(cscvo.getFlag())) {

					
					String query = "select nvl(s.DIVNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APTIDCO')A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APTIDCO' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APTIDCO' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=?\r\n" + 
							"group by ROLLUP(s.DIVNAME)\r\n" + 
							"ORDER BY S.DIVNAME";
					
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "select nvl(s.SUBNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APTIDCO')A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APTIDCO' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APTIDCO' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,SUBNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=? AND S.DIVNAME=?\r\n" + 
							"group by ROLLUP(s.SUBNAME)\r\n" + 
							"ORDER BY S.SUBNAME";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportRst = reportPStmt.executeQuery();
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select nvl(s.SECNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APTIDCO')A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APTIDCO' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APTIDCO' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,SUBNAME,SECNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?\r\n" + 
							"group by ROLLUP(s.SECNAME)\r\n" + 
							"ORDER BY S.SECNAME";
					
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "select nvl(s.cirname,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APTIDCO')A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APTIDCO' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APTIDCO' AND NVL(REJECTED,'Y')='X')C,\r\n" + 
							"(select cirname,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"group by ROLLUP(s.cirname)\r\n" + 
							"ORDER BY S.cirname";
					
					reportPStmt = con.prepareStatement(query);
					
					//System.out.println("aptidco:"+query);
					reportRst = reportPStmt.executeQuery();
				}


							if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							//dmapobj.setAptidcoapproved_count(reportRst.getString(2));
							dmapobj.setAptidcoregistered(reportRst.getString(2));
							dmapobj.setAptidcoreleased(reportRst.getString(3));
							dmapobj.setAptidcodeleted(reportRst.getString(4));
							dmapobj.setAptidcototal(reportRst.getString(5));
							

														

						} else {
							CscpayVO dmapobj = new CscpayVO();

							//dmapobj.setAptidcoapproved_count(reportRst.getString(2));
							dmapobj.setAptidcoregistered(reportRst.getString(2));
							dmapobj.setAptidcoreleased(reportRst.getString(3));
							dmapobj.setAptidcodeleted(reportRst.getString(4));
							dmapobj.setAptidcototal(reportRst.getString(5));
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
	}
	
	public CscpayVO getAPSFLMainAbstractDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{
		

		

			
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		Map<String, CscpayVO> cscmap2 = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {
				
	//PHASE1
if ("DIV".equals(cscvo.getFlag())) {

					
					String query = "select nvl(s.DIVNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND TRUNC(REG_DATE) > ='21-MAR-23' )A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APSFL01' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=?\r\n" + 
							"group by ROLLUP(s.DIVNAME)\r\n" + 
							"ORDER BY S.DIVNAME";
					//System.out.println("query"+query);
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
					
					//System.out.println("APSFL_DIV:"+query);
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "select nvl(s.SUBNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND TRUNC(REG_DATE) > ='21-MAR-23')A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APSFL01' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,SUBNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=? AND S.DIVNAME=?\r\n" + 
							"group by ROLLUP(s.SUBNAME)\r\n" + 
							"ORDER BY S.SUBNAME";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportRst = reportPStmt.executeQuery();
					
					//System.out.println("APSFL_SUB_DIV:"+query);
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select nvl(s.SECNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND TRUNC(REG_DATE) > ='21-MAR-23' )A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APSFL01' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,SUBNAME,SECNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?\r\n" + 
							"group by ROLLUP(s.SECNAME)\r\n" + 
							"ORDER BY S.SECNAME";
					
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();
					//System.out.println("APSFL_SEC:"+query);

				} else if ("CIR".equals(cscvo.getFlag())){

					String query = "select nvl(s.cirname,'TOTAL'),nvl(decode (s.cirname,'ANANTHAPUR',281,'KURNOOL',110,'KADAPA',236,'NELLORE',279),'906')APPRD_COUNT,count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND TRUNC(REG_DATE) > ='21-MAR-23' )A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND NVL(REJECTED,'Y')='X')C,\r\n" + 
							"(select cirname,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"group by ROLLUP(s.cirname)\r\n" + 
							"ORDER BY S.cirname";
					//System.out.println("APSFL_CIRCLE:"+query);
					reportPStmt = con.prepareStatement(query);
					
					//System.out.println("APSFL_CIRCLE:"+query);
					reportRst = reportPStmt.executeQuery();
				}


					if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							if ("CIR".equals(cscvo.getFlag())){
							dmapobj.setAptidcoapproved_count(reportRst.getString(2));

							dmapobj.setJcolonyregistered(reportRst.getString(3));
							dmapobj.setJcolonyreleased(reportRst.getString(4));
							dmapobj.setJcolonydeleted(reportRst.getString(5));
							dmapobj.setJcolonytotal(reportRst.getString(6));
							}else{
								
								dmapobj.setJcolonyregistered(reportRst.getString(2));
								dmapobj.setJcolonyreleased(reportRst.getString(3));
								dmapobj.setJcolonydeleted(reportRst.getString(4));
								dmapobj.setJcolonytotal(reportRst.getString(5));

							}

														

						} else {
							CscpayVO dmapobj = new CscpayVO();

							if ("CIR".equals(cscvo.getFlag())){
								dmapobj.setAptidcoapproved_count(reportRst.getString(2));

								dmapobj.setJcolonyregistered(reportRst.getString(3));
								dmapobj.setJcolonyreleased(reportRst.getString(4));
								dmapobj.setJcolonydeleted(reportRst.getString(5));
								dmapobj.setJcolonytotal(reportRst.getString(6));
								}else{
									
									dmapobj.setJcolonyregistered(reportRst.getString(2));
									dmapobj.setJcolonyreleased(reportRst.getString(3));
									dmapobj.setJcolonydeleted(reportRst.getString(4));
									dmapobj.setJcolonytotal(reportRst.getString(5));

								}

														
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				
				
				//PHASE2			
	if ("DIV".equals(cscvo.getFlag())) {

					
					String query = "select nvl(s.DIVNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND TRUNC(REG_DATE) > ='21-MAR-23' )A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APSFL02' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=?\r\n" + 
							"group by ROLLUP(s.DIVNAME)\r\n" + 
							"ORDER BY S.DIVNAME";
					//System.out.println("query"+query);
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
					
					//System.out.println("APSFL02_DIV:"+query);
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "select nvl(s.SUBNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND TRUNC(REG_DATE) > ='21-MAR-23')A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APSFL02' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,SUBNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=? AND S.DIVNAME=?\r\n" + 
							"group by ROLLUP(s.SUBNAME)\r\n" + 
							"ORDER BY S.SUBNAME";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportRst = reportPStmt.executeQuery();
					
					//System.out.println("APSFL02_SUB_DIV:"+query);
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select nvl(s.SECNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND TRUNC(REG_DATE) > ='21-MAR-23' )A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APSFL02' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,SUBNAME,SECNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?\r\n" + 
							"group by ROLLUP(s.SECNAME)\r\n" + 
							"ORDER BY S.SECNAME";
					
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();
					//System.out.println("APSFL02_SEC:"+query);

				} else if ("CIR".equals(cscvo.getFlag())){

					String query = "select nvl(s.cirname,'TOTAL'),nvl(decode (s.cirname,'ANANTHAPUR',669,'KURNOOL',768,'KADAPA',484,'NELLORE',660),'2581')APPRD_COUNT,count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND TRUNC(REG_DATE) > ='21-MAR-23' )A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND NVL(REJECTED,'Y')='X')C,\r\n" + 
							"(select cirname,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"group by ROLLUP(s.cirname)\r\n" + 
							"ORDER BY S.cirname";
					//System.out.println("APSFL02_CIRCLE:"+query);
					reportPStmt = con.prepareStatement(query);
					
					//System.out.println("APSFL02_CIRCLE:"+query);
					reportRst = reportPStmt.executeQuery();
				}


					if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap2.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap2.get(reportRst.getString(1));
							if ("CIR".equals(cscvo.getFlag())){
							dmapobj.setAptidcoapproved_count(reportRst.getString(2));

							dmapobj.setJcolonyregistered(reportRst.getString(3));
							dmapobj.setJcolonyreleased(reportRst.getString(4));
							dmapobj.setJcolonydeleted(reportRst.getString(5));
							dmapobj.setJcolonytotal(reportRst.getString(6));
							}else{
								
								dmapobj.setJcolonyregistered(reportRst.getString(2));
								dmapobj.setJcolonyreleased(reportRst.getString(3));
								dmapobj.setJcolonydeleted(reportRst.getString(4));
								dmapobj.setJcolonytotal(reportRst.getString(5));

							}

														

						} else {
							CscpayVO dmapobj = new CscpayVO();

							if ("CIR".equals(cscvo.getFlag())){
								dmapobj.setAptidcoapproved_count(reportRst.getString(2));

								dmapobj.setJcolonyregistered(reportRst.getString(3));
								dmapobj.setJcolonyreleased(reportRst.getString(4));
								dmapobj.setJcolonydeleted(reportRst.getString(5));
								dmapobj.setJcolonytotal(reportRst.getString(6));
								}else{
									
									dmapobj.setJcolonyregistered(reportRst.getString(2));
									dmapobj.setJcolonyreleased(reportRst.getString(3));
									dmapobj.setJcolonydeleted(reportRst.getString(4));
									dmapobj.setJcolonytotal(reportRst.getString(5));

								}

														
							

							cscmap2.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap2(cscmap2);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
		
		
	}
	
	public CscpayVO getAPSFLPhase2ReportAbstractDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{
		

			
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {
				
				
	if ("DIV".equals(cscvo.getFlag())) {

					
					String query = "select nvl(s.DIVNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND TRUNC(REG_DATE) > ='21-MAR-23' )A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APSFL02' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=?\r\n" + 
							"group by ROLLUP(s.DIVNAME)\r\n" + 
							"ORDER BY S.DIVNAME";
					//System.out.println("query"+query);
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
					
					//System.out.println("APSFL02_DIV:"+query);
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "select nvl(s.SUBNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND TRUNC(REG_DATE) > ='21-MAR-23')A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APSFL02' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,SUBNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=? AND S.DIVNAME=?\r\n" + 
							"group by ROLLUP(s.SUBNAME)\r\n" + 
							"ORDER BY S.SUBNAME";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportRst = reportPStmt.executeQuery();
					
					//System.out.println("APSFL02_SUB_DIV:"+query);
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select nvl(s.SECNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND TRUNC(REG_DATE) > ='21-MAR-23' )A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APSFL02' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,SUBNAME,SECNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?\r\n" + 
							"group by ROLLUP(s.SECNAME)\r\n" + 
							"ORDER BY S.SECNAME";
					
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();
					//System.out.println("APSFL02_SEC:"+query);

				} else if ("CIR".equals(cscvo.getFlag())){

					String query = "select nvl(s.cirname,'TOTAL'),nvl(decode (s.cirname,'ANANTHAPUR',669,'KURNOOL',768,'KADAPA',484,'NELLORE',660),'768')APPRD_COUNT,count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND TRUNC(REG_DATE) > ='21-MAR-23' )A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL02' AND NVL(REJECTED,'Y')='X')C,\r\n" + 
							"(select cirname,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"group by ROLLUP(s.cirname)\r\n" + 
							"ORDER BY S.cirname";
					//System.out.println("APSFL02_CIRCLE:"+query);
					reportPStmt = con.prepareStatement(query);
					
					//System.out.println("APSFL02_CIRCLE:"+query);
					reportRst = reportPStmt.executeQuery();
				}


					if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							if ("CIR".equals(cscvo.getFlag())){
							dmapobj.setAptidcoapproved_count(reportRst.getString(2));

							dmapobj.setJcolonyregistered(reportRst.getString(3));
							dmapobj.setJcolonyreleased(reportRst.getString(4));
							dmapobj.setJcolonydeleted(reportRst.getString(5));
							dmapobj.setJcolonytotal(reportRst.getString(6));
							}else{
								
								dmapobj.setJcolonyregistered(reportRst.getString(2));
								dmapobj.setJcolonyreleased(reportRst.getString(3));
								dmapobj.setJcolonydeleted(reportRst.getString(4));
								dmapobj.setJcolonytotal(reportRst.getString(5));

							}

														

						} else {
							CscpayVO dmapobj = new CscpayVO();

							if ("CIR".equals(cscvo.getFlag())){
								dmapobj.setAptidcoapproved_count(reportRst.getString(2));

								dmapobj.setJcolonyregistered(reportRst.getString(3));
								dmapobj.setJcolonyreleased(reportRst.getString(4));
								dmapobj.setJcolonydeleted(reportRst.getString(5));
								dmapobj.setJcolonytotal(reportRst.getString(6));
								}else{
									
									dmapobj.setJcolonyregistered(reportRst.getString(2));
									dmapobj.setJcolonyreleased(reportRst.getString(3));
									dmapobj.setJcolonydeleted(reportRst.getString(4));
									dmapobj.setJcolonytotal(reportRst.getString(5));

								}

														
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
		
		public CscpayVO getAPSFLReportAbstractDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
		InstantiationException, IllegalAccessException, ClassNotFoundException{
			
		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {
				
				
	if ("DIV".equals(cscvo.getFlag())) {

					
					String query = "select nvl(s.DIVNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND TRUNC(REG_DATE) > ='21-MAR-23' )A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APSFL01' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=?\r\n" + 
							"group by ROLLUP(s.DIVNAME)\r\n" + 
							"ORDER BY S.DIVNAME";
					//System.out.println("query"+query);
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();
					
					//System.out.println("APSFL_DIV:"+query);
				
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "select nvl(s.SUBNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND TRUNC(REG_DATE) > ='21-MAR-23')A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APSFL01' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,SUBNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=? AND S.DIVNAME=?\r\n" + 
							"group by ROLLUP(s.SUBNAME)\r\n" + 
							"ORDER BY S.SUBNAME";
					
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportRst = reportPStmt.executeQuery();
					
					//System.out.println("APSFL_SUB_DIV:"+query);
					
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "select nvl(s.SECNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND TRUNC(REG_DATE) > ='21-MAR-23' )A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='APSFL01' and nvl(rejected,'Y')='X')c,\r\n" + 
							"(select cirname,DIVNAME,SUBNAME,SECNAME,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?\r\n" + 
							"group by ROLLUP(s.SECNAME)\r\n" + 
							"ORDER BY S.SECNAME";
					
					reportPStmt = con.prepareStatement(query);
					
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());
					
					reportRst = reportPStmt.executeQuery();
					//System.out.println("APSFL_SEC:"+query);

				} else if ("CIR".equals(cscvo.getFlag())){

					String query = "select nvl(s.cirname,'TOTAL'),nvl(decode (s.cirname,'ANANTHAPUR',281,'KURNOOL',110,'KADAPA',236,'NELLORE',279),'906')APPRD_COUNT,count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND TRUNC(REG_DATE) > ='21-MAR-23' )A,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND LENGTH(USCNO) =13)B,\r\n" + 
							"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APSFL01' AND NVL(REJECTED,'Y')='X')C,\r\n" + 
							"(select cirname,seccd from spdclmaster)s\r\n" + 
							"where a.ncpartcd=s.seccd\r\n" + 
							"and a.reg_no=b.reg_no(+)\r\n" + 
							"and a.reg_no=c.reg_no(+)\r\n" + 
							"group by ROLLUP(s.cirname)\r\n" + 
							"ORDER BY S.cirname";
					//System.out.println("APSFL_CIRCLE:"+query);
					reportPStmt = con.prepareStatement(query);
					
					//System.out.println("APSFL_CIRCLE:"+query);
					reportRst = reportPStmt.executeQuery();
				}


					if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							if ("CIR".equals(cscvo.getFlag())){
							dmapobj.setAptidcoapproved_count(reportRst.getString(2));

							dmapobj.setJcolonyregistered(reportRst.getString(3));
							dmapobj.setJcolonyreleased(reportRst.getString(4));
							dmapobj.setJcolonydeleted(reportRst.getString(5));
							dmapobj.setJcolonytotal(reportRst.getString(6));
							}else{
								
								dmapobj.setJcolonyregistered(reportRst.getString(2));
								dmapobj.setJcolonyreleased(reportRst.getString(3));
								dmapobj.setJcolonydeleted(reportRst.getString(4));
								dmapobj.setJcolonytotal(reportRst.getString(5));

							}

														

						} else {
							CscpayVO dmapobj = new CscpayVO();

							if ("CIR".equals(cscvo.getFlag())){
								dmapobj.setAptidcoapproved_count(reportRst.getString(2));

								dmapobj.setJcolonyregistered(reportRst.getString(3));
								dmapobj.setJcolonyreleased(reportRst.getString(4));
								dmapobj.setJcolonydeleted(reportRst.getString(5));
								dmapobj.setJcolonytotal(reportRst.getString(6));
								}else{
									
									dmapobj.setJcolonyregistered(reportRst.getString(2));
									dmapobj.setJcolonyreleased(reportRst.getString(3));
									dmapobj.setJcolonydeleted(reportRst.getString(4));
									dmapobj.setJcolonytotal(reportRst.getString(5));

								}

														
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
		
	
		
	}
	
	public CscpayVO getLTApartmentsAbstractDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{
		


		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {
				
		

			String query = "select nvl(s.SECNAME,'TOTAL')\r\n" + 
					",COUNT(distinct D.GRPREGNO)Group_count\r\n" + 
					",count(a.reg_no)Registered,count(b.reg_no)Released\r\n" + 
					",count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from \r\n" + 
					"(select reg_no,reg_date,NCPARTCD,grpregno from new_connections where nvl(consumer_status_val,'NA')='APARTMENTS')A, \r\n" + 
					"(select distinct grpregno from new_connections where nvl(consumer_status_val,'NA')='APARTMENTS')D, \r\n" + 
					"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APARTMENTS' AND LENGTH(USCNO) =13)B, \r\n" + 
					"(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='APARTMENTS' AND NVL(REJECTED,'Y')='X')C, \r\n" + 
					"(select cirname,DIVNAME,SUBNAME,SECNAME,seccd from spdclmaster)s,\r\n" + 
					"(select USER_ID,USER_SUBDIV_CODE from CSCAPPUSERS)cscapp\r\n" + 
					"where a.ncpartcd=s.seccd \r\n" + 
					"and a.reg_no=b.reg_no(+) \r\n" + 
					"and a.reg_no=c.reg_no(+) \r\n" + 
					"AND A.GRPREGNO=D.GRPREGNO AND s.SECCD=cscapp.USER_SUBDIV_CODE AND cscapp.USER_ID='"+cscvo.getLoginusername()+"'\r\n" + 
					"group by ROLLUP(s.SECNAME) ORDER BY S.SECNAME";
					
					reportPStmt = con.prepareStatement(query);
					
					reportRst = reportPStmt.executeQuery();


								if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setLtapartmentgroupcount(reportRst.getString(2));
							dmapobj.setLtapartmentregistered(reportRst.getString(3));
							dmapobj.setLtapartmentreleased(reportRst.getString(4));
							dmapobj.setLtapartmentdeleted(reportRst.getString(5));
							dmapobj.setLtapartmentpending(reportRst.getString(6));
							

														

						} else {
							CscpayVO dmapobj = new CscpayVO();


							dmapobj.setLtapartmentgroupcount(reportRst.getString(2));
							dmapobj.setLtapartmentregistered(reportRst.getString(3));
							dmapobj.setLtapartmentreleased(reportRst.getString(4));
							dmapobj.setLtapartmentdeleted(reportRst.getString(5));
							dmapobj.setLtapartmentpending(reportRst.getString(6));
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
		
	
		
	}
	
	public CscpayVO getJColonyHousingReportAbstractDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException,
	InstantiationException, IllegalAccessException, ClassNotFoundException{

		


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();

		try {
			if (con != null) {
				
				


					String query = "select nvl(s.SECNAME,'TOTAL'),count(a.reg_no)Registered,count(b.reg_no)Released,count(c.reg_no) deleted,count(a.reg_no)-count(B.reg_no)-count(c.reg_no) PENDING  from \r\n" + 
							"							(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='JCOLONY-DOM')A, \r\n" + 
							"							(select reg_no,reg_date,NCPARTCD from new_connections where nvl(consumer_status_val,'NA')='JCOLONY-DOM' AND LENGTH(USCNO) =13)B, \r\n" + 
							"							(select reg_no,reg_date,ncpartcd from new_connections where nvl(consumer_status_val,'NA')='JCOLONY-DOM' and nvl(rejected,'Y')='X')c, \r\n" + 
							"							(select cirname,DIVNAME,SUBNAME,SECNAME,seccd from spdclmaster)s,\r\n" + 
							"              (select USER_ID,USER_SUBDIV_CODE from CSCAPPUSERS)cscapp\r\n" + 
							"							where a.ncpartcd=s.seccd \r\n" + 
							"							and a.reg_no=b.reg_no(+) \r\n" + 
							"							and a.reg_no=c.reg_no(+) \r\n" + 
							"              and  s.SECCD=cscapp.USER_SUBDIV_CODE\r\n" + 
							"              AND cscapp.USER_ID='"+cscvo.getLoginusername()+"'\r\n" + 
							"							group by ROLLUP(s.SECNAME) \r\n" + 
							"							ORDER BY s.SECNAME";
					
					reportPStmt = con.prepareStatement(query);
					
				System.out.println(query);
					
					reportRst = reportPStmt.executeQuery();

				


					if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {

							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setJcolonyregistered(reportRst.getString(2));
							dmapobj.setJcolonyreleased(reportRst.getString(3));
							dmapobj.setJcolonydeleted(reportRst.getString(4));
							dmapobj.setJcolonytotal(reportRst.getString(5));
							

														

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setJcolonyregistered(reportRst.getString(2));
							dmapobj.setJcolonyreleased(reportRst.getString(3));
							dmapobj.setJcolonydeleted(reportRst.getString(4));
							dmapobj.setJcolonytotal(reportRst.getString(5));
							
							

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	
		
	}
	
	public CscpayVO getFeePaidApplicationReportScsDetails(CscpayVO cscvo) throws Exception{
		



		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		
		
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		
		String qrypass0 = "";
		String qrypass2="";
		String status = "";
		
		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
				
		/*if ("between15to30".equalsIgnoreCase(cscvo.getType1())) {
			qrypass1="AND CEIL(SYSDATE-APP_DATE) BETWEEN 15 AND 30";
			}else if ("gtr31".equalsIgnoreCase(cscvo.getType1())){
				qrypass1="AND CEIL(SYSDATE-APP_DATE) >31";
			}

		*/

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				/*if ("between15to30".equalsIgnoreCase(cscvo.getCtype())) {
					qrypass1="AND CEIL(SYSDATE-APP_DATE) BETWEEN 15 AND 30";
					}else if ("gtr31".equalsIgnoreCase(cscvo.getCtype())){
						qrypass1="AND CEIL(SYSDATE-APP_DATE) >31";
					}*/
		       
				
				if ("Extension".equalsIgnoreCase(cscvo.getType())) {
					
		            //qrypass1="AND NVL(ESTSTATUS,'03')='02' AND INTIMATE_DATE IS NOT NULL";
					status = " AND  NVL(ESTSTATUS,'03')='02' AND INTIMATE_DATE IS NOT NULL ";
					
					if ("between15to30".equalsIgnoreCase(cscvo.getExe_type())) 
				    {
					qrypass0="AND NVL(SAPDEM,0) > 0 AND CEIL(SYSDATE-APP_DATE) BETWEEN 15 AND 30";
					}
				else if ("gtr31".equalsIgnoreCase(cscvo.getExe_type()))
				    {
						qrypass0="AND CEIL(SYSDATE-APP_DATE) >31 AND NVL(SAPDEM,0) > 0";
					}
				else
				{
					qrypass0="";
				}
					//qrypass2="AND NVL(SAPDEM,0) > 0 AND CEIL(SYSDATE-APP_DATE) BETWEEN 15 AND 30 ";
					
					
					
				} else if ("Simplified".equalsIgnoreCase(cscvo.getType())){
					
					// qrypass1="NVL(ESTSTATUS,'03')='01' AND nvl(totamt,0) > 0";
					status = "    AND NVL(ESTSTATUS,'03')='01' AND NVL(TOTAMT,0) > 0  ";
					if ("between15to30".equalsIgnoreCase(cscvo.getExe_type())) 
				    {
					qrypass0="AND NVL(TOTAMT,0) > 0 AND CEIL(SYSDATE-APP_DATE) BETWEEN 15 AND 30";
					}
				else if ("gtr31".equalsIgnoreCase(cscvo.getExe_type()))
				    {
						qrypass0="AND CEIL(SYSDATE-APP_DATE) >31 AND NVL(TOTAMT,0) > 0";
					}
				else
				{
					qrypass0="";
				}

				}
				
				//System.out.println(cscvo.getType());
				//System.out.println(cscvo.getCtype());
		

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						String query ="SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,'')DEMAND_DATE, CEIL(SYSDATE-APP_DATE)PENDING_DAYS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD\r\n" + 
								"AND nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 " + status  + 
								""+ qrypass0 +"   AND S.CIRNAME=? AND S.DIVNAME=?";	
						
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println("DIV_1:"+query);
						
					}else{
						String query ="SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,'')DEMAND_DATE, CEIL(SYSDATE-APP_DATE)PENDING_DAYS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD\r\n" + 
								"AND nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 " + status  + 
								""+ qrypass0 +"   AND S.CIRNAME=?";
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
								
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println("scs_test:"+query);
					}	
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						String query ="SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,'')DEMAND_DATE, CEIL(SYSDATE-APP_DATE)PENDING_DAYS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD\r\n" + 
								"AND nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 " + status  + 
								""+ qrypass0 +"   AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?";
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println(":"+query);
					}
					else
					{
						String query ="SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,'')DEMAND_DATE, CEIL(SYSDATE-APP_DATE)PENDING_DAYS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD\r\n" + 
								"AND nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 " + status  + 
								""+ qrypass0 +"   AND S.CIRNAME=? AND S.DIVNAME=?";	
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
								
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println(":"+query);
					}
					} 
				else if ("SEC".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
					
						String query ="SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,'')DEMAND_DATE, CEIL(SYSDATE-APP_DATE)PENDING_DAYS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD\r\n" + 
								"AND nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 " + status  + 
								""+ qrypass0 +"   AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=? AND S.SECNAME=?";		
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								
								reportPStmt.setString(4, cscvo.getSec());
								reportRst = reportPStmt.executeQuery();
								//System.out.println(":"+query);
					
					
					}
					else
					{
						String query ="SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,'')DEMAND_DATE, CEIL(SYSDATE-APP_DATE)PENDING_DAYS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD\r\n" + 
								"AND nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 " + status  + 
								""+ qrypass0 +"   AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?";								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println("13122022:"+query);	
					}
				
					
				} else {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
					
						String query ="SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,'')DEMAND_DATE, CEIL(SYSDATE-APP_DATE)PENDING_DAYS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD\r\n" + 
								"AND nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 " + status  + 
								""+ qrypass0 +"   AND S.CIRNAME=?";							
							reportPStmt = con.prepareStatement(query);
								
								reportPStmt.setString(1, cscvo.getCircle());
								reportRst = reportPStmt.executeQuery();
								//System.out.println(cscvo.getCircle());
								//System.out.println("NORMAL:"+query);
					
					
				}else
				{

					String query ="SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,'')DEMAND_DATE, CEIL(SYSDATE-APP_DATE)PENDING_DAYS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD\r\n" + 
							"AND nvl(COLL_APPFEE,0)=nvl(totamt,0) and nvl(rejected,'Y') <> 'X' AND LENGTH(USCNO) <> 13 " + status  + 
							""+ qrypass0 +" ";								
					//System.out.println("DISCOM_TOTAL:"+query);
							reportPStmt = con.prepareStatement(query);
								
								
								reportRst = reportPStmt.executeQuery();
					
					
					
				}
				}	

				if (reportRst != null) {

					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(reportRst.getString(1));
						vo.setDivision(reportRst.getString(2));
						
						
						vo.setSubDiv(reportRst.getString(3));
						vo.setSec(reportRst.getString(4));
						vo.setReg_no(reportRst.getString(5));
						vo.setCunsu_name(reportRst.getString(6));
						vo.setRegDate(reportRst.getString(7));
						vo.setMeeseva_ref(reportRst.getString(8));
						vo.setNameofconsumer(reportRst.getString(9));
						vo.setNoofdayspayment(reportRst.getString(10));
						
						
						dashList.add(vo);

					}
					
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
		
		
	
	}
	
	public CscpayVO getAPTIDCOReportExportDetails(CscpayVO cscvo) throws Exception{
		
		



		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		
		
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		
		String qrypass1 = "";
		String qrypass2="";
		String CONSUMERSTATUS = "";
		
		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {
				
				
//for categories
				if ("getRegistered".equalsIgnoreCase(cscvo.getType())) {
					CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='APTIDCO'";
				}else
					if ("getReleased".equalsIgnoreCase(cscvo.getType())) {
						CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='APTIDCO' AND LENGTH(USCNO) =13 ";
					}else
					
				if ("getdeleted".equalsIgnoreCase(cscvo.getType())) {
					CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='APTIDCO' AND NVL(REJECTED,'Y')='X' ";
				}else
				if ("gettotal".equalsIgnoreCase(cscvo.getType())) {
					CONSUMERSTATUS=" AND nvl(consumer_status_val,'NA')='APTIDCO' AND  close_status='N' AND NVL(REJECTED,'Y') <> 'X' AND supply_release_date IS NULL ";
				}
				
				
				
				
				//System.out.println("type"+cscvo.getType());

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println("DIV_1:"+query);
						
					}else{
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=?  ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
								
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println("scs_test:"+query);
					}	
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println(":"+query);
					}
					else
					{
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
								
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println(":"+query);
					}
					} 
				else if ("SEC".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
					
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=? AND S.SECNAME=?";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								
								reportPStmt.setString(4, cscvo.getSec());
								reportRst = reportPStmt.executeQuery();
								//System.out.println(":"+query);
					
					
					}
					else
					{
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=? ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								
									reportRst = reportPStmt.executeQuery();
						
						
						System.out.println("aptidco export:"+query);	
					}
				
					
				} else {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
					
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? ";
							
							reportPStmt = con.prepareStatement(query);
								
								reportPStmt.setString(1, cscvo.getCircle());
								reportRst = reportPStmt.executeQuery();
								System.out.println("NORMAL:"+query);
					
					
				}else
				{

					String query ="SELECT s.cirname,\r\n" + 
							"  s.divname,\r\n" + 
							"  s.eroname,\r\n" + 
							"  s.subname,\r\n" + 
							"  s.secname,\r\n" + 
							"  a.reg_no,\r\n" + 
							"  a.reg_date,\r\n" + 
							"  a.consumer_name,\r\n" + 
							"  a.father_name,\r\n" + 
							"  a.street_name\r\n" + 
							"  ||door_no\r\n" + 
							"  ||town_city,\r\n" + 
							"  a.phone_no,\r\n" + 
							"  a.category_supply,\r\n" + 
							"  a.USCNO,\r\n" + 
							"  a.contracted_load,\r\n" + 
							"  a.meseva_ref,\r\n" + 
							"  EXISTING_ADDRESS\r\n" + 
							"FROM new_connections a,\r\n" + 
							"  spdclmaster s\r\n" + 
							"where a.ncpartcd  =s.seccd\r\n" + 
							CONSUMERSTATUS + "";
							
							
							reportPStmt = con.prepareStatement(query);
							reportRst = reportPStmt.executeQuery();
					
					
					System.out.println("DISCOM_TOTAL:"+query);
				}
				}	

				if (reportRst != null) {

					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(reportRst.getString(1));
						vo.setDivision(reportRst.getString(2));
						vo.setEro(reportRst.getString(3));
						
						vo.setSubDiv(reportRst.getString(4));
						vo.setSec(reportRst.getString(5));
						vo.setReg_no(reportRst.getString(6));
						vo.setCunsu_name(reportRst.getString(7));
						vo.setRegDate(reportRst.getString(8));
						vo.setMeeseva_ref(reportRst.getString(9));
						vo.setNameofconsumer(reportRst.getString(10));
						
						vo.setContactno(reportRst.getString(11));
						vo.setPaidamount(reportRst.getString(12));
						vo.setPrdate(reportRst.getString(13));
						vo.setDateofpayment(reportRst.getString(14));
						vo.setNoofdayspayment(reportRst.getString(15));
						vo.setReason(reportRst.getString(16));
						
						dashList.add(vo);

					}
					
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
		
	}
	
	public CscpayVO getAPSFLPhase2ExportDetails(CscpayVO cscvo) throws Exception{

		
		



		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		
		
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		
		String qrypass1 = "";
		String qrypass2="";
		String CONSUMERSTATUS = "";
		
		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {
//for categories
				if ("getRegistered".equalsIgnoreCase(cscvo.getType())) {
					CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='APSFL02'  ";
					//System.out.println("getreg"+CONSUMERSTATUS);
				}else
					if ("getReleased".equalsIgnoreCase(cscvo.getType())) {
						CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='APSFL02' AND LENGTH(USCNO) =13 ";
					}else
					
				if ("getdeleted".equalsIgnoreCase(cscvo.getType())) {
					
					/*CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='APSFL01' ";*/
					CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='APSFL02' AND NVL(REJECTED,'Y')='X' ";
				
					
				}else
				if ("gettotal".equalsIgnoreCase(cscvo.getType())) {
					CONSUMERSTATUS=" AND nvl(consumer_status_val,'NA')='APSFL02' AND  close_status='N' AND NVL(REJECTED,'Y') <> 'X'  ";
				}
				
				
				
				
				//System.out.println("type"+cscvo.getType());

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=?  AND TRUNC(REG_DATE) > ='21-MAR-23' ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println("DIV_1:"+query);
						
					}else{
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=?  AND TRUNC(REG_DATE) > ='21-MAR-23' ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
								
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println("scs_test:"+query);
					}	
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=? AND TRUNC(REG_DATE) > ='21-MAR-23' ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println(":"+query);
					}
					else
					{
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? AND TRUNC(REG_DATE) > ='21-MAR-23' ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
								
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println(":"+query);
					}
					} 
				else if ("SEC".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
					
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=? AND S.SECNAME=? AND TRUNC(REG_DATE) > ='21-MAR-23' ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								
								reportPStmt.setString(4, cscvo.getSec());
								reportRst = reportPStmt.executeQuery();
								//System.out.println("2:"+query);
					
					
					}
					else
					{
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=? AND TRUNC(REG_DATE) > ='21-MAR-23' ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println(":"+query);	
					}
				
					
				} else {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
					
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=?  AND TRUNC(REG_DATE) > ='21-MAR-23' ";
							
							reportPStmt = con.prepareStatement(query);
								
								reportPStmt.setString(1, cscvo.getCircle());
								reportRst = reportPStmt.executeQuery();
								//System.out.println("NORMAL:"+query);
					
					
				}else
				{

					String query ="SELECT s.cirname,\r\n" + 
							"  s.divname,\r\n" + 
							"  s.eroname,\r\n" + 
							"  s.subname,\r\n" + 
							"  s.secname,\r\n" + 
							"  a.reg_no,\r\n" + 
							"  a.reg_date,\r\n" + 
							"  a.consumer_name,\r\n" + 
							"  a.father_name,\r\n" + 
							"  a.street_name\r\n" + 
							"  ||door_no\r\n" + 
							"  ||town_city,\r\n" + 
							"  a.phone_no,\r\n" + 
							"  a.category_supply,\r\n" + 
							"  a.USCNO,\r\n" + 
							"  a.contracted_load,\r\n" + 
							"  a.meseva_ref,\r\n" + 
							"  EXISTING_ADDRESS\r\n" + 
							"FROM new_connections a,\r\n" + 
							"  spdclmaster s\r\n" + 
							"where a.ncpartcd  =s.seccd\r\n" + 
							CONSUMERSTATUS + " AND TRUNC(REG_DATE) > ='21-MAR-23' ";
							
							
							reportPStmt = con.prepareStatement(query);
								
								
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println("DISCOM_TOTAL:"+query);
				}
				}	

				if (reportRst != null) {

					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(reportRst.getString(1));
						vo.setDivision(reportRst.getString(2));
						vo.setEro(reportRst.getString(3));
						
						vo.setSubDiv(reportRst.getString(4));
						vo.setSec(reportRst.getString(5));
						vo.setReg_no(reportRst.getString(6));
						vo.setCunsu_name(reportRst.getString(7));
						vo.setRegDate(reportRst.getString(8));
						vo.setMeeseva_ref(reportRst.getString(9));
						vo.setNameofconsumer(reportRst.getString(10));
						
						vo.setContactno(reportRst.getString(11));
						vo.setPaidamount(reportRst.getString(12));
						vo.setPrdate(reportRst.getString(13));
						vo.setDateofpayment(reportRst.getString(14));
						vo.setNoofdayspayment(reportRst.getString(15));
						vo.setReason(reportRst.getString(16));
						
						dashList.add(vo);

					}
					
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}
	public CscpayVO getAPSFLExportDetails(CscpayVO cscvo) throws Exception{
		
		



		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		
		
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		
		String qrypass1 = "";
		String qrypass2="";
		String CONSUMERSTATUS = "";
		
		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {
//for categories
				if ("getRegistered".equalsIgnoreCase(cscvo.getType())) {
					CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='APSFL01'  ";
					//System.out.println("getreg"+CONSUMERSTATUS);
				}else
					if ("getReleased".equalsIgnoreCase(cscvo.getType())) {
						CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='APSFL01' AND LENGTH(USCNO) =13 ";
					}else
					
				if ("getdeleted".equalsIgnoreCase(cscvo.getType())) {
					
					/*CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='APSFL01' ";*/
					CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='APSFL01' AND NVL(REJECTED,'Y')='X' ";
				
					
				}else
				if ("gettotal".equalsIgnoreCase(cscvo.getType())) {
					CONSUMERSTATUS=" AND nvl(consumer_status_val,'NA')='APSFL01' AND  close_status='N' AND NVL(REJECTED,'Y') <> 'X'  ";
				}
				
				
				
				
				//System.out.println("type"+cscvo.getType());

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=?  AND TRUNC(REG_DATE) > ='21-MAR-23' ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println("DIV_1:"+query);
						
					}else{
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=?  AND TRUNC(REG_DATE) > ='21-MAR-23' ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
								
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println("scs_test:"+query);
					}	
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=? AND TRUNC(REG_DATE) > ='21-MAR-23' ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println(":"+query);
					}
					else
					{
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? AND TRUNC(REG_DATE) > ='21-MAR-23' ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
								
									reportRst = reportPStmt.executeQuery();
						
						
						System.out.println(":"+query);
					}
					} 
				else if ("SEC".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
					
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=? AND S.SECNAME=? AND TRUNC(REG_DATE) > ='21-MAR-23' ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								
								reportPStmt.setString(4, cscvo.getSec());
								reportRst = reportPStmt.executeQuery();
								System.out.println("2:"+query);
					
					
					}
					else
					{
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=? AND TRUNC(REG_DATE) > ='21-MAR-23' ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								
									reportRst = reportPStmt.executeQuery();
						
						
						System.out.println(":"+query);	
					}
				
					
				} else {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
					
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=?  AND TRUNC(REG_DATE) > ='21-MAR-23' ";
							
							reportPStmt = con.prepareStatement(query);
								
								reportPStmt.setString(1, cscvo.getCircle());
								reportRst = reportPStmt.executeQuery();
								System.out.println("NORMAL:"+query);
					
					
				}else
				{

					String query ="SELECT s.cirname,\r\n" + 
							"  s.divname,\r\n" + 
							"  s.eroname,\r\n" + 
							"  s.subname,\r\n" + 
							"  s.secname,\r\n" + 
							"  a.reg_no,\r\n" + 
							"  a.reg_date,\r\n" + 
							"  a.consumer_name,\r\n" + 
							"  a.father_name,\r\n" + 
							"  a.street_name\r\n" + 
							"  ||door_no\r\n" + 
							"  ||town_city,\r\n" + 
							"  a.phone_no,\r\n" + 
							"  a.category_supply,\r\n" + 
							"  a.USCNO,\r\n" + 
							"  a.contracted_load,\r\n" + 
							"  a.meseva_ref,\r\n" + 
							"  EXISTING_ADDRESS\r\n" + 
							"FROM new_connections a,\r\n" + 
							"  spdclmaster s\r\n" + 
							"where a.ncpartcd  =s.seccd\r\n" + 
							CONSUMERSTATUS + " AND TRUNC(REG_DATE) > ='21-MAR-23' ";
							
							
							reportPStmt = con.prepareStatement(query);
								
								
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println("DISCOM_TOTAL:"+query);
				}
				}	

				if (reportRst != null) {

					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(reportRst.getString(1));
						vo.setDivision(reportRst.getString(2));
						vo.setEro(reportRst.getString(3));
						
						vo.setSubDiv(reportRst.getString(4));
						vo.setSec(reportRst.getString(5));
						vo.setReg_no(reportRst.getString(6));
						vo.setCunsu_name(reportRst.getString(7));
						vo.setRegDate(reportRst.getString(8));
						vo.setMeeseva_ref(reportRst.getString(9));
						vo.setNameofconsumer(reportRst.getString(10));
						
						vo.setContactno(reportRst.getString(11));
						vo.setPaidamount(reportRst.getString(12));
						vo.setPrdate(reportRst.getString(13));
						vo.setDateofpayment(reportRst.getString(14));
						vo.setNoofdayspayment(reportRst.getString(15));
						vo.setReason(reportRst.getString(16));
						
						dashList.add(vo);

					}
					
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
		
		
	
		
	}
	
	
	public CscpayVO getLTApartmentsExportDetails(CscpayVO cscvo) throws Exception{
		



		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		
		
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		
		String qrypass1 = "";
		String qrypass2="";
		String CONSUMERSTATUS = "";
		
		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {
//for categories
				if ("getRegistered".equalsIgnoreCase(cscvo.getType())) {
					CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='APARTMENTS'";
				}else
					if ("getReleased".equalsIgnoreCase(cscvo.getType())) {
						CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='APARTMENTS' and close_status='C' AND LENGTH(USCNO)=13 AND NVL(REJECTED,'Y') <> 'X' ";
					}else
					
				if ("getdeleted".equalsIgnoreCase(cscvo.getType())) {
					CONSUMERSTATUS=" AND nvl(consumer_status_val,'NA')='APARTMENTS' AND  close_status='N' AND NVL(REJECTED,'Y') = 'X' ";
				}else
				if ("gettotal".equalsIgnoreCase(cscvo.getType())) {
					CONSUMERSTATUS=" AND nvl(consumer_status_val,'NA')='APARTMENTS' AND  close_status='N' AND NVL(REJECTED,'Y') <> 'X' ";
				}
				
				
				
				
				//System.out.println("type"+cscvo.getType());

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						String query ="select s.cirname,s.divname,s.eroname,s.subname,s.secname,a.grpregno,a.reg_no,a.reg_date,a.consumer_name,a.FATHER_NAME,a.STREET_NAME||DOOR_NO||TOWN_CITY,a.phone_no,a.category_supply,\r\n" + 
								"a.USCNO,a.contracted_load,a.meseva_ref,EXISTING_ADDRESS from new_connections a,spdclmaster s where a.ncpartcd=s.seccd "+CONSUMERSTATUS+" AND S.CIRNAME=? AND S.DIVNAME=? " + 
								"order by a.grpregno";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println("DIV_1:"+query);
						
					}else{
						String query ="select s.cirname,s.divname,s.eroname,s.subname,s.secname,a.grpregno,a.reg_no,a.reg_date,a.consumer_name,a.FATHER_NAME,a.STREET_NAME||DOOR_NO||TOWN_CITY,a.phone_no,a.category_supply,\r\n" + 
								"a.USCNO,a.contracted_load,a.meseva_ref,EXISTING_ADDRESS from new_connections a,spdclmaster s where a.ncpartcd=s.seccd "+CONSUMERSTATUS+" AND S.CIRNAME=? " + 
								"order by a.grpregno";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
								
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println("scs_test:"+query);
					}	
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						String query ="select s.cirname,s.divname,s.eroname,s.subname,s.secname,a.grpregno,a.reg_no,a.reg_date,a.consumer_name,a.FATHER_NAME,a.STREET_NAME||DOOR_NO||TOWN_CITY,a.phone_no,a.category_supply,\r\n" + 
								"a.USCNO,a.contracted_load,a.meseva_ref,EXISTING_ADDRESS from new_connections a,spdclmaster s where a.ncpartcd=s.seccd "+CONSUMERSTATUS+" AND S.CIRNAME=? AND S.DIVNAME=?  AND S.SUBNAME=?" + 
								"order by a.grpregno";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println(":"+query);
					}
					else
					{
						String query ="select s.cirname,s.divname,s.eroname,s.subname,s.secname,a.grpregno,a.reg_no,a.reg_date,a.consumer_name,a.FATHER_NAME,a.STREET_NAME||DOOR_NO||TOWN_CITY,a.phone_no,a.category_supply,\r\n" + 
								"a.USCNO,a.contracted_load,a.meseva_ref,EXISTING_ADDRESS from new_connections a,spdclmaster s where a.ncpartcd=s.seccd "+CONSUMERSTATUS+" AND S.CIRNAME=? AND S.DIVNAME=? " + 
								"order by a.grpregno";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
								
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println(":"+query);
					}
					} 
				else if ("SEC".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
					
						String query ="select s.cirname,s.divname,s.eroname,s.subname,s.secname,a.grpregno,a.reg_no,a.reg_date,a.consumer_name,a.FATHER_NAME,a.STREET_NAME||DOOR_NO||TOWN_CITY,a.phone_no,a.category_supply,\r\n" + 
								"a.USCNO,a.contracted_load,a.meseva_ref,EXISTING_ADDRESS from new_connections a,spdclmaster s where a.ncpartcd=s.seccd "+CONSUMERSTATUS+" AND S.CIRNAME=? AND S.DIVNAME=?  AND S.SUBNAME=? AND S.SECNAME=?" + 
								"order by a.grpregno";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								
								reportPStmt.setString(4, cscvo.getSec());
								reportRst = reportPStmt.executeQuery();
								//System.out.println(":"+query);
					
					
					}
					else
					{
						String query ="select s.cirname,s.divname,s.eroname,s.subname,s.secname,a.grpregno,a.reg_no,a.reg_date,a.consumer_name,a.FATHER_NAME,a.STREET_NAME||DOOR_NO||TOWN_CITY,a.phone_no,a.category_supply,\r\n" + 
								"a.USCNO,a.contracted_load,a.meseva_ref,EXISTING_ADDRESS from new_connections a,spdclmaster s where a.ncpartcd=s.seccd "+CONSUMERSTATUS+" AND S.CIRNAME=? AND S.DIVNAME=?  AND S.SUBNAME=?" + 
								"order by a.grpregno";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println(":"+query);	
					}
				
					
				} else {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
					
						String query ="select s.cirname,s.divname,s.eroname,s.subname,s.secname,a.grpregno,a.reg_no,a.reg_date,a.consumer_name,a.FATHER_NAME,a.STREET_NAME||DOOR_NO||TOWN_CITY,a.phone_no,a.category_supply,\r\n" + 
								"a.USCNO,a.contracted_load,a.meseva_ref,EXISTING_ADDRESS from new_connections a,spdclmaster s where a.ncpartcd=s.seccd "+CONSUMERSTATUS+" AND S.CIRNAME=? " + 
								"order by a.grpregno";
							
							reportPStmt = con.prepareStatement(query);
								
								reportPStmt.setString(1, cscvo.getCircle());
								reportRst = reportPStmt.executeQuery();
								//System.out.println("NORMAL:"+query);
					
					
				}else
				{

					String query ="select s.cirname,s.divname,s.eroname,s.subname,s.secname,a.grpregno,a.reg_no,a.reg_date,a.consumer_name,a.FATHER_NAME,a.STREET_NAME||DOOR_NO||TOWN_CITY,a.phone_no,a.category_supply,\r\n" + 
							"a.USCNO,a.contracted_load,a.meseva_ref,EXISTING_ADDRESS from new_connections a,spdclmaster s where a.ncpartcd=s.seccd "+CONSUMERSTATUS+" " + 
							"order by a.grpregno";
							
							
							reportPStmt = con.prepareStatement(query);
								
								
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println("DISCOM_TOTAL:"+query);
				}
				}	

				if (reportRst != null) {

					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(reportRst.getString(1));
						vo.setDivision(reportRst.getString(2));
						vo.setEro(reportRst.getString(3));
						
						vo.setSubDiv(reportRst.getString(4));
						vo.setSec(reportRst.getString(5));
						vo.setReg_no(reportRst.getString(6));
						vo.setCunsu_name(reportRst.getString(7));
						vo.setRegDate(reportRst.getString(8));
						vo.setMeeseva_ref(reportRst.getString(9));
						vo.setNameofconsumer(reportRst.getString(10));
						
						vo.setContactno(reportRst.getString(11));
						vo.setPaidamount(reportRst.getString(12));
						vo.setPrdate(reportRst.getString(13));
						vo.setDateofpayment(reportRst.getString(14));
						vo.setNoofdayspayment(reportRst.getString(15));
						vo.setReason(reportRst.getString(16));
						vo.setExistingaddress(reportRst.getString(17));
						
						dashList.add(vo);

					}
					
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
		
		
	
		
	}
	
	
		public CscpayVO getJColonyHousingReportExportDetails(CscpayVO cscvo) throws Exception{


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		
		
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		
		String qrypass1 = "";
		String qrypass2="";
		String CONSUMERSTATUS = "";
		
		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {
//for categories
				if ("getRegistered".equalsIgnoreCase(cscvo.getType())) {
					CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='JCOLONY-DOM'";
				}else
					if ("getReleased".equalsIgnoreCase(cscvo.getType())) {
						CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='JCOLONY-DOM' AND LENGTH(USCNO) =13 ";
					}else
					
				if ("getdeleted".equalsIgnoreCase(cscvo.getType())) {
					CONSUMERSTATUS="AND nvl(consumer_status_val,'NA')='JCOLONY-DOM' AND NVL(REJECTED,'Y')='X' ";
				}else
				if ("gettotal".equalsIgnoreCase(cscvo.getType())) {
					CONSUMERSTATUS=" AND nvl(consumer_status_val,'NA')='JCOLONY-DOM' AND  close_status='N' AND NVL(REJECTED,'Y') <> 'X' AND supply_release_date IS NULL ";
				}
				
				
				
				
				//System.out.println("type"+cscvo.getType());

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					if (!"TOTAL".equalsIgnoreCase(cscvo.getDivision())) {
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println("DIV_1:"+query);
						
					}else{
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=?  ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
								
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println("scs_test:"+query);
					}	
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSubDiv())) {
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=?";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println(":"+query);
					}
					else
					{
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
								
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println(":"+query);
					}
					} 
				else if ("SEC".equals(cscvo.getFlag())) {
					
					if (!"TOTAL".equalsIgnoreCase(cscvo.getSec())) {
					
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=? AND S.SECNAME=?";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								
								reportPStmt.setString(4, cscvo.getSec());
								reportRst = reportPStmt.executeQuery();
								//System.out.println(":"+query);
					
					
					}
					else
					{
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? AND S.DIVNAME=? AND S.SUBNAME=? ";
								
								reportPStmt = con.prepareStatement(query);
									
									reportPStmt.setString(1, cscvo.getCircle());
									reportPStmt.setString(2, cscvo.getDivision());
									reportPStmt.setString(3, cscvo.getSubDiv());
								
									reportRst = reportPStmt.executeQuery();
						
						
						//System.out.println(":"+query);	
					}
				
					
				} else {

					if (!"TOTAL".equalsIgnoreCase(cscvo.getCircle())) {
					
						String query ="SELECT s.cirname,\r\n" + 
								"  s.divname,\r\n" + 
								"  s.eroname,\r\n" + 
								"  s.subname,\r\n" + 
								"  s.secname,\r\n" + 
								"  a.reg_no,\r\n" + 
								"  a.reg_date,\r\n" + 
								"  a.consumer_name,\r\n" + 
								"  a.father_name,\r\n" + 
								"  a.street_name\r\n" + 
								"  ||door_no\r\n" + 
								"  ||town_city,\r\n" + 
								"  a.phone_no,\r\n" + 
								"  a.category_supply,\r\n" + 
								"  a.USCNO,\r\n" + 
								"  a.contracted_load,\r\n" + 
								"  a.meseva_ref,\r\n" + 
								"  EXISTING_ADDRESS\r\n" + 
								"FROM new_connections a,\r\n" + 
								"  spdclmaster s\r\n" + 
								"where a.ncpartcd  =s.seccd\r\n" + 
								CONSUMERSTATUS + 
								"AND S.CIRNAME=? ";
							
							reportPStmt = con.prepareStatement(query);
								
								reportPStmt.setString(1, cscvo.getCircle());
								reportRst = reportPStmt.executeQuery();
								//System.out.println("NORMAL:"+query);
					
					
				}else
				{

					String query ="SELECT s.cirname,\r\n" + 
							"  s.divname,\r\n" + 
							"  s.eroname,\r\n" + 
							"  s.subname,\r\n" + 
							"  s.secname,\r\n" + 
							"  a.reg_no,\r\n" + 
							"  a.reg_date,\r\n" + 
							"  a.consumer_name,\r\n" + 
							"  a.father_name,\r\n" + 
							"  a.street_name\r\n" + 
							"  ||door_no\r\n" + 
							"  ||town_city,\r\n" + 
							"  a.phone_no,\r\n" + 
							"  a.category_supply,\r\n" + 
							"  a.USCNO,\r\n" + 
							"  a.contracted_load,\r\n" + 
							"  a.meseva_ref,\r\n" + 
							"  EXISTING_ADDRESS\r\n" + 
							"FROM new_connections a,\r\n" + 
							"  spdclmaster s\r\n" + 
							"where a.ncpartcd  =s.seccd\r\n" + 
							CONSUMERSTATUS + "";
							
							
							reportPStmt = con.prepareStatement(query);
								
								
								reportRst = reportPStmt.executeQuery();
					
					
					//System.out.println("DISCOM_TOTAL:"+query);
				}
				}	

				if (reportRst != null) {

					while (reportRst.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(reportRst.getString(1));
						vo.setDivision(reportRst.getString(2));
						vo.setEro(reportRst.getString(3));
						
						vo.setSubDiv(reportRst.getString(4));
						vo.setSec(reportRst.getString(5));
						vo.setReg_no(reportRst.getString(6));
						vo.setCunsu_name(reportRst.getString(7));
						vo.setRegDate(reportRst.getString(8));
						vo.setMeeseva_ref(reportRst.getString(9));
						vo.setNameofconsumer(reportRst.getString(10));
						
						vo.setContactno(reportRst.getString(11));
						vo.setPaidamount(reportRst.getString(12));
						vo.setPrdate(reportRst.getString(13));
						vo.setDateofpayment(reportRst.getString(14));
						vo.setNoofdayspayment(reportRst.getString(15));
						vo.setReason(reportRst.getString(16));
						
						dashList.add(vo);

					}
					
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
		
		
	}

	public CscpayVO getEstimatesPreparedForExtScsDetails(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("less3days".equalsIgnoreCase(cscvo.getType())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) <3 ";
				} else if ("less7days".equalsIgnoreCase(cscvo.getType())) {
					// status = " AND NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0 ";
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >4 AND CEIL(SYSDATE-MAXPRDT) <7 ";
				} else if ("less15days".equalsIgnoreCase(cscvo.getType())) {
					//AND CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=15
					daystatus = "  AND  CEIL(SYSDATE-MAXPRDT) >8 AND CEIL(SYSDATE-MAXPRDT) <15 ";
				} else if ("less30days".equalsIgnoreCase(cscvo.getType())) {
					daystatus = " AND  CEIL(SYSDATE-MAXPRDT) >16 AND CEIL(SYSDATE-MAXPRDT) <30 ";
				} else if ("gtr30days".equalsIgnoreCase(cscvo.getType())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >31 ";
				} else {
					daystatus = "  AND ((CEIL(SYSDATE-MAXPRDT) <3) OR (CEIL(SYSDATE-MAXPRDT) >4 AND CEIL(SYSDATE-MAXPRDT) <7) OR(CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=15) OR ( CEIL(SYSDATE-MAXPRDT) >16 AND CEIL(SYSDATE-MAXPRDT)<30 ) OR (CEIL(SYSDATE-MAXPRDT) >31))  ";
	}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					/*SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_DATE,R.MESEVA_REF,R.CONSUMER_NAME,R.REG_NO,CEIL(SYSDATE-REG_DATE) FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD
							AND CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=15 AND S.CIRNAME='KADAPA' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) > '01-JAN-20' 
							AND  NVL(SAPDEM,0)=0  AND NVL(COLL_APPFEE,0) > 0;*/
					resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CONSUMER_NAME,R.REG_DATE,R.MESEVA_REF,CEIL(SYSDATE-REG_DATE) FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "
									+ " " + daystatus + " AND S.CIRNAME='" + cscvo.getCircle() + "' and S.divname='"
									+ cscvo.getDivision()
									+ "'  AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >'01-JAN-20' "
									+ " AND  NVL(SAPDEM,0)=0  AND NVL(COLL_APPFEE,0) > 0");
                    System.out.println("div_Estimates:"+resultSet);
					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					
					
					resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CONSUMER_NAME,R.REG_DATE,R.MESEVA_REF,CEIL(SYSDATE-REG_DATE) FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "
									+ " " + daystatus + " AND S.CIRNAME='" + cscvo.getCircle() + "' and S.divname='"
									+ cscvo.getDivision() + "' and S.subname='" + cscvo.getSubDiv()
									+ "' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >'01-JAN-20' "
									+ " AND  NVL(SAPDEM,0)=0  AND NVL(COLL_APPFEE,0) > 0");
					System.out.println("sub_div_Estimates:"+resultSet);
				} 
				else if ("SEC".equals(cscvo.getFlag())) {
					
					
					resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CONSUMER_NAME,R.REG_DATE,R.MESEVA_REF,CEIL(SYSDATE-REG_DATE) FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "
									+ " " + daystatus + " AND S.CIRNAME='" + cscvo.getCircle() + "' and S.divname='"
									+ cscvo.getDivision() + "' and S.subname='" + cscvo.getSubDiv() + "' and S.secname='"
									+ cscvo.getSec()
									+ "'  AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >'01-JAN-20' "
									+ " AND  NVL(SAPDEM,0)=0  AND NVL(COLL_APPFEE,0) > 0");
				
					System.out.println("sec_Estimates:"+resultSet);
				} else {

					/*resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_DATE,R.MESEVA_REF,R.CONSUMER_NAME,R.REG_NO,CEIL(SYSDATE-REG_DATE) FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "
									+ " " + daystatus + " AND S.CIRNAME='" + cscvo.getCircle()
									+ "'  AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >'01-JAN-20' "
									+ " AND REG_NO NOT IN (SELECT REG_NO FROM SAPESTDEMAND ) AND NVL(COLL_APPFEE,0) > 0");*/
					resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CONSUMER_NAME,R.REG_DATE,R.MESEVA_REF,CEIL(SYSDATE-REG_DATE) FROM  REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD "
									+ " " + daystatus + " AND S.CIRNAME='" + cscvo.getCircle()
									+ "'  AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL AND NVL(ESTSTATUS,'03')='02' AND TRUNC(REG_DATE) >'01-JAN-20' "
									+ " AND  NVL(SAPDEM,0)=0  AND NVL(COLL_APPFEE,0) > 0");
					
					System.out.println("All_Estimates:"+resultSet);
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setReg_no(resultSet.getString(5));
						vo.setCunsu_name(resultSet.getString(6));
						vo.setRegDate(resultSet.getString(7));
						vo.setMeeseva_ref(resultSet.getString(8));
						/*vo.setCunsu_name(resultSet.getString(6));
						vo.setReg_no(resultSet.getString(7));*/
						vo.setRelNoOfDays(resultSet.getInt(9));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}

	// report 4 Deleted Simlified/Extention/All Scs
	    public CscpayVO getServicesTobeRelForPaidCasesScsDetails(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String daystatus = "";
		String esstatus = "";
		String cattype = "";
		String loadcattype = "";
		String scsType = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		try {
			if (con != null) {

				if ("less7days".equalsIgnoreCase(cscvo.getType())) {
					daystatus = " AND  CEIL(SYSDATE-MAXPRDT) <=7 ";
				} else if ("less30days".equalsIgnoreCase(cscvo.getType())) {
					// status = " AND NVL(REL_NOOFDAYS-REL_SOPDAYS,0)> 0 ";
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=8 AND CEIL(SYSDATE-MAXPRDT) <=30) ";
				} else if ("gtr30days".equalsIgnoreCase(cscvo.getType())) {
					daystatus = "  AND (CEIL(SYSDATE-MAXPRDT) >=31 AND CEIL(SYSDATE-MAXPRDT) <=44) ";
				} else if ("gtr45days".equalsIgnoreCase(cscvo.getType())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=45 AND CEIL(SYSDATE-MAXPRDT) <=59) ";
				} else if ("gtr60days".equalsIgnoreCase(cscvo.getType())) {
					daystatus = " AND (CEIL(SYSDATE-MAXPRDT) >=60 AND CEIL(SYSDATE-MAXPRDT) <=89) ";
				} else if ("gtr90days".equalsIgnoreCase(cscvo.getType())) {
					daystatus = " AND CEIL(SYSDATE-MAXPRDT) >=90  ";
				} else if ("wrt".equalsIgnoreCase(cscvo.getType())) {
					daystatus = " AND CEIL(SYSDATE-REG_DATE) >31 ";
				} else if ("brt".equalsIgnoreCase(cscvo.getType())) {
					daystatus = " AND CEIL(SYSDATE-REG_DATE) >31 ";
				} else {
					daystatus = "  AND ((CEIL(SYSDATE-REG_DATE) <=3) OR (CEIL(SYSDATE-REG_DATE) >4 AND CEIL(SYSDATE-REG_DATE) <=7) OR(CEIL(SYSDATE-REG_DATE) >8 AND CEIL(SYSDATE-REG_DATE) <=15) OR ( CEIL(SYSDATE-REG_DATE) >16 AND CEIL(SYSDATE-REG_DATE)<=30 ) OR (CEIL(SYSDATE-REG_DATE) >31))  ";
				}

				/// cat ststus

				if ("Deletion".equalsIgnoreCase(cscvo.getType())) {
					if ("Extension".equalsIgnoreCase(cscvo.getStatus())) {
						scsType = " AND R.ESTSTATUS IN ('02')  ";
					} else if ("Simplified".equalsIgnoreCase(cscvo.getStatus())) {
						scsType = " AND R.ESTSTATUS IN ('01') ";
					} else {
						scsType = " AND R.ESTSTATUS IN ('01','02') ";
					}

				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(
							"SELECT  row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTED_LOAD,0 as turnkey,R.APP_DATE,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.USCNO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM "
									+ " (SELECT NCPARTCD,CONSUMER_NAME,REG_NO,GRPAPPNUM,VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,CONTRACTED_LOAD,APP_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS, TO_CHAR(MIN_TRANDT,'DD-MM-YYYY')DEMAND_ISSUED,TO_DATE(MIN_TRANDT+1,'DD-MM-YY') DATE_OF_SMS,DEM_NOOFDAYS,USCNO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY"
									+ " FROM REP_FINAL WHERE NVL(TOTAMT,0) > 50    " + cattype
									+ "   and TRUNC(MIN_TRANDT) BETWEEN to_date('" + cscvo.getFrom_date()
									+ "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
									+ "','DD-MM-YYYY') AND NVL(ESTSTATUS,'03')='02'  AND TRUNC(MIN_TRANDT) IS NOT NULL AND NVL(REJECTED,'Y') <> 'X')R,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S WHERE NCPARTCD=SECCD   "
									+ esstatus + "   and cirname='" + cscvo.getCircle() + "'  and divname='"
									+ cscvo.getDivision() + "'" + " union all"
									+ " SELECT  row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CUSTOMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTLOAD,0 as turnkey,R.APP_DATE  ,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED ,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.SERVICE_CONNECTION_NO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM "
									+ " (SELECT CSPARTCD,CUSTOMER_NAME,REG_NO,'' GRPAPPNUM,'' VOLTAGE,PRESENT_CATEGORY CATEGORY,CONTRACTLOAD ,REG_DATE APP_DATE  ,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS, TO_CHAR(INTIMATE_DATE,'DD-MM-YYYY')DEMAND_ISSUED ,to_date(INTIMATE_DATE+1,'DD-MM-YY') DATE_OF_SMS,DEM_NOOFDAYS,SERVICE_CONNECTION_NO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY  "
									+ " FROM newcomp_tab WHERE NVL(coll,0) > 50 " + loadcattype
									+ "     AND COMPLAINT=9 AND SUB_COMPLAINT=9  and TRUNC(INTIMATE_DATE) BETWEEN to_date('"
									+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
									+ "','DD-MM-YYYY') AND NVL(ESTSTATUS,'03')='02'  AND TRUNC(INTIMATE_DATE) IS NOT NULL  AND NVL(REJECTED,'Y') <> 'X')R, "
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S "
									+ "  WHERE CSPARTCD=SECCD   " + esstatus + "     and cirname='" + cscvo.getCircle()
									+ "' and divname='" + cscvo.getDivision() + "'");

					// reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(
							"SELECT  row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTED_LOAD,0 as turnkey,R.APP_DATE,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.USCNO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM "
									+ " (SELECT NCPARTCD,CONSUMER_NAME,REG_NO,GRPAPPNUM,VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,CONTRACTED_LOAD,APP_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS, TO_CHAR(MIN_TRANDT,'DD-MM-YYYY')DEMAND_ISSUED,TO_DATE(MIN_TRANDT+1,'DD-MM-YY') DATE_OF_SMS,DEM_NOOFDAYS,USCNO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY"
									+ " FROM REP_FINAL WHERE NVL(TOTAMT,0) > 50    " + cattype
									+ "   and TRUNC(MIN_TRANDT) BETWEEN to_date('" + cscvo.getFrom_date()
									+ "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
									+ "','DD-MM-YYYY') AND NVL(ESTSTATUS,'03')='02'  AND TRUNC(MIN_TRANDT) IS NOT NULL AND NVL(REJECTED,'Y') <> 'X')R,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S WHERE NCPARTCD=SECCD   "
									+ esstatus + "   and cirname='" + cscvo.getCircle() + "'  and divname='"
									+ cscvo.getDivision() + "'and subname='" + cscvo.getSubDiv() + "'" + " union all"
									+ " SELECT  row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CUSTOMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTLOAD,0 as turnkey,R.APP_DATE  ,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED ,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.SERVICE_CONNECTION_NO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM "
									+ " (SELECT CSPARTCD,CUSTOMER_NAME,REG_NO,'' GRPAPPNUM,'' VOLTAGE,PRESENT_CATEGORY CATEGORY,CONTRACTLOAD ,REG_DATE APP_DATE  ,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS, TO_CHAR(INTIMATE_DATE,'DD-MM-YYYY')DEMAND_ISSUED ,to_date(INTIMATE_DATE+1,'DD-MM-YY') DATE_OF_SMS,DEM_NOOFDAYS,SERVICE_CONNECTION_NO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY  "
									+ " FROM newcomp_tab WHERE NVL(coll,0) > 50   " + loadcattype
									+ "   AND COMPLAINT=9 AND SUB_COMPLAINT=9  and TRUNC(INTIMATE_DATE) BETWEEN to_date('"
									+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
									+ "','DD-MM-YYYY') AND NVL(ESTSTATUS,'03')='02'  AND TRUNC(INTIMATE_DATE) IS NOT NULL  AND NVL(REJECTED,'Y') <> 'X')R, "
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S "
									+ "  WHERE CSPARTCD=SECCD   " + esstatus + "     and cirname='" + cscvo.getCircle()
									+ "' and divname='" + cscvo.getDivision() + "'and subname='" + cscvo.getSubDiv()
									+ "'");

				} else if ("SEC".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(
							"SELECT  row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CONSUMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTED_LOAD,0 as turnkey,R.APP_DATE,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.USCNO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM "
									+ " (SELECT NCPARTCD,CONSUMER_NAME,REG_NO,GRPAPPNUM,VOLTAGE,SUBSTR(CATEGORY_SUPPLY,1,1)||'-'||SUBSTR(CATEGORY_SUPPLY,2)CATEGORY,CONTRACTED_LOAD,APP_DATE,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS, TO_CHAR(MIN_TRANDT,'DD-MM-YYYY')DEMAND_ISSUED,TO_DATE(MIN_TRANDT+1,'DD-MM-YY') DATE_OF_SMS,DEM_NOOFDAYS,USCNO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY"
									+ " FROM REP_FINAL WHERE NVL(TOTAMT,0) > 50    " + cattype
									+ "   and TRUNC(MIN_TRANDT) BETWEEN to_date('" + cscvo.getFrom_date()
									+ "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
									+ "','DD-MM-YYYY') AND NVL(ESTSTATUS,'03')='02'  AND TRUNC(MIN_TRANDT) IS NOT NULL AND NVL(REJECTED,'Y') <> 'X')R,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S WHERE NCPARTCD=SECCD   "
									+ esstatus + "   and cirname='" + cscvo.getCircle() + "'  and divname='"
									+ cscvo.getDivision() + "'and subname='" + cscvo.getSubDiv() + "' and secname='"
									+ cscvo.getSec() + "' " + " union all"
									+ " SELECT  row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.CUSTOMER_NAME,R.REG_NO,R.GRPAPPNUM,R.VOLTAGE,R.CATEGORY,R.CONTRACTLOAD,0 as turnkey,R.APP_DATE  ,R.PHONE_NO,R.ESTSTATUS,R.DEMAND_ISSUED ,R.DATE_OF_SMS,R.DEM_NOOFDAYS,R.SERVICE_CONNECTION_NO,R.DEM_SOPDAYS,R.DAYS_DELAYED,R.WRT_BRT,R.DEM_PENALTY FROM "
									+ " (SELECT CSPARTCD,CUSTOMER_NAME,REG_NO,'' GRPAPPNUM,'' VOLTAGE,PRESENT_CATEGORY CATEGORY,CONTRACTLOAD ,REG_DATE APP_DATE  ,PHONE_NO,(CASE WHEN(ESTSTATUS='01') THEN 'SIMPLIFIED' ELSE 'EXTENSION' END)ESTSTATUS, TO_CHAR(INTIMATE_DATE,'DD-MM-YYYY')DEMAND_ISSUED ,to_date(INTIMATE_DATE+1,'DD-MM-YY') DATE_OF_SMS,DEM_NOOFDAYS,SERVICE_CONNECTION_NO,DEM_SOPDAYS ,(CASE WHEN(NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0) < 0 ) THEN 0 ELSE (NVL(DEM_NOOFDAYS-DEM_SOPDAYS,0)) END) DAYS_DELAYED,(CASE WHEN((DEM_NOOFDAYS-DEM_SOPDAYS )> 0) THEN 'BRT' ELSE 'WRT' END)WRT_BRT,DEM_PENALTY  "
									+ " FROM newcomp_tab WHERE NVL(coll,0) > 50     " + loadcattype
									+ "    AND COMPLAINT=9 AND SUB_COMPLAINT=9  and TRUNC(INTIMATE_DATE) BETWEEN to_date('"
									+ cscvo.getFrom_date() + "','DD-MM-YYYY') and to_date('" + cscvo.getTo_date()
									+ "','DD-MM-YYYY') AND NVL(ESTSTATUS,'03')='02'  AND TRUNC(INTIMATE_DATE) IS NOT NULL  AND NVL(REJECTED,'Y') <> 'X')R, "
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S "
									+ "  WHERE CSPARTCD=SECCD   " + esstatus + "     and cirname='" + cscvo.getCircle()
									+ "' and divname='" + cscvo.getDivision() + "'and subname='" + cscvo.getSubDiv()
									+ "' and secname='" + cscvo.getSec() + "' ");
				} else {
					resultSet = statement.executeQuery(
							" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.CATEGORY_SUPPLY,R.CONSUMER_NAME,R.MAXPRDT,NVL(R.INTIMATE_DATE,''), CEIL(SYSDATE-MAXPRDT),(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
									+ " " + daystatus + " " + scsType + " AND S.CIRNAME='" + cscvo.getCircle()
									+ "' AND CATEGORY_SUPPLY NOT IN ('5A1','5A2') AND SLADESC='Rejected'  AND NVL(EXTDEM,SAPDEM)=NVL(TOTAMT,0) AND  NVL(TOTAMT,0) >100;");
				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						vo.setCircleName(resultSet.getString(1));
						vo.setDivision(resultSet.getString(2));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(3));
						vo.setSec(resultSet.getString(4));
						vo.setCat(resultSet.getString(5));
						vo.setRegDate(resultSet.getString(5));
						vo.setMeeseva_ref(resultSet.getString(6));
						vo.setCunsu_name(resultSet.getString(7));
						vo.setReg_no(resultSet.getString(8));
						vo.setRelNoOfDays(resultSet.getInt(9));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}

	
	
				
	    //ht_new
	public CscpayVO getHtPenAppBrtReportDetails_new(CscpayVO cscvo) throws Exception {

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = c.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));
		String endDate1 = String.valueOf(curr_date);
		if (endDate1.length() == 1)
			endDate1 = "0".concat(endDate1);
		endDate = endDate1.concat("-")
				.concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		System.out.println("Date:" + startDate);

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = " SELECT nvl(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? " + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.divname) order by S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = " SELECT nvl(S.subname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=?  and s.divname=?   "
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = " SELECT nvl(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=?  and s.divname=?  and s.subname=?   "
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
                  
					
					String query = " SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME ";
					
					
					reportPStmt = con.prepareStatement(query);
					System.out.println("cirHT3:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setAppPending(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setAppPending(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				
				
				
				// 2 WRT-dept

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(c.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL and (SYSDATE-MAXPRDT) <=60)C,"
							+ " (SELECT cirname, divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=c.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and S.CIRNAME=?  " + " AND A.NCPARTCD=c.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(c.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL and (SYSDATE-MAXPRDT) <=60)C,"
							+ " (SELECT cirname,divname, subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=c.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and S.CIRNAME=?  and  s.divname=?  "
							+ " AND A.NCPARTCD=c.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";
					// + " and cirname=? and divname=? GROUP BY
					// rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(c.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL and (SYSDATE-MAXPRDT) <=60)C,"
							+ " (SELECT cirname,divname,subname, secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=c.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and S.CIRNAME=?  and  s.divname=?  and subname=? "
							+ " AND A.NCPARTCD=c.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
                     
					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(c.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL and (SYSDATE-MAXPRDT) <=61)C,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=c.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=c.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					
					
					
					reportPStmt = con.prepareStatement(query);
					System.out.println("cirht3:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setWrt(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setWrt(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 3 brt-dept 2 months

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(d.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=61 AND (SYSDATE-MAXPRDT) <=90)D,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=d.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=?   " + " AND A.NCPARTCD=d.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(d.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=61 AND (SYSDATE-MAXPRDT) <=90)D,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=d.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=?    and S.divname=?  "
							+ " AND A.NCPARTCD=d.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(d.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=61 AND (SYSDATE-MAXPRDT) <=90)D,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=d.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=?    and S.divname=? and s.subname=?  "
							+ " AND A.NCPARTCD=d.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(d.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=61 AND (SYSDATE-MAXPRDT) <=90)D,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=d.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=d.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setBrt_gtr_2months(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setBrt_gtr_2months(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// brt -dept > 3months

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(e.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <=120)E,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=e.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD  and s.cirname=?  " + " AND A.NCPARTCD=e.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(e.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <=120)E,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=e.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD  and s.cirname=?   and s.divname=?  "
							+ " AND A.NCPARTCD=e.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(e.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <=120)E,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=e.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD  and s.cirname=?   and s.divname=?  and  s.subname=?   "
							+ " AND A.NCPARTCD=e.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(e.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91 AND (SYSDATE-MAXPRDT) <=120)E,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=e.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=e.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setBrt_gtr_6months(reportRst.getString(2));
						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setBrt_gtr_6months(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 5 brt_dept >4 months

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(f.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121)F,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=f.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD  and s.cirname=? " + " AND A.NCPARTCD=f.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(f.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121)F,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=f.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD  and s.cirname=?   and s.divname=?  "
							+ " AND A.NCPARTCD=f.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(f.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121)F,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=f.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD  and s.cirname=?   and s.divname=?     and s.subname=? "
							+ " AND A.NCPARTCD=f.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(f.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 120)F,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=f.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=f.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setBrt_gtr_1year(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setBrt_gtr_1year(reportRst.getString(2));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 6 wrt-tkey

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(G.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and  (SYSDATE-MAXPRDT) <=90)G,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=G.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=?  " + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(G.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and  (SYSDATE-MAXPRDT) <=90)G,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=G.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=?  and  s.divname=?  "
							+ " AND A.NCPARTCD=G.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(G.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and  (SYSDATE-MAXPRDT) <=90)G,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=G.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? and   s.divname=?    and s.subname=? "
							+ " AND A.NCPARTCD=G.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(G.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and  (SYSDATE-MAXPRDT) <=90)G,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=G.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setWrt_turnkey(reportRst.getString(2));
						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setWrt_turnkey(reportRst.getString(2));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 7 brt-tkey > 3MONTHS

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(H.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and  CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120)H,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=H.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? " + " AND A.NCPARTCD=H.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(H.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND  CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120)H,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=H.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? and    s.divname=?  "
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(H.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND  CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120)H,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=H.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? and    s.divname=?    and s.subname=?  "
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(H.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120)H,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=H.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=H.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setTurnkey_gtr_2months(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(2));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// brt_tkey->4 months
				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(H.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and (SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150)H,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=H.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? " + " AND A.NCPARTCD=H.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(H.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150)H,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=H.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? and    s.divname=?  "
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(H.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150)H,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=H.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? and    s.divname=?    and s.subname=?  "
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(I.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) > 120 AND (SYSDATE-MAXPRDT) <=150)I,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=I.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=I.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setTurnkey_gtr_6months(reportRst.getString(2));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// brt -tkey GTR 5 MONTHS

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(J.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >151)J,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=J.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD and   s.cirname=? " + " AND A.NCPARTCD=J.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(J.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >151)J,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=J.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD and   s.cirname=?  and s.divname=? "
							+ " AND A.NCPARTCD=J.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(J.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >151)J,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=J.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD and   s.cirname=?  and s.divname=?  and s.subname=? "
							+ " AND A.NCPARTCD=J.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1)='H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(J.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT' AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Turnkey' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >150)J,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=J.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=J.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1)='H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				/*
				 * if (reportPStmt != null) { reportPStmt.close(); } if
				 * (reportRst != null) { reportRst.close(); }
				 */

				//

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

		}
		return cscvo;
	}
	
	
	

	// lt3 nEW
	public CscpayVO getLt3PenAppBrtReportDetails_new(CscpayVO cscvo) throws Exception {

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = c.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));
		String endDate1 = String.valueOf(curr_date);
		if (endDate1.length() == 1)
			endDate1 = "0".concat(endDate1);
		endDate = endDate1.concat("-")
				.concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		System.out.println("Date:" + startDate);

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();

		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
					String query = " SELECT nvl(S.divname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? " + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.divname) order by S.divname ";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = " SELECT nvl(S.subname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '3%'AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=?  and s.divname=?   "
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = " SELECT nvl(S.secname,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=?  and s.divname=?  and s.subname=?   "
							+ " AND A.NCPARTCD=B.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname ";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = " SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(B.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL )B,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=B.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=B.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME ";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setAppPending(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setAppPending(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 2 WRT-dept

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(c.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL and (SYSDATE-MAXPRDT) <=30)C,"
							+ " (SELECT cirname, divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=c.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and S.CIRNAME=?  " + " AND A.NCPARTCD=c.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(c.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL and (SYSDATE-MAXPRDT) <=30)C,"
							+ " (SELECT cirname,divname, subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=c.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and S.CIRNAME=?  and  s.divname=?  "
							+ " AND A.NCPARTCD=c.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";
					// + " and cirname=? and divname=? GROUP BY
					// rollup(S.subname) ORDER BY S.subname ";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(c.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL and (SYSDATE-MAXPRDT) <=30)C,"
							+ " (SELECT cirname,divname,subname, secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=c.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and S.CIRNAME=?  and  s.divname=?  and subname=? "
							+ " AND A.NCPARTCD=c.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(c.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT IN ('WRT') AND  NVL(TRIM(EXECUTION_TYPE),'Department') = 'Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL and (SYSDATE-MAXPRDT) <=30)C,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=c.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=c.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setWrt(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setWrt(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 3 brt-dept 2 months

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(d.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=31 AND (SYSDATE-MAXPRDT) <=60)D,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=d.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=?   " + " AND A.NCPARTCD=d.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(d.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=31 AND (SYSDATE-MAXPRDT) <=60)D,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=d.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=?    and S.divname=?  "
							+ " AND A.NCPARTCD=d.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(d.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=31 AND (SYSDATE-MAXPRDT) <=60)D,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=d.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=?    and S.divname=? and s.subname=?  "
							+ " AND A.NCPARTCD=d.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(d.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >=31 AND (SYSDATE-MAXPRDT) <=60)D,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=d.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=d.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setBrt_gtr_2months(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setBrt_gtr_2months(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// brt -dept > 3months

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(e.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 61 AND (SYSDATE-MAXPRDT) <=90)E,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=e.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD  and s.cirname=?  " + " AND A.NCPARTCD=e.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(e.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 61 AND (SYSDATE-MAXPRDT) <=90)E,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=e.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD  and s.cirname=?   and s.divname=?  "
							+ " AND A.NCPARTCD=e.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(e.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 61 AND (SYSDATE-MAXPRDT) <=90)E,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=e.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD  and s.cirname=?   and s.divname=?  and  s.subname=?   "
							+ " AND A.NCPARTCD=e.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(e.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 61 AND (SYSDATE-MAXPRDT) <=90)E,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=e.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=e.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setBrt_gtr_6months(reportRst.getString(2));
						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setBrt_gtr_6months(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 5 brt_dept >4 months

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(f.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91)F,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=f.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD  and s.cirname=? " + " AND A.NCPARTCD=f.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(f.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91)F,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=f.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD  and s.cirname=?   and s.divname=?  "
							+ " AND A.NCPARTCD=f.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(f.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91)F,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=f.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD  and s.cirname=?   and s.divname=?     and s.subname=? "
							+ " AND A.NCPARTCD=f.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(f.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE PENDING_STAT ='BRT'  AND SUPPLY_RELEASE_DATE IS  NULL AND NVL(TRIM(EXECUTION_TYPE),'Department')='Department' AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 91)F,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=f.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=f.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setBrt_gtr_1year(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setBrt_gtr_1year(reportRst.getString(2));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 6 wrt-tkey

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(G.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and  (SYSDATE-MAXPRDT) <=90)G,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=G.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=?  " + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(G.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and  (SYSDATE-MAXPRDT) <=90)G,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=G.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=?  and  s.divname=?  "
							+ " AND A.NCPARTCD=G.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(G.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and  (SYSDATE-MAXPRDT) <=90)G,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=G.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? and   s.divname=?    and s.subname=? "
							+ " AND A.NCPARTCD=G.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(G.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%WRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and  (SYSDATE-MAXPRDT) <=90)G,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=G.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=G.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setWrt_turnkey(reportRst.getString(2));
						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setWrt_turnkey(reportRst.getString(2));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// 7 brt-tkey > 3MONTHS

				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(H.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and  CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120)H,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=H.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? " + " AND A.NCPARTCD=H.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(H.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND  CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120)H,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=H.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? and    s.divname=?  "
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(H.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND  CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120)H,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=H.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? and    s.divname=?    and s.subname=?  "
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(H.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND CEIL(SYSDATE-MAXPRDT) > 90 AND CEIL(SYSDATE-MAXPRDT) <=120)H,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=H.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=H.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setTurnkey_gtr_2months(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setTurnkey_gtr_2months(reportRst.getString(2));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// brt_tkey->4 months
				if ("DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(H.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL AND  INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL and (SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150)H,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=H.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? " + " AND A.NCPARTCD=H.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";

					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(H.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150)H,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=H.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? and    s.divname=?  "
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(H.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150)H,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=H.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD   and s.cirname=? and    s.divname=?    and s.subname=?  "
							+ " AND A.NCPARTCD=H.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(I.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT) >= 121 AND (SYSDATE-MAXPRDT) <=150)I,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=I.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=I.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setTurnkey_gtr_6months(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setTurnkey_gtr_6months(reportRst.getString(2));
							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				if (reportPStmt != null) {
					reportPStmt.close();
				}
				if (reportRst != null) {
					reportRst.close();
				}

				// brt -tkey GTR 5 MONTHS

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(J.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >151)J,"
							+ " (SELECT cirname,divname,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=J.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD and   s.cirname=? " + " AND A.NCPARTCD=J.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <>'H'" + " GROUP BY ROLLUP(S.divname) order by S.divname";
					reportPStmt = con.prepareStatement(query);
					reportPStmt.setString(1, cscvo.getCircle());
					reportRst = reportPStmt.executeQuery();

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(J.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >151)J,"
							+ " (SELECT cirname,divname,subname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=J.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD and   s.cirname=?  and s.divname=? "
							+ " AND A.NCPARTCD=J.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <>'H'"
							+ " GROUP BY ROLLUP(S.subname) order by S.subname";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(J.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'  AND CATEGORY_SUPPLY LIKE '3%'  AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >151)J,"
							+ " (SELECT cirname,divname,subname,secname,SECCD FROM SPDCLMASTER)S"
							+ " WHERE A.REG_NO=J.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD and   s.cirname=?  and s.divname=?  and s.subname=? "
							+ " AND A.NCPARTCD=J.NCPARTCD(+)" + " AND SUBSTR(A.REG_NO,6,1) <> 'H'"
							+ " GROUP BY ROLLUP(S.secname) order by S.secname";

					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(J.REG_NO) PAID_PENDING from "
							+ " (SELECT REG_NO,NCPARTCD,CATEGORY_SUPPLY,ESTSTATUS FROM REP_FINAL WHERE NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02'   AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO))A,"
							+ " (SELECT REG_NO,NCPARTCD FROM REP_FINAL WHERE REPSTAT LIKE '%BRTTKE%' AND SUPPLY_RELEASE_DATE IS  NULL  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND (SYSDATE-MAXPRDT)  >151)J,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER)S" + " WHERE A.REG_NO=J.REG_NO(+)"
							+ " AND A.NCPARTCD=S.SECCD" + " AND A.NCPARTCD=J.NCPARTCD(+)"
							+ " AND SUBSTR(A.REG_NO,6,1) <> 'H'" + " GROUP BY ROLLUP(S.CIRNAME) order by S.CIRNAME";
					reportPStmt = con.prepareStatement(query);
					System.out.println("cir:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(2));

						} else {
							CscpayVO dmapobj = new CscpayVO();
							dmapobj.setTurnkey_gtr_1year(reportRst.getString(2));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

				/*
				 * if (reportPStmt != null) { reportPStmt.close(); } if
				 * (reportRst != null) { reportRst.close(); }
				 */

				//

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (reportPStmt != null) {
				reportPStmt.close();
			}
			if (reportRst != null) {
				reportRst.close();
			}

		}
		return cscvo;
	}

	// LT! & LT2
	public CscpayVO getLt1Lt2ExtentionSimplifiedDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = c.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";
		String status = "";
		String gr_1month = "";
		String gr_2month = "";
		String gr_3month = "";
		String extstatus="";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));
		String endDate1 = String.valueOf(curr_date);
		if (endDate1.length() == 1)
			endDate1 = "0".concat(endDate1);
		endDate = endDate1.concat("-")
				.concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		System.out.println("Date:" + startDate);

		if ("1".equalsIgnoreCase(cscvo.getCat())) {
			cattype = " SUBSTR(CATEGORY_SUPPLY,1,1)  IN ('1') ";
		} else {
			cattype = " SUBSTR(CATEGORY_SUPPLY,1,1)  IN ('2') ";
		}

		if ("Extension".equalsIgnoreCase(cscvo.getStatus())) {

			status = "  AND NVL(ESTSTATUS,'03')='02'  ";
			extstatus=" (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=30 ";
			gr_1month = " CEIL(SYSDATE-MAXPRDT) >30 AND CEIL(SYSDATE-MAXPRDT) <=60   ";
			gr_2month = " CEIL(SYSDATE-MAXPRDT) >61 AND CEIL(SYSDATE-MAXPRDT) <=90 ";
			gr_3month = " CEIL(SYSDATE-MAXPRDT) >91 ";
		} else {
			status = "   AND NVL(ESTSTATUS,'03')='01'   ";
			extstatus=" (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 ";
			gr_1month = " CEIL(SYSDATE-MAXPRDT) >7 AND CEIL(SYSDATE-MAXPRDT) <=15   ";
			gr_2month = " CEIL(SYSDATE-MAXPRDT) >15 AND CEIL(SYSDATE-MAXPRDT) <=30 ";
			gr_3month = " CEIL(SYSDATE-MAXPRDT) >30 ";

		}

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.divname,'TOTAL'),COUNT(R.WRT) WRT,COUNT(A.REG_NO)GRATHER_7,COUNT(B.REG_NO) GRATHER_15,COUNT(C.REG_NO)GRATHER_30,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)BRT_TOTAL,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(R.WRT)GRAND_TOTAL FROM"
							+ " (SELECT REG_NO,NCPARTCD,"+extstatus+" THEN 'WRT' ELSE '' END) WRT,"
							+ " (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE "
							+ cattype + " AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL  " + status
							+ "  AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' AND SUBSTR(REG_NO,6,1) IN ('S','N')) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE " + gr_1month + "  )A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  " + gr_2month + " )B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  " + gr_3month + "  )C,"
							+ " (SELECT CIRNAME,divname,SECCD FROM SPDCLMASTER )S" + " WHERE R.REG_NO=A.REG_NO(+)"
							+ " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD and s.cirname=? "
							+ " GROUP BY rollup(S.divname) order by S.divname  ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.subname,'TOTAL'),COUNT(R.WRT) WRT,COUNT(A.REG_NO)GRATHER_7,COUNT(B.REG_NO) GRATHER_15,COUNT(C.REG_NO)GRATHER_30,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)BRT_TOTAL,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(R.WRT)GRAND_TOTAL FROM"
							+ " (SELECT REG_NO,NCPARTCD,"+extstatus+" THEN 'WRT' ELSE '' END) WRT,"
							+ " (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE "
							+ cattype + " AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL  " + status
							+ "  AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' AND SUBSTR(REG_NO,6,1) IN ('S','N')) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE " + gr_1month + "  )A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  " + gr_2month + " )B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  " + gr_3month + "  )C,"
							+ " (SELECT CIRNAME,divname,subname,SECCD FROM SPDCLMASTER )S"
							+ " WHERE R.REG_NO=A.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD and s.cirname=? and s.divname=? "
							+ " GROUP BY rollup(S.subname) order by S.subname  ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					String query = "SELECT nvl(S.secname,'TOTAL'),COUNT(R.WRT) WRT,COUNT(A.REG_NO)GRATHER_7,COUNT(B.REG_NO) GRATHER_15,COUNT(C.REG_NO)GRATHER_30,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)BRT_TOTAL,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(R.WRT)GRAND_TOTAL FROM"
							+ " (SELECT REG_NO,NCPARTCD,"+extstatus+" THEN 'WRT' ELSE '' END) WRT,"
							+ " (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE "
							+ cattype + " AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL  " + status
							+ "  AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' AND SUBSTR(REG_NO,6,1) IN ('S','N')) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE " + gr_1month + "  )A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  " + gr_2month + " )B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  " + gr_3month + "  )C,"
							+ " (SELECT CIRNAME,divname,subname,secname,SECCD FROM SPDCLMASTER )S"
							+ " WHERE R.REG_NO=A.REG_NO(+)" + " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)"
							+ " AND R.NCPARTCD=S.SECCD and s.cirname=? and s.divname=? and  s.subname=? "
							+ " GROUP BY rollup(S.secname) order by S.secname  ";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {

					String query = "SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(R.WRT) WRT,COUNT(A.REG_NO)GRATHER_7,COUNT(B.REG_NO) GRATHER_15,COUNT(C.REG_NO)GRATHER_30,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)BRT_TOTAL,COUNT(A.REG_NO)+COUNT(B.REG_NO)+COUNT(C.REG_NO)+COUNT(R.WRT)GRAND_TOTAL FROM"
							+ " (SELECT REG_NO,NCPARTCD,"+extstatus+" THEN 'WRT' ELSE '' END) WRT,"
							+ " (CASE WHEN(CEIL(SYSDATE-MAXPRDT)) >=31 THEN 'BRT' ELSE '' END) BRT FROM REP_FINAL WHERE "
							+ cattype + " AND NVL(REJECTED,'Y') <> 'X'  AND USCNO IS NULL  " + status
							+ "  AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' AND SUBSTR(REG_NO,6,1) IN ('S','N')) R,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE " + gr_1month + "  )A,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  " + gr_2month + " )B,"
							+ " (SELECT REG_NO,MAXPRDT FROM REP_FINAL WHERE  " + gr_3month + "  )C,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S" + " WHERE R.REG_NO=A.REG_NO(+)"
							+ " AND R.REG_NO=B.REG_NO(+)" + " AND R.REG_NO=C.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD"
							+ " GROUP BY rollup(S.CIRNAME) order by S.CIRNAME  ";

					reportPStmt = con.prepareStatement(query);
					System.out.println("cat1cat2:"+query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setWrt(reportRst.getString(2));
							dmapobj.setBrt_gtr_1months(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setTot_brt(reportRst.getString(6));
							dmapobj.setTotal(reportRst.getString(7));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setWrt(reportRst.getString(2));
							dmapobj.setBrt_gtr_1months(reportRst.getString(3));
							dmapobj.setBrt_gtr_2months(reportRst.getString(4));
							dmapobj.setBrt_gtr_3months(reportRst.getString(5));
							dmapobj.setTot_brt(reportRst.getString(6));
							dmapobj.setTotal(reportRst.getString(7));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

	// LT! LT2 Sim/Ext Download

	public CscpayVO getexportLt1Lt2ScsDetails(CscpayVO cscvo) throws Exception {

		List<String> headerValues = new ArrayList<String>();

		// XSSFWorkbook workbook = new XSSFWorkbook();
		SXSSFWorkbook workbook = new SXSSFWorkbook();
		ResultSet resultSet = null;
		String table = "";
		String govttype = "";
		String counter = "";
		String complaint_type = "";
		String status = "";

		Calendar c = Calendar.getInstance();
		int cyear = c.get(Calendar.YEAR);// calender year starts from 1900 so
											// you must add 1900 to the value
											// recevie.i.e., 1990+112 = 2012
		int cmonth = c.get(Calendar.MONTH) + 1;// this is april so you will
												// receive 3 instead of 4.
		int cday = c.get(Calendar.DAY_OF_MONTH);

		String currentyear = String.valueOf(cyear);// calender year starts from
													// 1900 so you must add 1900
													// to the value
													// recevie.i.e., 1990+112 =
													// 2012
		String currentmonth = String.valueOf(cmonth);

		if (currentmonth.length() == 1) {
			currentmonth = "0" + currentmonth;
		}

		String currentmonthYear = currentmonth + "-" + currentyear;

		Calendar cal = Calendar.getInstance();
		int curr_year = cal.get(Calendar.YEAR);
		int curr_month = cal.get(Calendar.MONTH) + 1;

		String[] monthName = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
		// Calendar c = Calendar.getInstance();
		// int curr_year = c.get(Calendar.YEAR);
		// int curr_month = c.get(Calendar.MONTH) + 1;
		int curr_date = cal.get(Calendar.DATE);

		String startDate = null;
		String endDate = null;
		String cattype = "";
		String category = "";

		Integer[] quartMonth = new Integer[3];
		Integer[] quartYear = new Integer[3];
		DateFormat df = new SimpleDateFormat("dd-MM-yy");

		startDate = "01-".concat((monthName[(curr_month - 1)]).concat("-".concat(String.valueOf(curr_year))));

		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Statement statement = con.createStatement();

		String circle = "";
		String type = "";
		String gr_1month = "";
		String gr_2month = "";
		String gr_3month = "";

		// String currentmonthYear = currentmonth + "-" + currentyear;
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		
		  if ("1".equalsIgnoreCase(cscvo.getCategory())) {
			  cattype = " and SUBSTR(CATEGORY_SUPPLY,1,1)  IN ('1') "; 
			  }
		  else { 
			  cattype = " and SUBSTR(CATEGORY_SUPPLY,1,1)  IN ('2') ";
			  }
		

		/*if ("Extension".equalsIgnoreCase(cscvo.getStatus())) {

			status = "  AND NVL(ESTSTATUS,'03')='02'  ";
			gr_1month = " CEIL(SYSDATE-MAXPRDT) >30 AND CEIL(SYSDATE-MAXPRDT) <=60   ";
			gr_2month = " CEIL(SYSDATE-MAXPRDT) >61 AND CEIL(SYSDATE-MAXPRDT) <=90 ";
			gr_3month = " CEIL(SYSDATE-MAXPRDT) >91 ";

		} else {
			status = "   AND NVL(ESTSTATUS,'03')='01'   ";

			gr_1month = " CEIL(SYSDATE-MAXPRDT) >7 AND CEIL(SYSDATE-MAXPRDT) <=15   ";
			gr_2month = " CEIL(SYSDATE-MAXPRDT) >15 AND CEIL(SYSDATE-MAXPRDT) <=30 ";
			gr_3month = " CEIL(SYSDATE-MAXPRDT) >30 ";

		}
*/
		try {
			if (con != null) {

				if ("Extension".equalsIgnoreCase(cscvo.getStatus())) {

					if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						status = " AND (CEIL(SYSDATE-MAXPRDT)) <=30  AND NVL(ESTSTATUS,'03')='02' ";
					} else if ("BRT_GTR_IMON".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   AND CEIL(SYSDATE-MAXPRDT) >30 AND CEIL(SYSDATE-MAXPRDT) <=60  AND NVL(ESTSTATUS,'03')='02'  ";
					} else if ("BRT_GTR_2MON".equalsIgnoreCase(cscvo.getCtype())) {
						status = "    AND CEIL(SYSDATE-MAXPRDT) >61 AND CEIL(SYSDATE-MAXPRDT) <=90  AND NVL(ESTSTATUS,'03')='02'  ";
					} else if ("BRT_GTR_3MON".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  and CEIL(SYSDATE-MAXPRDT) >91 AND NVL(ESTSTATUS,'01')='02'  ";
					} else if ("BRT_TOTAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "     AND ((CEIL(SYSDATE-MAXPRDT) >30 AND CEIL(SYSDATE-MAXPRDT) <=60) or (CEIL(SYSDATE-MAXPRDT) >61 AND CEIL(SYSDATE-MAXPRDT) <=90) or (CEIL(SYSDATE-MAXPRDT) >91)) AND NVL(ESTSTATUS,'03')='02' ";
					} else if ("TOTAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "      AND (((CEIL(SYSDATE-MAXPRDT)) <=30) or (CEIL(SYSDATE-MAXPRDT) >30 AND CEIL(SYSDATE-MAXPRDT) <=60) or (CEIL(SYSDATE-MAXPRDT) >61 AND CEIL(SYSDATE-MAXPRDT) <=90) or (CEIL(SYSDATE-MAXPRDT) >91)) AND NVL(ESTSTATUS,'03')='02' ";
					} else {
						status = "";
					}

				} else {

					if ("WRT".equalsIgnoreCase(cscvo.getCtype())) {
						//status = " where   NVL(TRIM(PENDING_STAT),'NA') <> 'DEL' AND NVL(ESTSTATUS,'01')='02' AND CATEGORY_SUPPLY LIKE '3%' AND NOT EXISTS (SELECT REGNO FROM ONLINEHTINSPECTIONREPORT WHERE REG_NO=REGNO) and PENDING_STAT IN ('WRT','BRT')  AND INTIMATE_DATE IS NOT NULL AND MAXPRDT IS NOT NULL AND SLCPRDT IS NOT NULL AND SDPRDT IS NOT NULL AND SUPPLY_RELEASE_DATE IS  NULL  AND SUBSTR(REG_NO,6,1) <> 'H'  ";
						status = " AND (CEIL(SYSDATE-MAXPRDT)) <=7  AND NVL(ESTSTATUS,'03')='01' ";
					} else if ("BRT_GTR_IMON".equalsIgnoreCase(cscvo.getCtype())) {
						status = "  AND  CEIL(SYSDATE-MAXPRDT) >7 AND CEIL(SYSDATE-MAXPRDT) <=15   AND NVL(ESTSTATUS,'03')='01' ";
					} else if ("BRT_GTR_2MON".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   AND CEIL(SYSDATE-MAXPRDT) >15 AND CEIL(SYSDATE-MAXPRDT) <=30  AND NVL(ESTSTATUS,'03')='01' ";
					} else if ("BRT_GTR_3MON".equalsIgnoreCase(cscvo.getCtype())) {
						status = "   AND  CEIL(SYSDATE-MAXPRDT) >30 AND NVL(ESTSTATUS,'03')='01' ";
					} else if ("BRT_TOTAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "    AND  ((CEIL(SYSDATE-MAXPRDT) >7 AND CEIL(SYSDATE-MAXPRDT) <=15) or (CEIL(SYSDATE-MAXPRDT) >15 AND CEIL(SYSDATE-MAXPRDT) <=30) or (CEIL(SYSDATE-MAXPRDT) >30))   AND NVL(ESTSTATUS,'03')='01'  ";
					} else if ("TOTAL".equalsIgnoreCase(cscvo.getCtype())) {
						status = "     AND  (((CEIL(SYSDATE-MAXPRDT)) <=7) or (CEIL(SYSDATE-MAXPRDT) >7 AND CEIL(SYSDATE-MAXPRDT) <=15) or (CEIL(SYSDATE-MAXPRDT) >15 AND CEIL(SYSDATE-MAXPRDT) <=30) or (CEIL(SYSDATE-MAXPRDT) >30))   AND NVL(ESTSTATUS,'03')='01'    ";
					} else {
						status = "";
					}
				}

				if ("DIV".equals(cscvo.getFlag())) {
					if (cscvo.getDivision().equalsIgnoreCase("TOTAL")) {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
							circle = " ";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "'";
						}
					}

					else {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
							circle = "  and divname='" + cscvo.getDivision() + "'";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "'";
						}
					}

				} else if ("SUB_DIV".equals(cscvo.getFlag()))

				{
					if (cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")
								&& cscvo.getDivision().equalsIgnoreCase("TOTAL")) {
							circle = " ";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "'";
						}

					}

					else {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL")
								&& cscvo.getDivision().equalsIgnoreCase("TOTAL")) {
							circle = " and subname='" + cscvo.getSubDiv() + "'";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "'";
						}
					}

				}

				else if ("SEC".equals(cscvo.getFlag())) {
					if (cscvo.getSec().equalsIgnoreCase("TOTAL")) {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL") && cscvo.getDivision().equalsIgnoreCase("TOTAL")
								&& cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
							circle = " ";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "'";
						}

					}

					else {

						if (cscvo.getCircle().equalsIgnoreCase("TOTAL") && cscvo.getDivision().equalsIgnoreCase("TOTAL")
								&& cscvo.getSubDiv().equalsIgnoreCase("TOTAL")) {
							circle = " and secname='" + cscvo.getSec() + "'";
						} else {
							circle = " and cirname='" + cscvo.getCircle() + "' and divname='" + cscvo.getDivision()
									+ "' and subname='" + cscvo.getSubDiv() + "' and secname='" + cscvo.getSec() + "'";
						}
					}

				} else if ("CIR".equals(cscvo.getFlag())) {

					if (cscvo.getCircle().equalsIgnoreCase("TOTAL")) {
						circle = "";
					}

					else {
						circle = " and cirname='" + cscvo.getCircle() + "'";
					}

				} else {

				}

				SXSSFSheet spreadsheet = (SXSSFSheet) workbook.createSheet("Sheet");

				if ("DIV".equals(cscvo.getFlag())) {
					
					/*resultSet = statement.executeQuery(
							" select row_number() over (partition by null order by null) sno,S.cirname,S.divname Division,S.subname,S.secname Section,"
									+ " R.REG_NO reg_no,R.reg_date,R.consumer_name ,R.CAT, R.Load, R.Demand,R.Paid ,R.paid_date , R.Estimate_Sanctioned_Date, R.AGEPENDENCY  ,R.PENDING_STAT,R.EXECUTION_TYPE,P.REASONS||'-'||REMARKS FROM"
									+ " (select row_number() over (partition by null order by null) sno,REG_NO reg_no,to_char(reg_date,'DD-MM-YYYY') as reg_date,consumer_name ,category_supply CAT, contracted_load Load,nvl(sapdem,extdem) Demand,totamt Paid ,to_char(greatest(nvl(grp_prdt,reg_date),nvl(maxprdt,reg_date)),'DD-MM-YYYY') paid_date ,to_char(INTIMATE_DATE,'DD-MM-YYYY') as Estimate_Sanctioned_Date, trunc(trunc(months_between (trunc(SYSDATE) , trunc(MAXPRDT)))/12)||'YRS' ||mod(trunc(months_between(trunc(SYSDATE) , MAXPRDT)), 12)|| 'MNTS'||round( trunc(SYSDATE) - add_months(( MAXPRDT), trunc(months_between(trunc(SYSDATE) , MAXPRDT))),0) || 'DYS' AS AGEPENDENCY  ,PENDING_STAT,nvl(EXECUTION_TYPE,'Department') EXECUTION_TYPE,NCPARTCD from rep_final"
									+ " " + status + " )R,"
									+ " (SELECT REG_NO,REASONS,REMARKS  FROM PENDINGLTHTPAYMENT )P,"
									+ " (SELECT CIRNAME,DIVNAME,SUBNAME,SECNAME,SECCD FROM SPDCLMASTER)S"
									+ " WHERE R.REG_NO=P.REG_NO(+)" + " AND R.NCPARTCD=S.SECCD" + " " + circle + "");*/
					resultSet = statement.executeQuery(
							" SELECT row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.REG_DATE,R.CONSUMER_NAME,R.CATEGORY_SUPPLY,R.CONTRACTED_LOAD,NVL(R.EXTDEM,R.SAPDEM) DEMAND ,NVL(R.TOTAMT,GRP_COLL) COLL,R.MAXPRDT,NVL(R.INTIMATE_DATE,'')DEMAND_DATE, CEIL(SYSDATE-MAXPRDT)DAYS ,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS,R.EXECUTION_TYPE FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+cattype+" " + circle + " "+status+" AND  USCNO IS NULL  AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' AND SUBSTR(REG_NO,6,1) IN ('S','N')  ");		

				} else if ("SUB_DIV".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(
							" SELECT row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.REG_DATE,R.CONSUMER_NAME,R.CATEGORY_SUPPLY,R.CONTRACTED_LOAD,NVL(R.EXTDEM,R.SAPDEM) DEMAND ,NVL(R.TOTAMT,GRP_COLL) COLL,R.MAXPRDT,NVL(R.INTIMATE_DATE,'')DEMAND_DATE, CEIL(SYSDATE-MAXPRDT)DAYS ,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS,R.EXECUTION_TYPE FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+cattype+" " + circle + " "+status+" AND  USCNO IS NULL  AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' AND SUBSTR(REG_NO,6,1) IN ('S','N')  ");

				} else if ("SEC".equals(cscvo.getFlag())) {

					resultSet = statement.executeQuery(
							" SELECT row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.REG_DATE,R.CONSUMER_NAME,R.CATEGORY_SUPPLY,R.CONTRACTED_LOAD,NVL(R.EXTDEM,R.SAPDEM) DEMAND ,NVL(R.TOTAMT,GRP_COLL) COLL,R.MAXPRDT,NVL(R.INTIMATE_DATE,'')DEMAND_DATE, CEIL(SYSDATE-MAXPRDT)DAYS ,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS,R.EXECUTION_TYPE FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+cattype+" " + circle + " "+status+" AND  USCNO IS NULL  AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' AND SUBSTR(REG_NO,6,1) IN ('S','N')  ");
				} else {

				
					System.out.println(" SELECT S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.REG_DATE,R.CONSUMER_NAME,R.CATEGORY_SUPPLY,R.CONTRACTED_LOAD,NVL(R.EXTDEM,R.SAPDEM) DEMAND ,NVL(R.TOTAMT,GRP_COLL) COLL,R.MAXPRDT,NVL(R.INTIMATE_DATE,'')DEMAND_DATE, CEIL(SYSDATE-MAXPRDT)DAYS ,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS,R.EXECUTION_TYPE FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " AND (CEIL(SYSDATE-MAXPRDT)) <=7   AND S.CIRNAME='NELLORE' AND SUBSTR(CATEGORY_SUPPLY,1,1)  IN ('1') AND  USCNO IS NULL AND NVL(ESTSTATUS,'03')='01' AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' AND SUBSTR(REG_NO,6,1) IN ('S','N') ;");
					resultSet = statement.executeQuery(
							" SELECT row_number() over (partition by null order by null) sno,S.CIRNAME,S.DIVNAME,S.SUBNAME,S.SECNAME,R.REG_NO,R.REG_DATE,R.CONSUMER_NAME,R.CATEGORY_SUPPLY,R.CONTRACTED_LOAD,NVL(R.EXTDEM,R.SAPDEM) DEMAND ,NVL(R.TOTAMT,GRP_COLL) COLL,R.MAXPRDT,NVL(R.INTIMATE_DATE,'')DEMAND_DATE, CEIL(SYSDATE-MAXPRDT)DAYS ,(CASE WHEN(CEIL(SYSDATE-MAXPRDT)) <=7 THEN 'WRT' ELSE 'BRT' END) WRT_BRT,(CASE WHEN(NVL(ESTSTATUS,'03')) ='01' THEN 'Simplified' ELSE 'Extension' END) ESTSTATUS,R.EXECUTION_TYPE FROM REP_FINAL R,SPDCLMASTER S WHERE R.NCPARTCD=S.SECCD"
							+ " "+cattype+" " + circle + " "+status+" AND  USCNO IS NULL  AND NVL(PENDING_STAT,'Y') <> 'DEL' AND SLADESC='Pending for service release' AND SUBSTR(REG_NO,6,1) IN ('S','N')  ");		

				}

				if (resultSet != null) {

					while (resultSet.next()) {

						CscpayVO vo = new CscpayVO();

						/*
						 * * vo.setCircleName(reportRst.getString(1));
						 * vo.setDivisionName(reportRst.getString(2));
						 * vo.setDcbCollection(reportRst.getString(3));
						 * vo.setDcbDemand(reportRst.getString(4));
						 * vo.setDcbPerCent(reportRst.getString(5));
						 * vo.setCummColl(reportRst.getString(8));
						 */

						vo.setCircleName(resultSet.getString(2));
						vo.setDivision(resultSet.getString(3));
						// vo.setEro(resultSet.getString(4));
						vo.setSubDiv(resultSet.getString(4));
						vo.setSec(resultSet.getString(5));
						// vo.setType(resultSet.getString(6));
						vo.setReg_no(resultSet.getString(6));
						vo.setRegDate(resultSet.getString(7));
						vo.setCunsu_name(resultSet.getString(8));

						// vo.setAddress(resultSet.getString(10));
						// vo.setPhono(resultSet.getString(11));
						// vo.setS_group(resultSet.getString(12));

						vo.setCat(resultSet.getString(9));
						vo.setLoad(resultSet.getString(10));
						// vo.setPurpose(resultSet.getString(15));
						vo.setDemand(resultSet.getString(11));
						vo.setPaid(resultSet.getString(12));

						// vo.setGroup_demand(resultSet.getString(18));
						// vo.setGroup_coll(resultSet.getString(19));

						vo.setPaid_date(resultSet.getString(13));
						vo.setRel_date(resultSet.getString(14));

						vo.setAgependency(resultSet.getString(15));
						vo.setStatus(resultSet.getString(16));
						vo.setExe_type(resultSet.getString(17));
						//vo.setRemarks(resultSet.getString(18));
						// vo.setPen_simply_brt(resultSet.getString(16));
						// vo.setExe_type(resultSet.getString(17));
						/*
						 * vo.setUscno(resultSet.getString(22));
						 * vo.setRef_no(resultSet.getString(23));
						 * 
						 * vo.setPen_simply_brt(resultSet.getString(24));
						 * vo.setSla_desc(resultSet.getString(25));
						 * 
						 * vo.setExe_type(resultSet.getString(26));
						 * vo.setStatus(resultSet.getString(27));
						 */
						// vo.setCategory(reportRst.getString(4));
						// vo.setContractLoad(reportRst.getString(5));

						dashList.add(vo);

					}
					cscvo.setList(dashList);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			// logger.error("Exception: DcbReportsDAO " + e.getMessage());
			// System.out.println.println(e);
		} finally {

			if (con != null) {

				DBConnectionManager.getInstance().freeConnection(con);
				con.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (statement != null) {
				statement.close();
			}

		}
		return cscvo;
	}
//hT aDDITIONAL lOAD  aMOUNT pAD
	public CscpayVO getStatusOfPenHTAddLoadAmtpaidReportDetails(CscpayVO cscvo)
			throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
				} else if ("SEC".equals(cscvo.getFlag())) {
				} else {
					/*
					 * String query =
					 * "select NVL(NAME2,'TOTAL'),sum(TOT),sum(LT_3MON),sum(GT_3MON),sum(GT_6MON),sum(GT_9MON),sum(GT_1YR),sum(total) from M_AL_NOT_PAID"
					 * + " group by rollup(NAME2) order  by NAME2";
					 */

					/*String query = "select NVL(NAME2,'TOTAL'),sum(TOT),sum(GT_3MON),sum(GT_4MON),sum(GT_5MON) from M_AL_NOT_PAID"
							+ " group by rollup(NAME2) order  by NAME2";*/
					
					String query="SELECT nvl(S.CIRNAME,'TOTAL'),COUNT(P.ZREGID),COUNT(A.ZREGID) GRA2,COUNT(B.ZREGID) GRA3,COUNT(C.ZREGID) GR4 FROM"
							+ " (SELECT ZREGID,SUBSTR(ZREGID,1,5) FROM IT_ALL WHERE STATUS='Payment paid' AND ZREQUEST_TYPE='AL')P,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Payment paid' AND ZREQUEST_TYPE='AL' AND ZMONTH = 2 AND ZMONTH > =2)A,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Payment paid' AND ZREQUEST_TYPE='AL' AND ZMONTH =3 AND ZMONTH >=3)B,"
							+ " (SELECT ZREGID FROM IT_ALL WHERE STATUS='Payment paid' AND ZREQUEST_TYPE='AL' AND ZMONTH = 4 AND ZMONTH >=4)C,"
							+ " (SELECT CIRNAME,SECCD FROM SPDCLMASTER )S"
							+ " WHERE P.ZREGID=A.ZREGID(+)"
							+ " AND  P.ZREGID=B.ZREGID(+)"
							+ " AND P.ZREGID=C.ZREGID(+)"
							+ " AND SUBSTR(P.ZREGID,1,5)=SECCD"
							+ " GROUP BY ROLLUP(S.CIRNAME) ORDER BY S.CIRNAME";

					reportPStmt = con.prepareStatement(query);
					System.out.println(query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_gtr_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_6months(reportRst.getString(4));
							dmapobj.setBrt_gtr_9months(reportRst.getString(5));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setBrt_gtr_3months(reportRst.getString(3));
							dmapobj.setBrt_gtr_6months(reportRst.getString(4));
							dmapobj.setBrt_gtr_9months(reportRst.getString(5));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	
	
	
	
	
	public CscpayVO getApspdclMeesevaScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		
		if ("LT".equalsIgnoreCase(cscvo.getType())){

		if ("1".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where     NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'     and  upper(repstat) like '%MEE%' AND   CATEGORY_SUPPLY like '1%'";
		} else if ("2".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'    and  upper(repstat) like '%MEE%'   AND CATEGORY_SUPPLY like '2%'";
		} else if ("3".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'    and  upper(repstat) like '%MEE%'   AND CATEGORY_SUPPLY like '3%'";
		} else if ("4".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'     and  upper(repstat) like '%MEE%'  AND CATEGORY_SUPPLY like '4%'";
		} else if ("5".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where   NCPARTCD=seccd  AND  circd not in('1','4','6','9') and  upper(reg_no)  not like '%H%'     and  upper(repstat) like '%MEE%'  AND CATEGORY_SUPPLY like '5%'";
		} else if ("6".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'     and  upper(repstat) like '%MEE%'   AND CATEGORY_SUPPLY like '6%'";
		} else if ("7".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'     and  upper(repstat) like '%MEE%'  AND CATEGORY_SUPPLY like '7%'";
		} else if ("8".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'    and  upper(repstat) like '%MEE%'   AND CATEGORY_SUPPLY like '8%'";
		} else {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(REG_NO) not like '%H%'    and  upper(repstat) like '%MEE%'   ";
		}
		
		}
		
		else if("HT".equalsIgnoreCase(cscvo.getType()))
		{
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(REG_NO)  like '%H%'    and  upper(repstat) like '%MEE%' ";
		}
		else{
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9')    and  upper(repstat) like '%MEE%' ";
		}
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select nvl(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * + " where circd not in('1','4','6','9') and cirname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(divname) ";
					 */
					String query = "select NVL(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=? " + " group by  rollup(divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					/*
					 * String query =
					 * "select nvl(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from  spdclmaster   "
					 * +
					 * " where circd not in('1','4','6','9') and cirname=? and divname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(subname) ";
					 */
					String query = "select NVL(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=?  and divname=?  " + " group by  rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select nvl(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * +
					 * " where circd not in('1','4','6','9') and cirname=? and divname=? and subname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(secname) ";
					 */
					String query = "select NVL(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final,"
							+ "  spdclmaster    " + ltcat + " AND cirname=?  and divname=?  and subname=?   "
							+ " group by  rollup(secname)";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					/*
					 * String query =
					 * "select nvl(CIRNAME,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * + " where circd not in('1','4','6','9'))" +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(CIRNAME) ";
					 */
					String query = "select NVL(cirname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " " + " group by  rollup(cirname)";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("ALL:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	
	
	///GSWS
	
	
	public CscpayVO getApspdclPrajaScsDetails(CscpayVO cscvo) throws SQLException, DatabaseFailureException {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;
		String ltcat = "";

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;

		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		
		if ("LT".equalsIgnoreCase(cscvo.getType())){

		if ("1".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where     NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'     and  upper(MESEVA_REF) like 'PRAJA-ENER%'  AND   CATEGORY_SUPPLY like '1%'";
		} else if ("2".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'    and  upper(MESEVA_REF) like 'PRAJA-ENER%'   AND CATEGORY_SUPPLY like '2%'";
		} else if ("3".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'    and  upper(MESEVA_REF) like 'PRAJA-ENER%'    AND CATEGORY_SUPPLY like '3%'";
		} else if ("4".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'     and  upper(MESEVA_REF) like 'PRAJA-ENER%'  AND CATEGORY_SUPPLY like '4%'";
		} else if ("5".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where   NCPARTCD=seccd  AND  circd not in('1','4','6','9') and  upper(reg_no)  not like '%H%'     and  upper(MESEVA_REF) like 'PRAJA-ENER%'   AND CATEGORY_SUPPLY like '5%'";
		} else if ("6".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'     and  upper(MESEVA_REF) like 'PRAJA-ENER%'    AND CATEGORY_SUPPLY like '6%'";
		} else if ("7".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'     and  upper(MESEVA_REF) like 'PRAJA-ENER%'   AND CATEGORY_SUPPLY like '7%'";
		} else if ("8".equalsIgnoreCase(cscvo.getCategory())) {
			ltcat = " where    NCPARTCD=seccd  AND circd not in('1','4','6','9') and upper(reg_no)  not like '%H%'    and  upper(MESEVA_REF) like 'PRAJA-ENER%'    AND CATEGORY_SUPPLY like '8%'";
		} else {
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(REG_NO) not like '%H%'    and  upper(MESEVA_REF) like 'PRAJA-ENER%'    ";
		}
		
		}
		
		else if("HT".equalsIgnoreCase(cscvo.getType()))
		{
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9') and upper(REG_NO)  like '%H%'    and  upper(MESEVA_REF) like 'PRAJA-ENER%'  ";
		}
		else{
			ltcat = " where    NCPARTCD=seccd  AND  circd not in('1','4','6','9')    and  upper(MESEVA_REF) like 'PRAJA-ENER%'  ";
		}
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		try {
			if (con != null) {

				if ("DIV".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select nvl(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * + " where circd not in('1','4','6','9') and cirname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(divname) ";
					 */
					String query = "select NVL(divname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=? " + " group by  rollup(divname)";
					reportPStmt = con.prepareStatement(query);

					reportPStmt.setString(1, cscvo.getCircle());
					// reportPStmt.setString(2, chkVO.getCirname());

					reportRst = reportPStmt.executeQuery();
				} else if ("SUB_DIV".equals(cscvo.getFlag())) {
					/*
					 * String query =
					 * "select nvl(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from  spdclmaster   "
					 * +
					 * " where circd not in('1','4','6','9') and cirname=? and divname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(subname) ";
					 */
					String query = "select NVL(subname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " AND cirname=?  and divname=?  " + " group by  rollup(subname)";
					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());

					reportRst = reportPStmt.executeQuery();
					// //System.out.println.println("sub");
				} else if ("SEC".equals(cscvo.getFlag())) {

					/*
					 * String query =
					 * "select nvl(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * +
					 * " where circd not in('1','4','6','9') and cirname=? and divname=? and subname=? )"
					 * +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(secname) ";
					 */
					String query = "select NVL(secname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final,"
							+ "  spdclmaster    " + ltcat + " AND cirname=?  and divname=?  and subname=?   "
							+ " group by  rollup(secname)";

					reportPStmt = con.prepareStatement(query);

					// reportPStmt.setString(1, month + "-" +
					// String.valueOf(curr_year));
					// reportPStmt.setString(2, chkVO.getCirname());
					// reportPStmt.setString(3, chkVO.getDivname());
					// reportPStmt.setString(4, chkVO.getSubdivname());

					reportPStmt.setString(1, cscvo.getCircle());
					reportPStmt.setString(2, cscvo.getDivision());
					reportPStmt.setString(3, cscvo.getSubDiv());

					reportRst = reportPStmt.executeQuery();

				} else {
					/*
					 * String query =
					 * "select nvl(CIRNAME,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then scs else 0 end) ob ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REG%' then scs else 0 end) registered ,"
					 * +
					 * " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then scs else 0 end) totreg ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) like '%WRT%' "
					 * +
					 * " or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then scs else 0 end) paid ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' then scs else 0 end) deleted ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%REL%' then scs else 0 end) released ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then scs else 0 end) crttot ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' then scs else 0 end) wrt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%BRT%' then scs else 0 end) brt ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%TKEY%' then scs else 0 end) tkey ,"
					 * +
					 * " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
					 * +
					 * " like '%TKEY%' then scs else 0 end) balance from (select * from csc.rep_final_abs@colldblink  "
					 * +
					 * " where seccd in (select DISTINCT seccd from master.spdclmaster@colldblink  "
					 * + " where circd not in('1','4','6','9'))" +
					 * " and seccd in (select distinct NCPARTCD from csc.rep_final@colldblink "
					 * + ltcat + ")) group by  rollup(CIRNAME) ";
					 */
					String query = "select NVL(cirname,'TOTAL') ,sum(case when upper(REPSTAT) like '%OB%' then 1 else 0 end) ob ,"
							+ " sum(case when upper(REPSTAT) like '%REG%' then 1 else 0 end) registered ,"
							+ " sum(case when upper(REPSTAT) like  '%OB%' or  upper(REPSTAT) like  '%REG%' then 1 else 0 end) totreg,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' or upper(REPSTAT) "
							+ " like '%WRT%' or upper(REPSTAT) like '%BRT%'  or upper(REPSTAT) like '%TKEY%' then 1 else 0 end) paid,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' then 1 else 0 end) deleted ,"
							+ " sum(case when upper(REPSTAT) like '%REL%' then 1 else 0 end) released ,"
							+ " sum(case when upper(REPSTAT) like '%DEL%' or upper(REPSTAT) like '%REL%' then 1 else 0 end) crttot,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' then 1 else 0 end) wrt,"
							+ " sum(case when upper(REPSTAT) like '%BRT%' then 1 else 0 end) brt,"
							+ " sum(case when upper(REPSTAT) like '%TKEY%' then 1 else 0 end) tkey,"
							+ " sum(case when upper(REPSTAT) like '%WRT%' or upper(REPSTAT) like '%BRT%' or upper(REPSTAT) "
							+ " like '%TKEY%' then 1 else 0 end) balance from  rep_final," + "  spdclmaster    " + ltcat
							+ " " + " group by  rollup(cirname)";
					// ltcat = " where upper(reg_no) like '%L%' "

					reportPStmt = con.prepareStatement(query);
					System.out.println("ALL:" + query);
					reportRst = reportPStmt.executeQuery();
				}
				if (reportRst != null) {
					while (reportRst.next()) {

						if (cscmap.containsKey(reportRst.getString(1))) {
							CscpayVO dmapobj = cscmap.get(reportRst.getString(1));

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

						} else {
							CscpayVO dmapobj = new CscpayVO();

							dmapobj.setAppPending(reportRst.getString(2));
							dmapobj.setAppReceived(reportRst.getString(3));
							dmapobj.setTot_reg(reportRst.getString(4));

							dmapobj.setAppPaid(reportRst.getString(5));
							dmapobj.setAppDeleted(reportRst.getString(6));
							dmapobj.setAppReleased(reportRst.getString(7));
							dmapobj.setTot_crt(reportRst.getString(8));

							dmapobj.setWrt(reportRst.getString(9));
							dmapobj.setBeyondReleased(reportRst.getString(10));
							dmapobj.setTurnKey(reportRst.getString(11));
							dmapobj.setTot_pen(reportRst.getString(12));

							cscmap.put(reportRst.getString(1), dmapobj);
						}
					}
					cscvo.setCscpaymap(cscmap);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}
	
	
	//new Complaint Changes
	public CscpayVO getReportDetailscomplaints_new(CscpayVO cscvo) throws Exception {


		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;
		String counter = "";
		String circle = "";

		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		try {
			if (con != null) {

				/*
				 * if (cscvo.getCounterName().equalsIgnoreCase("GSWS")) {
				 * counter = " AND (SUBSTR(N.MESEVA_REF,1,5) IN('PRAJA') " +
				 * "  OR  ((SUBSTR(N.MESEVA_REF,1,5) IN ('MEESE')  AND   N.REG_NO IN(SELECT CSREGNO FROM CSCPAY WHERE CSRCCD LIKE '%DA') )"
				 * +
				 * " OR (SUBSTR(N.MESEVA_REF,1,5) IN ('MEESE')  AND   N.REG_NO IN(SELECT CSREGNO FROM CSCPAY WHERE CSRCCD LIKE '%WEDS')))) "
				 * ; } else { counter = " AND c.cscounter='" +
				 * cscvo.getCounterName() + "' "; }
				 */

				// get counter
				/*if (cscvo.getCounterName().equalsIgnoreCase("GSWS")) {
					

					counter = " and (c.CSRCNAME LIKE '%-DA' OR c.CSRCNAME LIKE '%-WEDS')";
				} else if ((cscvo.getCounterName().equalsIgnoreCase("ALL"))) {// &&
																				// (cscvo.getCounterName().equalsIgnoreCase("BILLDESK"))
																				// &&
																				// (cscvo.getCounterName().equalsIgnoreCase("MEESEVA"))){
					counter = " AND ((c.cscounter='MEESEVA') or " + " (c.cscounter='BILLDESK')) ";

				} else {
					counter = " AND c.cscounter='" + cscvo.getCounterName() + "' ";
				}*/
				
				
				if (cscvo.getCounterName().equalsIgnoreCase("MEESEVA_WO_GSWS")) {
					counter = "   AND c.cscounter='MEESEVA' AND CSRCCD NOT LIKE '%WEDS' AND CSRCCD NOT LIKE '%DA' ";
				}/* else if ((cscvo.getCounterName().equalsIgnoreCase("MEESEVA_GSWS"))) {
					
					counter = "   AND c.cscounter='MEESEVA' AND (CSRCCD  LIKE '%WEDS' OR CSRCCD  LIKE '%DA') ";
				} */
				else if ((cscvo.getCounterName().equalsIgnoreCase("BILLDESK"))) {
					//counter = "  AND c.cscounter='MEESEVA'  AND (CSRCCD  LIKE '%WEDS' OR CSRCCD  LIKE '%DA') ";
					counter = " AND c.cscounter='" + cscvo.getCounterName() + "' ";
				} 
				else  if ((cscvo.getCounterName().equalsIgnoreCase("ALL"))){
					counter = " ";
				}
				
				

				// get Circel
				if ("ALL".equalsIgnoreCase(cscvo.getCircleName())) {
					circle = " and S.CIRNAME in ('ANANTHAPUR','KURNOOL','KADAPA','TIRUPATI','NELLORE')";
				} else {
					circle = "and S.CIRNAME in ('" + cscvo.getCircleName() + "')";
				}

				/*
				 * String query =
				 * "SELECT n.reg_no ,n.circle_code ,DECODE(n.circle_code,1,'GUNTUR',2,'KADAPA',3,'NELLORE',4,'ONGOLE',5,'TIRUPATI',6,'VIJAYAWADA',7,'ANANTHAPUR',8,'KURNOOL',9,'CRDA','UNKNOWN') circle,n.customer_name,n.new_category,nvl(c.csappfee,0),n.CONTRACTLOAD,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0),nvl(c.CSPAYFOR,'-'),nvl(c.cstempconchgs,0),nvl(c.csprno,0),csprdt,nvl(c.cgst,0),nvl(c.sgst,0) FROM new_complaints n INNER JOIN cscpay c ON n.reg_no= c.csregno   "
				 * + counter +
				 * "   AND c.cscancelid='N' AND c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') AND n.circle_code=(CASE ? WHEN 'GUNTUR' THEN 1 WHEN 'KADAPA' THEN 2 WHEN 'NELLORE' THEN 3 WHEN 'ONGOLE' THEN 4 WHEN 'TIRUPATI' THEN 5 WHEN 'VIJAYAWADA' THEN 6 WHEN 'ANANTHAPUR' THEN 7 WHEN 'KURNOOL' THEN 8 WHEN 'CRDA' THEN 9  ELSE 10 END)"
				 * ;
				 */

				
				
				/*String query = "SELECT n.reg_no ,n.circle_code,S.CIRNAME,n.customer_name,n.new_category,nvl(c.csappfee,0),n.CONTRACTLOAD"
						+ " ,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0)"
						+ " ,nvl(c.CSPAYFOR,'-'),nvl(c.cstempconchgs,0),nvl(c.csprno,0),csprdt,nvl(c.cgst,0)"
						+ " ,nvl(c.sgst,0) FROM new_complaints n ,spdclmaster s,"
						+ " cscpay c where n.reg_no= c.csregno(+)  and  substr(n.reg_no,1,5)=s.seccd "
						// + " AND c.cscounter='BILLDESK' "
						+ counter
						+ " AND c.cscancelid='N' AND c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') "
						+ circle + "";*/
				
				
				String query="SELECT n.reg_no ,n.circle_code,S.CIRNAME,n.customer_name,n.new_category,nvl(c.csappfee,0),n.CONTRACTLOAD ,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),"
						+ " nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0) ,nvl(c.CSPAYFOR,'-'),nvl(c.cstempconchgs,0),nvl(c.csprno,0),csprdt,nvl(c.cgst,0) ,nvl(c.sgst,0),NVL(C.CSADDLSD,0) "
						+ "FROM new_complaints n ,spdclmaster s, cscpay c where n.reg_no= c.csregno(+)  and  substr(n.reg_no,1,5)=s.seccd   "
						+ "" +counter+" AND c.cscancelid='N' "
						+ " AND c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') " + circle + "";
				
				//System.out.println("cscpay complaints3:"+query);
				
				
				
				// + " and S.CIRNAME IN('ANANTHAPUR')";
				reportPStmt = con.prepareStatement(query);
				// reportPStmt.setString(1, cscvo.getCounterName());
				reportPStmt.setString(1, cscvo.getFrom_date());
				reportPStmt.setString(2, cscvo.getTo_date());
				// reportPStmt.setString(3, cscvo.getCircleName());
				reportRst = reportPStmt.executeQuery();
				// String query2="SELECT n.reg_no ,n.circle_code
				// ,m.cirname,n.customer_name,n.new_category,nvl(n.app_fee,0),nvl(n.contractload,0),c.csregno,nvl(sum(c.cssd),0),nvl(sum(c.csdevchg),0),nvl(sum(c.csslchg),0),nvl(sum(c.cstotamt),0),nvl(sum(c.csadvccchgs),0),nvl(sum(c.cssvchg),0),nvl(sum(c.csotherchgs),0)
				// FROM new_complaints n,cscpay c,master.spdclmaster m where
				// n.reg_no=c.csregno and c.cscounter=? and
				// n.circle_code=m.circd and m.cirname=? and c.cscancelid='N'
				// and c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND
				// TO_DATE(?,'YYYY-MM-DD') group by
				// n.reg_no,c.csregno,n.circle_code,n.customer_name,m.cirname,n.new_category,n.app_fee,n.contractload";
				if (reportRst != null) {
					double sd_total = 0, app_total = 0, dev_total = 0, sv_total = 0, other_total = 0, sl_total = 0,
							tot_total = 0, adv_total = 0, cont_load_total = 0, temp_chgs_total = 0, tot_cgst = 0,
							tot_sgst = 0;
					while (reportRst.next()) {
						CscpayVO cscvoobj = new CscpayVO();

						cscvoobj.setCircleName(reportRst.getString(3));
						cscvoobj.setReg_no(reportRst.getString(1));
						cscvoobj.setConsumerName(reportRst.getString(4));
						cscvoobj.setCategory(reportRst.getString(5));
						cscvoobj.setAppFees(reportRst.getString(6));
						cscvoobj.setContractLoad(reportRst.getString(7));

						cscvoobj.setServicedeposit(reportRst.getString(8));
						cscvoobj.setDevChrgs(reportRst.getString(9));
						cscvoobj.setServLineChrgs(reportRst.getString(10));
						cscvoobj.setTotAmt(reportRst.getString(11));
						cscvoobj.setAdvChrgs(reportRst.getString(12));
						cscvoobj.setSupChrgs(reportRst.getString(13));
						cscvoobj.setOtherChrgs(reportRst.getString(14));
						cscvoobj.setComplaintType(reportRst.getString(15));

						cscvoobj.setTempconchgs(reportRst.getString(16));
						cscvoobj.setCsprno(reportRst.getString(17));
						cscvoobj.setCsprdt(reportRst.getString(18));

						cscvoobj.setCgst(reportRst.getString(19));
						cscvoobj.setSgst(reportRst.getString(20));
						cscvoobj.setCsasd(reportRst.getString(21));

						sd_total = sd_total + reportRst.getInt(8);
						app_total = app_total + reportRst.getInt(6);
						dev_total = dev_total + reportRst.getInt(9);
						sv_total = sv_total + reportRst.getInt(13);
						other_total = other_total + reportRst.getInt(14);
						sl_total = sl_total + reportRst.getInt(10);
						tot_total = tot_total + reportRst.getInt(11);
						adv_total = adv_total + reportRst.getInt(12);

						temp_chgs_total = temp_chgs_total + reportRst.getInt(16);

						cont_load_total = cont_load_total + reportRst.getDouble(7);

						tot_cgst = tot_cgst + reportRst.getInt(19);
						tot_sgst = tot_sgst + reportRst.getInt(20);

						cscmap.put(reportRst.getString(17), cscvoobj);
						// dashList.add( cscvoobj);

					}
					cscvo.setAppFees(String.valueOf(app_total));
					cscvo.setContractLoad(String.valueOf(cont_load_total));

					cscvo.setServicedeposit(String.valueOf(sd_total));
					cscvo.setDevChrgs(String.valueOf(dev_total));
					cscvo.setServLineChrgs(String.valueOf(sl_total));
					cscvo.setTotAmt(String.valueOf(tot_total));
					cscvo.setAdvChrgs(String.valueOf(adv_total));
					cscvo.setSupChrgs(String.valueOf(sv_total));
					cscvo.setOtherChrgs(String.valueOf(other_total));
					cscvo.setTempconchgs(String.valueOf(temp_chgs_total));
					cscvo.setCgst(String.valueOf(tot_cgst));
					cscvo.setSgst(String.valueOf(tot_sgst));

					cscvo.setCscpaymap(cscmap);
					// cscvo.setList(dashList);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	
	}
		public CscpayVO getReportDetailscomplaints_new_new(CscpayVO cscvo) throws Exception {

		PreparedStatement reportPStmt = null;
		ResultSet reportRst = null;

		Calendar c = Calendar.getInstance();
		int curr_year = c.get(Calendar.YEAR);
		int curr_month = c.get(Calendar.MONTH) + 1;
		String counter = "";
		String circle = "";

		// String connectionURL = "jdbc:oracle:thin:@10.50.50.123:1525:COLLDB";
		// Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
		// Connection con = DriverManager.getConnection(connectionURL, "CSC",
		// "CSC");
		Connection con = DBConnectionManager.getInstance().getConnection("cscdb");
		Map<String, CscpayVO> cscmap = new LinkedHashMap<String, CscpayVO>();
		List<CscpayVO> dashList = new ArrayList<CscpayVO>();
		try {
			if (con != null) {

				
				
				/*if (cscvo.getCounterName().equalsIgnoreCase("MEESEVA_WO_GSWS")) {
					counter = "   AND c.cscounter='MEESEVA' AND CSRCCD NOT LIKE '%WEDS' AND CSRCCD NOT LIKE '%DA' ";
				} else if ((cscvo.getCounterName().equalsIgnoreCase("MEESEVA_GSWS"))) {
					
					counter = "   AND c.cscounter='MEESEVA'  ";
				} 
				else if ((cscvo.getCounterName().equalsIgnoreCase("BILLDESK"))) {
					//counter = "  AND c.cscounter='MEESEVA'  AND (CSRCCD  LIKE '%WEDS' OR CSRCCD  LIKE '%DA') ";
					counter = " AND c.cscounter='" + cscvo.getCounterName() + "' ";
				} 
				else {
					counter = " ";
				}*/
				
				 if ((cscvo.getCounterName().equalsIgnoreCase("MEESEVA_GSWS"))) {
						
						counter = "   AND c.cscounter='MEESEVA'  ";
					} 

				// get Circel
				if ("ALL".equalsIgnoreCase(cscvo.getCircleName())) {
					circle = " and S.CIRNAME in ('ANANTHAPUR','KURNOOL','KADAPA','TIRUPATI','NELLORE')";
				} else {
					circle = "and S.CIRNAME in ('" + cscvo.getCircleName() + "')";
				}

				
				
				
				String query="SELECT n.reg_no ,n.circle_code,S.CIRNAME,n.customer_name,n.new_category,(CASE WHEN((C.CSRCCD LIKE '%WEDS' OR C.CSRCCD LIKE '%DA'))	THEN 'GSWS' ELSE 'MEESEVA' END) COUNTER ,nvl(c.CSPAYFOR,'-'),nvl(c.csappfee,0),n.CONTRACTLOAD ,nvl(c.cssd,0),nvl(c.csdevchg,0),nvl(c.csslchg,0),nvl(c.cstotamt,0),"
						+ " nvl(c.csadvccchgs,0),nvl(c.cssvchg,0),nvl(c.csotherchgs,0),nvl(c.cstempconchgs,0),nvl(c.csprno,0),csprdt,nvl(c.cgst,0),nvl(c.sgst,0),NVL(C.CSADDLSD,0) "
						+ "FROM new_complaints n ,spdclmaster s, cscpay c where n.reg_no= c.csregno(+)  and  substr(n.reg_no,1,5)=s.seccd   "
						+ "" +counter+" AND c.cscancelid='N' "
						+ " AND c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND TO_DATE(?,'YYYY-MM-DD') " + circle + "";
				
				//System.out.println("cscpay complaint_meeseva_gsws:"+query);
				
				
				
				// + " and S.CIRNAME IN('ANANTHAPUR')";
				reportPStmt = con.prepareStatement(query);
				// reportPStmt.setString(1, cscvo.getCounterName());
				reportPStmt.setString(1, cscvo.getFrom_date());
				reportPStmt.setString(2, cscvo.getTo_date());
				// reportPStmt.setString(3, cscvo.getCircleName());
				reportRst = reportPStmt.executeQuery();
				// String query2="SELECT n.reg_no ,n.circle_code
				// ,m.cirname,n.customer_name,n.new_category,nvl(n.app_fee,0),nvl(n.contractload,0),c.csregno,nvl(sum(c.cssd),0),nvl(sum(c.csdevchg),0),nvl(sum(c.csslchg),0),nvl(sum(c.cstotamt),0),nvl(sum(c.csadvccchgs),0),nvl(sum(c.cssvchg),0),nvl(sum(c.csotherchgs),0)
				// FROM new_complaints n,cscpay c,master.spdclmaster m where
				// n.reg_no=c.csregno and c.cscounter=? and
				// n.circle_code=m.circd and m.cirname=? and c.cscancelid='N'
				// and c.CSPRDT BETWEEN TO_DATE(?,'YYYY-MM-DD') AND
				// TO_DATE(?,'YYYY-MM-DD') group by
				// n.reg_no,c.csregno,n.circle_code,n.customer_name,m.cirname,n.new_category,n.app_fee,n.contractload";
				if (reportRst != null) {
					double sd_total = 0, app_total = 0, dev_total = 0, sv_total = 0, other_total = 0, sl_total = 0,
							tot_total = 0, adv_total = 0, cont_load_total = 0, temp_chgs_total = 0, tot_cgst = 0,
							tot_sgst = 0;
					while (reportRst.next()) {
						CscpayVO cscvoobj = new CscpayVO();

						cscvoobj.setCircleName(reportRst.getString(3));
						cscvoobj.setReg_no(reportRst.getString(1));
						cscvoobj.setConsumerName(reportRst.getString(4));
						cscvoobj.setCategory(reportRst.getString(5));
						
						cscvoobj.setCountername(reportRst.getString(6));
						cscvoobj.setComplaintType(reportRst.getString(7));
						cscvoobj.setAppFees(reportRst.getString(8));
					
						cscvoobj.setContractLoad(reportRst.getString(9));
						
						
						cscvoobj.setServicedeposit(reportRst.getString(10));
						cscvoobj.setDevChrgs(reportRst.getString(11));
						cscvoobj.setServLineChrgs(reportRst.getString(12));
						cscvoobj.setTotAmt(reportRst.getString(13));
						cscvoobj.setAdvChrgs(reportRst.getString(14));
						cscvoobj.setSupChrgs(reportRst.getString(15));
						cscvoobj.setOtherChrgs(reportRst.getString(16));
						

						cscvoobj.setTempconchgs(reportRst.getString(17));
						cscvoobj.setCsprno(reportRst.getString(18));
						cscvoobj.setCsprdt(reportRst.getString(19));

						cscvoobj.setCgst(reportRst.getString(20));
						cscvoobj.setSgst(reportRst.getString(21));
						cscvoobj.setCsasd(reportRst.getString(22));
						

					sd_total = sd_total + reportRst.getInt(10);
						app_total = app_total + reportRst.getInt(8);
						dev_total = dev_total + reportRst.getInt(11);
						sv_total = sv_total + reportRst.getInt(12);
						other_total = other_total + reportRst.getInt(16);
						sl_total = sl_total + reportRst.getInt(12);
						tot_total = tot_total + reportRst.getInt(13);
						adv_total = adv_total + reportRst.getInt(14);

						temp_chgs_total = temp_chgs_total + reportRst.getInt(17);

						cont_load_total = cont_load_total + reportRst.getDouble(9);

						tot_cgst = tot_cgst + reportRst.getInt(20);
						tot_sgst = tot_sgst + reportRst.getInt(21);

						cscmap.put(reportRst.getString(18), cscvoobj);
						// dashList.add( cscvoobj);

					}
					cscvo.setAppFees(String.valueOf(app_total));
					cscvo.setContractLoad(String.valueOf(cont_load_total));

					cscvo.setServicedeposit(String.valueOf(sd_total));
					cscvo.setDevChrgs(String.valueOf(dev_total));
					cscvo.setServLineChrgs(String.valueOf(sl_total));
					cscvo.setTotAmt(String.valueOf(tot_total));
					cscvo.setAdvChrgs(String.valueOf(adv_total));
					cscvo.setSupChrgs(String.valueOf(sv_total));
					cscvo.setOtherChrgs(String.valueOf(other_total));
					cscvo.setTempconchgs(String.valueOf(temp_chgs_total));
					cscvo.setCgst(String.valueOf(tot_cgst));
					cscvo.setSgst(String.valueOf(tot_sgst));

					cscvo.setCscpaymap(cscmap);
					// cscvo.setList(dashList);

				}

			} else {
				throw new DatabaseFailureException(
						"Database Server Problem.Sorry for Inconvenience.Please try after some time.");
			}
		} finally {
			try {
				if (con != null) {

					DBConnectionManager.getInstance().freeConnection(con);
					con.close();
				}
				if (reportPStmt != null)
					reportPStmt.close();
				if (reportRst != null)
					reportRst.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}
		return cscvo;
	}

}



